// gribi_aft is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - github.com/openconfig/gribi/v1/yang/gribi-aft.yang
// Include paths:
//   - github.com/openconfig/gribi/v1/yang/...
//   - github.com/openconfig/gribi/v1/yang/deps/...

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.0--rc1
// source: v1/proto/gribi_aft/gribi_aft.proto

package gribi_aft

import (
	enums "github.com/openconfig/gribi/v1/proto/gribi_aft/enums"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Afts *Afts `protobuf:"bytes,35982132,opt,name=afts,proto3" json:"afts,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{0}
}

func (x *Device) GetAfts() *Afts {
	if x != nil {
		return x.Afts
	}
	return nil
}

type Afts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4Entry             []*Afts_Ipv4EntryKey             `protobuf:"bytes,410397655,rep,name=ipv4_entry,json=ipv4Entry,proto3" json:"ipv4_entry,omitempty"`
	Ipv6Entry             []*Afts_Ipv6EntryKey             `protobuf:"bytes,403891971,rep,name=ipv6_entry,json=ipv6Entry,proto3" json:"ipv6_entry,omitempty"`
	LabelEntry            []*Afts_LabelEntryKey            `protobuf:"bytes,153428187,rep,name=label_entry,json=labelEntry,proto3" json:"label_entry,omitempty"`
	MacEntry              []*Afts_MacEntryKey              `protobuf:"bytes,162139969,rep,name=mac_entry,json=macEntry,proto3" json:"mac_entry,omitempty"`
	NextHop               []*Afts_NextHopKey               `protobuf:"bytes,132654769,rep,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	NextHopGroup          []*Afts_NextHopGroupKey          `protobuf:"bytes,362999033,rep,name=next_hop_group,json=nextHopGroup,proto3" json:"next_hop_group,omitempty"`
	PolicyForwardingEntry []*Afts_PolicyForwardingEntryKey `protobuf:"bytes,269536139,rep,name=policy_forwarding_entry,json=policyForwardingEntry,proto3" json:"policy_forwarding_entry,omitempty"`
}

func (x *Afts) Reset() {
	*x = Afts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Afts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts) ProtoMessage() {}

func (x *Afts) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts.ProtoReflect.Descriptor instead.
func (*Afts) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1}
}

func (x *Afts) GetIpv4Entry() []*Afts_Ipv4EntryKey {
	if x != nil {
		return x.Ipv4Entry
	}
	return nil
}

func (x *Afts) GetIpv6Entry() []*Afts_Ipv6EntryKey {
	if x != nil {
		return x.Ipv6Entry
	}
	return nil
}

func (x *Afts) GetLabelEntry() []*Afts_LabelEntryKey {
	if x != nil {
		return x.LabelEntry
	}
	return nil
}

func (x *Afts) GetMacEntry() []*Afts_MacEntryKey {
	if x != nil {
		return x.MacEntry
	}
	return nil
}

func (x *Afts) GetNextHop() []*Afts_NextHopKey {
	if x != nil {
		return x.NextHop
	}
	return nil
}

func (x *Afts) GetNextHopGroup() []*Afts_NextHopGroupKey {
	if x != nil {
		return x.NextHopGroup
	}
	return nil
}

func (x *Afts) GetPolicyForwardingEntry() []*Afts_PolicyForwardingEntryKey {
	if x != nil {
		return x.PolicyForwardingEntry
	}
	return nil
}

type Afts_Ipv4Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DecapsulateHeader           enums.OpenconfigAftTypesEncapsulationHeaderType `protobuf:"varint,383809427,opt,name=decapsulate_header,json=decapsulateHeader,proto3,enum=gribi_aft.enums.OpenconfigAftTypesEncapsulationHeaderType" json:"decapsulate_header,omitempty"`
	EntryMetadata               *ywrapper.BytesValue                            `protobuf:"bytes,290934374,opt,name=entry_metadata,json=entryMetadata,proto3" json:"entry_metadata,omitempty"`
	NextHopGroup                *ywrapper.UintValue                             `protobuf:"bytes,497198611,opt,name=next_hop_group,json=nextHopGroup,proto3" json:"next_hop_group,omitempty"`
	NextHopGroupNetworkInstance *ywrapper.StringValue                           `protobuf:"bytes,32856574,opt,name=next_hop_group_network_instance,json=nextHopGroupNetworkInstance,proto3" json:"next_hop_group_network_instance,omitempty"`
}

func (x *Afts_Ipv4Entry) Reset() {
	*x = Afts_Ipv4Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Afts_Ipv4Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_Ipv4Entry) ProtoMessage() {}

func (x *Afts_Ipv4Entry) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_Ipv4Entry.ProtoReflect.Descriptor instead.
func (*Afts_Ipv4Entry) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Afts_Ipv4Entry) GetDecapsulateHeader() enums.OpenconfigAftTypesEncapsulationHeaderType {
	if x != nil {
		return x.DecapsulateHeader
	}
	return enums.OpenconfigAftTypesEncapsulationHeaderType(0)
}

func (x *Afts_Ipv4Entry) GetEntryMetadata() *ywrapper.BytesValue {
	if x != nil {
		return x.EntryMetadata
	}
	return nil
}

func (x *Afts_Ipv4Entry) GetNextHopGroup() *ywrapper.UintValue {
	if x != nil {
		return x.NextHopGroup
	}
	return nil
}

func (x *Afts_Ipv4Entry) GetNextHopGroupNetworkInstance() *ywrapper.StringValue {
	if x != nil {
		return x.NextHopGroupNetworkInstance
	}
	return nil
}

type Afts_Ipv4EntryKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix    string          `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Ipv4Entry *Afts_Ipv4Entry `protobuf:"bytes,2,opt,name=ipv4_entry,json=ipv4Entry,proto3" json:"ipv4_entry,omitempty"`
}

func (x *Afts_Ipv4EntryKey) Reset() {
	*x = Afts_Ipv4EntryKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Afts_Ipv4EntryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_Ipv4EntryKey) ProtoMessage() {}

func (x *Afts_Ipv4EntryKey) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_Ipv4EntryKey.ProtoReflect.Descriptor instead.
func (*Afts_Ipv4EntryKey) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Afts_Ipv4EntryKey) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Afts_Ipv4EntryKey) GetIpv4Entry() *Afts_Ipv4Entry {
	if x != nil {
		return x.Ipv4Entry
	}
	return nil
}

type Afts_Ipv6Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DecapsulateHeader           enums.OpenconfigAftTypesEncapsulationHeaderType `protobuf:"varint,328774623,opt,name=decapsulate_header,json=decapsulateHeader,proto3,enum=gribi_aft.enums.OpenconfigAftTypesEncapsulationHeaderType" json:"decapsulate_header,omitempty"`
	EntryMetadata               *ywrapper.BytesValue                            `protobuf:"bytes,11794282,opt,name=entry_metadata,json=entryMetadata,proto3" json:"entry_metadata,omitempty"`
	NextHopGroup                *ywrapper.UintValue                             `protobuf:"bytes,442121607,opt,name=next_hop_group,json=nextHopGroup,proto3" json:"next_hop_group,omitempty"`
	NextHopGroupNetworkInstance *ywrapper.StringValue                           `protobuf:"bytes,492017618,opt,name=next_hop_group_network_instance,json=nextHopGroupNetworkInstance,proto3" json:"next_hop_group_network_instance,omitempty"`
}

func (x *Afts_Ipv6Entry) Reset() {
	*x = Afts_Ipv6Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Afts_Ipv6Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_Ipv6Entry) ProtoMessage() {}

func (x *Afts_Ipv6Entry) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_Ipv6Entry.ProtoReflect.Descriptor instead.
func (*Afts_Ipv6Entry) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 2}
}

func (x *Afts_Ipv6Entry) GetDecapsulateHeader() enums.OpenconfigAftTypesEncapsulationHeaderType {
	if x != nil {
		return x.DecapsulateHeader
	}
	return enums.OpenconfigAftTypesEncapsulationHeaderType(0)
}

func (x *Afts_Ipv6Entry) GetEntryMetadata() *ywrapper.BytesValue {
	if x != nil {
		return x.EntryMetadata
	}
	return nil
}

func (x *Afts_Ipv6Entry) GetNextHopGroup() *ywrapper.UintValue {
	if x != nil {
		return x.NextHopGroup
	}
	return nil
}

func (x *Afts_Ipv6Entry) GetNextHopGroupNetworkInstance() *ywrapper.StringValue {
	if x != nil {
		return x.NextHopGroupNetworkInstance
	}
	return nil
}

type Afts_Ipv6EntryKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix    string          `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Ipv6Entry *Afts_Ipv6Entry `protobuf:"bytes,2,opt,name=ipv6_entry,json=ipv6Entry,proto3" json:"ipv6_entry,omitempty"`
}

func (x *Afts_Ipv6EntryKey) Reset() {
	*x = Afts_Ipv6EntryKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Afts_Ipv6EntryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_Ipv6EntryKey) ProtoMessage() {}

func (x *Afts_Ipv6EntryKey) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_Ipv6EntryKey.ProtoReflect.Descriptor instead.
func (*Afts_Ipv6EntryKey) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 3}
}

func (x *Afts_Ipv6EntryKey) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Afts_Ipv6EntryKey) GetIpv6Entry() *Afts_Ipv6Entry {
	if x != nil {
		return x.Ipv6Entry
	}
	return nil
}

type Afts_LabelEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryMetadata               *ywrapper.BytesValue                         `protobuf:"bytes,100486674,opt,name=entry_metadata,json=entryMetadata,proto3" json:"entry_metadata,omitempty"`
	NextHopGroup                *ywrapper.UintValue                          `protobuf:"bytes,307713279,opt,name=next_hop_group,json=nextHopGroup,proto3" json:"next_hop_group,omitempty"`
	NextHopGroupNetworkInstance *ywrapper.StringValue                        `protobuf:"bytes,303628026,opt,name=next_hop_group_network_instance,json=nextHopGroupNetworkInstance,proto3" json:"next_hop_group_network_instance,omitempty"`
	PoppedMplsLabelStack        []*Afts_LabelEntry_PoppedMplsLabelStackUnion `protobuf:"bytes,62799927,rep,name=popped_mpls_label_stack,json=poppedMplsLabelStack,proto3" json:"popped_mpls_label_stack,omitempty"`
}

func (x *Afts_LabelEntry) Reset() {
	*x = Afts_LabelEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Afts_LabelEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_LabelEntry) ProtoMessage() {}

func (x *Afts_LabelEntry) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_LabelEntry.ProtoReflect.Descriptor instead.
func (*Afts_LabelEntry) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 4}
}

func (x *Afts_LabelEntry) GetEntryMetadata() *ywrapper.BytesValue {
	if x != nil {
		return x.EntryMetadata
	}
	return nil
}

func (x *Afts_LabelEntry) GetNextHopGroup() *ywrapper.UintValue {
	if x != nil {
		return x.NextHopGroup
	}
	return nil
}

func (x *Afts_LabelEntry) GetNextHopGroupNetworkInstance() *ywrapper.StringValue {
	if x != nil {
		return x.NextHopGroupNetworkInstance
	}
	return nil
}

func (x *Afts_LabelEntry) GetPoppedMplsLabelStack() []*Afts_LabelEntry_PoppedMplsLabelStackUnion {
	if x != nil {
		return x.PoppedMplsLabelStack
	}
	return nil
}

type Afts_LabelEntryKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Label:
	//	*Afts_LabelEntryKey_LabelOpenconfigmplstypesmplslabelenum
	//	*Afts_LabelEntryKey_LabelUint64
	Label      isAfts_LabelEntryKey_Label `protobuf_oneof:"label"`
	LabelEntry *Afts_LabelEntry           `protobuf:"bytes,2,opt,name=label_entry,json=labelEntry,proto3" json:"label_entry,omitempty"`
}

func (x *Afts_LabelEntryKey) Reset() {
	*x = Afts_LabelEntryKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Afts_LabelEntryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_LabelEntryKey) ProtoMessage() {}

func (x *Afts_LabelEntryKey) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_LabelEntryKey.ProtoReflect.Descriptor instead.
func (*Afts_LabelEntryKey) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 5}
}

func (m *Afts_LabelEntryKey) GetLabel() isAfts_LabelEntryKey_Label {
	if m != nil {
		return m.Label
	}
	return nil
}

func (x *Afts_LabelEntryKey) GetLabelOpenconfigmplstypesmplslabelenum() enums.OpenconfigMplsTypesMplsLabelEnum {
	if x, ok := x.GetLabel().(*Afts_LabelEntryKey_LabelOpenconfigmplstypesmplslabelenum); ok {
		return x.LabelOpenconfigmplstypesmplslabelenum
	}
	return enums.OpenconfigMplsTypesMplsLabelEnum(0)
}

func (x *Afts_LabelEntryKey) GetLabelUint64() uint64 {
	if x, ok := x.GetLabel().(*Afts_LabelEntryKey_LabelUint64); ok {
		return x.LabelUint64
	}
	return 0
}

func (x *Afts_LabelEntryKey) GetLabelEntry() *Afts_LabelEntry {
	if x != nil {
		return x.LabelEntry
	}
	return nil
}

type isAfts_LabelEntryKey_Label interface {
	isAfts_LabelEntryKey_Label()
}

type Afts_LabelEntryKey_LabelOpenconfigmplstypesmplslabelenum struct {
	LabelOpenconfigmplstypesmplslabelenum enums.OpenconfigMplsTypesMplsLabelEnum `protobuf:"varint,505941675,opt,name=label_openconfigmplstypesmplslabelenum,json=labelOpenconfigmplstypesmplslabelenum,proto3,enum=gribi_aft.enums.OpenconfigMplsTypesMplsLabelEnum,oneof"`
}

type Afts_LabelEntryKey_LabelUint64 struct {
	LabelUint64 uint64 `protobuf:"varint,50948579,opt,name=label_uint64,json=labelUint64,proto3,oneof"`
}

func (*Afts_LabelEntryKey_LabelOpenconfigmplstypesmplslabelenum) isAfts_LabelEntryKey_Label() {}

func (*Afts_LabelEntryKey_LabelUint64) isAfts_LabelEntryKey_Label() {}

type Afts_MacEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryMetadata               *ywrapper.BytesValue  `protobuf:"bytes,397462192,opt,name=entry_metadata,json=entryMetadata,proto3" json:"entry_metadata,omitempty"`
	NextHopGroup                *ywrapper.UintValue   `protobuf:"bytes,320343041,opt,name=next_hop_group,json=nextHopGroup,proto3" json:"next_hop_group,omitempty"`
	NextHopGroupNetworkInstance *ywrapper.StringValue `protobuf:"bytes,264313412,opt,name=next_hop_group_network_instance,json=nextHopGroupNetworkInstance,proto3" json:"next_hop_group_network_instance,omitempty"`
}

func (x *Afts_MacEntry) Reset() {
	*x = Afts_MacEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Afts_MacEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_MacEntry) ProtoMessage() {}

func (x *Afts_MacEntry) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_MacEntry.ProtoReflect.Descriptor instead.
func (*Afts_MacEntry) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 6}
}

func (x *Afts_MacEntry) GetEntryMetadata() *ywrapper.BytesValue {
	if x != nil {
		return x.EntryMetadata
	}
	return nil
}

func (x *Afts_MacEntry) GetNextHopGroup() *ywrapper.UintValue {
	if x != nil {
		return x.NextHopGroup
	}
	return nil
}

func (x *Afts_MacEntry) GetNextHopGroupNetworkInstance() *ywrapper.StringValue {
	if x != nil {
		return x.NextHopGroupNetworkInstance
	}
	return nil
}

type Afts_MacEntryKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacAddress string         `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	MacEntry   *Afts_MacEntry `protobuf:"bytes,2,opt,name=mac_entry,json=macEntry,proto3" json:"mac_entry,omitempty"`
}

func (x *Afts_MacEntryKey) Reset() {
	*x = Afts_MacEntryKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Afts_MacEntryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_MacEntryKey) ProtoMessage() {}

func (x *Afts_MacEntryKey) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_MacEntryKey.ProtoReflect.Descriptor instead.
func (*Afts_MacEntryKey) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 7}
}

func (x *Afts_MacEntryKey) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *Afts_MacEntryKey) GetMacEntry() *Afts_MacEntry {
	if x != nil {
		return x.MacEntry
	}
	return nil
}

type Afts_NextHop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DecapsulateHeader    enums.OpenconfigAftTypesEncapsulationHeaderType `protobuf:"varint,104970793,opt,name=decapsulate_header,json=decapsulateHeader,proto3,enum=gribi_aft.enums.OpenconfigAftTypesEncapsulationHeaderType" json:"decapsulate_header,omitempty"`
	EncapsulateHeader    enums.OpenconfigAftTypesEncapsulationHeaderType `protobuf:"varint,69966061,opt,name=encapsulate_header,json=encapsulateHeader,proto3,enum=gribi_aft.enums.OpenconfigAftTypesEncapsulationHeaderType" json:"encapsulate_header,omitempty"`
	InterfaceRef         *Afts_NextHop_InterfaceRef                      `protobuf:"bytes,293682821,opt,name=interface_ref,json=interfaceRef,proto3" json:"interface_ref,omitempty"`
	IpAddress            *ywrapper.StringValue                           `protobuf:"bytes,242108262,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	IpInIp               *Afts_NextHop_IpInIp                            `protobuf:"bytes,157296597,opt,name=ip_in_ip,json=ipInIp,proto3" json:"ip_in_ip,omitempty"`
	MacAddress           *ywrapper.StringValue                           `protobuf:"bytes,404609192,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	NetworkInstance      *ywrapper.StringValue                           `protobuf:"bytes,232391308,opt,name=network_instance,json=networkInstance,proto3" json:"network_instance,omitempty"`
	PopTopLabel          *ywrapper.BoolValue                             `protobuf:"bytes,382175404,opt,name=pop_top_label,json=popTopLabel,proto3" json:"pop_top_label,omitempty"`
	PushedMplsLabelStack []*Afts_NextHop_PushedMplsLabelStackUnion       `protobuf:"bytes,489592660,rep,name=pushed_mpls_label_stack,json=pushedMplsLabelStack,proto3" json:"pushed_mpls_label_stack,omitempty"`
	TunnelSrcIpAddress   *ywrapper.StringValue                           `protobuf:"bytes,174262178,opt,name=tunnel_src_ip_address,json=tunnelSrcIpAddress,proto3" json:"tunnel_src_ip_address,omitempty"`
	VniLabel             *ywrapper.UintValue                             `protobuf:"bytes,209933130,opt,name=vni_label,json=vniLabel,proto3" json:"vni_label,omitempty"`
}

func (x *Afts_NextHop) Reset() {
	*x = Afts_NextHop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Afts_NextHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHop) ProtoMessage() {}

func (x *Afts_NextHop) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHop.ProtoReflect.Descriptor instead.
func (*Afts_NextHop) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 8}
}

func (x *Afts_NextHop) GetDecapsulateHeader() enums.OpenconfigAftTypesEncapsulationHeaderType {
	if x != nil {
		return x.DecapsulateHeader
	}
	return enums.OpenconfigAftTypesEncapsulationHeaderType(0)
}

func (x *Afts_NextHop) GetEncapsulateHeader() enums.OpenconfigAftTypesEncapsulationHeaderType {
	if x != nil {
		return x.EncapsulateHeader
	}
	return enums.OpenconfigAftTypesEncapsulationHeaderType(0)
}

func (x *Afts_NextHop) GetInterfaceRef() *Afts_NextHop_InterfaceRef {
	if x != nil {
		return x.InterfaceRef
	}
	return nil
}

func (x *Afts_NextHop) GetIpAddress() *ywrapper.StringValue {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

func (x *Afts_NextHop) GetIpInIp() *Afts_NextHop_IpInIp {
	if x != nil {
		return x.IpInIp
	}
	return nil
}

func (x *Afts_NextHop) GetMacAddress() *ywrapper.StringValue {
	if x != nil {
		return x.MacAddress
	}
	return nil
}

func (x *Afts_NextHop) GetNetworkInstance() *ywrapper.StringValue {
	if x != nil {
		return x.NetworkInstance
	}
	return nil
}

func (x *Afts_NextHop) GetPopTopLabel() *ywrapper.BoolValue {
	if x != nil {
		return x.PopTopLabel
	}
	return nil
}

func (x *Afts_NextHop) GetPushedMplsLabelStack() []*Afts_NextHop_PushedMplsLabelStackUnion {
	if x != nil {
		return x.PushedMplsLabelStack
	}
	return nil
}

func (x *Afts_NextHop) GetTunnelSrcIpAddress() *ywrapper.StringValue {
	if x != nil {
		return x.TunnelSrcIpAddress
	}
	return nil
}

func (x *Afts_NextHop) GetVniLabel() *ywrapper.UintValue {
	if x != nil {
		return x.VniLabel
	}
	return nil
}

type Afts_NextHopGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackupNextHopGroup *ywrapper.UintValue             `protobuf:"bytes,366506898,opt,name=backup_next_hop_group,json=backupNextHopGroup,proto3" json:"backup_next_hop_group,omitempty"`
	Color              *ywrapper.UintValue             `protobuf:"bytes,242427279,opt,name=color,proto3" json:"color,omitempty"`
	NextHop            []*Afts_NextHopGroup_NextHopKey `protobuf:"bytes,211071474,rep,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
}

func (x *Afts_NextHopGroup) Reset() {
	*x = Afts_NextHopGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Afts_NextHopGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHopGroup) ProtoMessage() {}

func (x *Afts_NextHopGroup) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHopGroup.ProtoReflect.Descriptor instead.
func (*Afts_NextHopGroup) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 9}
}

func (x *Afts_NextHopGroup) GetBackupNextHopGroup() *ywrapper.UintValue {
	if x != nil {
		return x.BackupNextHopGroup
	}
	return nil
}

func (x *Afts_NextHopGroup) GetColor() *ywrapper.UintValue {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *Afts_NextHopGroup) GetNextHop() []*Afts_NextHopGroup_NextHopKey {
	if x != nil {
		return x.NextHop
	}
	return nil
}

type Afts_NextHopGroupKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NextHopGroup *Afts_NextHopGroup `protobuf:"bytes,2,opt,name=next_hop_group,json=nextHopGroup,proto3" json:"next_hop_group,omitempty"`
}

func (x *Afts_NextHopGroupKey) Reset() {
	*x = Afts_NextHopGroupKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Afts_NextHopGroupKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHopGroupKey) ProtoMessage() {}

func (x *Afts_NextHopGroupKey) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHopGroupKey.ProtoReflect.Descriptor instead.
func (*Afts_NextHopGroupKey) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 10}
}

func (x *Afts_NextHopGroupKey) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Afts_NextHopGroupKey) GetNextHopGroup() *Afts_NextHopGroup {
	if x != nil {
		return x.NextHopGroup
	}
	return nil
}

type Afts_NextHopKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index   uint64        `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	NextHop *Afts_NextHop `protobuf:"bytes,2,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
}

func (x *Afts_NextHopKey) Reset() {
	*x = Afts_NextHopKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Afts_NextHopKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHopKey) ProtoMessage() {}

func (x *Afts_NextHopKey) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHopKey.ProtoReflect.Descriptor instead.
func (*Afts_NextHopKey) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 11}
}

func (x *Afts_NextHopKey) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Afts_NextHopKey) GetNextHop() *Afts_NextHop {
	if x != nil {
		return x.NextHop
	}
	return nil
}

type Afts_PolicyForwardingEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryMetadata *ywrapper.BytesValue  `protobuf:"bytes,141950242,opt,name=entry_metadata,json=entryMetadata,proto3" json:"entry_metadata,omitempty"`
	IpDscp        *ywrapper.UintValue   `protobuf:"bytes,350830798,opt,name=ip_dscp,json=ipDscp,proto3" json:"ip_dscp,omitempty"`
	IpPrefix      *ywrapper.StringValue `protobuf:"bytes,66278688,opt,name=ip_prefix,json=ipPrefix,proto3" json:"ip_prefix,omitempty"`
	// Types that are assignable to IpProtocol:
	//	*Afts_PolicyForwardingEntry_IpProtocolOpenconfigpacketmatchtypesipprotocol
	//	*Afts_PolicyForwardingEntry_IpProtocolUint64
	IpProtocol isAfts_PolicyForwardingEntry_IpProtocol `protobuf_oneof:"ip_protocol"`
	L4DstPort  *ywrapper.UintValue                     `protobuf:"bytes,447405406,opt,name=l4_dst_port,json=l4DstPort,proto3" json:"l4_dst_port,omitempty"`
	L4SrcPort  *ywrapper.UintValue                     `protobuf:"bytes,502173263,opt,name=l4_src_port,json=l4SrcPort,proto3" json:"l4_src_port,omitempty"`
	MacAddress *ywrapper.StringValue                   `protobuf:"bytes,422272134,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// Types that are assignable to MplsLabel:
	//	*Afts_PolicyForwardingEntry_MplsLabelOpenconfigmplstypesmplslabelenum
	//	*Afts_PolicyForwardingEntry_MplsLabelUint64
	MplsLabel                   isAfts_PolicyForwardingEntry_MplsLabel `protobuf_oneof:"mpls_label"`
	MplsTc                      *ywrapper.UintValue                    `protobuf:"bytes,281754514,opt,name=mpls_tc,json=mplsTc,proto3" json:"mpls_tc,omitempty"`
	NextHopGroup                *ywrapper.UintValue                    `protobuf:"bytes,188303215,opt,name=next_hop_group,json=nextHopGroup,proto3" json:"next_hop_group,omitempty"`
	NextHopGroupNetworkInstance *ywrapper.StringValue                  `protobuf:"bytes,466188650,opt,name=next_hop_group_network_instance,json=nextHopGroupNetworkInstance,proto3" json:"next_hop_group_network_instance,omitempty"`
}

func (x *Afts_PolicyForwardingEntry) Reset() {
	*x = Afts_PolicyForwardingEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Afts_PolicyForwardingEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_PolicyForwardingEntry) ProtoMessage() {}

func (x *Afts_PolicyForwardingEntry) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_PolicyForwardingEntry.ProtoReflect.Descriptor instead.
func (*Afts_PolicyForwardingEntry) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 12}
}

func (x *Afts_PolicyForwardingEntry) GetEntryMetadata() *ywrapper.BytesValue {
	if x != nil {
		return x.EntryMetadata
	}
	return nil
}

func (x *Afts_PolicyForwardingEntry) GetIpDscp() *ywrapper.UintValue {
	if x != nil {
		return x.IpDscp
	}
	return nil
}

func (x *Afts_PolicyForwardingEntry) GetIpPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.IpPrefix
	}
	return nil
}

func (m *Afts_PolicyForwardingEntry) GetIpProtocol() isAfts_PolicyForwardingEntry_IpProtocol {
	if m != nil {
		return m.IpProtocol
	}
	return nil
}

func (x *Afts_PolicyForwardingEntry) GetIpProtocolOpenconfigpacketmatchtypesipprotocol() enums.OpenconfigPacketMatchTypesIPPROTOCOL {
	if x, ok := x.GetIpProtocol().(*Afts_PolicyForwardingEntry_IpProtocolOpenconfigpacketmatchtypesipprotocol); ok {
		return x.IpProtocolOpenconfigpacketmatchtypesipprotocol
	}
	return enums.OpenconfigPacketMatchTypesIPPROTOCOL(0)
}

func (x *Afts_PolicyForwardingEntry) GetIpProtocolUint64() uint64 {
	if x, ok := x.GetIpProtocol().(*Afts_PolicyForwardingEntry_IpProtocolUint64); ok {
		return x.IpProtocolUint64
	}
	return 0
}

func (x *Afts_PolicyForwardingEntry) GetL4DstPort() *ywrapper.UintValue {
	if x != nil {
		return x.L4DstPort
	}
	return nil
}

func (x *Afts_PolicyForwardingEntry) GetL4SrcPort() *ywrapper.UintValue {
	if x != nil {
		return x.L4SrcPort
	}
	return nil
}

func (x *Afts_PolicyForwardingEntry) GetMacAddress() *ywrapper.StringValue {
	if x != nil {
		return x.MacAddress
	}
	return nil
}

func (m *Afts_PolicyForwardingEntry) GetMplsLabel() isAfts_PolicyForwardingEntry_MplsLabel {
	if m != nil {
		return m.MplsLabel
	}
	return nil
}

func (x *Afts_PolicyForwardingEntry) GetMplsLabelOpenconfigmplstypesmplslabelenum() enums.OpenconfigMplsTypesMplsLabelEnum {
	if x, ok := x.GetMplsLabel().(*Afts_PolicyForwardingEntry_MplsLabelOpenconfigmplstypesmplslabelenum); ok {
		return x.MplsLabelOpenconfigmplstypesmplslabelenum
	}
	return enums.OpenconfigMplsTypesMplsLabelEnum(0)
}

func (x *Afts_PolicyForwardingEntry) GetMplsLabelUint64() uint64 {
	if x, ok := x.GetMplsLabel().(*Afts_PolicyForwardingEntry_MplsLabelUint64); ok {
		return x.MplsLabelUint64
	}
	return 0
}

func (x *Afts_PolicyForwardingEntry) GetMplsTc() *ywrapper.UintValue {
	if x != nil {
		return x.MplsTc
	}
	return nil
}

func (x *Afts_PolicyForwardingEntry) GetNextHopGroup() *ywrapper.UintValue {
	if x != nil {
		return x.NextHopGroup
	}
	return nil
}

func (x *Afts_PolicyForwardingEntry) GetNextHopGroupNetworkInstance() *ywrapper.StringValue {
	if x != nil {
		return x.NextHopGroupNetworkInstance
	}
	return nil
}

type isAfts_PolicyForwardingEntry_IpProtocol interface {
	isAfts_PolicyForwardingEntry_IpProtocol()
}

type Afts_PolicyForwardingEntry_IpProtocolOpenconfigpacketmatchtypesipprotocol struct {
	IpProtocolOpenconfigpacketmatchtypesipprotocol enums.OpenconfigPacketMatchTypesIPPROTOCOL `protobuf:"varint,157826780,opt,name=ip_protocol_openconfigpacketmatchtypesipprotocol,json=ipProtocolOpenconfigpacketmatchtypesipprotocol,proto3,enum=gribi_aft.enums.OpenconfigPacketMatchTypesIPPROTOCOL,oneof"`
}

type Afts_PolicyForwardingEntry_IpProtocolUint64 struct {
	IpProtocolUint64 uint64 `protobuf:"varint,248927945,opt,name=ip_protocol_uint64,json=ipProtocolUint64,proto3,oneof"`
}

func (*Afts_PolicyForwardingEntry_IpProtocolOpenconfigpacketmatchtypesipprotocol) isAfts_PolicyForwardingEntry_IpProtocol() {
}

func (*Afts_PolicyForwardingEntry_IpProtocolUint64) isAfts_PolicyForwardingEntry_IpProtocol() {}

type isAfts_PolicyForwardingEntry_MplsLabel interface {
	isAfts_PolicyForwardingEntry_MplsLabel()
}

type Afts_PolicyForwardingEntry_MplsLabelOpenconfigmplstypesmplslabelenum struct {
	MplsLabelOpenconfigmplstypesmplslabelenum enums.OpenconfigMplsTypesMplsLabelEnum `protobuf:"varint,47620234,opt,name=mpls_label_openconfigmplstypesmplslabelenum,json=mplsLabelOpenconfigmplstypesmplslabelenum,proto3,enum=gribi_aft.enums.OpenconfigMplsTypesMplsLabelEnum,oneof"`
}

type Afts_PolicyForwardingEntry_MplsLabelUint64 struct {
	MplsLabelUint64 uint64 `protobuf:"varint,306275022,opt,name=mpls_label_uint64,json=mplsLabelUint64,proto3,oneof"`
}

func (*Afts_PolicyForwardingEntry_MplsLabelOpenconfigmplstypesmplslabelenum) isAfts_PolicyForwardingEntry_MplsLabel() {
}

func (*Afts_PolicyForwardingEntry_MplsLabelUint64) isAfts_PolicyForwardingEntry_MplsLabel() {}

type Afts_PolicyForwardingEntryKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index                 uint64                      `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	PolicyForwardingEntry *Afts_PolicyForwardingEntry `protobuf:"bytes,2,opt,name=policy_forwarding_entry,json=policyForwardingEntry,proto3" json:"policy_forwarding_entry,omitempty"`
}

func (x *Afts_PolicyForwardingEntryKey) Reset() {
	*x = Afts_PolicyForwardingEntryKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Afts_PolicyForwardingEntryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_PolicyForwardingEntryKey) ProtoMessage() {}

func (x *Afts_PolicyForwardingEntryKey) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_PolicyForwardingEntryKey.ProtoReflect.Descriptor instead.
func (*Afts_PolicyForwardingEntryKey) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 13}
}

func (x *Afts_PolicyForwardingEntryKey) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Afts_PolicyForwardingEntryKey) GetPolicyForwardingEntry() *Afts_PolicyForwardingEntry {
	if x != nil {
		return x.PolicyForwardingEntry
	}
	return nil
}

type Afts_LabelEntry_PoppedMplsLabelStackUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoppedMplsLabelStackOpenconfigmplstypesmplslabelenum enums.OpenconfigMplsTypesMplsLabelEnum `protobuf:"varint,524692292,opt,name=popped_mpls_label_stack_openconfigmplstypesmplslabelenum,json=poppedMplsLabelStackOpenconfigmplstypesmplslabelenum,proto3,enum=gribi_aft.enums.OpenconfigMplsTypesMplsLabelEnum" json:"popped_mpls_label_stack_openconfigmplstypesmplslabelenum,omitempty"`
	PoppedMplsLabelStackUint64                           uint64                                 `protobuf:"varint,510588408,opt,name=popped_mpls_label_stack_uint64,json=poppedMplsLabelStackUint64,proto3" json:"popped_mpls_label_stack_uint64,omitempty"`
}

func (x *Afts_LabelEntry_PoppedMplsLabelStackUnion) Reset() {
	*x = Afts_LabelEntry_PoppedMplsLabelStackUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Afts_LabelEntry_PoppedMplsLabelStackUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_LabelEntry_PoppedMplsLabelStackUnion) ProtoMessage() {}

func (x *Afts_LabelEntry_PoppedMplsLabelStackUnion) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_LabelEntry_PoppedMplsLabelStackUnion.ProtoReflect.Descriptor instead.
func (*Afts_LabelEntry_PoppedMplsLabelStackUnion) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 4, 0}
}

func (x *Afts_LabelEntry_PoppedMplsLabelStackUnion) GetPoppedMplsLabelStackOpenconfigmplstypesmplslabelenum() enums.OpenconfigMplsTypesMplsLabelEnum {
	if x != nil {
		return x.PoppedMplsLabelStackOpenconfigmplstypesmplslabelenum
	}
	return enums.OpenconfigMplsTypesMplsLabelEnum(0)
}

func (x *Afts_LabelEntry_PoppedMplsLabelStackUnion) GetPoppedMplsLabelStackUint64() uint64 {
	if x != nil {
		return x.PoppedMplsLabelStackUint64
	}
	return 0
}

type Afts_NextHop_InterfaceRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface    *ywrapper.StringValue `protobuf:"bytes,366751031,opt,name=interface,proto3" json:"interface,omitempty"`
	Subinterface *ywrapper.UintValue   `protobuf:"bytes,488145333,opt,name=subinterface,proto3" json:"subinterface,omitempty"`
}

func (x *Afts_NextHop_InterfaceRef) Reset() {
	*x = Afts_NextHop_InterfaceRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Afts_NextHop_InterfaceRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHop_InterfaceRef) ProtoMessage() {}

func (x *Afts_NextHop_InterfaceRef) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHop_InterfaceRef.ProtoReflect.Descriptor instead.
func (*Afts_NextHop_InterfaceRef) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 8, 0}
}

func (x *Afts_NextHop_InterfaceRef) GetInterface() *ywrapper.StringValue {
	if x != nil {
		return x.Interface
	}
	return nil
}

func (x *Afts_NextHop_InterfaceRef) GetSubinterface() *ywrapper.UintValue {
	if x != nil {
		return x.Subinterface
	}
	return nil
}

type Afts_NextHop_IpInIp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DstIp *ywrapper.StringValue `protobuf:"bytes,184775743,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	SrcIp *ywrapper.StringValue `protobuf:"bytes,220560118,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
}

func (x *Afts_NextHop_IpInIp) Reset() {
	*x = Afts_NextHop_IpInIp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Afts_NextHop_IpInIp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHop_IpInIp) ProtoMessage() {}

func (x *Afts_NextHop_IpInIp) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHop_IpInIp.ProtoReflect.Descriptor instead.
func (*Afts_NextHop_IpInIp) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 8, 1}
}

func (x *Afts_NextHop_IpInIp) GetDstIp() *ywrapper.StringValue {
	if x != nil {
		return x.DstIp
	}
	return nil
}

func (x *Afts_NextHop_IpInIp) GetSrcIp() *ywrapper.StringValue {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

type Afts_NextHop_PushedMplsLabelStackUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PushedMplsLabelStackOpenconfigmplstypesmplslabelenum enums.OpenconfigMplsTypesMplsLabelEnum `protobuf:"varint,307755077,opt,name=pushed_mpls_label_stack_openconfigmplstypesmplslabelenum,json=pushedMplsLabelStackOpenconfigmplstypesmplslabelenum,proto3,enum=gribi_aft.enums.OpenconfigMplsTypesMplsLabelEnum" json:"pushed_mpls_label_stack_openconfigmplstypesmplslabelenum,omitempty"`
	PushedMplsLabelStackUint64                           uint64                                 `protobuf:"varint,47493573,opt,name=pushed_mpls_label_stack_uint64,json=pushedMplsLabelStackUint64,proto3" json:"pushed_mpls_label_stack_uint64,omitempty"`
}

func (x *Afts_NextHop_PushedMplsLabelStackUnion) Reset() {
	*x = Afts_NextHop_PushedMplsLabelStackUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Afts_NextHop_PushedMplsLabelStackUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHop_PushedMplsLabelStackUnion) ProtoMessage() {}

func (x *Afts_NextHop_PushedMplsLabelStackUnion) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHop_PushedMplsLabelStackUnion.ProtoReflect.Descriptor instead.
func (*Afts_NextHop_PushedMplsLabelStackUnion) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 8, 2}
}

func (x *Afts_NextHop_PushedMplsLabelStackUnion) GetPushedMplsLabelStackOpenconfigmplstypesmplslabelenum() enums.OpenconfigMplsTypesMplsLabelEnum {
	if x != nil {
		return x.PushedMplsLabelStackOpenconfigmplstypesmplslabelenum
	}
	return enums.OpenconfigMplsTypesMplsLabelEnum(0)
}

func (x *Afts_NextHop_PushedMplsLabelStackUnion) GetPushedMplsLabelStackUint64() uint64 {
	if x != nil {
		return x.PushedMplsLabelStackUint64
	}
	return 0
}

type Afts_NextHopGroup_NextHop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weight *ywrapper.UintValue `protobuf:"bytes,202140175,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *Afts_NextHopGroup_NextHop) Reset() {
	*x = Afts_NextHopGroup_NextHop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Afts_NextHopGroup_NextHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHopGroup_NextHop) ProtoMessage() {}

func (x *Afts_NextHopGroup_NextHop) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHopGroup_NextHop.ProtoReflect.Descriptor instead.
func (*Afts_NextHopGroup_NextHop) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 9, 0}
}

func (x *Afts_NextHopGroup_NextHop) GetWeight() *ywrapper.UintValue {
	if x != nil {
		return x.Weight
	}
	return nil
}

type Afts_NextHopGroup_NextHopKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index   uint64                     `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	NextHop *Afts_NextHopGroup_NextHop `protobuf:"bytes,2,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
}

func (x *Afts_NextHopGroup_NextHopKey) Reset() {
	*x = Afts_NextHopGroup_NextHopKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Afts_NextHopGroup_NextHopKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Afts_NextHopGroup_NextHopKey) ProtoMessage() {}

func (x *Afts_NextHopGroup_NextHopKey) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Afts_NextHopGroup_NextHopKey.ProtoReflect.Descriptor instead.
func (*Afts_NextHopGroup_NextHopKey) Descriptor() ([]byte, []int) {
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP(), []int{1, 9, 1}
}

func (x *Afts_NextHopGroup_NextHopKey) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Afts_NextHopGroup_NextHopKey) GetNextHop() *Afts_NextHopGroup_NextHop {
	if x != nil {
		return x.NextHop
	}
	return nil
}

var File_v1_proto_gribi_aft_gribi_aft_proto protoreflect.FileDescriptor

var file_v1_proto_gribi_aft_gribi_aft_proto_rawDesc = []byte{
	0x0a, 0x22, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x72, 0x69, 0x62, 0x69,
	0x5f, 0x61, 0x66, 0x74, 0x2f, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x1a,
	0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x79, 0x67, 0x6f, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2f, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x79, 0x67, 0x6f, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x65, 0x78, 0x74,
	0x2f, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x3a, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x61,
	0x66, 0x74, 0x73, 0x18, 0xb4, 0x96, 0x94, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x67,
	0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x42, 0x08, 0x82,
	0x41, 0x05, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x52, 0x04, 0x61, 0x66, 0x74, 0x73, 0x22, 0x97, 0x4d,
	0x0a, 0x04, 0x41, 0x66, 0x74, 0x73, 0x12, 0x61, 0x0a, 0x0a, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0xd7, 0xd7, 0xd8, 0xc3, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x42, 0x20, 0x82, 0x41,
	0x1d, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x69, 0x70, 0x76, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x61, 0x0a, 0x0a, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x83, 0xce, 0xcb, 0xc0, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66,
	0x74, 0x73, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x42,
	0x20, 0x82, 0x41, 0x1d, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x69, 0x70, 0x76, 0x36, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x5c, 0x0a, 0x0b,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xdb, 0xc1, 0x94, 0x49,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74,
	0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x4b, 0x65, 0x79, 0x42, 0x19, 0x82, 0x41, 0x16, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6d, 0x70,
	0x6c, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x58, 0x0a, 0x09, 0x6d, 0x61,
	0x63, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xc1, 0x9e, 0xa8, 0x4d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74,
	0x73, 0x2e, 0x4d, 0x61, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x42, 0x1b, 0x82,
	0x41, 0x18, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2f, 0x6d, 0x61, 0x63, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x63, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x55, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70,
	0x18, 0xb1, 0xcd, 0xa0, 0x3f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x69, 0x62,
	0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x4b, 0x65, 0x79, 0x42, 0x1b, 0x82, 0x41, 0x18, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f,
	0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68,
	0x6f, 0x70, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x72, 0x0a, 0x0e, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xf9, 0xd9,
	0x8b, 0xad, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f,
	0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x61, 0x66,
	0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x98, 0x01, 0x0a, 0x17, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x8b, 0x97, 0xc3, 0x80,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66,
	0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x42,
	0x32, 0x82, 0x41, 0x2f, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x15, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0xcd, 0x04, 0x0a, 0x09, 0x49,
	0x70, 0x76, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0xa8, 0x01, 0x0a, 0x12, 0x64, 0x65, 0x63,
	0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x93, 0xef, 0x81, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x72, 0x69, 0x62,
	0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e,
	0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65,
	0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x11, 0x64, 0x65, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x76, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0xe6, 0x9c, 0xdd, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x2d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x74, 0x0a, 0x0e, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x93, 0xcc,
	0x8a, 0xed, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41,
	0x32, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0xa6, 0x01, 0x0a, 0x1f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0xfe, 0xb3, 0xd5, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65,
	0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x1b, 0x6e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0xb4, 0x01, 0x0a, 0x0c, 0x49,
	0x70, 0x76, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x6a, 0x0a, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x52, 0x82, 0x41, 0x4f,
	0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x7c, 0x2f, 0x61, 0x66, 0x74, 0x73,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72,
	0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x69, 0x70, 0x76, 0x34, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x1a, 0xcd, 0x04, 0x0a, 0x09, 0x49, 0x70, 0x76, 0x36, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0xa8, 0x01, 0x0a, 0x12, 0x64, 0x65, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0xdf, 0xe7, 0xe2, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3a, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x66, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x39, 0x82, 0x41,
	0x36, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x11, 0x64, 0x65, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x75, 0x0a, 0x0e, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0xea, 0xee, 0xcf,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32,
	0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x74, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x87, 0xfb, 0xe8, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d,
	0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xa7, 0x01, 0x0a, 0x1f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0xd2, 0xaf, 0xce, 0xea,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x46, 0x82, 0x41,
	0x43, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x1b, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x1a, 0xb4, 0x01, 0x0a, 0x0c, 0x49, 0x70, 0x76, 0x36, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b,
	0x65, 0x79, 0x12, 0x6a, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x7c, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x38,
	0x0a, 0x0a, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41,
	0x66, 0x74, 0x73, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x69,
	0x70, 0x76, 0x36, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0xc3, 0x07, 0x0a, 0x0a, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x6e, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x92, 0x9c, 0xf5, 0x2f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x61, 0x66,
	0x74, 0x73, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2d,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6d, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xff, 0xa9, 0xdd, 0x92, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2e, 0x82, 0x41, 0x2b, 0x2f, 0x61, 0x66,
	0x74, 0x73, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68,
	0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xa0, 0x01, 0x0a, 0x1f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0xfa, 0xfd, 0xe3, 0x90, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3f, 0x82, 0x41, 0x3c,
	0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x78,
	0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x1b, 0x6e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x17, 0x70, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0xb7, 0x80, 0xf9, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x50, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x55,
	0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x3a, 0x90, 0x41, 0x01, 0x82, 0x41, 0x34, 0x2f, 0x61, 0x66, 0x74,
	0x73, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d,
	0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x52, 0x14, 0x70, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x1a, 0x85, 0x03, 0x0a, 0x19, 0x50, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x55,
	0x6e, 0x69, 0x6f, 0x6e, 0x12, 0xe6, 0x01, 0x0a, 0x38, 0x70, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x70, 0x6c, 0x73, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x6d, 0x70, 0x6c, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x6e, 0x75,
	0x6d, 0x18, 0xc4, 0xd6, 0x98, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x72,
	0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x37,
	0x82, 0x41, 0x34, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x34, 0x70, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x4d,
	0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x70, 0x6c, 0x73, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x6d, 0x70, 0x6c, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x7f, 0x0a,
	0x1e, 0x70, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0xf8, 0xeb, 0xbb, 0xf3, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x61,
	0x66, 0x74, 0x73, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x2d, 0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x52, 0x1a, 0x70, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x96,
	0x03, 0x0a, 0x0d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79,
	0x12, 0xd2, 0x01, 0x0a, 0x26, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x70, 0x6c, 0x73, 0x74, 0x79, 0x70, 0x65, 0x73, 0x6d, 0x70,
	0x6c, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xab, 0x9d, 0xa0, 0xf1,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66,
	0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4d, 0x70, 0x6c, 0x73, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x42, 0x82, 0x41, 0x3f, 0x2f, 0x61, 0x66,
	0x74, 0x73, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x7c,
	0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x25,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d,
	0x70, 0x6c, 0x73, 0x74, 0x79, 0x70, 0x65, 0x73, 0x6d, 0x70, 0x6c, 0x73, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x6a, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xe3, 0xd3, 0xa5, 0x18, 0x20, 0x01, 0x28, 0x04, 0x42, 0x42,
	0x82, 0x41, 0x3f, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x7c, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6d, 0x70, 0x6c, 0x73,
	0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61,
	0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x07,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0x92, 0x03, 0x0a, 0x08, 0x4d, 0x61, 0x63, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x71, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0xb0, 0x95, 0xc3, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x61, 0x66, 0x74, 0x73,
	0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6d, 0x61, 0x63, 0x2d, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2d,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x6f, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x81, 0x98, 0xe0, 0x98, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x30, 0x82, 0x41, 0x2d, 0x2f, 0x61, 0x66,
	0x74, 0x73, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6d, 0x61, 0x63, 0x2d,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x78, 0x74,
	0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xa1, 0x01, 0x0a, 0x1f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0xc4, 0xb4, 0x84,
	0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x41, 0x82, 0x41,
	0x3e, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f,
	0x6d, 0x61, 0x63, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x1b, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0xb9, 0x01, 0x0a,
	0x0b, 0x4d, 0x61, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x73, 0x0a, 0x0b,
	0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x52, 0x82, 0x41, 0x4f, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x2f, 0x6d, 0x61, 0x63, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x63, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x7c, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2f,
	0x6d, 0x61, 0x63, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x6d, 0x61, 0x63, 0x2d, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x35, 0x0a, 0x09, 0x6d, 0x61, 0x63, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74,
	0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x61, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0xde, 0x11, 0x0a, 0x07, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x12, 0xa2, 0x01, 0x0a, 0x12, 0x64, 0x65, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0xa9, 0xf4, 0x86, 0x32,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x41, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d,
	0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x2d,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x11, 0x64, 0x65, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0xa2, 0x01, 0x0a, 0x12, 0x65, 0x6e,
	0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0xed, 0xb1, 0xae, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x72, 0x69, 0x62,
	0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e,
	0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f,
	0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68,
	0x6f, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x2d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x11, 0x65, 0x6e, 0x63,
	0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x78,
	0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x85, 0xfd, 0x84, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x72, 0x69, 0x62,
	0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x42,
	0x29, 0x82, 0x41, 0x26, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68,
	0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x65, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xe6, 0x8e, 0xb9, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2c, 0x82, 0x41, 0x29, 0x2f, 0x61, 0x66, 0x74, 0x73,
	0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d,
	0x68, 0x6f, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x2d, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x61, 0x0a, 0x08, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x18, 0xd5, 0xcf, 0x80, 0x4b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74,
	0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x2e, 0x49, 0x70,
	0x49, 0x6e, 0x49, 0x70, 0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e,
	0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f,
	0x70, 0x2f, 0x69, 0x70, 0x2d, 0x69, 0x6e, 0x2d, 0x69, 0x70, 0x52, 0x06, 0x69, 0x70, 0x49, 0x6e,
	0x49, 0x70, 0x12, 0x69, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0xa8, 0xb1, 0xf7, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78,
	0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x63, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x77, 0x0a,
	0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x8c, 0x85, 0xe8, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74,
	0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x6c, 0x0a, 0x0d, 0x70, 0x6f, 0x70, 0x5f, 0x74, 0x6f,
	0x70, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0xac, 0x91, 0x9e, 0xb6, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x61, 0x66, 0x74, 0x73,
	0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d,
	0x68, 0x6f, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x70, 0x2d, 0x74, 0x6f,
	0x70, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0b, 0x70, 0x6f, 0x70, 0x54, 0x6f, 0x70, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0xaa, 0x01, 0x0a, 0x17, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x18, 0xd4, 0xae, 0xba, 0xe9, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x72, 0x69,
	0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x3c, 0x90,
	0x41, 0x01, 0x82, 0x41, 0x36, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d,
	0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x2d, 0x6d, 0x70, 0x6c, 0x73, 0x2d,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x14, 0x70, 0x75, 0x73,
	0x68, 0x65, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x72, 0x63,
	0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xa2, 0x8f, 0x8c, 0x53,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34,
	0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f,
	0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x73, 0x72, 0x63, 0x2d, 0x69, 0x70, 0x2d, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x12, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x72, 0x63, 0x49,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x60, 0x0a, 0x09, 0x76, 0x6e, 0x69, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0xca, 0xa6, 0x8d, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65,
	0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x6e, 0x69, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x52, 0x08, 0x76, 0x6e, 0x69, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0xfd, 0x01, 0x0a, 0x0c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x72, 0x0a, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0xb7, 0xda, 0xf0, 0xae, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x61,
	0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65,
	0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x79, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18,
	0xb5, 0x83, 0xe2, 0xe8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c,
	0x82, 0x41, 0x39, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f,
	0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x66, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x1a, 0xd0, 0x01, 0x0a, 0x06, 0x49,
	0x70, 0x49, 0x6e, 0x49, 0x70, 0x12, 0x62, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18,
	0xbf, 0xe8, 0x8d, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x31, 0x82, 0x41, 0x2e, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68,
	0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x69, 0x70, 0x2d,
	0x69, 0x6e, 0x2d, 0x69, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x73, 0x74, 0x2d,
	0x69, 0x70, 0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x70, 0x12, 0x62, 0x0a, 0x06, 0x73, 0x72, 0x63,
	0x5f, 0x69, 0x70, 0x18, 0xf6, 0xf5, 0x95, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65,
	0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70,
	0x2f, 0x69, 0x70, 0x2d, 0x69, 0x6e, 0x2d, 0x69, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x73, 0x72, 0x63, 0x2d, 0x69, 0x70, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70, 0x1a, 0x89, 0x03,
	0x0a, 0x19, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0xe8, 0x01, 0x0a, 0x38,
	0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x6d, 0x70, 0x6c, 0x73, 0x74, 0x79, 0x70, 0x65, 0x73, 0x6d, 0x70, 0x6c, 0x73, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xc5, 0xf0, 0xdf, 0x92, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d,
	0x70, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f,
	0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68,
	0x6f, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x2d,
	0x6d, 0x70, 0x6c, 0x73, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x52, 0x34, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x6d, 0x70, 0x6c, 0x73, 0x74, 0x79, 0x70, 0x65, 0x73, 0x6d, 0x70, 0x6c, 0x73, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x80, 0x01, 0x0a, 0x1e, 0x70, 0x75, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xc5, 0xe3, 0xd2, 0x16, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78,
	0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x2d, 0x6d, 0x70, 0x6c,
	0x73, 0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x1a, 0x70,
	0x75, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0xfb, 0x05, 0x0a, 0x0c, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x8f, 0x01, 0x0a, 0x15, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x92, 0xe7, 0xe1, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65,
	0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x6e, 0x65,
	0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2d, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68,
	0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x61, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x8f, 0xcb, 0xcc, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65,
	0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x6e, 0x65,
	0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x81, 0x01, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0xf2, 0xe3, 0xd2,
	0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66,
	0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x4b, 0x65, 0x79, 0x42, 0x3a,
	0x82, 0x41, 0x37, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f,
	0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f,
	0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70,
	0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x1a, 0x82, 0x01, 0x0a, 0x07, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12,
	0x77, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x8f, 0xd4, 0xb1, 0x60, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x61, 0x66, 0x74,
	0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d,
	0x68, 0x6f, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0xec, 0x01, 0x0a, 0x0a, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x9c, 0x01, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x85, 0x01, 0x82, 0x41, 0x81, 0x01, 0x2f, 0x61,
	0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78,
	0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x7c, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73,
	0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3f, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68,
	0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69,
	0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x07,
	0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x1a, 0xbf, 0x01, 0x0a, 0x0f, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x68, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f, 0x61, 0x66, 0x74,
	0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x64, 0x7c, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f,
	0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f,
	0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x69,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f,
	0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x6e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x9e, 0x01, 0x0a, 0x0a, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x5c, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x61, 0x66, 0x74,
	0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74,
	0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x7c, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x73,
	0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x32, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68,
	0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x69, 0x62, 0x69,
	0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f,
	0x70, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x1a, 0xa1, 0x0f, 0x0a, 0x15, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x87, 0x01, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0xa2, 0xfa, 0xd7, 0x43, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x61, 0x66, 0x74, 0x73,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x0d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x72,
	0x0a, 0x07, 0x69, 0x70, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0xce, 0x81, 0xa5, 0xa7, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x61, 0x66,
	0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x69, 0x70, 0x2d, 0x64, 0x73, 0x63, 0x70, 0x52, 0x06, 0x69, 0x70, 0x44, 0x73,
	0x63, 0x70, 0x12, 0x79, 0x0a, 0x09, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0xa0, 0xaa, 0xcd, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x42, 0x82, 0x41, 0x3f, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x2d, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x52, 0x08, 0x69, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0xea, 0x01,
	0x0a, 0x30, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x73, 0x69, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0xdc, 0xfd, 0xa0, 0x4b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x72,
	0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x2e, 0x69, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x69, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x77, 0x0a, 0x12, 0x69, 0x70,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0xc9, 0xad, 0xd9, 0x76, 0x20, 0x01, 0x28, 0x04, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61,
	0x66, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x69, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48,
	0x00, 0x52, 0x10, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x7d, 0x0a, 0x0b, 0x6c, 0x34, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0xde, 0xba, 0xab, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x34, 0x2d, 0x64,
	0x73, 0x74, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x6c, 0x34, 0x44, 0x73, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x7d, 0x0a, 0x0b, 0x6c, 0x34, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0xcf, 0x9c, 0xba, 0xef, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x34, 0x2d, 0x73, 0x72,
	0x63, 0x2d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x6c, 0x34, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x80, 0x01, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x86, 0xb9, 0xad, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x61, 0x63,
	0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0xdb, 0x01, 0x0a, 0x2b, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x70,
	0x6c, 0x73, 0x74, 0x79, 0x70, 0x65, 0x73, 0x6d, 0x70, 0x6c, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x65, 0x6e, 0x75, 0x6d, 0x18, 0x8a, 0xc1, 0xda, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x75, 0x6d,
	0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2d,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x48, 0x01, 0x52, 0x29, 0x6d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x70, 0x6c, 0x73,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x6d, 0x70, 0x6c, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x6e,
	0x75, 0x6d, 0x12, 0x75, 0x0a, 0x11, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xce, 0xc5, 0x85, 0x92, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x43, 0x82, 0x41, 0x40, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x70, 0x6c, 0x73,
	0x2d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x48, 0x01, 0x52, 0x0f, 0x6d, 0x70, 0x6c, 0x73, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x72, 0x0a, 0x07, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x74, 0x63, 0x18, 0x92, 0xf7, 0xac, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x70,
	0x6c, 0x73, 0x2d, 0x74, 0x63, 0x52, 0x06, 0x6d, 0x70, 0x6c, 0x73, 0x54, 0x63, 0x12, 0x85, 0x01,
	0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0xef, 0x8e, 0xe5, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x47,
	0x82, 0x41, 0x44, 0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f,
	0x70, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xb9, 0x01, 0x0a, 0x1f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68,
	0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0xea, 0xf2, 0xa5, 0xde, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x58, 0x82, 0x41, 0x55, 0x2f,
	0x61, 0x66, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x2d, 0x68, 0x6f, 0x70, 0x2d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x1b, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x42, 0x0c, 0x0a, 0x0a, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0x86,
	0x02, 0x0a, 0x18, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x8a, 0x01, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x74, 0x82, 0x41, 0x71,
	0x2f, 0x61, 0x66, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x7c, 0x2f, 0x61, 0x66, 0x74,
	0x73, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x5d, 0x0a, 0x17, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x72, 0x69, 0x62,
	0x69, 0x5f, 0x61, 0x66, 0x74, 0x2e, 0x41, 0x66, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x15, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x67, 0x72, 0x69, 0x62, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x61, 0x66, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_v1_proto_gribi_aft_gribi_aft_proto_rawDescOnce sync.Once
	file_v1_proto_gribi_aft_gribi_aft_proto_rawDescData = file_v1_proto_gribi_aft_gribi_aft_proto_rawDesc
)

func file_v1_proto_gribi_aft_gribi_aft_proto_rawDescGZIP() []byte {
	file_v1_proto_gribi_aft_gribi_aft_proto_rawDescOnce.Do(func() {
		file_v1_proto_gribi_aft_gribi_aft_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_proto_gribi_aft_gribi_aft_proto_rawDescData)
	})
	return file_v1_proto_gribi_aft_gribi_aft_proto_rawDescData
}

var file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_v1_proto_gribi_aft_gribi_aft_proto_goTypes = []interface{}{
	(*Device)(nil),                                       // 0: gribi_aft.Device
	(*Afts)(nil),                                         // 1: gribi_aft.Afts
	(*Afts_Ipv4Entry)(nil),                               // 2: gribi_aft.Afts.Ipv4Entry
	(*Afts_Ipv4EntryKey)(nil),                            // 3: gribi_aft.Afts.Ipv4EntryKey
	(*Afts_Ipv6Entry)(nil),                               // 4: gribi_aft.Afts.Ipv6Entry
	(*Afts_Ipv6EntryKey)(nil),                            // 5: gribi_aft.Afts.Ipv6EntryKey
	(*Afts_LabelEntry)(nil),                              // 6: gribi_aft.Afts.LabelEntry
	(*Afts_LabelEntryKey)(nil),                           // 7: gribi_aft.Afts.LabelEntryKey
	(*Afts_MacEntry)(nil),                                // 8: gribi_aft.Afts.MacEntry
	(*Afts_MacEntryKey)(nil),                             // 9: gribi_aft.Afts.MacEntryKey
	(*Afts_NextHop)(nil),                                 // 10: gribi_aft.Afts.NextHop
	(*Afts_NextHopGroup)(nil),                            // 11: gribi_aft.Afts.NextHopGroup
	(*Afts_NextHopGroupKey)(nil),                         // 12: gribi_aft.Afts.NextHopGroupKey
	(*Afts_NextHopKey)(nil),                              // 13: gribi_aft.Afts.NextHopKey
	(*Afts_PolicyForwardingEntry)(nil),                   // 14: gribi_aft.Afts.PolicyForwardingEntry
	(*Afts_PolicyForwardingEntryKey)(nil),                // 15: gribi_aft.Afts.PolicyForwardingEntryKey
	(*Afts_LabelEntry_PoppedMplsLabelStackUnion)(nil),    // 16: gribi_aft.Afts.LabelEntry.PoppedMplsLabelStackUnion
	(*Afts_NextHop_InterfaceRef)(nil),                    // 17: gribi_aft.Afts.NextHop.InterfaceRef
	(*Afts_NextHop_IpInIp)(nil),                          // 18: gribi_aft.Afts.NextHop.IpInIp
	(*Afts_NextHop_PushedMplsLabelStackUnion)(nil),       // 19: gribi_aft.Afts.NextHop.PushedMplsLabelStackUnion
	(*Afts_NextHopGroup_NextHop)(nil),                    // 20: gribi_aft.Afts.NextHopGroup.NextHop
	(*Afts_NextHopGroup_NextHopKey)(nil),                 // 21: gribi_aft.Afts.NextHopGroup.NextHopKey
	(enums.OpenconfigAftTypesEncapsulationHeaderType)(0), // 22: gribi_aft.enums.OpenconfigAftTypesEncapsulationHeaderType
	(*ywrapper.BytesValue)(nil),                          // 23: ywrapper.BytesValue
	(*ywrapper.UintValue)(nil),                           // 24: ywrapper.UintValue
	(*ywrapper.StringValue)(nil),                         // 25: ywrapper.StringValue
	(enums.OpenconfigMplsTypesMplsLabelEnum)(0),          // 26: gribi_aft.enums.OpenconfigMplsTypesMplsLabelEnum
	(*ywrapper.BoolValue)(nil),                           // 27: ywrapper.BoolValue
	(enums.OpenconfigPacketMatchTypesIPPROTOCOL)(0),      // 28: gribi_aft.enums.OpenconfigPacketMatchTypesIPPROTOCOL
}
var file_v1_proto_gribi_aft_gribi_aft_proto_depIdxs = []int32{
	1,  // 0: gribi_aft.Device.afts:type_name -> gribi_aft.Afts
	3,  // 1: gribi_aft.Afts.ipv4_entry:type_name -> gribi_aft.Afts.Ipv4EntryKey
	5,  // 2: gribi_aft.Afts.ipv6_entry:type_name -> gribi_aft.Afts.Ipv6EntryKey
	7,  // 3: gribi_aft.Afts.label_entry:type_name -> gribi_aft.Afts.LabelEntryKey
	9,  // 4: gribi_aft.Afts.mac_entry:type_name -> gribi_aft.Afts.MacEntryKey
	13, // 5: gribi_aft.Afts.next_hop:type_name -> gribi_aft.Afts.NextHopKey
	12, // 6: gribi_aft.Afts.next_hop_group:type_name -> gribi_aft.Afts.NextHopGroupKey
	15, // 7: gribi_aft.Afts.policy_forwarding_entry:type_name -> gribi_aft.Afts.PolicyForwardingEntryKey
	22, // 8: gribi_aft.Afts.Ipv4Entry.decapsulate_header:type_name -> gribi_aft.enums.OpenconfigAftTypesEncapsulationHeaderType
	23, // 9: gribi_aft.Afts.Ipv4Entry.entry_metadata:type_name -> ywrapper.BytesValue
	24, // 10: gribi_aft.Afts.Ipv4Entry.next_hop_group:type_name -> ywrapper.UintValue
	25, // 11: gribi_aft.Afts.Ipv4Entry.next_hop_group_network_instance:type_name -> ywrapper.StringValue
	2,  // 12: gribi_aft.Afts.Ipv4EntryKey.ipv4_entry:type_name -> gribi_aft.Afts.Ipv4Entry
	22, // 13: gribi_aft.Afts.Ipv6Entry.decapsulate_header:type_name -> gribi_aft.enums.OpenconfigAftTypesEncapsulationHeaderType
	23, // 14: gribi_aft.Afts.Ipv6Entry.entry_metadata:type_name -> ywrapper.BytesValue
	24, // 15: gribi_aft.Afts.Ipv6Entry.next_hop_group:type_name -> ywrapper.UintValue
	25, // 16: gribi_aft.Afts.Ipv6Entry.next_hop_group_network_instance:type_name -> ywrapper.StringValue
	4,  // 17: gribi_aft.Afts.Ipv6EntryKey.ipv6_entry:type_name -> gribi_aft.Afts.Ipv6Entry
	23, // 18: gribi_aft.Afts.LabelEntry.entry_metadata:type_name -> ywrapper.BytesValue
	24, // 19: gribi_aft.Afts.LabelEntry.next_hop_group:type_name -> ywrapper.UintValue
	25, // 20: gribi_aft.Afts.LabelEntry.next_hop_group_network_instance:type_name -> ywrapper.StringValue
	16, // 21: gribi_aft.Afts.LabelEntry.popped_mpls_label_stack:type_name -> gribi_aft.Afts.LabelEntry.PoppedMplsLabelStackUnion
	26, // 22: gribi_aft.Afts.LabelEntryKey.label_openconfigmplstypesmplslabelenum:type_name -> gribi_aft.enums.OpenconfigMplsTypesMplsLabelEnum
	6,  // 23: gribi_aft.Afts.LabelEntryKey.label_entry:type_name -> gribi_aft.Afts.LabelEntry
	23, // 24: gribi_aft.Afts.MacEntry.entry_metadata:type_name -> ywrapper.BytesValue
	24, // 25: gribi_aft.Afts.MacEntry.next_hop_group:type_name -> ywrapper.UintValue
	25, // 26: gribi_aft.Afts.MacEntry.next_hop_group_network_instance:type_name -> ywrapper.StringValue
	8,  // 27: gribi_aft.Afts.MacEntryKey.mac_entry:type_name -> gribi_aft.Afts.MacEntry
	22, // 28: gribi_aft.Afts.NextHop.decapsulate_header:type_name -> gribi_aft.enums.OpenconfigAftTypesEncapsulationHeaderType
	22, // 29: gribi_aft.Afts.NextHop.encapsulate_header:type_name -> gribi_aft.enums.OpenconfigAftTypesEncapsulationHeaderType
	17, // 30: gribi_aft.Afts.NextHop.interface_ref:type_name -> gribi_aft.Afts.NextHop.InterfaceRef
	25, // 31: gribi_aft.Afts.NextHop.ip_address:type_name -> ywrapper.StringValue
	18, // 32: gribi_aft.Afts.NextHop.ip_in_ip:type_name -> gribi_aft.Afts.NextHop.IpInIp
	25, // 33: gribi_aft.Afts.NextHop.mac_address:type_name -> ywrapper.StringValue
	25, // 34: gribi_aft.Afts.NextHop.network_instance:type_name -> ywrapper.StringValue
	27, // 35: gribi_aft.Afts.NextHop.pop_top_label:type_name -> ywrapper.BoolValue
	19, // 36: gribi_aft.Afts.NextHop.pushed_mpls_label_stack:type_name -> gribi_aft.Afts.NextHop.PushedMplsLabelStackUnion
	25, // 37: gribi_aft.Afts.NextHop.tunnel_src_ip_address:type_name -> ywrapper.StringValue
	24, // 38: gribi_aft.Afts.NextHop.vni_label:type_name -> ywrapper.UintValue
	24, // 39: gribi_aft.Afts.NextHopGroup.backup_next_hop_group:type_name -> ywrapper.UintValue
	24, // 40: gribi_aft.Afts.NextHopGroup.color:type_name -> ywrapper.UintValue
	21, // 41: gribi_aft.Afts.NextHopGroup.next_hop:type_name -> gribi_aft.Afts.NextHopGroup.NextHopKey
	11, // 42: gribi_aft.Afts.NextHopGroupKey.next_hop_group:type_name -> gribi_aft.Afts.NextHopGroup
	10, // 43: gribi_aft.Afts.NextHopKey.next_hop:type_name -> gribi_aft.Afts.NextHop
	23, // 44: gribi_aft.Afts.PolicyForwardingEntry.entry_metadata:type_name -> ywrapper.BytesValue
	24, // 45: gribi_aft.Afts.PolicyForwardingEntry.ip_dscp:type_name -> ywrapper.UintValue
	25, // 46: gribi_aft.Afts.PolicyForwardingEntry.ip_prefix:type_name -> ywrapper.StringValue
	28, // 47: gribi_aft.Afts.PolicyForwardingEntry.ip_protocol_openconfigpacketmatchtypesipprotocol:type_name -> gribi_aft.enums.OpenconfigPacketMatchTypesIPPROTOCOL
	24, // 48: gribi_aft.Afts.PolicyForwardingEntry.l4_dst_port:type_name -> ywrapper.UintValue
	24, // 49: gribi_aft.Afts.PolicyForwardingEntry.l4_src_port:type_name -> ywrapper.UintValue
	25, // 50: gribi_aft.Afts.PolicyForwardingEntry.mac_address:type_name -> ywrapper.StringValue
	26, // 51: gribi_aft.Afts.PolicyForwardingEntry.mpls_label_openconfigmplstypesmplslabelenum:type_name -> gribi_aft.enums.OpenconfigMplsTypesMplsLabelEnum
	24, // 52: gribi_aft.Afts.PolicyForwardingEntry.mpls_tc:type_name -> ywrapper.UintValue
	24, // 53: gribi_aft.Afts.PolicyForwardingEntry.next_hop_group:type_name -> ywrapper.UintValue
	25, // 54: gribi_aft.Afts.PolicyForwardingEntry.next_hop_group_network_instance:type_name -> ywrapper.StringValue
	14, // 55: gribi_aft.Afts.PolicyForwardingEntryKey.policy_forwarding_entry:type_name -> gribi_aft.Afts.PolicyForwardingEntry
	26, // 56: gribi_aft.Afts.LabelEntry.PoppedMplsLabelStackUnion.popped_mpls_label_stack_openconfigmplstypesmplslabelenum:type_name -> gribi_aft.enums.OpenconfigMplsTypesMplsLabelEnum
	25, // 57: gribi_aft.Afts.NextHop.InterfaceRef.interface:type_name -> ywrapper.StringValue
	24, // 58: gribi_aft.Afts.NextHop.InterfaceRef.subinterface:type_name -> ywrapper.UintValue
	25, // 59: gribi_aft.Afts.NextHop.IpInIp.dst_ip:type_name -> ywrapper.StringValue
	25, // 60: gribi_aft.Afts.NextHop.IpInIp.src_ip:type_name -> ywrapper.StringValue
	26, // 61: gribi_aft.Afts.NextHop.PushedMplsLabelStackUnion.pushed_mpls_label_stack_openconfigmplstypesmplslabelenum:type_name -> gribi_aft.enums.OpenconfigMplsTypesMplsLabelEnum
	24, // 62: gribi_aft.Afts.NextHopGroup.NextHop.weight:type_name -> ywrapper.UintValue
	20, // 63: gribi_aft.Afts.NextHopGroup.NextHopKey.next_hop:type_name -> gribi_aft.Afts.NextHopGroup.NextHop
	64, // [64:64] is the sub-list for method output_type
	64, // [64:64] is the sub-list for method input_type
	64, // [64:64] is the sub-list for extension type_name
	64, // [64:64] is the sub-list for extension extendee
	0,  // [0:64] is the sub-list for field type_name
}

func init() { file_v1_proto_gribi_aft_gribi_aft_proto_init() }
func file_v1_proto_gribi_aft_gribi_aft_proto_init() {
	if File_v1_proto_gribi_aft_gribi_aft_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Afts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Afts_Ipv4Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Afts_Ipv4EntryKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Afts_Ipv6Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Afts_Ipv6EntryKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Afts_LabelEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Afts_LabelEntryKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Afts_MacEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Afts_MacEntryKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Afts_NextHop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Afts_NextHopGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Afts_NextHopGroupKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Afts_NextHopKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Afts_PolicyForwardingEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Afts_PolicyForwardingEntryKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Afts_LabelEntry_PoppedMplsLabelStackUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Afts_NextHop_InterfaceRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Afts_NextHop_IpInIp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Afts_NextHop_PushedMplsLabelStackUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Afts_NextHopGroup_NextHop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Afts_NextHopGroup_NextHopKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Afts_LabelEntryKey_LabelOpenconfigmplstypesmplslabelenum)(nil),
		(*Afts_LabelEntryKey_LabelUint64)(nil),
	}
	file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*Afts_PolicyForwardingEntry_IpProtocolOpenconfigpacketmatchtypesipprotocol)(nil),
		(*Afts_PolicyForwardingEntry_IpProtocolUint64)(nil),
		(*Afts_PolicyForwardingEntry_MplsLabelOpenconfigmplstypesmplslabelenum)(nil),
		(*Afts_PolicyForwardingEntry_MplsLabelUint64)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_proto_gribi_aft_gribi_aft_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_proto_gribi_aft_gribi_aft_proto_goTypes,
		DependencyIndexes: file_v1_proto_gribi_aft_gribi_aft_proto_depIdxs,
		MessageInfos:      file_v1_proto_gribi_aft_gribi_aft_proto_msgTypes,
	}.Build()
	File_v1_proto_gribi_aft_gribi_aft_proto = out.File
	file_v1_proto_gribi_aft_gribi_aft_proto_rawDesc = nil
	file_v1_proto_gribi_aft_gribi_aft_proto_goTypes = nil
	file_v1_proto_gribi_aft_gribi_aft_proto_depIdxs = nil
}
