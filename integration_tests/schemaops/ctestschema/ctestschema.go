/*
Package ctestschema is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /usr/local/google/home/wenbli/gocode/src/github.com/openconfig/ygot/genutil/names.go
using the following YANG input files:
  - ../yang/ctestschema.yang

Imported modules were sourced from:
  - ...
*/
package ctestschema

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &Device{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	ΛMetadata      []ygot.Annotation         `path:"@" ygotAnnotation:"true"`
	OrderedList    map[string]*OrderedList   `path:"ordered-lists/ordered-list" module:"ctestschema/ctestschema"`
	ΛOrderedList   []ygot.Annotation         `path:"ordered-lists/@ordered-list" ygotAnnotation:"true"`
	UnorderedList  map[string]*UnorderedList `path:"unordered-lists/unordered-list" module:"ctestschema/ctestschema"`
	ΛUnorderedList []ygot.Annotation         `path:"unordered-lists/@unordered-list" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// NewOrderedList creates a new entry in the OrderedList list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewOrderedList(Key string) (*OrderedList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OrderedList == nil {
		t.OrderedList = make(map[string]*OrderedList)
	}

	key := Key

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.OrderedList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list OrderedList", key)
	}

	t.OrderedList[key] = &OrderedList{
		Key: &Key,
	}

	return t.OrderedList[key], nil
}

// RenameOrderedList renames an entry in the list OrderedList within
// the Device struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Device) RenameOrderedList(oldK, newK string) error {
	if _, ok := t.OrderedList[newK]; ok {
		return fmt.Errorf("key %v already exists in OrderedList", newK)
	}

	e, ok := t.OrderedList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in OrderedList", oldK)
	}
	e.Key = &newK

	t.OrderedList[newK] = e
	delete(t.OrderedList, oldK)
	return nil
}

// GetOrCreateOrderedList retrieves the value with the specified keys from
// the receiver Device. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Device) GetOrCreateOrderedList(Key string) *OrderedList {

	key := Key

	if v, ok := t.OrderedList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOrderedList(Key)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOrderedList got unexpected error: %v", err))
	}
	return v
}

// GetOrderedList retrieves the value with the specified key from
// the OrderedList map field of Device. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Device) GetOrderedList(Key string) *OrderedList {

	if t == nil {
		return nil
	}

	key := Key

	if lm, ok := t.OrderedList[key]; ok {
		return lm
	}
	return nil
}

// AppendOrderedList appends the supplied OrderedList struct to the
// list OrderedList of Device. If the key value(s) specified in
// the supplied OrderedList already exist in the list, an error is
// returned.
func (t *Device) AppendOrderedList(v *OrderedList) error {
	if v.Key == nil {
		return fmt.Errorf("invalid nil key received for Key")
	}

	key := *v.Key

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OrderedList == nil {
		t.OrderedList = make(map[string]*OrderedList)
	}

	if _, ok := t.OrderedList[key]; ok {
		return fmt.Errorf("duplicate key for list OrderedList %v", key)
	}

	t.OrderedList[key] = v
	return nil
}

// NewUnorderedList creates a new entry in the UnorderedList list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewUnorderedList(Key string) (*UnorderedList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnorderedList == nil {
		t.UnorderedList = make(map[string]*UnorderedList)
	}

	key := Key

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnorderedList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnorderedList", key)
	}

	t.UnorderedList[key] = &UnorderedList{
		Key: &Key,
	}

	return t.UnorderedList[key], nil
}

// RenameUnorderedList renames an entry in the list UnorderedList within
// the Device struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Device) RenameUnorderedList(oldK, newK string) error {
	if _, ok := t.UnorderedList[newK]; ok {
		return fmt.Errorf("key %v already exists in UnorderedList", newK)
	}

	e, ok := t.UnorderedList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnorderedList", oldK)
	}
	e.Key = &newK

	t.UnorderedList[newK] = e
	delete(t.UnorderedList, oldK)
	return nil
}

// GetOrCreateUnorderedList retrieves the value with the specified keys from
// the receiver Device. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Device) GetOrCreateUnorderedList(Key string) *UnorderedList {

	key := Key

	if v, ok := t.UnorderedList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnorderedList(Key)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnorderedList got unexpected error: %v", err))
	}
	return v
}

// GetUnorderedList retrieves the value with the specified key from
// the UnorderedList map field of Device. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Device) GetUnorderedList(Key string) *UnorderedList {

	if t == nil {
		return nil
	}

	key := Key

	if lm, ok := t.UnorderedList[key]; ok {
		return lm
	}
	return nil
}

// AppendUnorderedList appends the supplied UnorderedList struct to the
// list UnorderedList of Device. If the key value(s) specified in
// the supplied UnorderedList already exist in the list, an error is
// returned.
func (t *Device) AppendUnorderedList(v *UnorderedList) error {
	if v.Key == nil {
		return fmt.Errorf("invalid nil key received for Key")
	}

	key := *v.Key

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnorderedList == nil {
		t.UnorderedList = make(map[string]*UnorderedList)
	}

	if _, ok := t.UnorderedList[key]; ok {
		return fmt.Errorf("duplicate key for list UnorderedList %v", key)
	}

	t.UnorderedList[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Device.
func (*Device) ΛBelongingModule() string {
	return ""
}

// OrderedList represents the /ctestschema/ordered-lists/ordered-list YANG schema element.
type OrderedList struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Key       *string           `path:"config/key|key" module:"ctestschema/ctestschema|ctestschema"`
	ΛKey      []ygot.Annotation `path:"config/@key|@key" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OrderedList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OrderedList) IsYANGGoStruct() {}

// GetKey retrieves the value of the leaf Key from the OrderedList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key is set, it can
// safely use t.GetKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key == nil' before retrieving the leaf's value.
func (t *OrderedList) GetKey() string {
	if t == nil || t.Key == nil {
		return ""
	}
	return *t.Key
}

// ΛListKeyMap returns the keys of the OrderedList struct, which is a YANG list entry.
func (t *OrderedList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Key == nil {
		return nil, fmt.Errorf("nil value for key Key")
	}

	return map[string]interface{}{
		"key": *t.Key,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OrderedList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OrderedList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OrderedList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OrderedList) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OrderedList.
func (*OrderedList) ΛBelongingModule() string {
	return "ctestschema"
}

// UnorderedList represents the /ctestschema/unordered-lists/unordered-list YANG schema element.
type UnorderedList struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Key       *string           `path:"config/key|key" module:"ctestschema/ctestschema|ctestschema"`
	ΛKey      []ygot.Annotation `path:"config/@key|@key" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that UnorderedList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*UnorderedList) IsYANGGoStruct() {}

// GetKey retrieves the value of the leaf Key from the UnorderedList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key is set, it can
// safely use t.GetKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key == nil' before retrieving the leaf's value.
func (t *UnorderedList) GetKey() string {
	if t == nil || t.Key == nil {
		return ""
	}
	return *t.Key
}

// ΛListKeyMap returns the keys of the UnorderedList struct, which is a YANG list entry.
func (t *UnorderedList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Key == nil {
		return nil, fmt.Errorf("nil value for key Key")
	}

	return map[string]interface{}{
		"key": *t.Key,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *UnorderedList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["UnorderedList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *UnorderedList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *UnorderedList) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of UnorderedList.
func (*UnorderedList) ΛBelongingModule() string {
	return "ctestschema"
}

var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0xdf, 0x6f, 0xd3, 0x30,
		0x10, 0x7e, 0xef, 0x5f, 0x11, 0xf9, 0x79, 0x5d, 0x5b, 0xe8, 0xd6, 0x91, 0xb7, 0xb2, 0x81, 0x90,
		0xc6, 0x60, 0x62, 0xf0, 0x84, 0x78, 0xc8, 0xd2, 0x6b, 0x67, 0xad, 0x75, 0x2a, 0xdb, 0x81, 0x56,
		0xa8, 0xff, 0x3b, 0xca, 0x4f, 0xe2, 0x34, 0x3f, 0xce, 0x69, 0x37, 0x0d, 0x74, 0x8f, 0xb5, 0x2f,
		0x39, 0xdf, 0x7d, 0x9f, 0x3f, 0x5f, 0x7c, 0xfd, 0xdd, 0x73, 0x1c, 0xc7, 0x61, 0x9f, 0xbc, 0x15,
		0x30, 0xd7, 0x61, 0x33, 0xf8, 0xc9, 0x7d, 0x60, 0x27, 0xc9, 0xe8, 0x35, 0x17, 0x33, 0xe6, 0x3a,
		0xa3, 0xf4, 0xe7, 0x65, 0x20, 0xe6, 0x7c, 0xc1, 0x5c, 0x67, 0x98, 0x0e, 0x5c, 0x71, 0xc9, 0x5c,
		0x27, 0x79, 0x45, 0x3c, 0x10, 0xc8, 0x19, 0x48, 0x98, 0xf5, 0x97, 0x5c, 0x69, 0x65, 0x4c, 0x19,
		0x5e, 0x4c, 0xb3, 0x13, 0xd3, 0xc8, 0x74, 0x9a, 0x0f, 0x97, 0x9d, 0xe7, 0x13, 0xb7, 0x12, 0xe6,
		0x7c, 0xb3, 0xe7, 0xcc, 0x70, 0xe8, 0xef, 0xb9, 0x89, 0xa7, 0xef, 0x82, 0x50, 0xfa, 0x50, 0xf9,
		0x68, 0xb2, 0x14, 0xd8, 0xfe, 0x0a, 0x64, 0xb4, 0x1a, 0xb6, 0x4e, 0xbc, 0x9c, 0x54, 0x1b, 0x7e,
		0xf0, 0xd4, 0x54, 0x2e, 0xc2, 0x15, 0x08, 0xcd, 0x5c, 0x47, 0xcb, 0x10, 0x6a, 0x0c, 0x0b, 0x56,
		0xf1, 0xa2, 0xf6, 0xac, 0x76, 0xc6, 0xc8, 0xae, 0x14, 0x6b, 0x39, 0xe1, 0x95, 0x89, 0xaf, 0x8f,
		0xa7, 0x2a, 0xff, 0x75, 0x21, 0x55, 0xc3, 0xd0, 0x0a, 0x07, 0x06, 0x16, 0x24, 0x3c, 0x58, 0x98,
		0xac, 0xe1, 0xb2, 0x86, 0x0d, 0x0f, 0x5f, 0x35, 0x8c, 0x35, 0x70, 0xb6, 0xc2, 0x9a, 0x1b, 0xf8,
		0x59, 0xb6, 0x5b, 0x32, 0x90, 0x27, 0x34, 0xb1, 0x6f, 0x89, 0xa6, 0x19, 0x62, 0x34, 0xd4, 0x36,
		0x90, 0x5b, 0x42, 0x6f, 0x4b, 0x81, 0xce, 0x54, 0xe8, 0x4c, 0x09, 0x7b, 0x6a, 0x34, 0x53, 0xa4,
		0x85, 0x2a, 0x68, 0xca, 0xe4, 0x86, 0x8f, 0xb0, 0xc5, 0xa7, 0x2d, 0x43, 0x25, 0x7a, 0x08, 0x19,
		0x77, 0x4a, 0xa2, 0x21, 0xd2, 0x1c, 0x4b, 0xa6, 0x2e, 0xa4, 0xea, 0x48, 0xae, 0xae, 0x24, 0x3b,
		0x98, 0x6c, 0x07, 0x93, 0xae, 0x3b, 0xf9, 0x70, 0x24, 0x44, 0x92, 0x31, 0x5f, 0xc6, 0xd7, 0xed,
		0x1a, 0xba, 0x21, 0xa5, 0xb4, 0xe4, 0x62, 0x61, 0x03, 0x56, 0x26, 0x5e, 0x17, 0x47, 0x8d, 0x60,
		0x2a, 0x44, 0xa0, 0x3d, 0xcd, 0x03, 0x61, 0x17, 0xc7, 0x76, 0x11, 0xe8, 0x7e, 0xe0, 0xf7, 0xfd,
		0x60, 0xb5, 0x96, 0xa0, 0x54, 0x74, 0xb8, 0x82, 0x37, 0x8f, 0x5e, 0x82, 0x4c, 0xf1, 0x13, 0xeb,
		0x85, 0x65, 0x60, 0x4c, 0xf9, 0x0f, 0xb0, 0xf2, 0xd6, 0x9e, 0x7e, 0x88, 0xe0, 0x19, 0xf8, 0x1a,
		0x94, 0x4e, 0xc6, 0x06, 0x46, 0xf5, 0x66, 0xfc, 0x1a, 0xa4, 0xe7, 0x4e, 0xaf, 0x5b, 0x1c, 0x0d,
		0x31, 0xa0, 0x64, 0xcc, 0x42, 0xbe, 0x90, 0xb2, 0x45, 0x67, 0xdf, 0x4b, 0x3c, 0xfb, 0xd0, 0x32,
		0x93, 0x67, 0x3a, 0xda, 0x8b, 0x12, 0xe6, 0x98, 0x6c, 0x67, 0xba, 0x32, 0x41, 0xd8, 0xde, 0xa6,
		0xdb, 0xe3, 0xf4, 0x34, 0x65, 0xfe, 0x20, 0x62, 0xde, 0x13, 0xb0, 0x5f, 0x69, 0x4f, 0x03, 0x9e,
		0xff, 0x89, 0xf9, 0x91, 0xab, 0xbf, 0x57, 0xb4, 0x03, 0xa8, 0xfa, 0xa3, 0xea, 0x8f, 0xaa, 0xbf,
		0x7f, 0xb0, 0xfa, 0xfb, 0x2f, 0x8a, 0xab, 0x44, 0xd5, 0xbb, 0x9e, 0x2e, 0x56, 0x17, 0x12, 0xd7,
		0xb1, 0x6c, 0x34, 0x08, 0x01, 0xfb, 0xc8, 0x95, 0x9e, 0x6a, 0xdd, 0x72, 0x6f, 0x71, 0xc3, 0xc5,
		0xbb, 0x25, 0x44, 0xdc, 0x54, 0xcd, 0x9b, 0x9e, 0xdd, 0x78, 0x9b, 0x82, 0xe5, 0xe8, 0x62, 0x3c,
		0x3e, 0x9f, 0x8c, 0xc7, 0xc3, 0xc9, 0xeb, 0xc9, 0xf0, 0xcd, 0xd9, 0xd9, 0xe8, 0x7c, 0x74, 0xd6,
		0xf0, 0xf0, 0xe7, 0x24, 0x4d, 0x6f, 0x2d, 0x4a, 0xc4, 0x50, 0x81, 0x6c, 0x3b, 0x21, 0x2d, 0x14,
		0xa1, 0xa8, 0x02, 0x19, 0x68, 0xf7, 0x18, 0x15, 0xed, 0xb4, 0xfb, 0x8d, 0x1d, 0x1f, 0x47, 0xf2,
		0x2c, 0xac, 0x80, 0x8d, 0x96, 0x5e, 0x3f, 0x14, 0x4a, 0x7b, 0xf7, 0xcb, 0xe6, 0xbc, 0x14, 0x93,
		0xe0, 0x3a, 0xdf, 0x1b, 0x97, 0x67, 0x51, 0x2f, 0x20, 0x50, 0x3b, 0xb4, 0x60, 0xb0, 0x42, 0xef,
		0x78, 0x45, 0x43, 0x3b, 0x8a, 0x08, 0x99, 0xaa, 0x9d, 0xfd, 0x61, 0x85, 0x33, 0x52, 0xce, 0xba,
		0xc9, 0x18, 0x6b, 0x2c, 0x73, 0x65, 0xe8, 0x6b, 0x91, 0x82, 0x9d, 0xee, 0xea, 0x48, 0x69, 0xaa,
		0x33, 0xb3, 0xb3, 0xbc, 0x3d, 0x6f, 0x89, 0x0b, 0x1d, 0x8f, 0xb9, 0x9a, 0xbf, 0x3e, 0x0b, 0xfe,
		0x58, 0x28, 0x90, 0xbd, 0x90, 0xb2, 0x21, 0x75, 0x43, 0x0e, 0xef, 0x86, 0x98, 0x39, 0x6d, 0xef,
		0x87, 0x94, 0xec, 0xa9, 0x23, 0x42, 0x1d, 0x11, 0xba, 0x15, 0xa2, 0x6f, 0x62, 0xfa, 0x26, 0xa6,
		0x6f, 0x62, 0xea, 0x88, 0x50, 0x47, 0xa4, 0xb5, 0x3a, 0x2c, 0xd5, 0x70, 0xa5, 0xdf, 0xd4, 0x15,
		0xa1, 0xf3, 0x8f, 0xba, 0x22, 0xd4, 0x15, 0xa1, 0x1d, 0x40, 0x15, 0x20, 0x55, 0x80, 0x54, 0x01,
		0x52, 0x57, 0xe4, 0xd8, 0x05, 0x16, 0x75, 0x46, 0x30, 0x9d, 0x11, 0x11, 0x2e, 0x97, 0xcf, 0x7d,
		0x0f, 0xdc, 0x0c, 0x1c, 0xfe, 0x2e, 0xf8, 0x5b, 0xf6, 0xdc, 0x8b, 0xb8, 0x0d, 0x2e, 0xdf, 0xd9,
		0xd6, 0xdd, 0x07, 0xf7, 0x0a, 0x7e, 0xeb, 0xfc, 0x31, 0xae, 0x2e, 0xf3, 0x4f, 0xa4, 0xbb, 0xf8,
		0xfd, 0x7b, 0x7a, 0xc7, 0xb8, 0x7a, 0xef, 0x3d, 0xc2, 0x97, 0x20, 0xd8, 0xd7, 0xc2, 0xf2, 0x3a,
		0x59, 0x71, 0xca, 0xc8, 0xe1, 0x55, 0xf2, 0xdf, 0xfe, 0x64, 0x51, 0xbd, 0xdd, 0x1f, 0x00, 0x00,
		0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa1, 0xfe, 0x4e, 0x45, 0xfa, 0x2f, 0x00, 0x00,
	}
)

// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
func initΛEnumTypes() {
	ΛEnumTypes = map[string][]reflect.Type{}
}
