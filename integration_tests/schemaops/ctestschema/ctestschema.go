/*
Package ctestschema is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /usr/local/google/home/wenbli/gocode/src/github.com/openconfig/ygot/genutil/names.go
using the following YANG input files:
  - ../yang/ctestschema.yang

Imported modules were sourced from:
  - ...
*/
package ctestschema

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &Device{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	ΛMetadata              []ygot.Annotation                 `path:"@" ygotAnnotation:"true"`
	OrderedList            *OrderedList_OrderedMap           `path:"ordered-lists/ordered-list" module:"ctestschema/ctestschema"`
	ΛOrderedList           []ygot.Annotation                 `path:"ordered-lists/@ordered-list" ygotAnnotation:"true"`
	OrderedMultikeyedList  *OrderedMultikeyedList_OrderedMap `path:"ordered-multikeyed-lists/ordered-multikeyed-list" module:"ctestschema/ctestschema"`
	ΛOrderedMultikeyedList []ygot.Annotation                 `path:"ordered-multikeyed-lists/@ordered-multikeyed-list" ygotAnnotation:"true"`
	UnorderedList          map[string]*UnorderedList         `path:"unordered-lists/unordered-list" module:"ctestschema/ctestschema"`
	ΛUnorderedList         []ygot.Annotation                 `path:"unordered-lists/@unordered-list" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// OrderedMultikeyedList_Key represents the key for list OrderedMultikeyedList of element /device.
type OrderedMultikeyedList_Key struct {
	Key1 string `path:"key1"`
	Key2 uint64 `path:"key2"`
}

// IsYANGGoKeyStruct ensures that OrderedMultikeyedList_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (OrderedMultikeyedList_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the OrderedMultikeyedList_Key key struct.
func (t OrderedMultikeyedList_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"key1": t.Key1,
		"key2": t.Key2,
	}, nil
}

// NewUnorderedList creates a new entry in the UnorderedList list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewUnorderedList(Key string) (*UnorderedList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnorderedList == nil {
		t.UnorderedList = make(map[string]*UnorderedList)
	}

	key := Key

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnorderedList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnorderedList", key)
	}

	t.UnorderedList[key] = &UnorderedList{
		Key: &Key,
	}

	return t.UnorderedList[key], nil
}

// RenameUnorderedList renames an entry in the list UnorderedList within
// the Device struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Device) RenameUnorderedList(oldK, newK string) error {
	if _, ok := t.UnorderedList[newK]; ok {
		return fmt.Errorf("key %v already exists in UnorderedList", newK)
	}

	e, ok := t.UnorderedList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnorderedList", oldK)
	}
	e.Key = &newK

	t.UnorderedList[newK] = e
	delete(t.UnorderedList, oldK)
	return nil
}

// GetOrCreateUnorderedList retrieves the value with the specified keys from
// the receiver Device. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Device) GetOrCreateUnorderedList(Key string) *UnorderedList {

	key := Key

	if v, ok := t.UnorderedList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnorderedList(Key)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnorderedList got unexpected error: %v", err))
	}
	return v
}

// GetUnorderedList retrieves the value with the specified key from
// the UnorderedList map field of Device. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Device) GetUnorderedList(Key string) *UnorderedList {

	if t == nil {
		return nil
	}

	key := Key

	if lm, ok := t.UnorderedList[key]; ok {
		return lm
	}
	return nil
}

// AppendUnorderedList appends the supplied UnorderedList struct to the
// list UnorderedList of Device. If the key value(s) specified in
// the supplied UnorderedList already exist in the list, an error is
// returned.
func (t *Device) AppendUnorderedList(v *UnorderedList) error {
	if v.Key == nil {
		return fmt.Errorf("invalid nil key received for Key")
	}

	key := *v.Key

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnorderedList == nil {
		t.UnorderedList = make(map[string]*UnorderedList)
	}

	if _, ok := t.UnorderedList[key]; ok {
		return fmt.Errorf("duplicate key for list UnorderedList %v", key)
	}

	t.UnorderedList[key] = v
	return nil
}

// AppendNewOrderedList creates a new entry in the OrderedList
// ordered map of the Device struct. The keys of the list are
// populated from the input arguments.
func (s *Device) AppendNewOrderedList(Key string) (*OrderedList, error) {
	if s.OrderedList == nil {
		s.OrderedList = &OrderedList_OrderedMap{}
	}
	return s.OrderedList.AppendNew(Key)
}

// AppendOrderedList appends the supplied OrderedList struct
// to the list OrderedList of Device. If the key value(s)
// specified in the supplied OrderedList already exist in the list, an
// error is returned.
func (s *Device) AppendOrderedList(v *OrderedList) error {
	if s.OrderedList == nil {
		s.OrderedList = &OrderedList_OrderedMap{}
	}
	return s.OrderedList.Append(v)
}

// GetOrderedList retrieves the value with the specified key from the
// OrderedList map field of Device. If the receiver
// is nil, or the specified key is not present in the list, nil is returned
// such that Get* methods may be safely chained.
func (s *Device) GetOrderedList(Key string) *OrderedList {
	key := Key
	return s.OrderedList.Get(key)
}

// DeleteOrderedList deletes the value with the specified keys from
// the receiver Device. If there is no such element, the
// function is a no-op.
func (s *Device) DeleteOrderedList(Key string) bool {
	key := Key
	return s.OrderedList.Delete(key)
}

// OrderedList_OrderedMap is an ordered map that represents the "ordered-by user"
// list elements at /ctestschema/ordered-lists/ordered-list.
type OrderedList_OrderedMap struct {
	keys     []string
	valueMap map[string]*OrderedList
}

// IsYANGOrderedList ensures that OrderedList_OrderedMap implements the
// ygot.GoOrderedList interface.
func (*OrderedList_OrderedMap) IsYANGOrderedList() {}

// init initializes any uninitialized values.
func (o *OrderedList_OrderedMap) init() {
	if o == nil {
		return
	}
	if o.valueMap == nil {
		o.valueMap = map[string]*OrderedList{}
	}
}

// Keys returns a copy of the list's keys.
func (o *OrderedList_OrderedMap) Keys() []string {
	if o == nil {
		return nil
	}
	return append([]string{}, o.keys...)
}

// Values returns the current set of the list's values in order.
func (o *OrderedList_OrderedMap) Values() []*OrderedList {
	if o == nil {
		return nil
	}
	var values []*OrderedList
	for _, key := range o.keys {
		values = append(values, o.valueMap[key])
	}
	return values
}

// Len returns a size of OrderedList_OrderedMap
func (o *OrderedList_OrderedMap) Len() int {
	if o == nil {
		return 0
	}
	return len(o.keys)
}

// Get returns the value corresponding to the key. If the key is not found, nil
// is returned.
func (o *OrderedList_OrderedMap) Get(key string) *OrderedList {
	if o == nil {
		return nil
	}
	val, _ := o.valueMap[key]
	return val
}

// Delete deletes an element.
func (o *OrderedList_OrderedMap) Delete(key string) bool {
	if o == nil {
		return false
	}
	if _, ok := o.valueMap[key]; !ok {
		return false
	}
	for i, k := range o.keys {
		if k == key {
			o.keys = append(o.keys[:i], o.keys[i+1:]...)
			delete(o.valueMap, key)
			return true
		}
	}
	return false
}

// Append appends a OrderedList, returning an error if the key
// already exists in the ordered list or if the key is unspecified.
func (o *OrderedList_OrderedMap) Append(v *OrderedList) error {
	if o == nil {
		return fmt.Errorf("nil ordered map, cannot append OrderedList")
	}
	if v == nil {
		return fmt.Errorf("nil OrderedList")
	}
	if v.Key == nil {
		return fmt.Errorf("invalid nil key received for Key")
	}

	key := *v.Key

	if _, ok := o.valueMap[key]; ok {
		return fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	o.init()
	o.valueMap[key] = v
	return nil
}

// AppendNew creates and appends a new OrderedList, returning the
// newly-initialized v. It returns an error if the v already exists.
func (o *OrderedList_OrderedMap) AppendNew(Key string) (*OrderedList, error) {
	if o == nil {
		return nil, fmt.Errorf("nil ordered map, cannot append OrderedList")
	}
	key := Key

	if _, ok := o.valueMap[key]; ok {
		return nil, fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	newElement := &OrderedList{
		Key: &Key,
	}
	o.init()
	o.valueMap[key] = newElement
	return newElement, nil
}

// AppendNewOrderedMultikeyedList creates a new entry in the OrderedMultikeyedList
// ordered map of the Device struct. The keys of the list are
// populated from the input arguments.
func (s *Device) AppendNewOrderedMultikeyedList(Key1 string, Key2 uint64) (*OrderedMultikeyedList, error) {
	if s.OrderedMultikeyedList == nil {
		s.OrderedMultikeyedList = &OrderedMultikeyedList_OrderedMap{}
	}
	return s.OrderedMultikeyedList.AppendNew(Key1, Key2)
}

// AppendOrderedMultikeyedList appends the supplied OrderedMultikeyedList struct
// to the list OrderedMultikeyedList of Device. If the key value(s)
// specified in the supplied OrderedMultikeyedList already exist in the list, an
// error is returned.
func (s *Device) AppendOrderedMultikeyedList(v *OrderedMultikeyedList) error {
	if s.OrderedMultikeyedList == nil {
		s.OrderedMultikeyedList = &OrderedMultikeyedList_OrderedMap{}
	}
	return s.OrderedMultikeyedList.Append(v)
}

// GetOrderedMultikeyedList retrieves the value with the specified key from the
// OrderedMultikeyedList map field of Device. If the receiver
// is nil, or the specified key is not present in the list, nil is returned
// such that Get* methods may be safely chained.
func (s *Device) GetOrderedMultikeyedList(Key1 string, Key2 uint64) *OrderedMultikeyedList {
	key := OrderedMultikeyedList_Key{
		Key1: Key1,
		Key2: Key2,
	}
	return s.OrderedMultikeyedList.Get(key)
}

// DeleteOrderedMultikeyedList deletes the value with the specified keys from
// the receiver Device. If there is no such element, the
// function is a no-op.
func (s *Device) DeleteOrderedMultikeyedList(Key1 string, Key2 uint64) bool {
	key := OrderedMultikeyedList_Key{
		Key1: Key1,
		Key2: Key2,
	}
	return s.OrderedMultikeyedList.Delete(key)
}

// OrderedMultikeyedList_OrderedMap is an ordered map that represents the "ordered-by user"
// list elements at /ctestschema/ordered-multikeyed-lists/ordered-multikeyed-list.
type OrderedMultikeyedList_OrderedMap struct {
	keys     []OrderedMultikeyedList_Key
	valueMap map[OrderedMultikeyedList_Key]*OrderedMultikeyedList
}

// IsYANGOrderedList ensures that OrderedMultikeyedList_OrderedMap implements the
// ygot.GoOrderedList interface.
func (*OrderedMultikeyedList_OrderedMap) IsYANGOrderedList() {}

// init initializes any uninitialized values.
func (o *OrderedMultikeyedList_OrderedMap) init() {
	if o == nil {
		return
	}
	if o.valueMap == nil {
		o.valueMap = map[OrderedMultikeyedList_Key]*OrderedMultikeyedList{}
	}
}

// Keys returns a copy of the list's keys.
func (o *OrderedMultikeyedList_OrderedMap) Keys() []OrderedMultikeyedList_Key {
	if o == nil {
		return nil
	}
	return append([]OrderedMultikeyedList_Key{}, o.keys...)
}

// Values returns the current set of the list's values in order.
func (o *OrderedMultikeyedList_OrderedMap) Values() []*OrderedMultikeyedList {
	if o == nil {
		return nil
	}
	var values []*OrderedMultikeyedList
	for _, key := range o.keys {
		values = append(values, o.valueMap[key])
	}
	return values
}

// Len returns a size of OrderedMultikeyedList_OrderedMap
func (o *OrderedMultikeyedList_OrderedMap) Len() int {
	if o == nil {
		return 0
	}
	return len(o.keys)
}

// Get returns the value corresponding to the key. If the key is not found, nil
// is returned.
func (o *OrderedMultikeyedList_OrderedMap) Get(key OrderedMultikeyedList_Key) *OrderedMultikeyedList {
	if o == nil {
		return nil
	}
	val, _ := o.valueMap[key]
	return val
}

// Delete deletes an element.
func (o *OrderedMultikeyedList_OrderedMap) Delete(key OrderedMultikeyedList_Key) bool {
	if o == nil {
		return false
	}
	if _, ok := o.valueMap[key]; !ok {
		return false
	}
	for i, k := range o.keys {
		if k == key {
			o.keys = append(o.keys[:i], o.keys[i+1:]...)
			delete(o.valueMap, key)
			return true
		}
	}
	return false
}

// Append appends a OrderedMultikeyedList, returning an error if the key
// already exists in the ordered list or if the key is unspecified.
func (o *OrderedMultikeyedList_OrderedMap) Append(v *OrderedMultikeyedList) error {
	if o == nil {
		return fmt.Errorf("nil ordered map, cannot append OrderedMultikeyedList")
	}
	if v == nil {
		return fmt.Errorf("nil OrderedMultikeyedList")
	}
	if v.Key1 == nil {
		return fmt.Errorf("invalid nil key for Key1")
	}
	if v.Key2 == nil {
		return fmt.Errorf("invalid nil key for Key2")
	}
	key := OrderedMultikeyedList_Key{
		Key1: *v.Key1,
		Key2: *v.Key2,
	}

	if _, ok := o.valueMap[key]; ok {
		return fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	o.init()
	o.valueMap[key] = v
	return nil
}

// AppendNew creates and appends a new OrderedMultikeyedList, returning the
// newly-initialized v. It returns an error if the v already exists.
func (o *OrderedMultikeyedList_OrderedMap) AppendNew(Key1 string, Key2 uint64) (*OrderedMultikeyedList, error) {
	if o == nil {
		return nil, fmt.Errorf("nil ordered map, cannot append OrderedMultikeyedList")
	}
	key := OrderedMultikeyedList_Key{
		Key1: Key1,
		Key2: Key2,
	}

	if _, ok := o.valueMap[key]; ok {
		return nil, fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	newElement := &OrderedMultikeyedList{
		Key1: &Key1,
		Key2: &Key2,
	}
	o.init()
	o.valueMap[key] = newElement
	return newElement, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Device.
func (*Device) ΛBelongingModule() string {
	return ""
}

// OrderedList represents the /ctestschema/ordered-lists/ordered-list YANG schema element.
type OrderedList struct {
	ΛMetadata    []ygot.Annotation                   `path:"@" ygotAnnotation:"true"`
	Key          *string                             `path:"config/key|key" module:"ctestschema/ctestschema|ctestschema" shadow-path:"state/key|key" shadow-module:"ctestschema/ctestschema|ctestschema"`
	ΛKey         []ygot.Annotation                   `path:"config/@key|@key" ygotAnnotation:"true"`
	OrderedList  *OrderedList_OrderedList_OrderedMap `path:"ordered-lists/ordered-list" module:"ctestschema/ctestschema"`
	ΛOrderedList []ygot.Annotation                   `path:"ordered-lists/@ordered-list" ygotAnnotation:"true"`
	ParentKey    *string                             `path:"state/parent-key" module:"ctestschema/ctestschema"`
	ΛParentKey   []ygot.Annotation                   `path:"state/@parent-key" ygotAnnotation:"true"`
	RoValue      *string                             `path:"state/ro-value" module:"ctestschema/ctestschema"`
	ΛRoValue     []ygot.Annotation                   `path:"state/@ro-value" ygotAnnotation:"true"`
	Value        *string                             `path:"config/value" module:"ctestschema/ctestschema" shadow-path:"state/value" shadow-module:"ctestschema/ctestschema"`
	ΛValue       []ygot.Annotation                   `path:"config/@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OrderedList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OrderedList) IsYANGGoStruct() {}

// GetKey retrieves the value of the leaf Key from the OrderedList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key is set, it can
// safely use t.GetKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key == nil' before retrieving the leaf's value.
func (t *OrderedList) GetKey() string {
	if t == nil || t.Key == nil {
		return ""
	}
	return *t.Key
}

// GetParentKey retrieves the value of the leaf ParentKey from the OrderedList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ParentKey is set, it can
// safely use t.GetParentKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ParentKey == nil' before retrieving the leaf's value.
func (t *OrderedList) GetParentKey() string {
	if t == nil || t.ParentKey == nil {
		return ""
	}
	return *t.ParentKey
}

// GetRoValue retrieves the value of the leaf RoValue from the OrderedList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RoValue is set, it can
// safely use t.GetRoValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RoValue == nil' before retrieving the leaf's value.
func (t *OrderedList) GetRoValue() string {
	if t == nil || t.RoValue == nil {
		return ""
	}
	return *t.RoValue
}

// GetValue retrieves the value of the leaf Value from the OrderedList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *OrderedList) GetValue() string {
	if t == nil || t.Value == nil {
		return ""
	}
	return *t.Value
}

// AppendNewOrderedList creates a new entry in the OrderedList
// ordered map of the OrderedList struct. The keys of the list are
// populated from the input arguments.
func (s *OrderedList) AppendNewOrderedList(Key string) (*OrderedList_OrderedList, error) {
	if s.OrderedList == nil {
		s.OrderedList = &OrderedList_OrderedList_OrderedMap{}
	}
	return s.OrderedList.AppendNew(Key)
}

// AppendOrderedList appends the supplied OrderedList_OrderedList struct
// to the list OrderedList of OrderedList. If the key value(s)
// specified in the supplied OrderedList_OrderedList already exist in the list, an
// error is returned.
func (s *OrderedList) AppendOrderedList(v *OrderedList_OrderedList) error {
	if s.OrderedList == nil {
		s.OrderedList = &OrderedList_OrderedList_OrderedMap{}
	}
	return s.OrderedList.Append(v)
}

// GetOrderedList retrieves the value with the specified key from the
// OrderedList map field of OrderedList. If the receiver
// is nil, or the specified key is not present in the list, nil is returned
// such that Get* methods may be safely chained.
func (s *OrderedList) GetOrderedList(Key string) *OrderedList_OrderedList {
	key := Key
	return s.OrderedList.Get(key)
}

// DeleteOrderedList deletes the value with the specified keys from
// the receiver OrderedList. If there is no such element, the
// function is a no-op.
func (s *OrderedList) DeleteOrderedList(Key string) bool {
	key := Key
	return s.OrderedList.Delete(key)
}

// OrderedList_OrderedList_OrderedMap is an ordered map that represents the "ordered-by user"
// list elements at /ctestschema/ordered-lists/ordered-list/ordered-lists/ordered-list.
type OrderedList_OrderedList_OrderedMap struct {
	keys     []string
	valueMap map[string]*OrderedList_OrderedList
}

// IsYANGOrderedList ensures that OrderedList_OrderedList_OrderedMap implements the
// ygot.GoOrderedList interface.
func (*OrderedList_OrderedList_OrderedMap) IsYANGOrderedList() {}

// init initializes any uninitialized values.
func (o *OrderedList_OrderedList_OrderedMap) init() {
	if o == nil {
		return
	}
	if o.valueMap == nil {
		o.valueMap = map[string]*OrderedList_OrderedList{}
	}
}

// Keys returns a copy of the list's keys.
func (o *OrderedList_OrderedList_OrderedMap) Keys() []string {
	if o == nil {
		return nil
	}
	return append([]string{}, o.keys...)
}

// Values returns the current set of the list's values in order.
func (o *OrderedList_OrderedList_OrderedMap) Values() []*OrderedList_OrderedList {
	if o == nil {
		return nil
	}
	var values []*OrderedList_OrderedList
	for _, key := range o.keys {
		values = append(values, o.valueMap[key])
	}
	return values
}

// Len returns a size of OrderedList_OrderedList_OrderedMap
func (o *OrderedList_OrderedList_OrderedMap) Len() int {
	if o == nil {
		return 0
	}
	return len(o.keys)
}

// Get returns the value corresponding to the key. If the key is not found, nil
// is returned.
func (o *OrderedList_OrderedList_OrderedMap) Get(key string) *OrderedList_OrderedList {
	if o == nil {
		return nil
	}
	val, _ := o.valueMap[key]
	return val
}

// Delete deletes an element.
func (o *OrderedList_OrderedList_OrderedMap) Delete(key string) bool {
	if o == nil {
		return false
	}
	if _, ok := o.valueMap[key]; !ok {
		return false
	}
	for i, k := range o.keys {
		if k == key {
			o.keys = append(o.keys[:i], o.keys[i+1:]...)
			delete(o.valueMap, key)
			return true
		}
	}
	return false
}

// Append appends a OrderedList_OrderedList, returning an error if the key
// already exists in the ordered list or if the key is unspecified.
func (o *OrderedList_OrderedList_OrderedMap) Append(v *OrderedList_OrderedList) error {
	if o == nil {
		return fmt.Errorf("nil ordered map, cannot append OrderedList_OrderedList")
	}
	if v == nil {
		return fmt.Errorf("nil OrderedList_OrderedList")
	}
	if v.Key == nil {
		return fmt.Errorf("invalid nil key received for Key")
	}

	key := *v.Key

	if _, ok := o.valueMap[key]; ok {
		return fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	o.init()
	o.valueMap[key] = v
	return nil
}

// AppendNew creates and appends a new OrderedList_OrderedList, returning the
// newly-initialized v. It returns an error if the v already exists.
func (o *OrderedList_OrderedList_OrderedMap) AppendNew(Key string) (*OrderedList_OrderedList, error) {
	if o == nil {
		return nil, fmt.Errorf("nil ordered map, cannot append OrderedList_OrderedList")
	}
	key := Key

	if _, ok := o.valueMap[key]; ok {
		return nil, fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	newElement := &OrderedList_OrderedList{
		Key: &Key,
	}
	o.init()
	o.valueMap[key] = newElement
	return newElement, nil
}

// ΛListKeyMap returns the keys of the OrderedList struct, which is a YANG list entry.
func (t *OrderedList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Key == nil {
		return nil, fmt.Errorf("nil value for key Key")
	}

	return map[string]interface{}{
		"key": *t.Key,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OrderedList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OrderedList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OrderedList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OrderedList) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OrderedList.
func (*OrderedList) ΛBelongingModule() string {
	return "ctestschema"
}

// OrderedList_OrderedList represents the /ctestschema/ordered-lists/ordered-list/ordered-lists/ordered-list YANG schema element.
type OrderedList_OrderedList struct {
	ΛMetadata  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Key        *string           `path:"config/key|key" module:"ctestschema/ctestschema|ctestschema" shadow-path:"state/key|key" shadow-module:"ctestschema/ctestschema|ctestschema"`
	ΛKey       []ygot.Annotation `path:"config/@key|@key" ygotAnnotation:"true"`
	ParentKey  *string           `path:"state/parent-key" module:"ctestschema/ctestschema"`
	ΛParentKey []ygot.Annotation `path:"state/@parent-key" ygotAnnotation:"true"`
	Value      *string           `path:"config/value" module:"ctestschema/ctestschema" shadow-path:"state/value" shadow-module:"ctestschema/ctestschema"`
	ΛValue     []ygot.Annotation `path:"config/@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OrderedList_OrderedList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OrderedList_OrderedList) IsYANGGoStruct() {}

// GetKey retrieves the value of the leaf Key from the OrderedList_OrderedList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key is set, it can
// safely use t.GetKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key == nil' before retrieving the leaf's value.
func (t *OrderedList_OrderedList) GetKey() string {
	if t == nil || t.Key == nil {
		return ""
	}
	return *t.Key
}

// GetParentKey retrieves the value of the leaf ParentKey from the OrderedList_OrderedList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ParentKey is set, it can
// safely use t.GetParentKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ParentKey == nil' before retrieving the leaf's value.
func (t *OrderedList_OrderedList) GetParentKey() string {
	if t == nil || t.ParentKey == nil {
		return ""
	}
	return *t.ParentKey
}

// GetValue retrieves the value of the leaf Value from the OrderedList_OrderedList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *OrderedList_OrderedList) GetValue() string {
	if t == nil || t.Value == nil {
		return ""
	}
	return *t.Value
}

// ΛListKeyMap returns the keys of the OrderedList_OrderedList struct, which is a YANG list entry.
func (t *OrderedList_OrderedList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Key == nil {
		return nil, fmt.Errorf("nil value for key Key")
	}

	return map[string]interface{}{
		"key": *t.Key,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OrderedList_OrderedList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OrderedList_OrderedList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OrderedList_OrderedList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OrderedList_OrderedList) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OrderedList_OrderedList.
func (*OrderedList_OrderedList) ΛBelongingModule() string {
	return "ctestschema"
}

// OrderedMultikeyedList represents the /ctestschema/ordered-multikeyed-lists/ordered-multikeyed-list YANG schema element.
type OrderedMultikeyedList struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Key1      *string           `path:"config/key1|key1" module:"ctestschema/ctestschema|ctestschema" shadow-path:"state/key1|key1" shadow-module:"ctestschema/ctestschema|ctestschema"`
	ΛKey1     []ygot.Annotation `path:"config/@key1|@key1" ygotAnnotation:"true"`
	Key2      *uint64           `path:"config/key2|key2" module:"ctestschema/ctestschema|ctestschema" shadow-path:"state/key2|key2" shadow-module:"ctestschema/ctestschema|ctestschema"`
	ΛKey2     []ygot.Annotation `path:"config/@key2|@key2" ygotAnnotation:"true"`
	Value     *string           `path:"config/value" module:"ctestschema/ctestschema" shadow-path:"state/value" shadow-module:"ctestschema/ctestschema"`
	ΛValue    []ygot.Annotation `path:"config/@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OrderedMultikeyedList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OrderedMultikeyedList) IsYANGGoStruct() {}

// GetKey1 retrieves the value of the leaf Key1 from the OrderedMultikeyedList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key1 is set, it can
// safely use t.GetKey1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key1 == nil' before retrieving the leaf's value.
func (t *OrderedMultikeyedList) GetKey1() string {
	if t == nil || t.Key1 == nil {
		return ""
	}
	return *t.Key1
}

// GetKey2 retrieves the value of the leaf Key2 from the OrderedMultikeyedList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key2 is set, it can
// safely use t.GetKey2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key2 == nil' before retrieving the leaf's value.
func (t *OrderedMultikeyedList) GetKey2() uint64 {
	if t == nil || t.Key2 == nil {
		return 0
	}
	return *t.Key2
}

// GetValue retrieves the value of the leaf Value from the OrderedMultikeyedList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *OrderedMultikeyedList) GetValue() string {
	if t == nil || t.Value == nil {
		return ""
	}
	return *t.Value
}

// ΛListKeyMap returns the keys of the OrderedMultikeyedList struct, which is a YANG list entry.
func (t *OrderedMultikeyedList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Key1 == nil {
		return nil, fmt.Errorf("nil value for key Key1")
	}

	if t.Key2 == nil {
		return nil, fmt.Errorf("nil value for key Key2")
	}

	return map[string]interface{}{
		"key1": *t.Key1,
		"key2": *t.Key2,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OrderedMultikeyedList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OrderedMultikeyedList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OrderedMultikeyedList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OrderedMultikeyedList) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of OrderedMultikeyedList.
func (*OrderedMultikeyedList) ΛBelongingModule() string {
	return "ctestschema"
}

// UnorderedList represents the /ctestschema/unordered-lists/unordered-list YANG schema element.
type UnorderedList struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Key       *string           `path:"config/key|key" module:"ctestschema/ctestschema|ctestschema" shadow-path:"state/key|key" shadow-module:"ctestschema/ctestschema|ctestschema"`
	ΛKey      []ygot.Annotation `path:"config/@key|@key" ygotAnnotation:"true"`
	Value     *string           `path:"config/value" module:"ctestschema/ctestschema" shadow-path:"state/value" shadow-module:"ctestschema/ctestschema"`
	ΛValue    []ygot.Annotation `path:"config/@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that UnorderedList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*UnorderedList) IsYANGGoStruct() {}

// GetKey retrieves the value of the leaf Key from the UnorderedList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key is set, it can
// safely use t.GetKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key == nil' before retrieving the leaf's value.
func (t *UnorderedList) GetKey() string {
	if t == nil || t.Key == nil {
		return ""
	}
	return *t.Key
}

// GetValue retrieves the value of the leaf Value from the UnorderedList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *UnorderedList) GetValue() string {
	if t == nil || t.Value == nil {
		return ""
	}
	return *t.Value
}

// ΛListKeyMap returns the keys of the UnorderedList struct, which is a YANG list entry.
func (t *UnorderedList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Key == nil {
		return nil, fmt.Errorf("nil value for key Key")
	}

	return map[string]interface{}{
		"key": *t.Key,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *UnorderedList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["UnorderedList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *UnorderedList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *UnorderedList) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of UnorderedList.
func (*UnorderedList) ΛBelongingModule() string {
	return "ctestschema"
}

var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x4f, 0x6f, 0xdb, 0xc6,
		0x13, 0xbd, 0xfb, 0x53, 0x10, 0x3c, 0x5b, 0xb1, 0xa5, 0x9f, 0xff, 0xfd, 0x74, 0x73, 0xe3, 0x06,
		0x05, 0x52, 0xb7, 0x41, 0xd2, 0xf4, 0x52, 0x04, 0x05, 0x43, 0xaf, 0x15, 0xc2, 0x32, 0x69, 0x90,
		0x4b, 0xd7, 0x42, 0xa1, 0xef, 0x5e, 0x50, 0xa4, 0x18, 0x91, 0x12, 0xa9, 0x99, 0xd9, 0x25, 0xcd,
		0xd8, 0x0f, 0xc8, 0x21, 0x96, 0x76, 0xb5, 0xdc, 0x99, 0x79, 0xb3, 0x33, 0x6f, 0x77, 0x96, 0xff,
		0x1e, 0x38, 0x8e, 0xe3, 0xb8, 0xbf, 0x79, 0xf7, 0xca, 0x9d, 0x3a, 0xee, 0x8d, 0x7a, 0x0c, 0x7c,
		0xe5, 0x1e, 0xe6, 0x9f, 0xbe, 0x0f, 0xc2, 0x1b, 0x77, 0xea, 0x8c, 0x8b, 0x3f, 0xdf, 0x46, 0xe1,
		0x6d, 0x30, 0x73, 0xa7, 0xce, 0x71, 0xf1, 0xc1, 0x55, 0x10, 0xbb, 0x53, 0x27, 0xff, 0x89, 0xd5,
		0x07, 0x51, 0x7c, 0xa3, 0x62, 0x75, 0x33, 0x9a, 0x07, 0x89, 0x4e, 0x2a, 0x5f, 0x55, 0x46, 0xa9,
		0x36, 0x3b, 0xac, 0x36, 0xaa, 0x0e, 0x5a, 0x7e, 0x5c, 0x1f, 0xbc, 0xfc, 0xe2, 0x43, 0xac, 0x6e,
		0x83, 0xa7, 0xad, 0xc1, 0x2a, 0x03, 0xfa, 0x5b, 0xc3, 0xac, 0xbe, 0xfe, 0x14, 0xa5, 0xb1, 0xaf,
		0x76, 0x76, 0xcd, 0x1f, 0x45, 0x2d, 0xfe, 0x89, 0xe2, 0xec, 0x69, 0xdc, 0x87, 0x7c, 0x94, 0xc3,
		0xdd, 0x0d, 0x7f, 0xf1, 0x92, 0xcb, 0x78, 0x96, 0xde, 0xab, 0x50, 0xbb, 0x53, 0x47, 0xc7, 0xa9,
		0x6a, 0x68, 0xb8, 0xd1, 0x6a, 0xf5, 0x50, 0x5b, 0xad, 0x96, 0x95, 0x4f, 0x96, 0xb5, 0xb9, 0xd6,
		0x05, 0xbe, 0x53, 0xf0, 0xcd, 0xf3, 0xd9, 0x25, 0xff, 0xa6, 0x29, 0xed, 0x56, 0xc3, 0x5e, 0x75,
		0x50, 0xd4, 0x42, 0x54, 0x0f, 0x55, 0x4d, 0x6c, 0x75, 0xb1, 0xd5, 0x46, 0x57, 0xdf, 0x6e, 0x35,
		0x36, 0xa8, 0x73, 0xaf, 0x5a, 0xcb, 0x06, 0xfe, 0x5a, 0xda, 0x7b, 0x24, 0x50, 0x0a, 0x34, 0x6f,
		0xbf, 0x67, 0x36, 0xed, 0x2a, 0x26, 0xab, 0x9a, 0xa3, 0x72, 0xa6, 0xea, 0xb9, 0x26, 0x20, 0x36,
		0x05, 0xb1, 0x49, 0xf0, 0x4d, 0xa3, 0xdd, 0x44, 0xf6, 0x98, 0x0a, 0xd9, 0x64, 0xca, 0x86, 0x77,
		0x6a, 0x41, 0x17, 0xdb, 0x5a, 0x2b, 0x59, 0x27, 0xe2, 0xbc, 0x0b, 0x23, 0x3a, 0x26, 0x36, 0xa7,
		0x1a, 0x93, 0xc4, 0xa8, 0x84, 0xc6, 0x25, 0x35, 0x32, 0x63, 0x63, 0x33, 0x36, 0x3a, 0xb9, 0xf1,
		0xd1, 0x8c, 0x90, 0x68, 0x8c, 0xe5, 0x63, 0xfc, 0xb1, 0x78, 0x50, 0x32, 0x4d, 0x25, 0x3a, 0x0e,
		0xc2, 0x19, 0x47, 0x59, 0x6b, 0xe7, 0x75, 0x61, 0x75, 0x06, 0x97, 0x61, 0x18, 0x69, 0x4f, 0x07,
		0x51, 0xc8, 0x9b, 0xc7, 0x62, 0x16, 0xe9, 0x51, 0xe4, 0x8f, 0xfc, 0xe8, 0xfe, 0x21, 0x56, 0x49,
		0x92, 0x2d, 0xae, 0xca, 0xbb, 0xcd, 0x7e, 0x84, 0x28, 0xe2, 0x03, 0x0b, 0x53, 0x70, 0x1f, 0xbd,
		0x79, 0xaa, 0xf8, 0x70, 0xcf, 0xbb, 0x01, 0xf0, 0x00, 0x3c, 0x00, 0x3f, 0x20, 0xc0, 0x1b, 0x05,
		0x08, 0xcc, 0x89, 0xb9, 0x89, 0xff, 0x4d, 0xdd, 0x7b, 0x0f, 0x9e, 0xfe, 0x96, 0xa9, 0xe7, 0xc8,
		0xd7, 0x2a, 0xd1, 0xf9, 0x67, 0x47, 0x95, 0x74, 0xad, 0xf2, 0xd7, 0x51, 0x11, 0x68, 0x1e, 0xc8,
		0xe6, 0xd1, 0x32, 0x07, 0x52, 0xdc, 0xc2, 0x88, 0x57, 0x88, 0x6e, 0x0b, 0xc1, 0xee, 0x10, 0x83,
		0x5d, 0xb2, 0x9b, 0x29, 0x25, 0x9d, 0x61, 0x31, 0x56, 0xb7, 0x14, 0x69, 0xaf, 0xfd, 0xca, 0x39,
		0xa1, 0xed, 0x87, 0x02, 0x1e, 0x6f, 0xde, 0x14, 0x96, 0x7f, 0x94, 0x59, 0x5e, 0x07, 0xd6, 0xdf,
		0x4e, 0xa4, 0x90, 0x12, 0xfb, 0x04, 0xe9, 0x1f, 0xd2, 0x3f, 0x1a, 0x31, 0x64, 0x42, 0x14, 0x09,
		0xcd, 0x0a, 0xf1, 0xe1, 0x6b, 0x88, 0x0f, 0xa9, 0x66, 0xca, 0x25, 0xba, 0xcc, 0x88, 0x2f, 0x43,
		0x93, 0x15, 0x9b, 0xae, 0x89, 0x09, 0x1b, 0x9a, 0xb2, 0xa9, 0x49, 0x5b, 0x33, 0x6d, 0x6b, 0x26,
		0x6e, 0x6e, 0xea, 0x3c, 0x93, 0x67, 0x9a, 0xbe, 0x18, 0x02, 0x22, 0xe2, 0xce, 0x02, 0x91, 0x67,
		0x98, 0xe7, 0x5b, 0x03, 0x87, 0x0d, 0x90, 0x58, 0x02, 0x8b, 0x2d, 0xd0, 0x58, 0x07, 0x8f, 0x75,
		0x10, 0xd9, 0x03, 0x93, 0x0c, 0x54, 0x42, 0x70, 0xc9, 0x79, 0x08, 0x7b, 0xbc, 0x84, 0x21, 0x4f,
		0x61, 0x4b, 0x02, 0x42, 0x1e, 0xc3, 0x3e, 0xaf, 0x61, 0x6e, 0x08, 0x02, 0x11, 0x30, 0x89, 0x4f,
		0x2b, 0x44, 0x28, 0x1c, 0x26, 0x1c, 0x26, 0x1c, 0x26, 0x1c, 0xe6, 0x00, 0x1c, 0x66, 0xa7, 0x01,
		0xac, 0xa1, 0xa0, 0x84, 0xc4, 0xb2, 0x21, 0xe7, 0x2c, 0x17, 0x11, 0x43, 0x3c, 0xa2, 0x10, 0xdd,
		0x20, 0x34, 0x17, 0xae, 0x30, 0xc8, 0x53, 0x91, 0xa7, 0x76, 0xb8, 0x22, 0x08, 0x38, 0xf7, 0xc6,
		0x25, 0xe0, 0x5c, 0xd0, 0x57, 0xc0, 0xc9, 0xf7, 0xe3, 0x1d, 0x12, 0xed, 0x69, 0x25, 0xf7, 0x0f,
		0x79, 0xf7, 0x9e, 0x99, 0xac, 0x09, 0x3c, 0x04, 0x3c, 0x04, 0x98, 0x2c, 0x24, 0x66, 0x48, 0xcc,
		0x90, 0x98, 0x19, 0x26, 0x66, 0xbd, 0x10, 0x3f, 0x0f, 0x5e, 0xac, 0x42, 0x3d, 0xb2, 0xe2, 0x62,
		0x36, 0x7e, 0x0b, 0x9e, 0x06, 0x9e, 0x06, 0x9e, 0xa6, 0xf3, 0xc0, 0xdf, 0x46, 0x02, 0xb0, 0x2b,
		0x11, 0x28, 0xff, 0x49, 0x33, 0x82, 0x7e, 0x9d, 0x18, 0xd8, 0x6b, 0xb8, 0x2e, 0xb8, 0x2e, 0x04,
		0x49, 0xcf, 0x9f, 0xe3, 0x0d, 0x8e, 0xec, 0xcd, 0x59, 0x90, 0xae, 0xd8, 0x1c, 0xab, 0x87, 0x9d,
		0xde, 0xaf, 0x62, 0x50, 0x4e, 0xed, 0xd4, 0xaf, 0x41, 0xa2, 0x2f, 0xb5, 0x66, 0x9e, 0x91, 0xba,
		0x0e, 0xc2, 0x9f, 0xe7, 0x2a, 0x83, 0x6d, 0xc2, 0xf3, 0xb7, 0xee, 0xb5, 0xf7, 0xb4, 0xd1, 0x73,
		0x7c, 0x71, 0x72, 0x72, 0x76, 0x7e, 0x72, 0x72, 0x7c, 0xfe, 0xbf, 0xf3, 0xe3, 0xff, 0x9f, 0x9e,
		0x8e, 0xcf, 0xc6, 0xa7, 0x8c, 0x1f, 0xfb, 0x3d, 0x57, 0xd3, 0x4f, 0x06, 0x14, 0x78, 0x9a, 0xa8,
		0x98, 0xcb, 0x70, 0x19, 0x38, 0xe7, 0x4d, 0x87, 0xbc, 0x36, 0xb2, 0xaf, 0x92, 0x58, 0xdf, 0x8a,
		0x23, 0xae, 0x38, 0xdf, 0x95, 0x24, 0x06, 0xc0, 0x59, 0x96, 0x4a, 0xfd, 0x9c, 0x3d, 0x50, 0x3e,
		0x35, 0xab, 0x20, 0x51, 0x4f, 0x3a, 0xf6, 0x46, 0x69, 0x98, 0x68, 0xef, 0xeb, 0x9c, 0x59, 0x3b,
		0xb2, 0xa1, 0xb3, 0xa9, 0xf3, 0x17, 0x4b, 0x5a, 0x06, 0xf4, 0xa4, 0xc0, 0x48, 0x6d, 0xf3, 0x93,
		0x46, 0xc6, 0xda, 0x1d, 0x47, 0xc9, 0x37, 0x5a, 0xc1, 0x02, 0x46, 0x6e, 0xfd, 0x65, 0x10, 0x75,
		0x41, 0xb6, 0x17, 0x40, 0x97, 0xb5, 0xe1, 0x10, 0xa7, 0xbe, 0x0e, 0x0b, 0xbb, 0x2d, 0xa0, 0x9c,
		0xad, 0x31, 0x7f, 0x6f, 0xfc, 0xdf, 0x7d, 0x45, 0xd5, 0x49, 0xd5, 0x72, 0x88, 0x0e, 0xca, 0x34,
		0x68, 0x5b, 0x3c, 0xac, 0x2d, 0x1d, 0x76, 0x59, 0xc6, 0x04, 0x65, 0x19, 0x16, 0x13, 0x1c, 0x54,
		0xe5, 0x77, 0x95, 0xad, 0xa3, 0x08, 0x03, 0x45, 0xba, 0xfc, 0x55, 0x86, 0xe0, 0x85, 0x04, 0x5b,
		0x00, 0x72, 0xca, 0x1f, 0xc8, 0x02, 0xb2, 0x2c, 0x20, 0x8b, 0x4f, 0x99, 0x4b, 0x28, 0xf2, 0x6d,
		0x4a, 0xbc, 0x12, 0x1e, 0x91, 0x59, 0x71, 0x3b, 0x38, 0x8d, 0xa3, 0x91, 0xf0, 0x7e, 0x8a, 0xb2,
		0x27, 0x30, 0x0a, 0x8c, 0x62, 0xf5, 0xab, 0x8c, 0x89, 0x2b, 0x5f, 0x80, 0x27, 0xe0, 0xe9, 0xe5,
		0x70, 0x16, 0x84, 0x0d, 0x8f, 0xa5, 0xa5, 0x6b, 0x07, 0xf7, 0x6e, 0x58, 0xd0, 0x36, 0x28, 0xe8,
		0x1b, 0x12, 0xb5, 0x0d, 0x88, 0x96, 0xdd, 0x06, 0xc6, 0xee, 0x02, 0x87, 0xa8, 0xe5, 0xc0, 0x5f,
		0x4c, 0xc0, 0x8a, 0xa0, 0xce, 0x24, 0x56, 0x65, 0x74, 0x15, 0x99, 0xdd, 0x6f, 0xb2, 0x18, 0x06,
		0x7b, 0xcf, 0x61, 0xeb, 0x19, 0xcc, 0x14, 0x91, 0x8d, 0x37, 0xa1, 0xa6, 0xd8, 0x6c, 0xbb, 0x1d,
		0x7a, 0x8a, 0xc6, 0xa6, 0x2f, 0x85, 0x66, 0xf1, 0x85, 0xa5, 0x67, 0xa2, 0xab, 0x93, 0xb9, 0x38,
		0xb7, 0x95, 0x50, 0x6d, 0xa0, 0xb0, 0x77, 0x4b, 0x66, 0xc9, 0xbc, 0x3f, 0x77, 0xcf, 0xbc, 0xc8,
		0xf3, 0xa9, 0x3e, 0xcd, 0xf7, 0x31, 0x37, 0xc6, 0x2b, 0xcd, 0xe8, 0x3e, 0x9d, 0xeb, 0xe0, 0x4e,
		0x2d, 0xe8, 0xd7, 0x22, 0x6f, 0xf5, 0xc0, 0x0d, 0xc9, 0x64, 0x0d, 0xef, 0xbd, 0x21, 0xb9, 0x26,
		0x5c, 0xfa, 0x65, 0xc9, 0xf5, 0x8e, 0xb8, 0x37, 0x19, 0xf7, 0x26, 0x5b, 0x49, 0x83, 0xb0, 0x43,
		0x33, 0xd0, 0x1d, 0x9a, 0xb1, 0x68, 0x8b, 0x66, 0x8c, 0xac, 0x1a, 0x59, 0xf5, 0x0b, 0xca, 0xaa,
		0x5f, 0xc7, 0xcd, 0xc9, 0x77, 0x6a, 0x31, 0x11, 0xc1, 0x7d, 0x02, 0xb8, 0x03, 0xee, 0xfd, 0xc1,
		0x3d, 0x0d, 0x42, 0x7d, 0x76, 0x22, 0x80, 0xfb, 0x05, 0xa3, 0xcb, 0x47, 0x2f, 0x9c, 0xa9, 0x3e,
		0xce, 0xd8, 0x5d, 0x07, 0xf2, 0xdb, 0x37, 0xdc, 0x3f, 0x0b, 0xe6, 0x5b, 0x5a, 0x71, 0xf0, 0x2e,
		0xf6, 0xfc, 0xcc, 0x5f, 0x5d, 0x05, 0xb3, 0x80, 0x7b, 0x94, 0xb6, 0xaa, 0x1b, 0x35, 0xf3, 0x74,
		0xf0, 0x98, 0x3d, 0xcb, 0xad, 0x37, 0x4f, 0x54, 0x2f, 0x35, 0x23, 0xd7, 0xde, 0x93, 0xb9, 0xe8,
		0xcc, 0x8e, 0x00, 0x0f, 0x55, 0x9a, 0x2f, 0xfa, 0x80, 0x21, 0xde, 0x34, 0x80, 0x15, 0x13, 0x2b,
		0x26, 0x02, 0xe4, 0x17, 0xfd, 0xa6, 0x81, 0x3a, 0x03, 0xda, 0xf4, 0x45, 0xb7, 0xef, 0x1f, 0x18,
		0xb3, 0x5e, 0x40, 0x30, 0xc6, 0x1b, 0x08, 0xf0, 0x06, 0x82, 0xe7, 0x79, 0x03, 0xc1, 0xb8, 0x23,
		0x00, 0x4c, 0x58, 0x00, 0x98, 0x00, 0x00, 0x00, 0xc0, 0xf3, 0x00, 0x60, 0x82, 0xe2, 0x0e, 0x40,
		0x00, 0x5b, 0x07, 0xc8, 0x8c, 0x90, 0x19, 0x0d, 0x29, 0x33, 0x02, 0x33, 0x0f, 0x34, 0x81, 0x99,
		0x07, 0x33, 0x0f, 0x66, 0x1e, 0xcc, 0xfc, 0x00, 0x98, 0x79, 0x10, 0xdf, 0x58, 0x90, 0x10, 0xde,
		0xf5, 0x19, 0xde, 0xfd, 0xb0, 0xbc, 0xf2, 0xb3, 0x54, 0x61, 0x8c, 0x9d, 0x96, 0xa8, 0xb5, 0xe3,
		0x5a, 0x0c, 0xde, 0x7a, 0x83, 0xf2, 0x0c, 0x94, 0x67, 0x48, 0x95, 0xec, 0xa0, 0x3c, 0x83, 0x1a,
		0xc1, 0xf4, 0x50, 0x9e, 0x41, 0xf5, 0x88, 0xec, 0xa2, 0x8d, 0xeb, 0xb2, 0xff, 0xa0, 0xca, 0x37,
		0xb6, 0x6a, 0x2b, 0x08, 0x95, 0x1c, 0x69, 0xd8, 0xfe, 0x3a, 0xe6, 0xef, 0xd6, 0x1f, 0xb6, 0xbd,
		0x80, 0x19, 0x75, 0x1b, 0x2d, 0xaa, 0x6d, 0xac, 0xdb, 0xa8, 0xca, 0x74, 0x7f, 0xb9, 0x46, 0xad,
		0x3d, 0xaa, 0x34, 0x50, 0xa5, 0x61, 0x25, 0x79, 0xc2, 0x56, 0x0b, 0xee, 0xd1, 0x42, 0x26, 0x8e,
		0x4c, 0x1c, 0x47, 0xd0, 0x70, 0xe6, 0x14, 0x80, 0x07, 0xe0, 0x01, 0xf8, 0x17, 0xc2, 0x0d, 0xd6,
		0x92, 0xb6, 0xda, 0xdf, 0xdd, 0x9e, 0x30, 0x65, 0x9d, 0xaf, 0xc3, 0xf1, 0x3a, 0x1c, 0xaf, 0x7b,
		0x9e, 0xe3, 0x75, 0x38, 0x5d, 0x07, 0x04, 0x20, 0xe5, 0x43, 0x04, 0x88, 0x08, 0x70, 0x38, 0x11,
		0x20, 0x32, 0x2a, 0xe0, 0x09, 0x78, 0xea, 0x13, 0x4f, 0x3f, 0x48, 0xc2, 0xf2, 0x8a, 0x2e, 0x90,
		0x34, 0x38, 0xb4, 0x10, 0xa6, 0xf3, 0x39, 0x63, 0x2b, 0xbe, 0xf9, 0xbc, 0x5b, 0x87, 0x7b, 0xb4,
		0xed, 0x8a, 0xa6, 0xef, 0xc8, 0x7e, 0x5e, 0xf7, 0x1b, 0xc4, 0x4e, 0x6c, 0x7d, 0x93, 0xb4, 0x69,
		0x03, 0xf6, 0x60, 0x63, 0xdc, 0xa6, 0xf1, 0xdc, 0x20, 0x79, 0x5b, 0x52, 0x14, 0x9f, 0x56, 0xbf,
		0xbf, 0xe5, 0x1f, 0xdd, 0x20, 0x79, 0xe7, 0xdd, 0xa9, 0x8f, 0x51, 0xb4, 0xed, 0x3b, 0xeb, 0xcf,
		0xe9, 0x6e, 0x7e, 0x55, 0x91, 0xe1, 0x95, 0x7a, 0x0c, 0xfc, 0x02, 0x56, 0xcb, 0x83, 0xe5, 0x7f,
		0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7d, 0xb3, 0x2a, 0x10, 0x37, 0xa9,
		0x00, 0x00,
	}
)

// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
func initΛEnumTypes() {
	ΛEnumTypes = map[string][]reflect.Type{}
}
