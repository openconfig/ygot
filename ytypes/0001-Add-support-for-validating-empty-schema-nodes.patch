From 21d6ad06ea147728b12b4dfe39cb1876749d6709 Mon Sep 17 00:00:00 2001
From: Rob Shakir <robjs@google.com>
Date: Wed, 4 Oct 2017 09:30:54 +1100
Subject: [PATCH] Add support for validating empty schema nodes.

---
 ytypes/bool_type.go      | 12 +++++++++++-
 ytypes/bool_type_test.go | 26 +++++++++++++++++++++++++-
 ytypes/leaf.go           |  8 +++++++-
 ytypes/leaf_test.go      |  9 +++++++++
 4 files changed, 52 insertions(+), 3 deletions(-)

diff --git a/ytypes/bool_type.go b/ytypes/bool_type.go
index 945992e..f9e7b18 100644
--- a/ytypes/bool_type.go
+++ b/ytypes/bool_type.go
@@ -16,8 +16,10 @@ package ytypes
 
 import (
 	"fmt"
+	"reflect"
 
 	"github.com/openconfig/goyang/pkg/yang"
+	"github.com/openconfig/ygot/ygot"
 )
 
 // Refer to: https://tools.ietf.org/html/rfc6020#section-9.5.
@@ -30,6 +32,14 @@ func validateBool(schema *yang.Entry, value interface{}) error {
 		return err
 	}
 
+	// If the schema is type empty, check that it had the correct type name.
+	if schema.Type.Kind == yang.Yempty {
+		if reflect.TypeOf(value).Name() != ygot.EmptyTypeName {
+			return fmt.Errorf("non derived type %T with value %v for schema %s", value, value, schema.Name)
+		}
+		return nil
+	}
+
 	// Check that type of value is the type expected from the schema.
 	if _, ok := value.(bool); !ok {
 		return fmt.Errorf("non bool type %T with value %v for schema %s", value, value, schema.Name)
@@ -76,7 +86,7 @@ func validateBoolSchema(schema *yang.Entry) error {
 	if schema.Type == nil {
 		return fmt.Errorf("bool schema %s Type is nil", schema.Name)
 	}
-	if schema.Type.Kind != yang.Ybool {
+	if schema.Type.Kind != yang.Ybool && schema.Type.Kind != yang.Yempty {
 		return fmt.Errorf("bool schema %s has wrong type %v", schema.Name, schema.Type.Kind)
 	}
 
diff --git a/ytypes/bool_type_test.go b/ytypes/bool_type_test.go
index ef47146..0a627dc 100644
--- a/ytypes/bool_type_test.go
+++ b/ytypes/bool_type_test.go
@@ -20,7 +20,10 @@ import (
 	"github.com/openconfig/goyang/pkg/yang"
 )
 
-var validBoolSchema = &yang.Entry{Name: "valid-bool-schema", Type: &yang.YangType{Kind: yang.Ybool}}
+var (
+	validBoolSchema  = &yang.Entry{Name: "valid-bool-schema", Type: &yang.YangType{Kind: yang.Ybool}}
+	validEmptySchema = &yang.Entry{Name: "empty-schema", Type: &yang.YangType{Kind: yang.Yempty}}
+)
 
 func TestValidateBoolSchema(t *testing.T) {
 	tests := []struct {
@@ -47,6 +50,10 @@ func TestValidateBoolSchema(t *testing.T) {
 			schema:  &yang.Entry{Name: "string-type-schema", Type: &yang.YangType{Kind: yang.Ystring}},
 			wantErr: true,
 		},
+		{
+			desc:   "empty schema",
+			schema: validEmptySchema,
+		},
 	}
 
 	for _, test := range tests {
@@ -82,6 +89,23 @@ func TestValidateBool(t *testing.T) {
 			val:     "",
 			wantErr: true,
 		},
+		{
+			desc:   "valid empty",
+			schema: validEmptySchema,
+			val:    YANGEmpty(true),
+		},
+		{
+			desc:    "invalid empty",
+			schema:  validEmptySchema,
+			val:     true,
+			wantErr: true,
+		},
+		{
+			desc:    "invalid empty - wrong type",
+			schema:  validEmptySchema,
+			val:     "fish",
+			wantErr: true,
+		},
 	}
 
 	for _, test := range tests {
diff --git a/ytypes/leaf.go b/ytypes/leaf.go
index 69e0254..304612c 100644
--- a/ytypes/leaf.go
+++ b/ytypes/leaf.go
@@ -62,6 +62,12 @@ func validateLeaf(inSchema *yang.Entry, value interface{}) (errors []error) {
 			return util.AppendErr(errors, fmt.Errorf("bad leaf type: expect Int64 for enum type for schema %s, have type %v",
 				schema.Name, ykind))
 		}
+	case reflect.Bool:
+		if ykind != yang.Yempty {
+			return util.AppendErr(errors, fmt.Errorf("bad leaf type: expect Bool for empty type for schema %s, have type %v",
+				schema.Name, ykind))
+		}
+		rv = value
 	default:
 		return util.AppendErr(errors, fmt.Errorf("bad leaf value type %v, expect Ptr or Int64 for schema %s", rkind, schema.Name))
 	}
@@ -73,7 +79,7 @@ func validateLeaf(inSchema *yang.Entry, value interface{}) (errors []error) {
 		return nil
 		// TODO(mostrowski): restore when representation is decided.
 		//return util.AppendErr(errors, validateBitset(schema, rv))
-	case yang.Ybool:
+	case yang.Ybool, yang.Yempty:
 		return util.AppendErr(errors, validateBool(schema, rv))
 	case yang.Ystring:
 		return util.AppendErr(errors, validateString(schema, rv))
diff --git a/ytypes/leaf_test.go b/ytypes/leaf_test.go
index d16c696..092f640 100644
--- a/ytypes/leaf_test.go
+++ b/ytypes/leaf_test.go
@@ -83,6 +83,10 @@ func TestValidateLeafSchema(t *testing.T) {
 	}
 }
 
+// YANGEmpty is a derived type which is used to represent the YANG
+// empty type.
+type YANGEmpty bool
+
 func TestValidateLeaf(t *testing.T) {
 	tests := []struct {
 		desc    string
@@ -129,6 +133,11 @@ func TestValidateLeaf(t *testing.T) {
 			val:     ygot.String("value"),
 			wantErr: true,
 		},
+		{
+			desc:   "empty type",
+			schema: typeToLeafSchema("empty", yang.Yempty),
+			val:    YANGEmpty(true),
+		},
 		// TODO(mostrowski): restore when representation is decided.
 		/*{
 			desc:   "bitset success",
-- 
2.14.2.920.gcf0c67979c-goog

