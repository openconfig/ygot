/*
Package exampleoc is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

NOTE WELL: This is an example code file that is distributed with ygot.
It should not be used within your application, as it WILL change,
without warning. Rather, you should generate structs directly from
OpenConfig models using the ygot package.

This package was generated by github.com/openconfig/ygot
using the following YANG input files:
	- public/release/models/network-instance/openconfig-network-instance.yang
	- public/release/models/optical-transport/openconfig-optical-amplifier.yang
	- public/release/models/optical-transport/openconfig-terminal-device.yang
	- public/release/models/optical-transport/openconfig-transport-line-protection.yang
	- public/release/models/platform/openconfig-platform.yang
	- public/release/models/policy/openconfig-routing-policy.yang
	- public/release/models/lacp/openconfig-lacp.yang
	- public/release/models/system/openconfig-system.yang
	- public/release/models/lldp/openconfig-lldp.yang
	- public/release/models/stp/openconfig-spanning-tree.yang
	- public/release/models/interfaces/openconfig-interfaces.yang
	- public/release/models/interfaces/openconfig-if-ip.yang
	- public/release/models/interfaces/openconfig-if-aggregate.yang
	- public/release/models/interfaces/openconfig-if-ethernet.yang
	- public/release/models/interfaces/openconfig-if-ip-ext.yang
Imported modules were sourced from:
	- public/...
	- deps/...
*/
package exampleoc

import (
	"fmt"
)

// Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-bgp/bgp/neighbors/neighbor/route-reflector/config/route-reflector-cluster-id within the YANG schema.
type Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union interface {
	Is_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union()
}

// Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_String is used when /openconfig-bgp/bgp/neighbors/neighbor/route-reflector/config/route-reflector-cluster-id
// is to be set to a string value.
type Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_String struct {
	String string
}

// Is_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union ensures that Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_String
// implements the Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union interface.
func (*Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_String) Is_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union() {
}

// Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_Uint32 is used when /openconfig-bgp/bgp/neighbors/neighbor/route-reflector/config/route-reflector-cluster-id
// is to be set to a uint32 value.
type Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_Uint32 struct {
	Uint32 uint32
}

// Is_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union ensures that Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_Uint32
// implements the Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union interface.
func (*Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_Uint32) Is_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union() {
}

// To_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Bgp_Neighbor_RouteReflector) To_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union(i interface{}) (Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union, error) {
	switch v := i.(type) {
	case string:
		return &Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_String{v}, nil
	case uint32:
		return &Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
	}
}

// Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-bgp/bgp/peer-groups/peer-group/route-reflector/config/route-reflector-cluster-id within the YANG schema.
type Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union interface {
	Is_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union()
}

// Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_String is used when /openconfig-bgp/bgp/peer-groups/peer-group/route-reflector/config/route-reflector-cluster-id
// is to be set to a string value.
type Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_String struct {
	String string
}

// Is_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union ensures that Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_String
// implements the Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union interface.
func (*Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_String) Is_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union() {
}

// Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_Uint32 is used when /openconfig-bgp/bgp/peer-groups/peer-group/route-reflector/config/route-reflector-cluster-id
// is to be set to a uint32 value.
type Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_Uint32 struct {
	Uint32 uint32
}

// Is_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union ensures that Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_Uint32
// implements the Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union interface.
func (*Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_Uint32) Is_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union() {
}

// To_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Bgp_PeerGroup_RouteReflector) To_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union(i interface{}) (Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union, error) {
	switch v := i.(type) {
	case string:
		return &Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_String{v}, nil
	case uint32:
		return &Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
	}
}

// Component_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-platform/components/component/state/type within the YANG schema.
type Component_Type_Union interface {
	Is_Component_Type_Union()
}

// Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT is used when /openconfig-platform/components/component/state/type
// is to be set to a E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT value.
type Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT struct {
	E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
}

// Is_Component_Type_Union ensures that Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
// implements the Component_Type_Union interface.
func (*Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT) Is_Component_Type_Union() {
}

// Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT is used when /openconfig-platform/components/component/state/type
// is to be set to a E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT value.
type Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT struct {
	E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
}

// Is_Component_Type_Union ensures that Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
// implements the Component_Type_Union interface.
func (*Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT) Is_Component_Type_Union() {
}

// To_Component_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Component_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Component) To_Component_Type_Union(i interface{}) (Component_Type_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT:
		return &Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT{v}, nil
	case E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT:
		return &Component_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Component_Type_Union, unknown union type, got: %T, want any of [E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT, E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT]", i, i)
	}
}

// Component_Property_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-platform/components/component/properties/property/config/value within the YANG schema.
type Component_Property_Value_Union interface {
	Is_Component_Property_Value_Union()
}

// Component_Property_Value_Union_Bool is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a bool value.
type Component_Property_Value_Union_Bool struct {
	Bool bool
}

// Is_Component_Property_Value_Union ensures that Component_Property_Value_Union_Bool
// implements the Component_Property_Value_Union interface.
func (*Component_Property_Value_Union_Bool) Is_Component_Property_Value_Union() {}

// Component_Property_Value_Union_Float64 is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a float64 value.
type Component_Property_Value_Union_Float64 struct {
	Float64 float64
}

// Is_Component_Property_Value_Union ensures that Component_Property_Value_Union_Float64
// implements the Component_Property_Value_Union interface.
func (*Component_Property_Value_Union_Float64) Is_Component_Property_Value_Union() {}

// Component_Property_Value_Union_Int64 is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a int64 value.
type Component_Property_Value_Union_Int64 struct {
	Int64 int64
}

// Is_Component_Property_Value_Union ensures that Component_Property_Value_Union_Int64
// implements the Component_Property_Value_Union interface.
func (*Component_Property_Value_Union_Int64) Is_Component_Property_Value_Union() {}

// Component_Property_Value_Union_String is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a string value.
type Component_Property_Value_Union_String struct {
	String string
}

// Is_Component_Property_Value_Union ensures that Component_Property_Value_Union_String
// implements the Component_Property_Value_Union interface.
func (*Component_Property_Value_Union_String) Is_Component_Property_Value_Union() {}

// Component_Property_Value_Union_Uint64 is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a uint64 value.
type Component_Property_Value_Union_Uint64 struct {
	Uint64 uint64
}

// Is_Component_Property_Value_Union ensures that Component_Property_Value_Union_Uint64
// implements the Component_Property_Value_Union interface.
func (*Component_Property_Value_Union_Uint64) Is_Component_Property_Value_Union() {}

// To_Component_Property_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Component_Property_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Component_Property) To_Component_Property_Value_Union(i interface{}) (Component_Property_Value_Union, error) {
	switch v := i.(type) {
	case bool:
		return &Component_Property_Value_Union_Bool{v}, nil
	case float64:
		return &Component_Property_Value_Union_Float64{v}, nil
	case int64:
		return &Component_Property_Value_Union_Int64{v}, nil
	case string:
		return &Component_Property_Value_Union_String{v}, nil
	case uint64:
		return &Component_Property_Value_Union_Uint64{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Component_Property_Value_Union, unknown union type, got: %T, want any of [bool, float64, int64, string, uint64]", i, i)
	}
}

// Interface_Aggregation_SwitchedVlan_TrunkVlans_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/config/trunk-vlans within the YANG schema.
type Interface_Aggregation_SwitchedVlan_TrunkVlans_Union interface {
	Is_Interface_Aggregation_SwitchedVlan_TrunkVlans_Union()
}

// Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_String is used when /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/config/trunk-vlans
// is to be set to a string value.
type Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_String struct {
	String string
}

// Is_Interface_Aggregation_SwitchedVlan_TrunkVlans_Union ensures that Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_String
// implements the Interface_Aggregation_SwitchedVlan_TrunkVlans_Union interface.
func (*Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_String) Is_Interface_Aggregation_SwitchedVlan_TrunkVlans_Union() {
}

// Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_Uint16 is used when /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/config/trunk-vlans
// is to be set to a uint16 value.
type Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_Uint16 struct {
	Uint16 uint16
}

// Is_Interface_Aggregation_SwitchedVlan_TrunkVlans_Union ensures that Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_Uint16
// implements the Interface_Aggregation_SwitchedVlan_TrunkVlans_Union interface.
func (*Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_Uint16) Is_Interface_Aggregation_SwitchedVlan_TrunkVlans_Union() {
}

// To_Interface_Aggregation_SwitchedVlan_TrunkVlans_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Interface_Aggregation_SwitchedVlan_TrunkVlans_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Interface_Aggregation_SwitchedVlan) To_Interface_Aggregation_SwitchedVlan_TrunkVlans_Union(i interface{}) (Interface_Aggregation_SwitchedVlan_TrunkVlans_Union, error) {
	switch v := i.(type) {
	case string:
		return &Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_String{v}, nil
	case uint16:
		return &Interface_Aggregation_SwitchedVlan_TrunkVlans_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Interface_Aggregation_SwitchedVlan_TrunkVlans_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
	}
}

// Interface_Ethernet_SwitchedVlan_TrunkVlans_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/config/trunk-vlans within the YANG schema.
type Interface_Ethernet_SwitchedVlan_TrunkVlans_Union interface {
	Is_Interface_Ethernet_SwitchedVlan_TrunkVlans_Union()
}

// Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_String is used when /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/config/trunk-vlans
// is to be set to a string value.
type Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_String struct {
	String string
}

// Is_Interface_Ethernet_SwitchedVlan_TrunkVlans_Union ensures that Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_String
// implements the Interface_Ethernet_SwitchedVlan_TrunkVlans_Union interface.
func (*Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_String) Is_Interface_Ethernet_SwitchedVlan_TrunkVlans_Union() {
}

// Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_Uint16 is used when /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/config/trunk-vlans
// is to be set to a uint16 value.
type Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_Uint16 struct {
	Uint16 uint16
}

// Is_Interface_Ethernet_SwitchedVlan_TrunkVlans_Union ensures that Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_Uint16
// implements the Interface_Ethernet_SwitchedVlan_TrunkVlans_Union interface.
func (*Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_Uint16) Is_Interface_Ethernet_SwitchedVlan_TrunkVlans_Union() {
}

// To_Interface_Ethernet_SwitchedVlan_TrunkVlans_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Interface_Ethernet_SwitchedVlan_TrunkVlans_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Interface_Ethernet_SwitchedVlan) To_Interface_Ethernet_SwitchedVlan_TrunkVlans_Union(i interface{}) (Interface_Ethernet_SwitchedVlan_TrunkVlans_Union, error) {
	switch v := i.(type) {
	case string:
		return &Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_String{v}, nil
	case uint16:
		return &Interface_Ethernet_SwitchedVlan_TrunkVlans_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Interface_Ethernet_SwitchedVlan_TrunkVlans_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
	}
}

// Interface_RoutedVlan_Vlan_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/routed-vlan/config/vlan within the YANG schema.
type Interface_RoutedVlan_Vlan_Union interface {
	Is_Interface_RoutedVlan_Vlan_Union()
}

// Interface_RoutedVlan_Vlan_Union_String is used when /openconfig-interfaces/interfaces/interface/routed-vlan/config/vlan
// is to be set to a string value.
type Interface_RoutedVlan_Vlan_Union_String struct {
	String string
}

// Is_Interface_RoutedVlan_Vlan_Union ensures that Interface_RoutedVlan_Vlan_Union_String
// implements the Interface_RoutedVlan_Vlan_Union interface.
func (*Interface_RoutedVlan_Vlan_Union_String) Is_Interface_RoutedVlan_Vlan_Union() {}

// Interface_RoutedVlan_Vlan_Union_Uint16 is used when /openconfig-interfaces/interfaces/interface/routed-vlan/config/vlan
// is to be set to a uint16 value.
type Interface_RoutedVlan_Vlan_Union_Uint16 struct {
	Uint16 uint16
}

// Is_Interface_RoutedVlan_Vlan_Union ensures that Interface_RoutedVlan_Vlan_Union_Uint16
// implements the Interface_RoutedVlan_Vlan_Union interface.
func (*Interface_RoutedVlan_Vlan_Union_Uint16) Is_Interface_RoutedVlan_Vlan_Union() {}

// To_Interface_RoutedVlan_Vlan_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Interface_RoutedVlan_Vlan_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Interface_RoutedVlan) To_Interface_RoutedVlan_Vlan_Union(i interface{}) (Interface_RoutedVlan_Vlan_Union, error) {
	switch v := i.(type) {
	case string:
		return &Interface_RoutedVlan_Vlan_Union_String{v}, nil
	case uint16:
		return &Interface_RoutedVlan_Vlan_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Interface_RoutedVlan_Vlan_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
	}
}

// Interface_Subinterface_Vlan_VlanId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/config/vlan-id within the YANG schema.
type Interface_Subinterface_Vlan_VlanId_Union interface {
	Is_Interface_Subinterface_Vlan_VlanId_Union()
}

// Interface_Subinterface_Vlan_VlanId_Union_String is used when /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/config/vlan-id
// is to be set to a string value.
type Interface_Subinterface_Vlan_VlanId_Union_String struct {
	String string
}

// Is_Interface_Subinterface_Vlan_VlanId_Union ensures that Interface_Subinterface_Vlan_VlanId_Union_String
// implements the Interface_Subinterface_Vlan_VlanId_Union interface.
func (*Interface_Subinterface_Vlan_VlanId_Union_String) Is_Interface_Subinterface_Vlan_VlanId_Union() {
}

// Interface_Subinterface_Vlan_VlanId_Union_Uint16 is used when /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/config/vlan-id
// is to be set to a uint16 value.
type Interface_Subinterface_Vlan_VlanId_Union_Uint16 struct {
	Uint16 uint16
}

// Is_Interface_Subinterface_Vlan_VlanId_Union ensures that Interface_Subinterface_Vlan_VlanId_Union_Uint16
// implements the Interface_Subinterface_Vlan_VlanId_Union interface.
func (*Interface_Subinterface_Vlan_VlanId_Union_Uint16) Is_Interface_Subinterface_Vlan_VlanId_Union() {
}

// To_Interface_Subinterface_Vlan_VlanId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Interface_Subinterface_Vlan_VlanId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Interface_Subinterface_Vlan) To_Interface_Subinterface_Vlan_VlanId_Union(i interface{}) (Interface_Subinterface_Vlan_VlanId_Union, error) {
	switch v := i.(type) {
	case string:
		return &Interface_Subinterface_Vlan_VlanId_Union_String{v}, nil
	case uint16:
		return &Interface_Subinterface_Vlan_VlanId_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Interface_Subinterface_Vlan_VlanId_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
	}
}

// LocalRoutes_Aggregate_SetTag_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-local-routing/local-routes/local-aggregates/aggregate/config/set-tag within the YANG schema.
type LocalRoutes_Aggregate_SetTag_Union interface {
	Is_LocalRoutes_Aggregate_SetTag_Union()
}

// LocalRoutes_Aggregate_SetTag_Union_String is used when /openconfig-local-routing/local-routes/local-aggregates/aggregate/config/set-tag
// is to be set to a string value.
type LocalRoutes_Aggregate_SetTag_Union_String struct {
	String string
}

// Is_LocalRoutes_Aggregate_SetTag_Union ensures that LocalRoutes_Aggregate_SetTag_Union_String
// implements the LocalRoutes_Aggregate_SetTag_Union interface.
func (*LocalRoutes_Aggregate_SetTag_Union_String) Is_LocalRoutes_Aggregate_SetTag_Union() {}

// LocalRoutes_Aggregate_SetTag_Union_Uint32 is used when /openconfig-local-routing/local-routes/local-aggregates/aggregate/config/set-tag
// is to be set to a uint32 value.
type LocalRoutes_Aggregate_SetTag_Union_Uint32 struct {
	Uint32 uint32
}

// Is_LocalRoutes_Aggregate_SetTag_Union ensures that LocalRoutes_Aggregate_SetTag_Union_Uint32
// implements the LocalRoutes_Aggregate_SetTag_Union interface.
func (*LocalRoutes_Aggregate_SetTag_Union_Uint32) Is_LocalRoutes_Aggregate_SetTag_Union() {}

// To_LocalRoutes_Aggregate_SetTag_Union takes an input interface{} and attempts to convert it to a struct
// which implements the LocalRoutes_Aggregate_SetTag_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *LocalRoutes_Aggregate) To_LocalRoutes_Aggregate_SetTag_Union(i interface{}) (LocalRoutes_Aggregate_SetTag_Union, error) {
	switch v := i.(type) {
	case string:
		return &LocalRoutes_Aggregate_SetTag_Union_String{v}, nil
	case uint32:
		return &LocalRoutes_Aggregate_SetTag_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to LocalRoutes_Aggregate_SetTag_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
	}
}

// LocalRoutes_Static_SetTag_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-local-routing/local-routes/static-routes/static/config/set-tag within the YANG schema.
type LocalRoutes_Static_SetTag_Union interface {
	Is_LocalRoutes_Static_SetTag_Union()
}

// LocalRoutes_Static_SetTag_Union_String is used when /openconfig-local-routing/local-routes/static-routes/static/config/set-tag
// is to be set to a string value.
type LocalRoutes_Static_SetTag_Union_String struct {
	String string
}

// Is_LocalRoutes_Static_SetTag_Union ensures that LocalRoutes_Static_SetTag_Union_String
// implements the LocalRoutes_Static_SetTag_Union interface.
func (*LocalRoutes_Static_SetTag_Union_String) Is_LocalRoutes_Static_SetTag_Union() {}

// LocalRoutes_Static_SetTag_Union_Uint32 is used when /openconfig-local-routing/local-routes/static-routes/static/config/set-tag
// is to be set to a uint32 value.
type LocalRoutes_Static_SetTag_Union_Uint32 struct {
	Uint32 uint32
}

// Is_LocalRoutes_Static_SetTag_Union ensures that LocalRoutes_Static_SetTag_Union_Uint32
// implements the LocalRoutes_Static_SetTag_Union interface.
func (*LocalRoutes_Static_SetTag_Union_Uint32) Is_LocalRoutes_Static_SetTag_Union() {}

// To_LocalRoutes_Static_SetTag_Union takes an input interface{} and attempts to convert it to a struct
// which implements the LocalRoutes_Static_SetTag_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *LocalRoutes_Static) To_LocalRoutes_Static_SetTag_Union(i interface{}) (LocalRoutes_Static_SetTag_Union, error) {
	switch v := i.(type) {
	case string:
		return &LocalRoutes_Static_SetTag_Union_String{v}, nil
	case uint32:
		return &LocalRoutes_Static_SetTag_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to LocalRoutes_Static_SetTag_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
	}
}

// LocalRoutes_Static_NextHop_NextHop_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-local-routing/local-routes/static-routes/static/next-hops/next-hop/config/next-hop within the YANG schema.
type LocalRoutes_Static_NextHop_NextHop_Union interface {
	Is_LocalRoutes_Static_NextHop_NextHop_Union()
}

// LocalRoutes_Static_NextHop_NextHop_Union_E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP is used when /openconfig-local-routing/local-routes/static-routes/static/next-hops/next-hop/config/next-hop
// is to be set to a E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP value.
type LocalRoutes_Static_NextHop_NextHop_Union_E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP struct {
	E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP
}

// Is_LocalRoutes_Static_NextHop_NextHop_Union ensures that LocalRoutes_Static_NextHop_NextHop_Union_E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP
// implements the LocalRoutes_Static_NextHop_NextHop_Union interface.
func (*LocalRoutes_Static_NextHop_NextHop_Union_E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP) Is_LocalRoutes_Static_NextHop_NextHop_Union() {
}

// LocalRoutes_Static_NextHop_NextHop_Union_String is used when /openconfig-local-routing/local-routes/static-routes/static/next-hops/next-hop/config/next-hop
// is to be set to a string value.
type LocalRoutes_Static_NextHop_NextHop_Union_String struct {
	String string
}

// Is_LocalRoutes_Static_NextHop_NextHop_Union ensures that LocalRoutes_Static_NextHop_NextHop_Union_String
// implements the LocalRoutes_Static_NextHop_NextHop_Union interface.
func (*LocalRoutes_Static_NextHop_NextHop_Union_String) Is_LocalRoutes_Static_NextHop_NextHop_Union() {
}

// To_LocalRoutes_Static_NextHop_NextHop_Union takes an input interface{} and attempts to convert it to a struct
// which implements the LocalRoutes_Static_NextHop_NextHop_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *LocalRoutes_Static_NextHop) To_LocalRoutes_Static_NextHop_NextHop_Union(i interface{}) (LocalRoutes_Static_NextHop_NextHop_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP:
		return &LocalRoutes_Static_NextHop_NextHop_Union_E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP{v}, nil
	case string:
		return &LocalRoutes_Static_NextHop_NextHop_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to LocalRoutes_Static_NextHop_NextHop_Union, unknown union type, got: %T, want any of [E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP, string]", i, i)
	}
}

// Mpls_Global_ReservedLabelBlock_LowerBound_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-mpls/mpls/global/reserved-label-blocks/reserved-label-block/config/lower-bound within the YANG schema.
type Mpls_Global_ReservedLabelBlock_LowerBound_Union interface {
	Is_Mpls_Global_ReservedLabelBlock_LowerBound_Union()
}

// Mpls_Global_ReservedLabelBlock_LowerBound_Union_E_OpenconfigMpls_ReservedLabelBlock_LowerBound is used when /openconfig-mpls/mpls/global/reserved-label-blocks/reserved-label-block/config/lower-bound
// is to be set to a E_OpenconfigMpls_ReservedLabelBlock_LowerBound value.
type Mpls_Global_ReservedLabelBlock_LowerBound_Union_E_OpenconfigMpls_ReservedLabelBlock_LowerBound struct {
	E_OpenconfigMpls_ReservedLabelBlock_LowerBound E_OpenconfigMpls_ReservedLabelBlock_LowerBound
}

// Is_Mpls_Global_ReservedLabelBlock_LowerBound_Union ensures that Mpls_Global_ReservedLabelBlock_LowerBound_Union_E_OpenconfigMpls_ReservedLabelBlock_LowerBound
// implements the Mpls_Global_ReservedLabelBlock_LowerBound_Union interface.
func (*Mpls_Global_ReservedLabelBlock_LowerBound_Union_E_OpenconfigMpls_ReservedLabelBlock_LowerBound) Is_Mpls_Global_ReservedLabelBlock_LowerBound_Union() {
}

// Mpls_Global_ReservedLabelBlock_LowerBound_Union_Uint32 is used when /openconfig-mpls/mpls/global/reserved-label-blocks/reserved-label-block/config/lower-bound
// is to be set to a uint32 value.
type Mpls_Global_ReservedLabelBlock_LowerBound_Union_Uint32 struct {
	Uint32 uint32
}

// Is_Mpls_Global_ReservedLabelBlock_LowerBound_Union ensures that Mpls_Global_ReservedLabelBlock_LowerBound_Union_Uint32
// implements the Mpls_Global_ReservedLabelBlock_LowerBound_Union interface.
func (*Mpls_Global_ReservedLabelBlock_LowerBound_Union_Uint32) Is_Mpls_Global_ReservedLabelBlock_LowerBound_Union() {
}

// To_Mpls_Global_ReservedLabelBlock_LowerBound_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Mpls_Global_ReservedLabelBlock_LowerBound_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Mpls_Global_ReservedLabelBlock) To_Mpls_Global_ReservedLabelBlock_LowerBound_Union(i interface{}) (Mpls_Global_ReservedLabelBlock_LowerBound_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigMpls_ReservedLabelBlock_LowerBound:
		return &Mpls_Global_ReservedLabelBlock_LowerBound_Union_E_OpenconfigMpls_ReservedLabelBlock_LowerBound{v}, nil
	case uint32:
		return &Mpls_Global_ReservedLabelBlock_LowerBound_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Mpls_Global_ReservedLabelBlock_LowerBound_Union, unknown union type, got: %T, want any of [E_OpenconfigMpls_ReservedLabelBlock_LowerBound, uint32]", i, i)
	}
}

// Mpls_Global_ReservedLabelBlock_UpperBound_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-mpls/mpls/global/reserved-label-blocks/reserved-label-block/config/upper-bound within the YANG schema.
type Mpls_Global_ReservedLabelBlock_UpperBound_Union interface {
	Is_Mpls_Global_ReservedLabelBlock_UpperBound_Union()
}

// Mpls_Global_ReservedLabelBlock_UpperBound_Union_E_OpenconfigMpls_ReservedLabelBlock_UpperBound is used when /openconfig-mpls/mpls/global/reserved-label-blocks/reserved-label-block/config/upper-bound
// is to be set to a E_OpenconfigMpls_ReservedLabelBlock_UpperBound value.
type Mpls_Global_ReservedLabelBlock_UpperBound_Union_E_OpenconfigMpls_ReservedLabelBlock_UpperBound struct {
	E_OpenconfigMpls_ReservedLabelBlock_UpperBound E_OpenconfigMpls_ReservedLabelBlock_UpperBound
}

// Is_Mpls_Global_ReservedLabelBlock_UpperBound_Union ensures that Mpls_Global_ReservedLabelBlock_UpperBound_Union_E_OpenconfigMpls_ReservedLabelBlock_UpperBound
// implements the Mpls_Global_ReservedLabelBlock_UpperBound_Union interface.
func (*Mpls_Global_ReservedLabelBlock_UpperBound_Union_E_OpenconfigMpls_ReservedLabelBlock_UpperBound) Is_Mpls_Global_ReservedLabelBlock_UpperBound_Union() {
}

// Mpls_Global_ReservedLabelBlock_UpperBound_Union_Uint32 is used when /openconfig-mpls/mpls/global/reserved-label-blocks/reserved-label-block/config/upper-bound
// is to be set to a uint32 value.
type Mpls_Global_ReservedLabelBlock_UpperBound_Union_Uint32 struct {
	Uint32 uint32
}

// Is_Mpls_Global_ReservedLabelBlock_UpperBound_Union ensures that Mpls_Global_ReservedLabelBlock_UpperBound_Union_Uint32
// implements the Mpls_Global_ReservedLabelBlock_UpperBound_Union interface.
func (*Mpls_Global_ReservedLabelBlock_UpperBound_Union_Uint32) Is_Mpls_Global_ReservedLabelBlock_UpperBound_Union() {
}

// To_Mpls_Global_ReservedLabelBlock_UpperBound_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Mpls_Global_ReservedLabelBlock_UpperBound_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Mpls_Global_ReservedLabelBlock) To_Mpls_Global_ReservedLabelBlock_UpperBound_Union(i interface{}) (Mpls_Global_ReservedLabelBlock_UpperBound_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigMpls_ReservedLabelBlock_UpperBound:
		return &Mpls_Global_ReservedLabelBlock_UpperBound_Union_E_OpenconfigMpls_ReservedLabelBlock_UpperBound{v}, nil
	case uint32:
		return &Mpls_Global_ReservedLabelBlock_UpperBound_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Mpls_Global_ReservedLabelBlock_UpperBound_Union, unknown union type, got: %T, want any of [E_OpenconfigMpls_ReservedLabelBlock_UpperBound, uint32]", i, i)
	}
}

// Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-mpls/mpls/lsps/static-lsps/static-lsp/egress/config/incoming-label within the YANG schema.
type Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union interface {
	Is_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union()
}

// Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel is used when /openconfig-mpls/mpls/lsps/static-lsps/static-lsp/egress/config/incoming-label
// is to be set to a E_OpenconfigMpls_Egress_IncomingLabel value.
type Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel struct {
	E_OpenconfigMpls_Egress_IncomingLabel E_OpenconfigMpls_Egress_IncomingLabel
}

// Is_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union ensures that Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel
// implements the Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union interface.
func (*Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel) Is_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union() {
}

// Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union_Uint32 is used when /openconfig-mpls/mpls/lsps/static-lsps/static-lsp/egress/config/incoming-label
// is to be set to a uint32 value.
type Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union_Uint32 struct {
	Uint32 uint32
}

// Is_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union ensures that Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union_Uint32
// implements the Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union interface.
func (*Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union_Uint32) Is_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union() {
}

// To_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Mpls_Lsps_StaticLsp_Egress) To_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union(i interface{}) (Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigMpls_Egress_IncomingLabel:
		return &Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel{v}, nil
	case uint32:
		return &Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMpls_Egress_IncomingLabel, uint32]", i, i)
	}
}

// Mpls_Lsps_StaticLsp_Egress_PushLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-mpls/mpls/lsps/static-lsps/static-lsp/egress/config/push-label within the YANG schema.
type Mpls_Lsps_StaticLsp_Egress_PushLabel_Union interface {
	Is_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union()
}

// Mpls_Lsps_StaticLsp_Egress_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel is used when /openconfig-mpls/mpls/lsps/static-lsps/static-lsp/egress/config/push-label
// is to be set to a E_OpenconfigMpls_Egress_PushLabel value.
type Mpls_Lsps_StaticLsp_Egress_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel struct {
	E_OpenconfigMpls_Egress_PushLabel E_OpenconfigMpls_Egress_PushLabel
}

// Is_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union ensures that Mpls_Lsps_StaticLsp_Egress_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel
// implements the Mpls_Lsps_StaticLsp_Egress_PushLabel_Union interface.
func (*Mpls_Lsps_StaticLsp_Egress_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel) Is_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union() {
}

// Mpls_Lsps_StaticLsp_Egress_PushLabel_Union_Uint32 is used when /openconfig-mpls/mpls/lsps/static-lsps/static-lsp/egress/config/push-label
// is to be set to a uint32 value.
type Mpls_Lsps_StaticLsp_Egress_PushLabel_Union_Uint32 struct {
	Uint32 uint32
}

// Is_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union ensures that Mpls_Lsps_StaticLsp_Egress_PushLabel_Union_Uint32
// implements the Mpls_Lsps_StaticLsp_Egress_PushLabel_Union interface.
func (*Mpls_Lsps_StaticLsp_Egress_PushLabel_Union_Uint32) Is_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union() {
}

// To_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Mpls_Lsps_StaticLsp_Egress_PushLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Mpls_Lsps_StaticLsp_Egress) To_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union(i interface{}) (Mpls_Lsps_StaticLsp_Egress_PushLabel_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigMpls_Egress_PushLabel:
		return &Mpls_Lsps_StaticLsp_Egress_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel{v}, nil
	case uint32:
		return &Mpls_Lsps_StaticLsp_Egress_PushLabel_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Mpls_Lsps_StaticLsp_Egress_PushLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMpls_Egress_PushLabel, uint32]", i, i)
	}
}

// Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-mpls/mpls/lsps/static-lsps/static-lsp/ingress/config/incoming-label within the YANG schema.
type Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union interface {
	Is_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union()
}

// Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel is used when /openconfig-mpls/mpls/lsps/static-lsps/static-lsp/ingress/config/incoming-label
// is to be set to a E_OpenconfigMpls_Egress_IncomingLabel value.
type Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel struct {
	E_OpenconfigMpls_Egress_IncomingLabel E_OpenconfigMpls_Egress_IncomingLabel
}

// Is_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union ensures that Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel
// implements the Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union interface.
func (*Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel) Is_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union() {
}

// Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union_Uint32 is used when /openconfig-mpls/mpls/lsps/static-lsps/static-lsp/ingress/config/incoming-label
// is to be set to a uint32 value.
type Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union_Uint32 struct {
	Uint32 uint32
}

// Is_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union ensures that Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union_Uint32
// implements the Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union interface.
func (*Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union_Uint32) Is_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union() {
}

// To_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Mpls_Lsps_StaticLsp_Ingress) To_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union(i interface{}) (Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigMpls_Egress_IncomingLabel:
		return &Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel{v}, nil
	case uint32:
		return &Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMpls_Egress_IncomingLabel, uint32]", i, i)
	}
}

// Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-mpls/mpls/lsps/static-lsps/static-lsp/ingress/config/push-label within the YANG schema.
type Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union interface {
	Is_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union()
}

// Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel is used when /openconfig-mpls/mpls/lsps/static-lsps/static-lsp/ingress/config/push-label
// is to be set to a E_OpenconfigMpls_Egress_PushLabel value.
type Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel struct {
	E_OpenconfigMpls_Egress_PushLabel E_OpenconfigMpls_Egress_PushLabel
}

// Is_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union ensures that Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel
// implements the Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union interface.
func (*Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel) Is_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union() {
}

// Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union_Uint32 is used when /openconfig-mpls/mpls/lsps/static-lsps/static-lsp/ingress/config/push-label
// is to be set to a uint32 value.
type Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union_Uint32 struct {
	Uint32 uint32
}

// Is_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union ensures that Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union_Uint32
// implements the Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union interface.
func (*Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union_Uint32) Is_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union() {
}

// To_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Mpls_Lsps_StaticLsp_Ingress) To_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union(i interface{}) (Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigMpls_Egress_PushLabel:
		return &Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel{v}, nil
	case uint32:
		return &Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMpls_Egress_PushLabel, uint32]", i, i)
	}
}

// Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-mpls/mpls/lsps/static-lsps/static-lsp/transit/config/incoming-label within the YANG schema.
type Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union interface {
	Is_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union()
}

// Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel is used when /openconfig-mpls/mpls/lsps/static-lsps/static-lsp/transit/config/incoming-label
// is to be set to a E_OpenconfigMpls_Egress_IncomingLabel value.
type Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel struct {
	E_OpenconfigMpls_Egress_IncomingLabel E_OpenconfigMpls_Egress_IncomingLabel
}

// Is_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union ensures that Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel
// implements the Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union interface.
func (*Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel) Is_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union() {
}

// Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union_Uint32 is used when /openconfig-mpls/mpls/lsps/static-lsps/static-lsp/transit/config/incoming-label
// is to be set to a uint32 value.
type Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union_Uint32 struct {
	Uint32 uint32
}

// Is_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union ensures that Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union_Uint32
// implements the Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union interface.
func (*Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union_Uint32) Is_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union() {
}

// To_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Mpls_Lsps_StaticLsp_Transit) To_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union(i interface{}) (Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigMpls_Egress_IncomingLabel:
		return &Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel{v}, nil
	case uint32:
		return &Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMpls_Egress_IncomingLabel, uint32]", i, i)
	}
}

// Mpls_Lsps_StaticLsp_Transit_PushLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-mpls/mpls/lsps/static-lsps/static-lsp/transit/config/push-label within the YANG schema.
type Mpls_Lsps_StaticLsp_Transit_PushLabel_Union interface {
	Is_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union()
}

// Mpls_Lsps_StaticLsp_Transit_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel is used when /openconfig-mpls/mpls/lsps/static-lsps/static-lsp/transit/config/push-label
// is to be set to a E_OpenconfigMpls_Egress_PushLabel value.
type Mpls_Lsps_StaticLsp_Transit_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel struct {
	E_OpenconfigMpls_Egress_PushLabel E_OpenconfigMpls_Egress_PushLabel
}

// Is_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union ensures that Mpls_Lsps_StaticLsp_Transit_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel
// implements the Mpls_Lsps_StaticLsp_Transit_PushLabel_Union interface.
func (*Mpls_Lsps_StaticLsp_Transit_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel) Is_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union() {
}

// Mpls_Lsps_StaticLsp_Transit_PushLabel_Union_Uint32 is used when /openconfig-mpls/mpls/lsps/static-lsps/static-lsp/transit/config/push-label
// is to be set to a uint32 value.
type Mpls_Lsps_StaticLsp_Transit_PushLabel_Union_Uint32 struct {
	Uint32 uint32
}

// Is_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union ensures that Mpls_Lsps_StaticLsp_Transit_PushLabel_Union_Uint32
// implements the Mpls_Lsps_StaticLsp_Transit_PushLabel_Union interface.
func (*Mpls_Lsps_StaticLsp_Transit_PushLabel_Union_Uint32) Is_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union() {
}

// To_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Mpls_Lsps_StaticLsp_Transit_PushLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Mpls_Lsps_StaticLsp_Transit) To_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union(i interface{}) (Mpls_Lsps_StaticLsp_Transit_PushLabel_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigMpls_Egress_PushLabel:
		return &Mpls_Lsps_StaticLsp_Transit_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel{v}, nil
	case uint32:
		return &Mpls_Lsps_StaticLsp_Transit_PushLabel_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Mpls_Lsps_StaticLsp_Transit_PushLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMpls_Egress_PushLabel, uint32]", i, i)
	}
}

// Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-mpls/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/priority within the YANG schema.
type Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union interface {
	Is_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union()
}

// Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union_E_OpenconfigMplsRsvp_BandwidthReservation_Priority is used when /openconfig-mpls/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/priority
// is to be set to a E_OpenconfigMplsRsvp_BandwidthReservation_Priority value.
type Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union_E_OpenconfigMplsRsvp_BandwidthReservation_Priority struct {
	E_OpenconfigMplsRsvp_BandwidthReservation_Priority E_OpenconfigMplsRsvp_BandwidthReservation_Priority
}

// Is_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union ensures that Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union_E_OpenconfigMplsRsvp_BandwidthReservation_Priority
// implements the Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union interface.
func (*Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union_E_OpenconfigMplsRsvp_BandwidthReservation_Priority) Is_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union() {
}

// Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union_Uint8 is used when /openconfig-mpls/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/priority
// is to be set to a uint8 value.
type Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union_Uint8 struct {
	Uint8 uint8
}

// Is_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union ensures that Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union_Uint8
// implements the Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union interface.
func (*Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union_Uint8) Is_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union() {
}

// To_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation) To_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union(i interface{}) (Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigMplsRsvp_BandwidthReservation_Priority:
		return &Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union_E_OpenconfigMplsRsvp_BandwidthReservation_Priority{v}, nil
	case uint8:
		return &Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsRsvp_BandwidthReservation_Priority, uint8]", i, i)
	}
}

// Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-mpls/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-in within the YANG schema.
type Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union interface {
	Is_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union()
}

// Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union_E_OpenconfigMplsRsvp_Session_LabelIn is used when /openconfig-mpls/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-in
// is to be set to a E_OpenconfigMplsRsvp_Session_LabelIn value.
type Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union_E_OpenconfigMplsRsvp_Session_LabelIn struct {
	E_OpenconfigMplsRsvp_Session_LabelIn E_OpenconfigMplsRsvp_Session_LabelIn
}

// Is_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union ensures that Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union_E_OpenconfigMplsRsvp_Session_LabelIn
// implements the Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union interface.
func (*Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union_E_OpenconfigMplsRsvp_Session_LabelIn) Is_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union() {
}

// Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union_Uint32 is used when /openconfig-mpls/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-in
// is to be set to a uint32 value.
type Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union_Uint32 struct {
	Uint32 uint32
}

// Is_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union ensures that Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union_Uint32
// implements the Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union interface.
func (*Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union_Uint32) Is_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union() {
}

// To_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Mpls_SignalingProtocols_RsvpTe_Session) To_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union(i interface{}) (Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigMplsRsvp_Session_LabelIn:
		return &Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union_E_OpenconfigMplsRsvp_Session_LabelIn{v}, nil
	case uint32:
		return &Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsRsvp_Session_LabelIn, uint32]", i, i)
	}
}

// Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-mpls/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-out within the YANG schema.
type Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union interface {
	Is_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union()
}

// Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union_E_OpenconfigMplsRsvp_Session_LabelOut is used when /openconfig-mpls/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-out
// is to be set to a E_OpenconfigMplsRsvp_Session_LabelOut value.
type Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union_E_OpenconfigMplsRsvp_Session_LabelOut struct {
	E_OpenconfigMplsRsvp_Session_LabelOut E_OpenconfigMplsRsvp_Session_LabelOut
}

// Is_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union ensures that Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union_E_OpenconfigMplsRsvp_Session_LabelOut
// implements the Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union interface.
func (*Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union_E_OpenconfigMplsRsvp_Session_LabelOut) Is_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union() {
}

// Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union_Uint32 is used when /openconfig-mpls/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-out
// is to be set to a uint32 value.
type Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union_Uint32 struct {
	Uint32 uint32
}

// Is_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union ensures that Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union_Uint32
// implements the Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union interface.
func (*Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union_Uint32) Is_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union() {
}

// To_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Mpls_SignalingProtocols_RsvpTe_Session) To_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union(i interface{}) (Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigMplsRsvp_Session_LabelOut:
		return &Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union_E_OpenconfigMplsRsvp_Session_LabelOut{v}, nil
	case uint32:
		return &Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsRsvp_Session_LabelOut, uint32]", i, i)
	}
}

// Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-mpls/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-label within the YANG schema.
type Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union interface {
	Is_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union()
}

// Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union_E_OpenconfigMplsRsvp_RecordRouteObject_ReportedLabel is used when /openconfig-mpls/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-label
// is to be set to a E_OpenconfigMplsRsvp_RecordRouteObject_ReportedLabel value.
type Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union_E_OpenconfigMplsRsvp_RecordRouteObject_ReportedLabel struct {
	E_OpenconfigMplsRsvp_RecordRouteObject_ReportedLabel E_OpenconfigMplsRsvp_RecordRouteObject_ReportedLabel
}

// Is_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union ensures that Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union_E_OpenconfigMplsRsvp_RecordRouteObject_ReportedLabel
// implements the Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union interface.
func (*Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union_E_OpenconfigMplsRsvp_RecordRouteObject_ReportedLabel) Is_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union() {
}

// Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union_Uint32 is used when /openconfig-mpls/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-label
// is to be set to a uint32 value.
type Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union_Uint32 struct {
	Uint32 uint32
}

// Is_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union ensures that Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union_Uint32
// implements the Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union interface.
func (*Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union_Uint32) Is_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union() {
}

// To_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject) To_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union(i interface{}) (Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigMplsRsvp_RecordRouteObject_ReportedLabel:
		return &Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union_E_OpenconfigMplsRsvp_RecordRouteObject_ReportedLabel{v}, nil
	case uint32:
		return &Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsRsvp_RecordRouteObject_ReportedLabel, uint32]", i, i)
	}
}

// Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-mpls/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/peak-data-rate within the YANG schema.
type Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union interface {
	Is_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union()
}

// Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union_Binary is used when /openconfig-mpls/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/peak-data-rate
// is to be set to a Binary value.
type Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union_Binary struct {
	Binary Binary
}

// Is_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union ensures that Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union_Binary
// implements the Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union interface.
func (*Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union_Binary) Is_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union() {
}

// Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union_E_OpenconfigMplsRsvp_State_PeakDataRate is used when /openconfig-mpls/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/peak-data-rate
// is to be set to a E_OpenconfigMplsRsvp_State_PeakDataRate value.
type Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union_E_OpenconfigMplsRsvp_State_PeakDataRate struct {
	E_OpenconfigMplsRsvp_State_PeakDataRate E_OpenconfigMplsRsvp_State_PeakDataRate
}

// Is_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union ensures that Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union_E_OpenconfigMplsRsvp_State_PeakDataRate
// implements the Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union interface.
func (*Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union_E_OpenconfigMplsRsvp_State_PeakDataRate) Is_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union() {
}

// To_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec) To_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union(i interface{}) (Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union, error) {
	switch v := i.(type) {
	case Binary:
		return &Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union_Binary{v}, nil
	case E_OpenconfigMplsRsvp_State_PeakDataRate:
		return &Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union_E_OpenconfigMplsRsvp_State_PeakDataRate{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union, unknown union type, got: %T, want any of [Binary, E_OpenconfigMplsRsvp_State_PeakDataRate]", i, i)
	}
}

// Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-mpls/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/mpls-label within the YANG schema.
type Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union interface {
	Is_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union()
}

// Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union_E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel is used when /openconfig-mpls/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/mpls-label
// is to be set to a E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel value.
type Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union_E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel struct {
	E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel
}

// Is_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union ensures that Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union_E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel
// implements the Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union interface.
func (*Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union_E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel) Is_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union() {
}

// Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union_Uint32 is used when /openconfig-mpls/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/mpls-label
// is to be set to a uint32 value.
type Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union_Uint32 struct {
	Uint32 uint32
}

// Is_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union ensures that Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union_Uint32
// implements the Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union interface.
func (*Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union_Uint32) Is_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union() {
}

// To_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter) To_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union(i interface{}) (Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel:
		return &Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union_E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel{v}, nil
	case uint32:
		return &Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel, uint32]", i, i)
	}
}

// Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-mpls/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/mpls-label within the YANG schema.
type Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union interface {
	Is_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union()
}

// Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union_E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel is used when /openconfig-mpls/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/mpls-label
// is to be set to a E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel value.
type Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union_E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel struct {
	E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel
}

// Is_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union ensures that Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union_E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel
// implements the Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union interface.
func (*Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union_E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel) Is_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union() {
}

// Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union_Uint32 is used when /openconfig-mpls/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/mpls-label
// is to be set to a uint32 value.
type Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union_Uint32 struct {
	Uint32 uint32
}

// Is_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union ensures that Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union_Uint32
// implements the Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union interface.
func (*Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union_Uint32) Is_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union() {
}

// To_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter) To_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union(i interface{}) (Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel:
		return &Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union_E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel{v}, nil
	case uint32:
		return &Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel, uint32]", i, i)
	}
}

// NetworkInstance_Afts_Ipv4Entry_NextHop_PoppedMplsLabelStack_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/next-hops/next-hop/state/popped-mpls-label-stack within the YANG schema.
type NetworkInstance_Afts_Ipv4Entry_NextHop_PoppedMplsLabelStack_Union interface {
	Is_NetworkInstance_Afts_Ipv4Entry_NextHop_PoppedMplsLabelStack_Union()
}

// NetworkInstance_Afts_Ipv4Entry_NextHop_PoppedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PoppedMplsLabelStack is used when /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/next-hops/next-hop/state/popped-mpls-label-stack
// is to be set to a E_OpenconfigAft_NextHop_PoppedMplsLabelStack value.
type NetworkInstance_Afts_Ipv4Entry_NextHop_PoppedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PoppedMplsLabelStack struct {
	E_OpenconfigAft_NextHop_PoppedMplsLabelStack E_OpenconfigAft_NextHop_PoppedMplsLabelStack
}

// Is_NetworkInstance_Afts_Ipv4Entry_NextHop_PoppedMplsLabelStack_Union ensures that NetworkInstance_Afts_Ipv4Entry_NextHop_PoppedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PoppedMplsLabelStack
// implements the NetworkInstance_Afts_Ipv4Entry_NextHop_PoppedMplsLabelStack_Union interface.
func (*NetworkInstance_Afts_Ipv4Entry_NextHop_PoppedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PoppedMplsLabelStack) Is_NetworkInstance_Afts_Ipv4Entry_NextHop_PoppedMplsLabelStack_Union() {
}

// NetworkInstance_Afts_Ipv4Entry_NextHop_PoppedMplsLabelStack_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/next-hops/next-hop/state/popped-mpls-label-stack
// is to be set to a uint32 value.
type NetworkInstance_Afts_Ipv4Entry_NextHop_PoppedMplsLabelStack_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Afts_Ipv4Entry_NextHop_PoppedMplsLabelStack_Union ensures that NetworkInstance_Afts_Ipv4Entry_NextHop_PoppedMplsLabelStack_Union_Uint32
// implements the NetworkInstance_Afts_Ipv4Entry_NextHop_PoppedMplsLabelStack_Union interface.
func (*NetworkInstance_Afts_Ipv4Entry_NextHop_PoppedMplsLabelStack_Union_Uint32) Is_NetworkInstance_Afts_Ipv4Entry_NextHop_PoppedMplsLabelStack_Union() {
}

// To_NetworkInstance_Afts_Ipv4Entry_NextHop_PoppedMplsLabelStack_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Afts_Ipv4Entry_NextHop_PoppedMplsLabelStack_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Afts_Ipv4Entry_NextHop) To_NetworkInstance_Afts_Ipv4Entry_NextHop_PoppedMplsLabelStack_Union(i interface{}) (NetworkInstance_Afts_Ipv4Entry_NextHop_PoppedMplsLabelStack_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAft_NextHop_PoppedMplsLabelStack:
		return &NetworkInstance_Afts_Ipv4Entry_NextHop_PoppedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PoppedMplsLabelStack{v}, nil
	case uint32:
		return &NetworkInstance_Afts_Ipv4Entry_NextHop_PoppedMplsLabelStack_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Afts_Ipv4Entry_NextHop_PoppedMplsLabelStack_Union, unknown union type, got: %T, want any of [E_OpenconfigAft_NextHop_PoppedMplsLabelStack, uint32]", i, i)
	}
}

// NetworkInstance_Afts_Ipv4Entry_NextHop_PushedMplsLabelStack_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/next-hops/next-hop/state/pushed-mpls-label-stack within the YANG schema.
type NetworkInstance_Afts_Ipv4Entry_NextHop_PushedMplsLabelStack_Union interface {
	Is_NetworkInstance_Afts_Ipv4Entry_NextHop_PushedMplsLabelStack_Union()
}

// NetworkInstance_Afts_Ipv4Entry_NextHop_PushedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PushedMplsLabelStack is used when /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/next-hops/next-hop/state/pushed-mpls-label-stack
// is to be set to a E_OpenconfigAft_NextHop_PushedMplsLabelStack value.
type NetworkInstance_Afts_Ipv4Entry_NextHop_PushedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PushedMplsLabelStack struct {
	E_OpenconfigAft_NextHop_PushedMplsLabelStack E_OpenconfigAft_NextHop_PushedMplsLabelStack
}

// Is_NetworkInstance_Afts_Ipv4Entry_NextHop_PushedMplsLabelStack_Union ensures that NetworkInstance_Afts_Ipv4Entry_NextHop_PushedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PushedMplsLabelStack
// implements the NetworkInstance_Afts_Ipv4Entry_NextHop_PushedMplsLabelStack_Union interface.
func (*NetworkInstance_Afts_Ipv4Entry_NextHop_PushedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PushedMplsLabelStack) Is_NetworkInstance_Afts_Ipv4Entry_NextHop_PushedMplsLabelStack_Union() {
}

// NetworkInstance_Afts_Ipv4Entry_NextHop_PushedMplsLabelStack_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/next-hops/next-hop/state/pushed-mpls-label-stack
// is to be set to a uint32 value.
type NetworkInstance_Afts_Ipv4Entry_NextHop_PushedMplsLabelStack_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Afts_Ipv4Entry_NextHop_PushedMplsLabelStack_Union ensures that NetworkInstance_Afts_Ipv4Entry_NextHop_PushedMplsLabelStack_Union_Uint32
// implements the NetworkInstance_Afts_Ipv4Entry_NextHop_PushedMplsLabelStack_Union interface.
func (*NetworkInstance_Afts_Ipv4Entry_NextHop_PushedMplsLabelStack_Union_Uint32) Is_NetworkInstance_Afts_Ipv4Entry_NextHop_PushedMplsLabelStack_Union() {
}

// To_NetworkInstance_Afts_Ipv4Entry_NextHop_PushedMplsLabelStack_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Afts_Ipv4Entry_NextHop_PushedMplsLabelStack_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Afts_Ipv4Entry_NextHop) To_NetworkInstance_Afts_Ipv4Entry_NextHop_PushedMplsLabelStack_Union(i interface{}) (NetworkInstance_Afts_Ipv4Entry_NextHop_PushedMplsLabelStack_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAft_NextHop_PushedMplsLabelStack:
		return &NetworkInstance_Afts_Ipv4Entry_NextHop_PushedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PushedMplsLabelStack{v}, nil
	case uint32:
		return &NetworkInstance_Afts_Ipv4Entry_NextHop_PushedMplsLabelStack_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Afts_Ipv4Entry_NextHop_PushedMplsLabelStack_Union, unknown union type, got: %T, want any of [E_OpenconfigAft_NextHop_PushedMplsLabelStack, uint32]", i, i)
	}
}

// NetworkInstance_Afts_Ipv6Entry_NextHop_PoppedMplsLabelStack_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/next-hops/next-hop/state/popped-mpls-label-stack within the YANG schema.
type NetworkInstance_Afts_Ipv6Entry_NextHop_PoppedMplsLabelStack_Union interface {
	Is_NetworkInstance_Afts_Ipv6Entry_NextHop_PoppedMplsLabelStack_Union()
}

// NetworkInstance_Afts_Ipv6Entry_NextHop_PoppedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PoppedMplsLabelStack is used when /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/next-hops/next-hop/state/popped-mpls-label-stack
// is to be set to a E_OpenconfigAft_NextHop_PoppedMplsLabelStack value.
type NetworkInstance_Afts_Ipv6Entry_NextHop_PoppedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PoppedMplsLabelStack struct {
	E_OpenconfigAft_NextHop_PoppedMplsLabelStack E_OpenconfigAft_NextHop_PoppedMplsLabelStack
}

// Is_NetworkInstance_Afts_Ipv6Entry_NextHop_PoppedMplsLabelStack_Union ensures that NetworkInstance_Afts_Ipv6Entry_NextHop_PoppedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PoppedMplsLabelStack
// implements the NetworkInstance_Afts_Ipv6Entry_NextHop_PoppedMplsLabelStack_Union interface.
func (*NetworkInstance_Afts_Ipv6Entry_NextHop_PoppedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PoppedMplsLabelStack) Is_NetworkInstance_Afts_Ipv6Entry_NextHop_PoppedMplsLabelStack_Union() {
}

// NetworkInstance_Afts_Ipv6Entry_NextHop_PoppedMplsLabelStack_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/next-hops/next-hop/state/popped-mpls-label-stack
// is to be set to a uint32 value.
type NetworkInstance_Afts_Ipv6Entry_NextHop_PoppedMplsLabelStack_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Afts_Ipv6Entry_NextHop_PoppedMplsLabelStack_Union ensures that NetworkInstance_Afts_Ipv6Entry_NextHop_PoppedMplsLabelStack_Union_Uint32
// implements the NetworkInstance_Afts_Ipv6Entry_NextHop_PoppedMplsLabelStack_Union interface.
func (*NetworkInstance_Afts_Ipv6Entry_NextHop_PoppedMplsLabelStack_Union_Uint32) Is_NetworkInstance_Afts_Ipv6Entry_NextHop_PoppedMplsLabelStack_Union() {
}

// To_NetworkInstance_Afts_Ipv6Entry_NextHop_PoppedMplsLabelStack_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Afts_Ipv6Entry_NextHop_PoppedMplsLabelStack_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Afts_Ipv6Entry_NextHop) To_NetworkInstance_Afts_Ipv6Entry_NextHop_PoppedMplsLabelStack_Union(i interface{}) (NetworkInstance_Afts_Ipv6Entry_NextHop_PoppedMplsLabelStack_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAft_NextHop_PoppedMplsLabelStack:
		return &NetworkInstance_Afts_Ipv6Entry_NextHop_PoppedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PoppedMplsLabelStack{v}, nil
	case uint32:
		return &NetworkInstance_Afts_Ipv6Entry_NextHop_PoppedMplsLabelStack_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Afts_Ipv6Entry_NextHop_PoppedMplsLabelStack_Union, unknown union type, got: %T, want any of [E_OpenconfigAft_NextHop_PoppedMplsLabelStack, uint32]", i, i)
	}
}

// NetworkInstance_Afts_Ipv6Entry_NextHop_PushedMplsLabelStack_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/next-hops/next-hop/state/pushed-mpls-label-stack within the YANG schema.
type NetworkInstance_Afts_Ipv6Entry_NextHop_PushedMplsLabelStack_Union interface {
	Is_NetworkInstance_Afts_Ipv6Entry_NextHop_PushedMplsLabelStack_Union()
}

// NetworkInstance_Afts_Ipv6Entry_NextHop_PushedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PushedMplsLabelStack is used when /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/next-hops/next-hop/state/pushed-mpls-label-stack
// is to be set to a E_OpenconfigAft_NextHop_PushedMplsLabelStack value.
type NetworkInstance_Afts_Ipv6Entry_NextHop_PushedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PushedMplsLabelStack struct {
	E_OpenconfigAft_NextHop_PushedMplsLabelStack E_OpenconfigAft_NextHop_PushedMplsLabelStack
}

// Is_NetworkInstance_Afts_Ipv6Entry_NextHop_PushedMplsLabelStack_Union ensures that NetworkInstance_Afts_Ipv6Entry_NextHop_PushedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PushedMplsLabelStack
// implements the NetworkInstance_Afts_Ipv6Entry_NextHop_PushedMplsLabelStack_Union interface.
func (*NetworkInstance_Afts_Ipv6Entry_NextHop_PushedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PushedMplsLabelStack) Is_NetworkInstance_Afts_Ipv6Entry_NextHop_PushedMplsLabelStack_Union() {
}

// NetworkInstance_Afts_Ipv6Entry_NextHop_PushedMplsLabelStack_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/next-hops/next-hop/state/pushed-mpls-label-stack
// is to be set to a uint32 value.
type NetworkInstance_Afts_Ipv6Entry_NextHop_PushedMplsLabelStack_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Afts_Ipv6Entry_NextHop_PushedMplsLabelStack_Union ensures that NetworkInstance_Afts_Ipv6Entry_NextHop_PushedMplsLabelStack_Union_Uint32
// implements the NetworkInstance_Afts_Ipv6Entry_NextHop_PushedMplsLabelStack_Union interface.
func (*NetworkInstance_Afts_Ipv6Entry_NextHop_PushedMplsLabelStack_Union_Uint32) Is_NetworkInstance_Afts_Ipv6Entry_NextHop_PushedMplsLabelStack_Union() {
}

// To_NetworkInstance_Afts_Ipv6Entry_NextHop_PushedMplsLabelStack_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Afts_Ipv6Entry_NextHop_PushedMplsLabelStack_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Afts_Ipv6Entry_NextHop) To_NetworkInstance_Afts_Ipv6Entry_NextHop_PushedMplsLabelStack_Union(i interface{}) (NetworkInstance_Afts_Ipv6Entry_NextHop_PushedMplsLabelStack_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAft_NextHop_PushedMplsLabelStack:
		return &NetworkInstance_Afts_Ipv6Entry_NextHop_PushedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PushedMplsLabelStack{v}, nil
	case uint32:
		return &NetworkInstance_Afts_Ipv6Entry_NextHop_PushedMplsLabelStack_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Afts_Ipv6Entry_NextHop_PushedMplsLabelStack_Union, unknown union type, got: %T, want any of [E_OpenconfigAft_NextHop_PushedMplsLabelStack, uint32]", i, i)
	}
}

// NetworkInstance_Afts_LabelEntry_Label_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/config/label within the YANG schema.
type NetworkInstance_Afts_LabelEntry_Label_Union interface {
	Is_NetworkInstance_Afts_LabelEntry_Label_Union()
}

// NetworkInstance_Afts_LabelEntry_Label_Union_E_OpenconfigAft_LabelEntry_Label is used when /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/config/label
// is to be set to a E_OpenconfigAft_LabelEntry_Label value.
type NetworkInstance_Afts_LabelEntry_Label_Union_E_OpenconfigAft_LabelEntry_Label struct {
	E_OpenconfigAft_LabelEntry_Label E_OpenconfigAft_LabelEntry_Label
}

// Is_NetworkInstance_Afts_LabelEntry_Label_Union ensures that NetworkInstance_Afts_LabelEntry_Label_Union_E_OpenconfigAft_LabelEntry_Label
// implements the NetworkInstance_Afts_LabelEntry_Label_Union interface.
func (*NetworkInstance_Afts_LabelEntry_Label_Union_E_OpenconfigAft_LabelEntry_Label) Is_NetworkInstance_Afts_LabelEntry_Label_Union() {
}

// NetworkInstance_Afts_LabelEntry_Label_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/config/label
// is to be set to a uint32 value.
type NetworkInstance_Afts_LabelEntry_Label_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Afts_LabelEntry_Label_Union ensures that NetworkInstance_Afts_LabelEntry_Label_Union_Uint32
// implements the NetworkInstance_Afts_LabelEntry_Label_Union interface.
func (*NetworkInstance_Afts_LabelEntry_Label_Union_Uint32) Is_NetworkInstance_Afts_LabelEntry_Label_Union() {
}

// To_NetworkInstance_Afts_LabelEntry_Label_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Afts_LabelEntry_Label_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Afts_LabelEntry) To_NetworkInstance_Afts_LabelEntry_Label_Union(i interface{}) (NetworkInstance_Afts_LabelEntry_Label_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAft_LabelEntry_Label:
		return &NetworkInstance_Afts_LabelEntry_Label_Union_E_OpenconfigAft_LabelEntry_Label{v}, nil
	case uint32:
		return &NetworkInstance_Afts_LabelEntry_Label_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Afts_LabelEntry_Label_Union, unknown union type, got: %T, want any of [E_OpenconfigAft_LabelEntry_Label, uint32]", i, i)
	}
}

// NetworkInstance_Afts_LabelEntry_NextHop_PoppedMplsLabelStack_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/next-hops/next-hop/state/popped-mpls-label-stack within the YANG schema.
type NetworkInstance_Afts_LabelEntry_NextHop_PoppedMplsLabelStack_Union interface {
	Is_NetworkInstance_Afts_LabelEntry_NextHop_PoppedMplsLabelStack_Union()
}

// NetworkInstance_Afts_LabelEntry_NextHop_PoppedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PoppedMplsLabelStack is used when /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/next-hops/next-hop/state/popped-mpls-label-stack
// is to be set to a E_OpenconfigAft_NextHop_PoppedMplsLabelStack value.
type NetworkInstance_Afts_LabelEntry_NextHop_PoppedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PoppedMplsLabelStack struct {
	E_OpenconfigAft_NextHop_PoppedMplsLabelStack E_OpenconfigAft_NextHop_PoppedMplsLabelStack
}

// Is_NetworkInstance_Afts_LabelEntry_NextHop_PoppedMplsLabelStack_Union ensures that NetworkInstance_Afts_LabelEntry_NextHop_PoppedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PoppedMplsLabelStack
// implements the NetworkInstance_Afts_LabelEntry_NextHop_PoppedMplsLabelStack_Union interface.
func (*NetworkInstance_Afts_LabelEntry_NextHop_PoppedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PoppedMplsLabelStack) Is_NetworkInstance_Afts_LabelEntry_NextHop_PoppedMplsLabelStack_Union() {
}

// NetworkInstance_Afts_LabelEntry_NextHop_PoppedMplsLabelStack_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/next-hops/next-hop/state/popped-mpls-label-stack
// is to be set to a uint32 value.
type NetworkInstance_Afts_LabelEntry_NextHop_PoppedMplsLabelStack_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Afts_LabelEntry_NextHop_PoppedMplsLabelStack_Union ensures that NetworkInstance_Afts_LabelEntry_NextHop_PoppedMplsLabelStack_Union_Uint32
// implements the NetworkInstance_Afts_LabelEntry_NextHop_PoppedMplsLabelStack_Union interface.
func (*NetworkInstance_Afts_LabelEntry_NextHop_PoppedMplsLabelStack_Union_Uint32) Is_NetworkInstance_Afts_LabelEntry_NextHop_PoppedMplsLabelStack_Union() {
}

// To_NetworkInstance_Afts_LabelEntry_NextHop_PoppedMplsLabelStack_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Afts_LabelEntry_NextHop_PoppedMplsLabelStack_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Afts_LabelEntry_NextHop) To_NetworkInstance_Afts_LabelEntry_NextHop_PoppedMplsLabelStack_Union(i interface{}) (NetworkInstance_Afts_LabelEntry_NextHop_PoppedMplsLabelStack_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAft_NextHop_PoppedMplsLabelStack:
		return &NetworkInstance_Afts_LabelEntry_NextHop_PoppedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PoppedMplsLabelStack{v}, nil
	case uint32:
		return &NetworkInstance_Afts_LabelEntry_NextHop_PoppedMplsLabelStack_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Afts_LabelEntry_NextHop_PoppedMplsLabelStack_Union, unknown union type, got: %T, want any of [E_OpenconfigAft_NextHop_PoppedMplsLabelStack, uint32]", i, i)
	}
}

// NetworkInstance_Afts_LabelEntry_NextHop_PushedMplsLabelStack_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/next-hops/next-hop/state/pushed-mpls-label-stack within the YANG schema.
type NetworkInstance_Afts_LabelEntry_NextHop_PushedMplsLabelStack_Union interface {
	Is_NetworkInstance_Afts_LabelEntry_NextHop_PushedMplsLabelStack_Union()
}

// NetworkInstance_Afts_LabelEntry_NextHop_PushedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PushedMplsLabelStack is used when /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/next-hops/next-hop/state/pushed-mpls-label-stack
// is to be set to a E_OpenconfigAft_NextHop_PushedMplsLabelStack value.
type NetworkInstance_Afts_LabelEntry_NextHop_PushedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PushedMplsLabelStack struct {
	E_OpenconfigAft_NextHop_PushedMplsLabelStack E_OpenconfigAft_NextHop_PushedMplsLabelStack
}

// Is_NetworkInstance_Afts_LabelEntry_NextHop_PushedMplsLabelStack_Union ensures that NetworkInstance_Afts_LabelEntry_NextHop_PushedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PushedMplsLabelStack
// implements the NetworkInstance_Afts_LabelEntry_NextHop_PushedMplsLabelStack_Union interface.
func (*NetworkInstance_Afts_LabelEntry_NextHop_PushedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PushedMplsLabelStack) Is_NetworkInstance_Afts_LabelEntry_NextHop_PushedMplsLabelStack_Union() {
}

// NetworkInstance_Afts_LabelEntry_NextHop_PushedMplsLabelStack_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/next-hops/next-hop/state/pushed-mpls-label-stack
// is to be set to a uint32 value.
type NetworkInstance_Afts_LabelEntry_NextHop_PushedMplsLabelStack_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Afts_LabelEntry_NextHop_PushedMplsLabelStack_Union ensures that NetworkInstance_Afts_LabelEntry_NextHop_PushedMplsLabelStack_Union_Uint32
// implements the NetworkInstance_Afts_LabelEntry_NextHop_PushedMplsLabelStack_Union interface.
func (*NetworkInstance_Afts_LabelEntry_NextHop_PushedMplsLabelStack_Union_Uint32) Is_NetworkInstance_Afts_LabelEntry_NextHop_PushedMplsLabelStack_Union() {
}

// To_NetworkInstance_Afts_LabelEntry_NextHop_PushedMplsLabelStack_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Afts_LabelEntry_NextHop_PushedMplsLabelStack_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Afts_LabelEntry_NextHop) To_NetworkInstance_Afts_LabelEntry_NextHop_PushedMplsLabelStack_Union(i interface{}) (NetworkInstance_Afts_LabelEntry_NextHop_PushedMplsLabelStack_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAft_NextHop_PushedMplsLabelStack:
		return &NetworkInstance_Afts_LabelEntry_NextHop_PushedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PushedMplsLabelStack{v}, nil
	case uint32:
		return &NetworkInstance_Afts_LabelEntry_NextHop_PushedMplsLabelStack_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Afts_LabelEntry_NextHop_PushedMplsLabelStack_Union, unknown union type, got: %T, want any of [E_OpenconfigAft_NextHop_PushedMplsLabelStack, uint32]", i, i)
	}
}

// NetworkInstance_Afts_MacEntry_NextHop_PoppedMplsLabelStack_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/next-hops/next-hop/state/popped-mpls-label-stack within the YANG schema.
type NetworkInstance_Afts_MacEntry_NextHop_PoppedMplsLabelStack_Union interface {
	Is_NetworkInstance_Afts_MacEntry_NextHop_PoppedMplsLabelStack_Union()
}

// NetworkInstance_Afts_MacEntry_NextHop_PoppedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PoppedMplsLabelStack is used when /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/next-hops/next-hop/state/popped-mpls-label-stack
// is to be set to a E_OpenconfigAft_NextHop_PoppedMplsLabelStack value.
type NetworkInstance_Afts_MacEntry_NextHop_PoppedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PoppedMplsLabelStack struct {
	E_OpenconfigAft_NextHop_PoppedMplsLabelStack E_OpenconfigAft_NextHop_PoppedMplsLabelStack
}

// Is_NetworkInstance_Afts_MacEntry_NextHop_PoppedMplsLabelStack_Union ensures that NetworkInstance_Afts_MacEntry_NextHop_PoppedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PoppedMplsLabelStack
// implements the NetworkInstance_Afts_MacEntry_NextHop_PoppedMplsLabelStack_Union interface.
func (*NetworkInstance_Afts_MacEntry_NextHop_PoppedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PoppedMplsLabelStack) Is_NetworkInstance_Afts_MacEntry_NextHop_PoppedMplsLabelStack_Union() {
}

// NetworkInstance_Afts_MacEntry_NextHop_PoppedMplsLabelStack_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/next-hops/next-hop/state/popped-mpls-label-stack
// is to be set to a uint32 value.
type NetworkInstance_Afts_MacEntry_NextHop_PoppedMplsLabelStack_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Afts_MacEntry_NextHop_PoppedMplsLabelStack_Union ensures that NetworkInstance_Afts_MacEntry_NextHop_PoppedMplsLabelStack_Union_Uint32
// implements the NetworkInstance_Afts_MacEntry_NextHop_PoppedMplsLabelStack_Union interface.
func (*NetworkInstance_Afts_MacEntry_NextHop_PoppedMplsLabelStack_Union_Uint32) Is_NetworkInstance_Afts_MacEntry_NextHop_PoppedMplsLabelStack_Union() {
}

// To_NetworkInstance_Afts_MacEntry_NextHop_PoppedMplsLabelStack_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Afts_MacEntry_NextHop_PoppedMplsLabelStack_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Afts_MacEntry_NextHop) To_NetworkInstance_Afts_MacEntry_NextHop_PoppedMplsLabelStack_Union(i interface{}) (NetworkInstance_Afts_MacEntry_NextHop_PoppedMplsLabelStack_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAft_NextHop_PoppedMplsLabelStack:
		return &NetworkInstance_Afts_MacEntry_NextHop_PoppedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PoppedMplsLabelStack{v}, nil
	case uint32:
		return &NetworkInstance_Afts_MacEntry_NextHop_PoppedMplsLabelStack_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Afts_MacEntry_NextHop_PoppedMplsLabelStack_Union, unknown union type, got: %T, want any of [E_OpenconfigAft_NextHop_PoppedMplsLabelStack, uint32]", i, i)
	}
}

// NetworkInstance_Afts_MacEntry_NextHop_PushedMplsLabelStack_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/next-hops/next-hop/state/pushed-mpls-label-stack within the YANG schema.
type NetworkInstance_Afts_MacEntry_NextHop_PushedMplsLabelStack_Union interface {
	Is_NetworkInstance_Afts_MacEntry_NextHop_PushedMplsLabelStack_Union()
}

// NetworkInstance_Afts_MacEntry_NextHop_PushedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PushedMplsLabelStack is used when /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/next-hops/next-hop/state/pushed-mpls-label-stack
// is to be set to a E_OpenconfigAft_NextHop_PushedMplsLabelStack value.
type NetworkInstance_Afts_MacEntry_NextHop_PushedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PushedMplsLabelStack struct {
	E_OpenconfigAft_NextHop_PushedMplsLabelStack E_OpenconfigAft_NextHop_PushedMplsLabelStack
}

// Is_NetworkInstance_Afts_MacEntry_NextHop_PushedMplsLabelStack_Union ensures that NetworkInstance_Afts_MacEntry_NextHop_PushedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PushedMplsLabelStack
// implements the NetworkInstance_Afts_MacEntry_NextHop_PushedMplsLabelStack_Union interface.
func (*NetworkInstance_Afts_MacEntry_NextHop_PushedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PushedMplsLabelStack) Is_NetworkInstance_Afts_MacEntry_NextHop_PushedMplsLabelStack_Union() {
}

// NetworkInstance_Afts_MacEntry_NextHop_PushedMplsLabelStack_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/next-hops/next-hop/state/pushed-mpls-label-stack
// is to be set to a uint32 value.
type NetworkInstance_Afts_MacEntry_NextHop_PushedMplsLabelStack_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Afts_MacEntry_NextHop_PushedMplsLabelStack_Union ensures that NetworkInstance_Afts_MacEntry_NextHop_PushedMplsLabelStack_Union_Uint32
// implements the NetworkInstance_Afts_MacEntry_NextHop_PushedMplsLabelStack_Union interface.
func (*NetworkInstance_Afts_MacEntry_NextHop_PushedMplsLabelStack_Union_Uint32) Is_NetworkInstance_Afts_MacEntry_NextHop_PushedMplsLabelStack_Union() {
}

// To_NetworkInstance_Afts_MacEntry_NextHop_PushedMplsLabelStack_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Afts_MacEntry_NextHop_PushedMplsLabelStack_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Afts_MacEntry_NextHop) To_NetworkInstance_Afts_MacEntry_NextHop_PushedMplsLabelStack_Union(i interface{}) (NetworkInstance_Afts_MacEntry_NextHop_PushedMplsLabelStack_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAft_NextHop_PushedMplsLabelStack:
		return &NetworkInstance_Afts_MacEntry_NextHop_PushedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PushedMplsLabelStack{v}, nil
	case uint32:
		return &NetworkInstance_Afts_MacEntry_NextHop_PushedMplsLabelStack_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Afts_MacEntry_NextHop_PushedMplsLabelStack_Union, unknown union type, got: %T, want any of [E_OpenconfigAft_NextHop_PushedMplsLabelStack, uint32]", i, i)
	}
}

// NetworkInstance_Afts_PolicyForwardingEntry_IpProtocol_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/config/ip-protocol within the YANG schema.
type NetworkInstance_Afts_PolicyForwardingEntry_IpProtocol_Union interface {
	Is_NetworkInstance_Afts_PolicyForwardingEntry_IpProtocol_Union()
}

// NetworkInstance_Afts_PolicyForwardingEntry_IpProtocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL is used when /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/config/ip-protocol
// is to be set to a E_OpenconfigPacketMatchTypes_IP_PROTOCOL value.
type NetworkInstance_Afts_PolicyForwardingEntry_IpProtocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL struct {
	E_OpenconfigPacketMatchTypes_IP_PROTOCOL E_OpenconfigPacketMatchTypes_IP_PROTOCOL
}

// Is_NetworkInstance_Afts_PolicyForwardingEntry_IpProtocol_Union ensures that NetworkInstance_Afts_PolicyForwardingEntry_IpProtocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL
// implements the NetworkInstance_Afts_PolicyForwardingEntry_IpProtocol_Union interface.
func (*NetworkInstance_Afts_PolicyForwardingEntry_IpProtocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL) Is_NetworkInstance_Afts_PolicyForwardingEntry_IpProtocol_Union() {
}

// NetworkInstance_Afts_PolicyForwardingEntry_IpProtocol_Union_Uint8 is used when /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/config/ip-protocol
// is to be set to a uint8 value.
type NetworkInstance_Afts_PolicyForwardingEntry_IpProtocol_Union_Uint8 struct {
	Uint8 uint8
}

// Is_NetworkInstance_Afts_PolicyForwardingEntry_IpProtocol_Union ensures that NetworkInstance_Afts_PolicyForwardingEntry_IpProtocol_Union_Uint8
// implements the NetworkInstance_Afts_PolicyForwardingEntry_IpProtocol_Union interface.
func (*NetworkInstance_Afts_PolicyForwardingEntry_IpProtocol_Union_Uint8) Is_NetworkInstance_Afts_PolicyForwardingEntry_IpProtocol_Union() {
}

// To_NetworkInstance_Afts_PolicyForwardingEntry_IpProtocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Afts_PolicyForwardingEntry_IpProtocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Afts_PolicyForwardingEntry) To_NetworkInstance_Afts_PolicyForwardingEntry_IpProtocol_Union(i interface{}) (NetworkInstance_Afts_PolicyForwardingEntry_IpProtocol_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPacketMatchTypes_IP_PROTOCOL:
		return &NetworkInstance_Afts_PolicyForwardingEntry_IpProtocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL{v}, nil
	case uint8:
		return &NetworkInstance_Afts_PolicyForwardingEntry_IpProtocol_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Afts_PolicyForwardingEntry_IpProtocol_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, uint8]", i, i)
	}
}

// NetworkInstance_Afts_PolicyForwardingEntry_MplsLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/config/mpls-label within the YANG schema.
type NetworkInstance_Afts_PolicyForwardingEntry_MplsLabel_Union interface {
	Is_NetworkInstance_Afts_PolicyForwardingEntry_MplsLabel_Union()
}

// NetworkInstance_Afts_PolicyForwardingEntry_MplsLabel_Union_E_OpenconfigAft_PolicyForwardingEntry_MplsLabel is used when /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/config/mpls-label
// is to be set to a E_OpenconfigAft_PolicyForwardingEntry_MplsLabel value.
type NetworkInstance_Afts_PolicyForwardingEntry_MplsLabel_Union_E_OpenconfigAft_PolicyForwardingEntry_MplsLabel struct {
	E_OpenconfigAft_PolicyForwardingEntry_MplsLabel E_OpenconfigAft_PolicyForwardingEntry_MplsLabel
}

// Is_NetworkInstance_Afts_PolicyForwardingEntry_MplsLabel_Union ensures that NetworkInstance_Afts_PolicyForwardingEntry_MplsLabel_Union_E_OpenconfigAft_PolicyForwardingEntry_MplsLabel
// implements the NetworkInstance_Afts_PolicyForwardingEntry_MplsLabel_Union interface.
func (*NetworkInstance_Afts_PolicyForwardingEntry_MplsLabel_Union_E_OpenconfigAft_PolicyForwardingEntry_MplsLabel) Is_NetworkInstance_Afts_PolicyForwardingEntry_MplsLabel_Union() {
}

// NetworkInstance_Afts_PolicyForwardingEntry_MplsLabel_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/config/mpls-label
// is to be set to a uint32 value.
type NetworkInstance_Afts_PolicyForwardingEntry_MplsLabel_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Afts_PolicyForwardingEntry_MplsLabel_Union ensures that NetworkInstance_Afts_PolicyForwardingEntry_MplsLabel_Union_Uint32
// implements the NetworkInstance_Afts_PolicyForwardingEntry_MplsLabel_Union interface.
func (*NetworkInstance_Afts_PolicyForwardingEntry_MplsLabel_Union_Uint32) Is_NetworkInstance_Afts_PolicyForwardingEntry_MplsLabel_Union() {
}

// To_NetworkInstance_Afts_PolicyForwardingEntry_MplsLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Afts_PolicyForwardingEntry_MplsLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Afts_PolicyForwardingEntry) To_NetworkInstance_Afts_PolicyForwardingEntry_MplsLabel_Union(i interface{}) (NetworkInstance_Afts_PolicyForwardingEntry_MplsLabel_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAft_PolicyForwardingEntry_MplsLabel:
		return &NetworkInstance_Afts_PolicyForwardingEntry_MplsLabel_Union_E_OpenconfigAft_PolicyForwardingEntry_MplsLabel{v}, nil
	case uint32:
		return &NetworkInstance_Afts_PolicyForwardingEntry_MplsLabel_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Afts_PolicyForwardingEntry_MplsLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigAft_PolicyForwardingEntry_MplsLabel, uint32]", i, i)
	}
}

// NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PoppedMplsLabelStack_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/next-hops/next-hop/state/popped-mpls-label-stack within the YANG schema.
type NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PoppedMplsLabelStack_Union interface {
	Is_NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PoppedMplsLabelStack_Union()
}

// NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PoppedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PoppedMplsLabelStack is used when /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/next-hops/next-hop/state/popped-mpls-label-stack
// is to be set to a E_OpenconfigAft_NextHop_PoppedMplsLabelStack value.
type NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PoppedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PoppedMplsLabelStack struct {
	E_OpenconfigAft_NextHop_PoppedMplsLabelStack E_OpenconfigAft_NextHop_PoppedMplsLabelStack
}

// Is_NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PoppedMplsLabelStack_Union ensures that NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PoppedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PoppedMplsLabelStack
// implements the NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PoppedMplsLabelStack_Union interface.
func (*NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PoppedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PoppedMplsLabelStack) Is_NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PoppedMplsLabelStack_Union() {
}

// NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PoppedMplsLabelStack_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/next-hops/next-hop/state/popped-mpls-label-stack
// is to be set to a uint32 value.
type NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PoppedMplsLabelStack_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PoppedMplsLabelStack_Union ensures that NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PoppedMplsLabelStack_Union_Uint32
// implements the NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PoppedMplsLabelStack_Union interface.
func (*NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PoppedMplsLabelStack_Union_Uint32) Is_NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PoppedMplsLabelStack_Union() {
}

// To_NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PoppedMplsLabelStack_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PoppedMplsLabelStack_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Afts_PolicyForwardingEntry_NextHop) To_NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PoppedMplsLabelStack_Union(i interface{}) (NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PoppedMplsLabelStack_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAft_NextHop_PoppedMplsLabelStack:
		return &NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PoppedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PoppedMplsLabelStack{v}, nil
	case uint32:
		return &NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PoppedMplsLabelStack_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PoppedMplsLabelStack_Union, unknown union type, got: %T, want any of [E_OpenconfigAft_NextHop_PoppedMplsLabelStack, uint32]", i, i)
	}
}

// NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PushedMplsLabelStack_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/next-hops/next-hop/state/pushed-mpls-label-stack within the YANG schema.
type NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PushedMplsLabelStack_Union interface {
	Is_NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PushedMplsLabelStack_Union()
}

// NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PushedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PushedMplsLabelStack is used when /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/next-hops/next-hop/state/pushed-mpls-label-stack
// is to be set to a E_OpenconfigAft_NextHop_PushedMplsLabelStack value.
type NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PushedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PushedMplsLabelStack struct {
	E_OpenconfigAft_NextHop_PushedMplsLabelStack E_OpenconfigAft_NextHop_PushedMplsLabelStack
}

// Is_NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PushedMplsLabelStack_Union ensures that NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PushedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PushedMplsLabelStack
// implements the NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PushedMplsLabelStack_Union interface.
func (*NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PushedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PushedMplsLabelStack) Is_NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PushedMplsLabelStack_Union() {
}

// NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PushedMplsLabelStack_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/next-hops/next-hop/state/pushed-mpls-label-stack
// is to be set to a uint32 value.
type NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PushedMplsLabelStack_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PushedMplsLabelStack_Union ensures that NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PushedMplsLabelStack_Union_Uint32
// implements the NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PushedMplsLabelStack_Union interface.
func (*NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PushedMplsLabelStack_Union_Uint32) Is_NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PushedMplsLabelStack_Union() {
}

// To_NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PushedMplsLabelStack_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PushedMplsLabelStack_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Afts_PolicyForwardingEntry_NextHop) To_NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PushedMplsLabelStack_Union(i interface{}) (NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PushedMplsLabelStack_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAft_NextHop_PushedMplsLabelStack:
		return &NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PushedMplsLabelStack_Union_E_OpenconfigAft_NextHop_PushedMplsLabelStack{v}, nil
	case uint32:
		return &NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PushedMplsLabelStack_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Afts_PolicyForwardingEntry_NextHop_PushedMplsLabelStack_Union, unknown union type, got: %T, want any of [E_OpenconfigAft_NextHop_PushedMplsLabelStack, uint32]", i, i)
	}
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/lower-bound within the YANG schema.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union interface {
	Is_NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union()
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union_E_OpenconfigMpls_ReservedLabelBlock_LowerBound is used when /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/lower-bound
// is to be set to a E_OpenconfigMpls_ReservedLabelBlock_LowerBound value.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union_E_OpenconfigMpls_ReservedLabelBlock_LowerBound struct {
	E_OpenconfigMpls_ReservedLabelBlock_LowerBound E_OpenconfigMpls_ReservedLabelBlock_LowerBound
}

// Is_NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union ensures that NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union_E_OpenconfigMpls_ReservedLabelBlock_LowerBound
// implements the NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union interface.
func (*NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union_E_OpenconfigMpls_ReservedLabelBlock_LowerBound) Is_NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union() {
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/lower-bound
// is to be set to a uint32 value.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union ensures that NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union_Uint32
// implements the NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union interface.
func (*NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union_Uint32) Is_NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union() {
}

// To_NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Mpls_Global_ReservedLabelBlock) To_NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union(i interface{}) (NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigMpls_ReservedLabelBlock_LowerBound:
		return &NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union_E_OpenconfigMpls_ReservedLabelBlock_LowerBound{v}, nil
	case uint32:
		return &NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union, unknown union type, got: %T, want any of [E_OpenconfigMpls_ReservedLabelBlock_LowerBound, uint32]", i, i)
	}
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/upper-bound within the YANG schema.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union interface {
	Is_NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union()
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union_E_OpenconfigMpls_ReservedLabelBlock_UpperBound is used when /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/upper-bound
// is to be set to a E_OpenconfigMpls_ReservedLabelBlock_UpperBound value.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union_E_OpenconfigMpls_ReservedLabelBlock_UpperBound struct {
	E_OpenconfigMpls_ReservedLabelBlock_UpperBound E_OpenconfigMpls_ReservedLabelBlock_UpperBound
}

// Is_NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union ensures that NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union_E_OpenconfigMpls_ReservedLabelBlock_UpperBound
// implements the NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union interface.
func (*NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union_E_OpenconfigMpls_ReservedLabelBlock_UpperBound) Is_NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union() {
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/upper-bound
// is to be set to a uint32 value.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union ensures that NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union_Uint32
// implements the NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union interface.
func (*NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union_Uint32) Is_NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union() {
}

// To_NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Mpls_Global_ReservedLabelBlock) To_NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union(i interface{}) (NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigMpls_ReservedLabelBlock_UpperBound:
		return &NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union_E_OpenconfigMpls_ReservedLabelBlock_UpperBound{v}, nil
	case uint32:
		return &NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union, unknown union type, got: %T, want any of [E_OpenconfigMpls_ReservedLabelBlock_UpperBound, uint32]", i, i)
	}
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/incoming-label within the YANG schema.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union interface {
	Is_NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union()
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel is used when /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/incoming-label
// is to be set to a E_OpenconfigMpls_Egress_IncomingLabel value.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel struct {
	E_OpenconfigMpls_Egress_IncomingLabel E_OpenconfigMpls_Egress_IncomingLabel
}

// Is_NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union ensures that NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel
// implements the NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union interface.
func (*NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel) Is_NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union() {
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/incoming-label
// is to be set to a uint32 value.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union ensures that NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union_Uint32
// implements the NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union interface.
func (*NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union_Uint32) Is_NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union() {
}

// To_NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Mpls_Lsps_StaticLsp_Egress) To_NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union(i interface{}) (NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigMpls_Egress_IncomingLabel:
		return &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel{v}, nil
	case uint32:
		return &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMpls_Egress_IncomingLabel, uint32]", i, i)
	}
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/push-label within the YANG schema.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union interface {
	Is_NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union()
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel is used when /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/push-label
// is to be set to a E_OpenconfigMpls_Egress_PushLabel value.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel struct {
	E_OpenconfigMpls_Egress_PushLabel E_OpenconfigMpls_Egress_PushLabel
}

// Is_NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union ensures that NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel
// implements the NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union interface.
func (*NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel) Is_NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union() {
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/push-label
// is to be set to a uint32 value.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union ensures that NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union_Uint32
// implements the NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union interface.
func (*NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union_Uint32) Is_NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union() {
}

// To_NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Mpls_Lsps_StaticLsp_Egress) To_NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union(i interface{}) (NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigMpls_Egress_PushLabel:
		return &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel{v}, nil
	case uint32:
		return &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMpls_Egress_PushLabel, uint32]", i, i)
	}
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/incoming-label within the YANG schema.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union interface {
	Is_NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union()
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel is used when /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/incoming-label
// is to be set to a E_OpenconfigMpls_Egress_IncomingLabel value.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel struct {
	E_OpenconfigMpls_Egress_IncomingLabel E_OpenconfigMpls_Egress_IncomingLabel
}

// Is_NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union ensures that NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel
// implements the NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union interface.
func (*NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel) Is_NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union() {
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/incoming-label
// is to be set to a uint32 value.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union ensures that NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union_Uint32
// implements the NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union interface.
func (*NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union_Uint32) Is_NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union() {
}

// To_NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) To_NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union(i interface{}) (NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigMpls_Egress_IncomingLabel:
		return &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel{v}, nil
	case uint32:
		return &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMpls_Egress_IncomingLabel, uint32]", i, i)
	}
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/push-label within the YANG schema.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union interface {
	Is_NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union()
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel is used when /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/push-label
// is to be set to a E_OpenconfigMpls_Egress_PushLabel value.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel struct {
	E_OpenconfigMpls_Egress_PushLabel E_OpenconfigMpls_Egress_PushLabel
}

// Is_NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union ensures that NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel
// implements the NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union interface.
func (*NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel) Is_NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union() {
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/push-label
// is to be set to a uint32 value.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union ensures that NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union_Uint32
// implements the NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union interface.
func (*NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union_Uint32) Is_NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union() {
}

// To_NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) To_NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union(i interface{}) (NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigMpls_Egress_PushLabel:
		return &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel{v}, nil
	case uint32:
		return &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMpls_Egress_PushLabel, uint32]", i, i)
	}
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/incoming-label within the YANG schema.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union interface {
	Is_NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union()
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel is used when /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/incoming-label
// is to be set to a E_OpenconfigMpls_Egress_IncomingLabel value.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel struct {
	E_OpenconfigMpls_Egress_IncomingLabel E_OpenconfigMpls_Egress_IncomingLabel
}

// Is_NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union ensures that NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel
// implements the NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union interface.
func (*NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel) Is_NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union() {
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/incoming-label
// is to be set to a uint32 value.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union ensures that NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union_Uint32
// implements the NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union interface.
func (*NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union_Uint32) Is_NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union() {
}

// To_NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Mpls_Lsps_StaticLsp_Transit) To_NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union(i interface{}) (NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigMpls_Egress_IncomingLabel:
		return &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union_E_OpenconfigMpls_Egress_IncomingLabel{v}, nil
	case uint32:
		return &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMpls_Egress_IncomingLabel, uint32]", i, i)
	}
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/push-label within the YANG schema.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union interface {
	Is_NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union()
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel is used when /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/push-label
// is to be set to a E_OpenconfigMpls_Egress_PushLabel value.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel struct {
	E_OpenconfigMpls_Egress_PushLabel E_OpenconfigMpls_Egress_PushLabel
}

// Is_NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union ensures that NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel
// implements the NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union interface.
func (*NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel) Is_NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union() {
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/push-label
// is to be set to a uint32 value.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union ensures that NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union_Uint32
// implements the NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union interface.
func (*NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union_Uint32) Is_NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union() {
}

// To_NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Mpls_Lsps_StaticLsp_Transit) To_NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union(i interface{}) (NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigMpls_Egress_PushLabel:
		return &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union_E_OpenconfigMpls_Egress_PushLabel{v}, nil
	case uint32:
		return &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMpls_Egress_PushLabel, uint32]", i, i)
	}
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/priority within the YANG schema.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union interface {
	Is_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union()
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union_E_OpenconfigMplsRsvp_BandwidthReservation_Priority is used when /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/priority
// is to be set to a E_OpenconfigMplsRsvp_BandwidthReservation_Priority value.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union_E_OpenconfigMplsRsvp_BandwidthReservation_Priority struct {
	E_OpenconfigMplsRsvp_BandwidthReservation_Priority E_OpenconfigMplsRsvp_BandwidthReservation_Priority
}

// Is_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union_E_OpenconfigMplsRsvp_BandwidthReservation_Priority
// implements the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union interface.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union_E_OpenconfigMplsRsvp_BandwidthReservation_Priority) Is_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union() {
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union_Uint8 is used when /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/priority
// is to be set to a uint8 value.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union_Uint8 struct {
	Uint8 uint8
}

// Is_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union_Uint8
// implements the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union interface.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union_Uint8) Is_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union() {
}

// To_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation) To_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union(i interface{}) (NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigMplsRsvp_BandwidthReservation_Priority:
		return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union_E_OpenconfigMplsRsvp_BandwidthReservation_Priority{v}, nil
	case uint8:
		return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsRsvp_BandwidthReservation_Priority, uint8]", i, i)
	}
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-in within the YANG schema.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union interface {
	Is_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union()
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union_E_OpenconfigMplsRsvp_Session_LabelIn is used when /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-in
// is to be set to a E_OpenconfigMplsRsvp_Session_LabelIn value.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union_E_OpenconfigMplsRsvp_Session_LabelIn struct {
	E_OpenconfigMplsRsvp_Session_LabelIn E_OpenconfigMplsRsvp_Session_LabelIn
}

// Is_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union_E_OpenconfigMplsRsvp_Session_LabelIn
// implements the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union interface.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union_E_OpenconfigMplsRsvp_Session_LabelIn) Is_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union() {
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-in
// is to be set to a uint32 value.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union_Uint32
// implements the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union interface.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union_Uint32) Is_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union() {
}

// To_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) To_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union(i interface{}) (NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigMplsRsvp_Session_LabelIn:
		return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union_E_OpenconfigMplsRsvp_Session_LabelIn{v}, nil
	case uint32:
		return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsRsvp_Session_LabelIn, uint32]", i, i)
	}
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-out within the YANG schema.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union interface {
	Is_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union()
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union_E_OpenconfigMplsRsvp_Session_LabelOut is used when /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-out
// is to be set to a E_OpenconfigMplsRsvp_Session_LabelOut value.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union_E_OpenconfigMplsRsvp_Session_LabelOut struct {
	E_OpenconfigMplsRsvp_Session_LabelOut E_OpenconfigMplsRsvp_Session_LabelOut
}

// Is_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union_E_OpenconfigMplsRsvp_Session_LabelOut
// implements the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union interface.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union_E_OpenconfigMplsRsvp_Session_LabelOut) Is_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union() {
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-out
// is to be set to a uint32 value.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union_Uint32
// implements the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union interface.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union_Uint32) Is_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union() {
}

// To_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) To_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union(i interface{}) (NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigMplsRsvp_Session_LabelOut:
		return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union_E_OpenconfigMplsRsvp_Session_LabelOut{v}, nil
	case uint32:
		return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsRsvp_Session_LabelOut, uint32]", i, i)
	}
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-label within the YANG schema.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union interface {
	Is_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union()
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union_E_OpenconfigMplsRsvp_RecordRouteObject_ReportedLabel is used when /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-label
// is to be set to a E_OpenconfigMplsRsvp_RecordRouteObject_ReportedLabel value.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union_E_OpenconfigMplsRsvp_RecordRouteObject_ReportedLabel struct {
	E_OpenconfigMplsRsvp_RecordRouteObject_ReportedLabel E_OpenconfigMplsRsvp_RecordRouteObject_ReportedLabel
}

// Is_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union_E_OpenconfigMplsRsvp_RecordRouteObject_ReportedLabel
// implements the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union interface.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union_E_OpenconfigMplsRsvp_RecordRouteObject_ReportedLabel) Is_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union() {
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-label
// is to be set to a uint32 value.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union_Uint32
// implements the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union interface.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union_Uint32) Is_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union() {
}

// To_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject) To_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union(i interface{}) (NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigMplsRsvp_RecordRouteObject_ReportedLabel:
		return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union_E_OpenconfigMplsRsvp_RecordRouteObject_ReportedLabel{v}, nil
	case uint32:
		return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigMplsRsvp_RecordRouteObject_ReportedLabel, uint32]", i, i)
	}
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/peak-data-rate within the YANG schema.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union interface {
	Is_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union()
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union_Binary is used when /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/peak-data-rate
// is to be set to a Binary value.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union_Binary struct {
	Binary Binary
}

// Is_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union_Binary
// implements the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union interface.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union_Binary) Is_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union() {
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union_E_OpenconfigMplsRsvp_State_PeakDataRate is used when /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/peak-data-rate
// is to be set to a E_OpenconfigMplsRsvp_State_PeakDataRate value.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union_E_OpenconfigMplsRsvp_State_PeakDataRate struct {
	E_OpenconfigMplsRsvp_State_PeakDataRate E_OpenconfigMplsRsvp_State_PeakDataRate
}

// Is_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union ensures that NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union_E_OpenconfigMplsRsvp_State_PeakDataRate
// implements the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union interface.
func (*NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union_E_OpenconfigMplsRsvp_State_PeakDataRate) Is_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union() {
}

// To_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec) To_NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union(i interface{}) (NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union, error) {
	switch v := i.(type) {
	case Binary:
		return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union_Binary{v}, nil
	case E_OpenconfigMplsRsvp_State_PeakDataRate:
		return &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union_E_OpenconfigMplsRsvp_State_PeakDataRate{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRate_Union, unknown union type, got: %T, want any of [Binary, E_OpenconfigMplsRsvp_State_PeakDataRate]", i, i)
	}
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/mpls-label within the YANG schema.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union interface {
	Is_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union()
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union_E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel is used when /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/mpls-label
// is to be set to a E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel value.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union_E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel struct {
	E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel
}

// Is_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union ensures that NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union_E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel
// implements the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union interface.
func (*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union_E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel) Is_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union() {
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/mpls-label
// is to be set to a uint32 value.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union ensures that NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union_Uint32
// implements the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union interface.
func (*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union_Uint32) Is_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union() {
}

// To_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter) To_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union(i interface{}) (NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel:
		return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union_E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel{v}, nil
	case uint32:
		return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel, uint32]", i, i)
	}
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/mpls-label within the YANG schema.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union interface {
	Is_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union()
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union_E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel is used when /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/mpls-label
// is to be set to a E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel value.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union_E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel struct {
	E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel
}

// Is_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union ensures that NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union_E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel
// implements the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union interface.
func (*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union_E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel) Is_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union() {
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/mpls-label
// is to be set to a uint32 value.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union ensures that NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union_Uint32
// implements the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union interface.
func (*NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union_Uint32) Is_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union() {
}

// To_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter) To_NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union(i interface{}) (NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel:
		return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union_E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel{v}, nil
	case uint32:
		return &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union, unknown union type, got: %T, want any of [E_OpenconfigSegmentRouting_AggregateSidCounter_MplsLabel, uint32]", i, i)
	}
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/protocol within the YANG schema.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union interface {
	Is_NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union()
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL is used when /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/protocol
// is to be set to a E_OpenconfigPacketMatchTypes_IP_PROTOCOL value.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL struct {
	E_OpenconfigPacketMatchTypes_IP_PROTOCOL E_OpenconfigPacketMatchTypes_IP_PROTOCOL
}

// Is_NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union ensures that NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL
// implements the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union interface.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL) Is_NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union() {
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union_Uint8 is used when /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/protocol
// is to be set to a uint8 value.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union_Uint8 struct {
	Uint8 uint8
}

// Is_NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union ensures that NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union_Uint8
// implements the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union interface.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union_Uint8) Is_NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union() {
}

// To_NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) To_NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union(i interface{}) (NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPacketMatchTypes_IP_PROTOCOL:
		return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL{v}, nil
	case uint8:
		return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, uint8]", i, i)
	}
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/protocol within the YANG schema.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union interface {
	Is_NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union()
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL is used when /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/protocol
// is to be set to a E_OpenconfigPacketMatchTypes_IP_PROTOCOL value.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL struct {
	E_OpenconfigPacketMatchTypes_IP_PROTOCOL E_OpenconfigPacketMatchTypes_IP_PROTOCOL
}

// Is_NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union ensures that NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL
// implements the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union interface.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL) Is_NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union() {
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union_Uint8 is used when /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/protocol
// is to be set to a uint8 value.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union_Uint8 struct {
	Uint8 uint8
}

// Is_NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union ensures that NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union_Uint8
// implements the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union interface.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union_Uint8) Is_NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union() {
}

// To_NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) To_NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union(i interface{}) (NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPacketMatchTypes_IP_PROTOCOL:
		return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union_E_OpenconfigPacketMatchTypes_IP_PROTOCOL{v}, nil
	case uint8:
		return &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_IP_PROTOCOL, uint8]", i, i)
	}
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/config/ethertype within the YANG schema.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union interface {
	Is_NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union()
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union_E_OpenconfigPacketMatchTypes_ETHERTYPE is used when /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/config/ethertype
// is to be set to a E_OpenconfigPacketMatchTypes_ETHERTYPE value.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union_E_OpenconfigPacketMatchTypes_ETHERTYPE struct {
	E_OpenconfigPacketMatchTypes_ETHERTYPE E_OpenconfigPacketMatchTypes_ETHERTYPE
}

// Is_NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union ensures that NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union_E_OpenconfigPacketMatchTypes_ETHERTYPE
// implements the NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union interface.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union_E_OpenconfigPacketMatchTypes_ETHERTYPE) Is_NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union() {
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union_Uint16 is used when /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/config/ethertype
// is to be set to a uint16 value.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union_Uint16 struct {
	Uint16 uint16
}

// Is_NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union ensures that NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union_Uint16
// implements the NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union interface.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union_Uint16) Is_NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union() {
}

// To_NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_L2) To_NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union(i interface{}) (NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPacketMatchTypes_ETHERTYPE:
		return &NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union_E_OpenconfigPacketMatchTypes_ETHERTYPE{v}, nil
	case uint16:
		return &NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatchTypes_ETHERTYPE, uint16]", i, i)
	}
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/destination-port within the YANG schema.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union interface {
	Is_NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union()
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union_E_OpenconfigPacketMatch_Transport_DestinationPort is used when /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/destination-port
// is to be set to a E_OpenconfigPacketMatch_Transport_DestinationPort value.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union_E_OpenconfigPacketMatch_Transport_DestinationPort struct {
	E_OpenconfigPacketMatch_Transport_DestinationPort E_OpenconfigPacketMatch_Transport_DestinationPort
}

// Is_NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union ensures that NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union_E_OpenconfigPacketMatch_Transport_DestinationPort
// implements the NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union interface.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union_E_OpenconfigPacketMatch_Transport_DestinationPort) Is_NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union() {
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union_String is used when /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/destination-port
// is to be set to a string value.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union_String struct {
	String string
}

// Is_NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union ensures that NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union_String
// implements the NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union interface.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union_String) Is_NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union() {
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union_Uint16 is used when /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/destination-port
// is to be set to a uint16 value.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union_Uint16 struct {
	Uint16 uint16
}

// Is_NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union ensures that NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union_Uint16
// implements the NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union interface.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union_Uint16) Is_NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union() {
}

// To_NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Transport) To_NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union(i interface{}) (NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPacketMatch_Transport_DestinationPort:
		return &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union_E_OpenconfigPacketMatch_Transport_DestinationPort{v}, nil
	case string:
		return &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union_String{v}, nil
	case uint16:
		return &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatch_Transport_DestinationPort, string, uint16]", i, i)
	}
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/source-port within the YANG schema.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union interface {
	Is_NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union()
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union_E_OpenconfigPacketMatch_Transport_SourcePort is used when /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/source-port
// is to be set to a E_OpenconfigPacketMatch_Transport_SourcePort value.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union_E_OpenconfigPacketMatch_Transport_SourcePort struct {
	E_OpenconfigPacketMatch_Transport_SourcePort E_OpenconfigPacketMatch_Transport_SourcePort
}

// Is_NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union ensures that NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union_E_OpenconfigPacketMatch_Transport_SourcePort
// implements the NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union interface.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union_E_OpenconfigPacketMatch_Transport_SourcePort) Is_NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union() {
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union_String is used when /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/source-port
// is to be set to a string value.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union_String struct {
	String string
}

// Is_NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union ensures that NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union_String
// implements the NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union interface.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union_String) Is_NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union() {
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union_Uint16 is used when /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/source-port
// is to be set to a uint16 value.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union_Uint16 struct {
	Uint16 uint16
}

// Is_NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union ensures that NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union_Uint16
// implements the NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union interface.
func (*NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union_Uint16) Is_NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union() {
}

// To_NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_PolicyForwarding_Policy_Rule_Transport) To_NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union(i interface{}) (NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPacketMatch_Transport_SourcePort:
		return &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union_E_OpenconfigPacketMatch_Transport_SourcePort{v}, nil
	case string:
		return &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union_String{v}, nil
	case uint16:
		return &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union, unknown union type, got: %T, want any of [E_OpenconfigPacketMatch_Transport_SourcePort, string, uint16]", i, i)
	}
}

// NetworkInstance_Protocol_Aggregate_SetTag_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/config/set-tag within the YANG schema.
type NetworkInstance_Protocol_Aggregate_SetTag_Union interface {
	Is_NetworkInstance_Protocol_Aggregate_SetTag_Union()
}

// NetworkInstance_Protocol_Aggregate_SetTag_Union_String is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/config/set-tag
// is to be set to a string value.
type NetworkInstance_Protocol_Aggregate_SetTag_Union_String struct {
	String string
}

// Is_NetworkInstance_Protocol_Aggregate_SetTag_Union ensures that NetworkInstance_Protocol_Aggregate_SetTag_Union_String
// implements the NetworkInstance_Protocol_Aggregate_SetTag_Union interface.
func (*NetworkInstance_Protocol_Aggregate_SetTag_Union_String) Is_NetworkInstance_Protocol_Aggregate_SetTag_Union() {
}

// NetworkInstance_Protocol_Aggregate_SetTag_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/config/set-tag
// is to be set to a uint32 value.
type NetworkInstance_Protocol_Aggregate_SetTag_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Protocol_Aggregate_SetTag_Union ensures that NetworkInstance_Protocol_Aggregate_SetTag_Union_Uint32
// implements the NetworkInstance_Protocol_Aggregate_SetTag_Union interface.
func (*NetworkInstance_Protocol_Aggregate_SetTag_Union_Uint32) Is_NetworkInstance_Protocol_Aggregate_SetTag_Union() {
}

// To_NetworkInstance_Protocol_Aggregate_SetTag_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Protocol_Aggregate_SetTag_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Protocol_Aggregate) To_NetworkInstance_Protocol_Aggregate_SetTag_Union(i interface{}) (NetworkInstance_Protocol_Aggregate_SetTag_Union, error) {
	switch v := i.(type) {
	case string:
		return &NetworkInstance_Protocol_Aggregate_SetTag_Union_String{v}, nil
	case uint32:
		return &NetworkInstance_Protocol_Aggregate_SetTag_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Protocol_Aggregate_SetTag_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
	}
}

// NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/config/route-reflector-cluster-id within the YANG schema.
type NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union interface {
	Is_NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union()
}

// NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_String is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/config/route-reflector-cluster-id
// is to be set to a string value.
type NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_String struct {
	String string
}

// Is_NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union ensures that NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_String
// implements the NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union interface.
func (*NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_String) Is_NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union() {
}

// NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/route-reflector/config/route-reflector-cluster-id
// is to be set to a uint32 value.
type NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union ensures that NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_Uint32
// implements the NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union interface.
func (*NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_Uint32) Is_NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union() {
}

// To_NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector) To_NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union(i interface{}) (NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union, error) {
	switch v := i.(type) {
	case string:
		return &NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_String{v}, nil
	case uint32:
		return &NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Protocol_Bgp_Neighbor_RouteReflector_RouteReflectorClusterId_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
	}
}

// NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/route-reflector/config/route-reflector-cluster-id within the YANG schema.
type NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union interface {
	Is_NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union()
}

// NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_String is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/route-reflector/config/route-reflector-cluster-id
// is to be set to a string value.
type NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_String struct {
	String string
}

// Is_NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union ensures that NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_String
// implements the NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union interface.
func (*NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_String) Is_NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union() {
}

// NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/route-reflector/config/route-reflector-cluster-id
// is to be set to a uint32 value.
type NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union ensures that NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_Uint32
// implements the NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union interface.
func (*NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_Uint32) Is_NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union() {
}

// To_NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector) To_NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union(i interface{}) (NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union, error) {
	switch v := i.(type) {
	case string:
		return &NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_String{v}, nil
	case uint32:
		return &NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
	}
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/allocated-dynamic-local within the YANG schema.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union interface {
	Is_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union()
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union_E_OpenconfigSegmentRouting_AdjacencySid_AllocatedDynamicLocal is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/allocated-dynamic-local
// is to be set to a E_OpenconfigSegmentRouting_AdjacencySid_AllocatedDynamicLocal value.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union_E_OpenconfigSegmentRouting_AdjacencySid_AllocatedDynamicLocal struct {
	E_OpenconfigSegmentRouting_AdjacencySid_AllocatedDynamicLocal E_OpenconfigSegmentRouting_AdjacencySid_AllocatedDynamicLocal
}

// Is_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union ensures that NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union_E_OpenconfigSegmentRouting_AdjacencySid_AllocatedDynamicLocal
// implements the NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union interface.
func (*NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union_E_OpenconfigSegmentRouting_AdjacencySid_AllocatedDynamicLocal) Is_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union() {
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union_String is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/allocated-dynamic-local
// is to be set to a string value.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union_String struct {
	String string
}

// Is_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union ensures that NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union_String
// implements the NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union interface.
func (*NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union_String) Is_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union() {
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/state/allocated-dynamic-local
// is to be set to a uint32 value.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union ensures that NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union_Uint32
// implements the NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union interface.
func (*NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union_Uint32) Is_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union() {
}

// To_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid) To_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union(i interface{}) (NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigSegmentRouting_AdjacencySid_AllocatedDynamicLocal:
		return &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union_E_OpenconfigSegmentRouting_AdjacencySid_AllocatedDynamicLocal{v}, nil
	case string:
		return &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union_String{v}, nil
	case uint32:
		return &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_AllocatedDynamicLocal_Union, unknown union type, got: %T, want any of [E_OpenconfigSegmentRouting_AdjacencySid_AllocatedDynamicLocal, string, uint32]", i, i)
	}
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/config/sid-id within the YANG schema.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union interface {
	Is_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union()
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union_E_OpenconfigSegmentRouting_AdjacencySid_SidId is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/config/sid-id
// is to be set to a E_OpenconfigSegmentRouting_AdjacencySid_SidId value.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union_E_OpenconfigSegmentRouting_AdjacencySid_SidId struct {
	E_OpenconfigSegmentRouting_AdjacencySid_SidId E_OpenconfigSegmentRouting_AdjacencySid_SidId
}

// Is_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union ensures that NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union_E_OpenconfigSegmentRouting_AdjacencySid_SidId
// implements the NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union interface.
func (*NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union_E_OpenconfigSegmentRouting_AdjacencySid_SidId) Is_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union() {
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union_String is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/config/sid-id
// is to be set to a string value.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union_String struct {
	String string
}

// Is_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union ensures that NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union_String
// implements the NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union interface.
func (*NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union_String) Is_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union() {
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/adjacency-sids/adjacency-sid/config/sid-id
// is to be set to a uint32 value.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union ensures that NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union_Uint32
// implements the NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union interface.
func (*NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union_Uint32) Is_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union() {
}

// To_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid) To_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union(i interface{}) (NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigSegmentRouting_AdjacencySid_SidId:
		return &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union_E_OpenconfigSegmentRouting_AdjacencySid_SidId{v}, nil
	case string:
		return &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union_String{v}, nil
	case uint32:
		return &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_AdjacencySid_SidId_Union, unknown union type, got: %T, want any of [E_OpenconfigSegmentRouting_AdjacencySid_SidId, string, uint32]", i, i)
	}
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/config/sid-id within the YANG schema.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union interface {
	Is_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union()
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union_E_OpenconfigSegmentRouting_PrefixSid_SidId is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/config/sid-id
// is to be set to a E_OpenconfigSegmentRouting_PrefixSid_SidId value.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union_E_OpenconfigSegmentRouting_PrefixSid_SidId struct {
	E_OpenconfigSegmentRouting_PrefixSid_SidId E_OpenconfigSegmentRouting_PrefixSid_SidId
}

// Is_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union ensures that NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union_E_OpenconfigSegmentRouting_PrefixSid_SidId
// implements the NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union interface.
func (*NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union_E_OpenconfigSegmentRouting_PrefixSid_SidId) Is_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union() {
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union_String is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/config/sid-id
// is to be set to a string value.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union_String struct {
	String string
}

// Is_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union ensures that NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union_String
// implements the NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union interface.
func (*NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union_String) Is_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union() {
}

// NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/interfaces/interface/levels/level/afi-safi/af/segment-routing/prefix-sids/prefix-sid/config/sid-id
// is to be set to a uint32 value.
type NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union ensures that NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union_Uint32
// implements the NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union interface.
func (*NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union_Uint32) Is_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union() {
}

// To_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid) To_NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union(i interface{}) (NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigSegmentRouting_PrefixSid_SidId:
		return &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union_E_OpenconfigSegmentRouting_PrefixSid_SidId{v}, nil
	case string:
		return &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union_String{v}, nil
	case uint32:
		return &NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Protocol_Isis_Interface_Level_Af_SegmentRouting_PrefixSid_SidId_Union, unknown union type, got: %T, want any of [E_OpenconfigSegmentRouting_PrefixSid_SidId, string, uint32]", i, i)
	}
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor/state/label within the YANG schema.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union interface {
	Is_NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union()
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union_E_OpenconfigIsis_SrgbDescriptor_Label is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor/state/label
// is to be set to a E_OpenconfigIsis_SrgbDescriptor_Label value.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union_E_OpenconfigIsis_SrgbDescriptor_Label struct {
	E_OpenconfigIsis_SrgbDescriptor_Label E_OpenconfigIsis_SrgbDescriptor_Label
}

// Is_NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union ensures that NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union_E_OpenconfigIsis_SrgbDescriptor_Label
// implements the NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union interface.
func (*NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union_E_OpenconfigIsis_SrgbDescriptor_Label) Is_NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union() {
}

// NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/router-capabilities/capability/subtlvs/subtlv/segment-routing-capability/srgb-descriptors/srgb-descriptor/state/label
// is to be set to a uint32 value.
type NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union ensures that NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union_Uint32
// implements the NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union interface.
func (*NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union_Uint32) Is_NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union() {
}

// To_NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor) To_NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union(i interface{}) (NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigIsis_SrgbDescriptor_Label:
		return &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union_E_OpenconfigIsis_SrgbDescriptor_Label{v}, nil
	case uint32:
		return &NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Protocol_Isis_Level_Lsp_Tlv_Capability_Subtlv_SegmentRoutingCapability_SrgbDescriptor_Label_Union, unknown union type, got: %T, want any of [E_OpenconfigIsis_SrgbDescriptor_Label, uint32]", i, i)
	}
}

// NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/config/identifier within the YANG schema.
type NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union interface {
	Is_NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union()
}

// NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union_String is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/config/identifier
// is to be set to a string value.
type NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union_String struct {
	String string
}

// Is_NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union ensures that NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union_String
// implements the NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union interface.
func (*NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union_String) Is_NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union() {
}

// NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/config/identifier
// is to be set to a uint32 value.
type NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union ensures that NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union_Uint32
// implements the NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union interface.
func (*NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union_Uint32) Is_NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union() {
}

// To_NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Protocol_Ospfv2_Area) To_NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union(i interface{}) (NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union, error) {
	switch v := i.(type) {
	case string:
		return &NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union_String{v}, nil
	case uint32:
		return &NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
	}
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_Identifier_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/state/identifier within the YANG schema.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_Identifier_Union interface {
	Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_Identifier_Union()
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_Identifier_Union_String is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/state/identifier
// is to be set to a string value.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_Identifier_Union_String struct {
	String string
}

// Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_Identifier_Union ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_Identifier_Union_String
// implements the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_Identifier_Union interface.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_Identifier_Union_String) Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_Identifier_Union() {
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_Identifier_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/state/identifier
// is to be set to a uint32 value.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_Identifier_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_Identifier_Union ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_Identifier_Union_Uint32
// implements the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_Identifier_Union interface.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_Identifier_Union_Uint32) Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_Identifier_Union() {
}

// To_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_Identifier_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_Identifier_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb) To_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_Identifier_Union(i interface{}) (NetworkInstance_Protocol_Ospfv2_Area_Lsdb_Identifier_Union, error) {
	switch v := i.(type) {
	case string:
		return &NetworkInstance_Protocol_Ospfv2_Area_Lsdb_Identifier_Union_String{v}, nil
	case uint32:
		return &NetworkInstance_Protocol_Ospfv2_Area_Lsdb_Identifier_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Protocol_Ospfv2_Area_Lsdb_Identifier_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
	}
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_ExtendedLink_LinkData_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/extended-link/state/link-data within the YANG schema.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_ExtendedLink_LinkData_Union interface {
	Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_ExtendedLink_LinkData_Union()
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_ExtendedLink_LinkData_Union_String is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/extended-link/state/link-data
// is to be set to a string value.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_ExtendedLink_LinkData_Union_String struct {
	String string
}

// Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_ExtendedLink_LinkData_Union ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_ExtendedLink_LinkData_Union_String
// implements the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_ExtendedLink_LinkData_Union interface.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_ExtendedLink_LinkData_Union_String) Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_ExtendedLink_LinkData_Union() {
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_ExtendedLink_LinkData_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/extended-link/state/link-data
// is to be set to a uint32 value.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_ExtendedLink_LinkData_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_ExtendedLink_LinkData_Union ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_ExtendedLink_LinkData_Union_Uint32
// implements the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_ExtendedLink_LinkData_Union interface.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_ExtendedLink_LinkData_Union_Uint32) Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_ExtendedLink_LinkData_Union() {
}

// To_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_ExtendedLink_LinkData_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_ExtendedLink_LinkData_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_ExtendedLink) To_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_ExtendedLink_LinkData_Union(i interface{}) (NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_ExtendedLink_LinkData_Union, error) {
	switch v := i.(type) {
	case string:
		return &NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_ExtendedLink_LinkData_Union_String{v}, nil
	case uint32:
		return &NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_ExtendedLink_LinkData_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_ExtendedLink_LinkData_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
	}
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv/state/type within the YANG schema.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_Type_Union interface {
	Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_Type_Union()
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_Type_Union_E_OpenconfigOspfTypes_RI_LSA_TLV_TYPES is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv/state/type
// is to be set to a E_OpenconfigOspfTypes_RI_LSA_TLV_TYPES value.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_Type_Union_E_OpenconfigOspfTypes_RI_LSA_TLV_TYPES struct {
	E_OpenconfigOspfTypes_RI_LSA_TLV_TYPES E_OpenconfigOspfTypes_RI_LSA_TLV_TYPES
}

// Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_Type_Union ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_Type_Union_E_OpenconfigOspfTypes_RI_LSA_TLV_TYPES
// implements the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_Type_Union interface.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_Type_Union_E_OpenconfigOspfTypes_RI_LSA_TLV_TYPES) Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_Type_Union() {
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_Type_Union_E_OpenconfigOspfv2_Tlv_Type is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv/state/type
// is to be set to a E_OpenconfigOspfv2_Tlv_Type value.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_Type_Union_E_OpenconfigOspfv2_Tlv_Type struct {
	E_OpenconfigOspfv2_Tlv_Type E_OpenconfigOspfv2_Tlv_Type
}

// Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_Type_Union ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_Type_Union_E_OpenconfigOspfv2_Tlv_Type
// implements the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_Type_Union interface.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_Type_Union_E_OpenconfigOspfv2_Tlv_Type) Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_Type_Union() {
}

// To_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv) To_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_Type_Union(i interface{}) (NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_Type_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigOspfTypes_RI_LSA_TLV_TYPES:
		return &NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_Type_Union_E_OpenconfigOspfTypes_RI_LSA_TLV_TYPES{v}, nil
	case E_OpenconfigOspfv2_Tlv_Type:
		return &NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_Type_Union_E_OpenconfigOspfv2_Tlv_Type{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_Type_Union, unknown union type, got: %T, want any of [E_OpenconfigOspfTypes_RI_LSA_TLV_TYPES, E_OpenconfigOspfv2_Tlv_Type]", i, i)
	}
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_SegmentRoutingSidLabelRange_Tlv_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv/segment-routing-sid-label-range/tlvs/tlv/state/type within the YANG schema.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_SegmentRoutingSidLabelRange_Tlv_Type_Union interface {
	Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_SegmentRoutingSidLabelRange_Tlv_Type_Union()
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_SegmentRoutingSidLabelRange_Tlv_Type_Union_E_OpenconfigOspfTypes_OSPF_RI_SR_SID_LABEL_TLV_TYPES is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv/segment-routing-sid-label-range/tlvs/tlv/state/type
// is to be set to a E_OpenconfigOspfTypes_OSPF_RI_SR_SID_LABEL_TLV_TYPES value.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_SegmentRoutingSidLabelRange_Tlv_Type_Union_E_OpenconfigOspfTypes_OSPF_RI_SR_SID_LABEL_TLV_TYPES struct {
	E_OpenconfigOspfTypes_OSPF_RI_SR_SID_LABEL_TLV_TYPES E_OpenconfigOspfTypes_OSPF_RI_SR_SID_LABEL_TLV_TYPES
}

// Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_SegmentRoutingSidLabelRange_Tlv_Type_Union ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_SegmentRoutingSidLabelRange_Tlv_Type_Union_E_OpenconfigOspfTypes_OSPF_RI_SR_SID_LABEL_TLV_TYPES
// implements the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_SegmentRoutingSidLabelRange_Tlv_Type_Union interface.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_SegmentRoutingSidLabelRange_Tlv_Type_Union_E_OpenconfigOspfTypes_OSPF_RI_SR_SID_LABEL_TLV_TYPES) Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_SegmentRoutingSidLabelRange_Tlv_Type_Union() {
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_SegmentRoutingSidLabelRange_Tlv_Type_Union_E_OpenconfigOspfv2_Tlv_Type_ is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv/segment-routing-sid-label-range/tlvs/tlv/state/type
// is to be set to a E_OpenconfigOspfv2_Tlv_Type_ value.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_SegmentRoutingSidLabelRange_Tlv_Type_Union_E_OpenconfigOspfv2_Tlv_Type_ struct {
	E_OpenconfigOspfv2_Tlv_Type_ E_OpenconfigOspfv2_Tlv_Type_
}

// Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_SegmentRoutingSidLabelRange_Tlv_Type_Union ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_SegmentRoutingSidLabelRange_Tlv_Type_Union_E_OpenconfigOspfv2_Tlv_Type_
// implements the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_SegmentRoutingSidLabelRange_Tlv_Type_Union interface.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_SegmentRoutingSidLabelRange_Tlv_Type_Union_E_OpenconfigOspfv2_Tlv_Type_) Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_SegmentRoutingSidLabelRange_Tlv_Type_Union() {
}

// To_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_SegmentRoutingSidLabelRange_Tlv_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_SegmentRoutingSidLabelRange_Tlv_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_SegmentRoutingSidLabelRange_Tlv) To_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_SegmentRoutingSidLabelRange_Tlv_Type_Union(i interface{}) (NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_SegmentRoutingSidLabelRange_Tlv_Type_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigOspfTypes_OSPF_RI_SR_SID_LABEL_TLV_TYPES:
		return &NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_SegmentRoutingSidLabelRange_Tlv_Type_Union_E_OpenconfigOspfTypes_OSPF_RI_SR_SID_LABEL_TLV_TYPES{v}, nil
	case E_OpenconfigOspfv2_Tlv_Type_:
		return &NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_SegmentRoutingSidLabelRange_Tlv_Type_Union_E_OpenconfigOspfv2_Tlv_Type_{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_SegmentRoutingSidLabelRange_Tlv_Type_Union, unknown union type, got: %T, want any of [E_OpenconfigOspfTypes_OSPF_RI_SR_SID_LABEL_TLV_TYPES, E_OpenconfigOspfv2_Tlv_Type_]", i, i)
	}
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/link/sub-tlvs/sub-tlv/state/type within the YANG schema.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_Type_Union interface {
	Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_Type_Union()
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_Type_Union_E_OpenconfigOspfTypes_OSPF_TE_LINK_TLV_TYPE is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/link/sub-tlvs/sub-tlv/state/type
// is to be set to a E_OpenconfigOspfTypes_OSPF_TE_LINK_TLV_TYPE value.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_Type_Union_E_OpenconfigOspfTypes_OSPF_TE_LINK_TLV_TYPE struct {
	E_OpenconfigOspfTypes_OSPF_TE_LINK_TLV_TYPE E_OpenconfigOspfTypes_OSPF_TE_LINK_TLV_TYPE
}

// Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_Type_Union ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_Type_Union_E_OpenconfigOspfTypes_OSPF_TE_LINK_TLV_TYPE
// implements the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_Type_Union interface.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_Type_Union_E_OpenconfigOspfTypes_OSPF_TE_LINK_TLV_TYPE) Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_Type_Union() {
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_Type_Union_E_OpenconfigOspfv2_SubTlv_Type is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/link/sub-tlvs/sub-tlv/state/type
// is to be set to a E_OpenconfigOspfv2_SubTlv_Type value.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_Type_Union_E_OpenconfigOspfv2_SubTlv_Type struct {
	E_OpenconfigOspfv2_SubTlv_Type E_OpenconfigOspfv2_SubTlv_Type
}

// Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_Type_Union ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_Type_Union_E_OpenconfigOspfv2_SubTlv_Type
// implements the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_Type_Union interface.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_Type_Union_E_OpenconfigOspfv2_SubTlv_Type) Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_Type_Union() {
}

// To_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) To_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_Type_Union(i interface{}) (NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_Type_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigOspfTypes_OSPF_TE_LINK_TLV_TYPE:
		return &NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_Type_Union_E_OpenconfigOspfTypes_OSPF_TE_LINK_TLV_TYPE{v}, nil
	case E_OpenconfigOspfv2_SubTlv_Type:
		return &NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_Type_Union_E_OpenconfigOspfv2_SubTlv_Type{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_Type_Union, unknown union type, got: %T, want any of [E_OpenconfigOspfTypes_OSPF_TE_LINK_TLV_TYPE, E_OpenconfigOspfv2_SubTlv_Type]", i, i)
	}
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/node-attribute/sub-tlvs/sub-tlv/state/type within the YANG schema.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_Type_Union interface {
	Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_Type_Union()
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_Type_Union_E_OpenconfigOspfTypes_TE_NODE_ATTRIBUTE_TLV_TYPE is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/node-attribute/sub-tlvs/sub-tlv/state/type
// is to be set to a E_OpenconfigOspfTypes_TE_NODE_ATTRIBUTE_TLV_TYPE value.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_Type_Union_E_OpenconfigOspfTypes_TE_NODE_ATTRIBUTE_TLV_TYPE struct {
	E_OpenconfigOspfTypes_TE_NODE_ATTRIBUTE_TLV_TYPE E_OpenconfigOspfTypes_TE_NODE_ATTRIBUTE_TLV_TYPE
}

// Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_Type_Union ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_Type_Union_E_OpenconfigOspfTypes_TE_NODE_ATTRIBUTE_TLV_TYPE
// implements the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_Type_Union interface.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_Type_Union_E_OpenconfigOspfTypes_TE_NODE_ATTRIBUTE_TLV_TYPE) Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_Type_Union() {
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_Type_Union_E_OpenconfigOspfv2_SubTlv_Type_ is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/node-attribute/sub-tlvs/sub-tlv/state/type
// is to be set to a E_OpenconfigOspfv2_SubTlv_Type_ value.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_Type_Union_E_OpenconfigOspfv2_SubTlv_Type_ struct {
	E_OpenconfigOspfv2_SubTlv_Type_ E_OpenconfigOspfv2_SubTlv_Type_
}

// Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_Type_Union ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_Type_Union_E_OpenconfigOspfv2_SubTlv_Type_
// implements the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_Type_Union interface.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_Type_Union_E_OpenconfigOspfv2_SubTlv_Type_) Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_Type_Union() {
}

// To_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv) To_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_Type_Union(i interface{}) (NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_Type_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigOspfTypes_TE_NODE_ATTRIBUTE_TLV_TYPE:
		return &NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_Type_Union_E_OpenconfigOspfTypes_TE_NODE_ATTRIBUTE_TLV_TYPE{v}, nil
	case E_OpenconfigOspfv2_SubTlv_Type_:
		return &NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_Type_Union_E_OpenconfigOspfv2_SubTlv_Type_{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_Type_Union, unknown union type, got: %T, want any of [E_OpenconfigOspfTypes_TE_NODE_ATTRIBUTE_TLV_TYPE, E_OpenconfigOspfv2_SubTlv_Type_]", i, i)
	}
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_LinkData_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/router-lsa/state/link-data within the YANG schema.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_LinkData_Union interface {
	Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_LinkData_Union()
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_LinkData_Union_String is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/router-lsa/state/link-data
// is to be set to a string value.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_LinkData_Union_String struct {
	String string
}

// Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_LinkData_Union ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_LinkData_Union_String
// implements the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_LinkData_Union interface.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_LinkData_Union_String) Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_LinkData_Union() {
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_LinkData_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/router-lsa/state/link-data
// is to be set to a uint32 value.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_LinkData_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_LinkData_Union ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_LinkData_Union_Uint32
// implements the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_LinkData_Union interface.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_LinkData_Union_Uint32) Is_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_LinkData_Union() {
}

// To_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_LinkData_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_LinkData_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa) To_NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_LinkData_Union(i interface{}) (NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_LinkData_Union, error) {
	switch v := i.(type) {
	case string:
		return &NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_LinkData_Union_String{v}, nil
	case uint32:
		return &NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_LinkData_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_LinkData_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
	}
}

// NetworkInstance_Protocol_Static_SetTag_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/config/set-tag within the YANG schema.
type NetworkInstance_Protocol_Static_SetTag_Union interface {
	Is_NetworkInstance_Protocol_Static_SetTag_Union()
}

// NetworkInstance_Protocol_Static_SetTag_Union_String is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/config/set-tag
// is to be set to a string value.
type NetworkInstance_Protocol_Static_SetTag_Union_String struct {
	String string
}

// Is_NetworkInstance_Protocol_Static_SetTag_Union ensures that NetworkInstance_Protocol_Static_SetTag_Union_String
// implements the NetworkInstance_Protocol_Static_SetTag_Union interface.
func (*NetworkInstance_Protocol_Static_SetTag_Union_String) Is_NetworkInstance_Protocol_Static_SetTag_Union() {
}

// NetworkInstance_Protocol_Static_SetTag_Union_Uint32 is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/config/set-tag
// is to be set to a uint32 value.
type NetworkInstance_Protocol_Static_SetTag_Union_Uint32 struct {
	Uint32 uint32
}

// Is_NetworkInstance_Protocol_Static_SetTag_Union ensures that NetworkInstance_Protocol_Static_SetTag_Union_Uint32
// implements the NetworkInstance_Protocol_Static_SetTag_Union interface.
func (*NetworkInstance_Protocol_Static_SetTag_Union_Uint32) Is_NetworkInstance_Protocol_Static_SetTag_Union() {
}

// To_NetworkInstance_Protocol_Static_SetTag_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Protocol_Static_SetTag_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Protocol_Static) To_NetworkInstance_Protocol_Static_SetTag_Union(i interface{}) (NetworkInstance_Protocol_Static_SetTag_Union, error) {
	switch v := i.(type) {
	case string:
		return &NetworkInstance_Protocol_Static_SetTag_Union_String{v}, nil
	case uint32:
		return &NetworkInstance_Protocol_Static_SetTag_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Protocol_Static_SetTag_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
	}
}

// NetworkInstance_Protocol_Static_NextHop_NextHop_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/next-hop within the YANG schema.
type NetworkInstance_Protocol_Static_NextHop_NextHop_Union interface {
	Is_NetworkInstance_Protocol_Static_NextHop_NextHop_Union()
}

// NetworkInstance_Protocol_Static_NextHop_NextHop_Union_E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/next-hop
// is to be set to a E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP value.
type NetworkInstance_Protocol_Static_NextHop_NextHop_Union_E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP struct {
	E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP
}

// Is_NetworkInstance_Protocol_Static_NextHop_NextHop_Union ensures that NetworkInstance_Protocol_Static_NextHop_NextHop_Union_E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP
// implements the NetworkInstance_Protocol_Static_NextHop_NextHop_Union interface.
func (*NetworkInstance_Protocol_Static_NextHop_NextHop_Union_E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP) Is_NetworkInstance_Protocol_Static_NextHop_NextHop_Union() {
}

// NetworkInstance_Protocol_Static_NextHop_NextHop_Union_String is used when /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/config/next-hop
// is to be set to a string value.
type NetworkInstance_Protocol_Static_NextHop_NextHop_Union_String struct {
	String string
}

// Is_NetworkInstance_Protocol_Static_NextHop_NextHop_Union ensures that NetworkInstance_Protocol_Static_NextHop_NextHop_Union_String
// implements the NetworkInstance_Protocol_Static_NextHop_NextHop_Union interface.
func (*NetworkInstance_Protocol_Static_NextHop_NextHop_Union_String) Is_NetworkInstance_Protocol_Static_NextHop_NextHop_Union() {
}

// To_NetworkInstance_Protocol_Static_NextHop_NextHop_Union takes an input interface{} and attempts to convert it to a struct
// which implements the NetworkInstance_Protocol_Static_NextHop_NextHop_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *NetworkInstance_Protocol_Static_NextHop) To_NetworkInstance_Protocol_Static_NextHop_NextHop_Union(i interface{}) (NetworkInstance_Protocol_Static_NextHop_NextHop_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP:
		return &NetworkInstance_Protocol_Static_NextHop_NextHop_Union_E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP{v}, nil
	case string:
		return &NetworkInstance_Protocol_Static_NextHop_NextHop_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to NetworkInstance_Protocol_Static_NextHop_NextHop_Union, unknown union type, got: %T, want any of [E_OpenconfigLocalRouting_LOCAL_DEFINED_NEXT_HOP, string]", i, i)
	}
}

// RoutingPolicy_DefinedSets_TagSet_TagValue_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/config/tag-value within the YANG schema.
type RoutingPolicy_DefinedSets_TagSet_TagValue_Union interface {
	Is_RoutingPolicy_DefinedSets_TagSet_TagValue_Union()
}

// RoutingPolicy_DefinedSets_TagSet_TagValue_Union_String is used when /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/config/tag-value
// is to be set to a string value.
type RoutingPolicy_DefinedSets_TagSet_TagValue_Union_String struct {
	String string
}

// Is_RoutingPolicy_DefinedSets_TagSet_TagValue_Union ensures that RoutingPolicy_DefinedSets_TagSet_TagValue_Union_String
// implements the RoutingPolicy_DefinedSets_TagSet_TagValue_Union interface.
func (*RoutingPolicy_DefinedSets_TagSet_TagValue_Union_String) Is_RoutingPolicy_DefinedSets_TagSet_TagValue_Union() {
}

// RoutingPolicy_DefinedSets_TagSet_TagValue_Union_Uint32 is used when /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set/config/tag-value
// is to be set to a uint32 value.
type RoutingPolicy_DefinedSets_TagSet_TagValue_Union_Uint32 struct {
	Uint32 uint32
}

// Is_RoutingPolicy_DefinedSets_TagSet_TagValue_Union ensures that RoutingPolicy_DefinedSets_TagSet_TagValue_Union_Uint32
// implements the RoutingPolicy_DefinedSets_TagSet_TagValue_Union interface.
func (*RoutingPolicy_DefinedSets_TagSet_TagValue_Union_Uint32) Is_RoutingPolicy_DefinedSets_TagSet_TagValue_Union() {
}

// To_RoutingPolicy_DefinedSets_TagSet_TagValue_Union takes an input interface{} and attempts to convert it to a struct
// which implements the RoutingPolicy_DefinedSets_TagSet_TagValue_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *RoutingPolicy_DefinedSets_TagSet) To_RoutingPolicy_DefinedSets_TagSet_TagValue_Union(i interface{}) (RoutingPolicy_DefinedSets_TagSet_TagValue_Union, error) {
	switch v := i.(type) {
	case string:
		return &RoutingPolicy_DefinedSets_TagSet_TagValue_Union_String{v}, nil
	case uint32:
		return &RoutingPolicy_DefinedSets_TagSet_TagValue_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to RoutingPolicy_DefinedSets_TagSet_TagValue_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
	}
}

// Stp_Mstp_MstInstance_Vlan_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/config/vlan within the YANG schema.
type Stp_Mstp_MstInstance_Vlan_Union interface {
	Is_Stp_Mstp_MstInstance_Vlan_Union()
}

// Stp_Mstp_MstInstance_Vlan_Union_String is used when /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/config/vlan
// is to be set to a string value.
type Stp_Mstp_MstInstance_Vlan_Union_String struct {
	String string
}

// Is_Stp_Mstp_MstInstance_Vlan_Union ensures that Stp_Mstp_MstInstance_Vlan_Union_String
// implements the Stp_Mstp_MstInstance_Vlan_Union interface.
func (*Stp_Mstp_MstInstance_Vlan_Union_String) Is_Stp_Mstp_MstInstance_Vlan_Union() {}

// Stp_Mstp_MstInstance_Vlan_Union_Uint16 is used when /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/config/vlan
// is to be set to a uint16 value.
type Stp_Mstp_MstInstance_Vlan_Union_Uint16 struct {
	Uint16 uint16
}

// Is_Stp_Mstp_MstInstance_Vlan_Union ensures that Stp_Mstp_MstInstance_Vlan_Union_Uint16
// implements the Stp_Mstp_MstInstance_Vlan_Union interface.
func (*Stp_Mstp_MstInstance_Vlan_Union_Uint16) Is_Stp_Mstp_MstInstance_Vlan_Union() {}

// To_Stp_Mstp_MstInstance_Vlan_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Stp_Mstp_MstInstance_Vlan_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Stp_Mstp_MstInstance) To_Stp_Mstp_MstInstance_Vlan_Union(i interface{}) (Stp_Mstp_MstInstance_Vlan_Union, error) {
	switch v := i.(type) {
	case string:
		return &Stp_Mstp_MstInstance_Vlan_Union_String{v}, nil
	case uint16:
		return &Stp_Mstp_MstInstance_Vlan_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Stp_Mstp_MstInstance_Vlan_Union, unknown union type, got: %T, want any of [string, uint16]", i, i)
	}
}

// System_Aaa_Accounting_AccountingMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/accounting/config/accounting-method within the YANG schema.
type System_Aaa_Accounting_AccountingMethod_Union interface {
	Is_System_Aaa_Accounting_AccountingMethod_Union()
}

// System_Aaa_Accounting_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/accounting/config/accounting-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type System_Aaa_Accounting_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_System_Aaa_Accounting_AccountingMethod_Union ensures that System_Aaa_Accounting_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the System_Aaa_Accounting_AccountingMethod_Union interface.
func (*System_Aaa_Accounting_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_System_Aaa_Accounting_AccountingMethod_Union() {
}

// System_Aaa_Accounting_AccountingMethod_Union_String is used when /openconfig-system/system/aaa/accounting/config/accounting-method
// is to be set to a string value.
type System_Aaa_Accounting_AccountingMethod_Union_String struct {
	String string
}

// Is_System_Aaa_Accounting_AccountingMethod_Union ensures that System_Aaa_Accounting_AccountingMethod_Union_String
// implements the System_Aaa_Accounting_AccountingMethod_Union interface.
func (*System_Aaa_Accounting_AccountingMethod_Union_String) Is_System_Aaa_Accounting_AccountingMethod_Union() {
}

// To_System_Aaa_Accounting_AccountingMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the System_Aaa_Accounting_AccountingMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *System_Aaa_Accounting) To_System_Aaa_Accounting_AccountingMethod_Union(i interface{}) (System_Aaa_Accounting_AccountingMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &System_Aaa_Accounting_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &System_Aaa_Accounting_AccountingMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to System_Aaa_Accounting_AccountingMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}

// System_Aaa_Authentication_AuthenticationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authentication/config/authentication-method within the YANG schema.
type System_Aaa_Authentication_AuthenticationMethod_Union interface {
	Is_System_Aaa_Authentication_AuthenticationMethod_Union()
}

// System_Aaa_Authentication_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/authentication/config/authentication-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type System_Aaa_Authentication_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_System_Aaa_Authentication_AuthenticationMethod_Union ensures that System_Aaa_Authentication_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the System_Aaa_Authentication_AuthenticationMethod_Union interface.
func (*System_Aaa_Authentication_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_System_Aaa_Authentication_AuthenticationMethod_Union() {
}

// System_Aaa_Authentication_AuthenticationMethod_Union_String is used when /openconfig-system/system/aaa/authentication/config/authentication-method
// is to be set to a string value.
type System_Aaa_Authentication_AuthenticationMethod_Union_String struct {
	String string
}

// Is_System_Aaa_Authentication_AuthenticationMethod_Union ensures that System_Aaa_Authentication_AuthenticationMethod_Union_String
// implements the System_Aaa_Authentication_AuthenticationMethod_Union interface.
func (*System_Aaa_Authentication_AuthenticationMethod_Union_String) Is_System_Aaa_Authentication_AuthenticationMethod_Union() {
}

// To_System_Aaa_Authentication_AuthenticationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the System_Aaa_Authentication_AuthenticationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *System_Aaa_Authentication) To_System_Aaa_Authentication_AuthenticationMethod_Union(i interface{}) (System_Aaa_Authentication_AuthenticationMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &System_Aaa_Authentication_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &System_Aaa_Authentication_AuthenticationMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to System_Aaa_Authentication_AuthenticationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}

// System_Aaa_Authentication_User_Role_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authentication/users/user/config/role within the YANG schema.
type System_Aaa_Authentication_User_Role_Union interface {
	Is_System_Aaa_Authentication_User_Role_Union()
}

// System_Aaa_Authentication_User_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES is used when /openconfig-system/system/aaa/authentication/users/user/config/role
// is to be set to a E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES value.
type System_Aaa_Authentication_User_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES struct {
	E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
}

// Is_System_Aaa_Authentication_User_Role_Union ensures that System_Aaa_Authentication_User_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
// implements the System_Aaa_Authentication_User_Role_Union interface.
func (*System_Aaa_Authentication_User_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) Is_System_Aaa_Authentication_User_Role_Union() {
}

// System_Aaa_Authentication_User_Role_Union_String is used when /openconfig-system/system/aaa/authentication/users/user/config/role
// is to be set to a string value.
type System_Aaa_Authentication_User_Role_Union_String struct {
	String string
}

// Is_System_Aaa_Authentication_User_Role_Union ensures that System_Aaa_Authentication_User_Role_Union_String
// implements the System_Aaa_Authentication_User_Role_Union interface.
func (*System_Aaa_Authentication_User_Role_Union_String) Is_System_Aaa_Authentication_User_Role_Union() {
}

// To_System_Aaa_Authentication_User_Role_Union takes an input interface{} and attempts to convert it to a struct
// which implements the System_Aaa_Authentication_User_Role_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *System_Aaa_Authentication_User) To_System_Aaa_Authentication_User_Role_Union(i interface{}) (System_Aaa_Authentication_User_Role_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES:
		return &System_Aaa_Authentication_User_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES{v}, nil
	case string:
		return &System_Aaa_Authentication_User_Role_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to System_Aaa_Authentication_User_Role_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES, string]", i, i)
	}
}

// System_Aaa_Authorization_AuthorizationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authorization/config/authorization-method within the YANG schema.
type System_Aaa_Authorization_AuthorizationMethod_Union interface {
	Is_System_Aaa_Authorization_AuthorizationMethod_Union()
}

// System_Aaa_Authorization_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/authorization/config/authorization-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type System_Aaa_Authorization_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_System_Aaa_Authorization_AuthorizationMethod_Union ensures that System_Aaa_Authorization_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the System_Aaa_Authorization_AuthorizationMethod_Union interface.
func (*System_Aaa_Authorization_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_System_Aaa_Authorization_AuthorizationMethod_Union() {
}

// System_Aaa_Authorization_AuthorizationMethod_Union_String is used when /openconfig-system/system/aaa/authorization/config/authorization-method
// is to be set to a string value.
type System_Aaa_Authorization_AuthorizationMethod_Union_String struct {
	String string
}

// Is_System_Aaa_Authorization_AuthorizationMethod_Union ensures that System_Aaa_Authorization_AuthorizationMethod_Union_String
// implements the System_Aaa_Authorization_AuthorizationMethod_Union interface.
func (*System_Aaa_Authorization_AuthorizationMethod_Union_String) Is_System_Aaa_Authorization_AuthorizationMethod_Union() {
}

// To_System_Aaa_Authorization_AuthorizationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the System_Aaa_Authorization_AuthorizationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *System_Aaa_Authorization) To_System_Aaa_Authorization_AuthorizationMethod_Union(i interface{}) (System_Aaa_Authorization_AuthorizationMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &System_Aaa_Authorization_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &System_Aaa_Authorization_AuthorizationMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to System_Aaa_Authorization_AuthorizationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}

// System_Alarm_TypeId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/alarms/alarm/state/type-id within the YANG schema.
type System_Alarm_TypeId_Union interface {
	Is_System_Alarm_TypeId_Union()
}

// System_Alarm_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID is used when /openconfig-system/system/alarms/alarm/state/type-id
// is to be set to a E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID value.
type System_Alarm_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID struct {
	E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
}

// Is_System_Alarm_TypeId_Union ensures that System_Alarm_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
// implements the System_Alarm_TypeId_Union interface.
func (*System_Alarm_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID) Is_System_Alarm_TypeId_Union() {
}

// System_Alarm_TypeId_Union_String is used when /openconfig-system/system/alarms/alarm/state/type-id
// is to be set to a string value.
type System_Alarm_TypeId_Union_String struct {
	String string
}

// Is_System_Alarm_TypeId_Union ensures that System_Alarm_TypeId_Union_String
// implements the System_Alarm_TypeId_Union interface.
func (*System_Alarm_TypeId_Union_String) Is_System_Alarm_TypeId_Union() {}

// To_System_Alarm_TypeId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the System_Alarm_TypeId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *System_Alarm) To_System_Alarm_TypeId_Union(i interface{}) (System_Alarm_TypeId_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID:
		return &System_Alarm_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID{v}, nil
	case string:
		return &System_Alarm_TypeId_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to System_Alarm_TypeId_Union, unknown union type, got: %T, want any of [E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID, string]", i, i)
	}
}

// System_Cpu_Index_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/cpus/cpu/state/index within the YANG schema.
type System_Cpu_Index_Union interface {
	Is_System_Cpu_Index_Union()
}

// System_Cpu_Index_Union_E_OpenconfigSystem_Cpu_Index is used when /openconfig-system/system/cpus/cpu/state/index
// is to be set to a E_OpenconfigSystem_Cpu_Index value.
type System_Cpu_Index_Union_E_OpenconfigSystem_Cpu_Index struct {
	E_OpenconfigSystem_Cpu_Index E_OpenconfigSystem_Cpu_Index
}

// Is_System_Cpu_Index_Union ensures that System_Cpu_Index_Union_E_OpenconfigSystem_Cpu_Index
// implements the System_Cpu_Index_Union interface.
func (*System_Cpu_Index_Union_E_OpenconfigSystem_Cpu_Index) Is_System_Cpu_Index_Union() {}

// System_Cpu_Index_Union_Uint32 is used when /openconfig-system/system/cpus/cpu/state/index
// is to be set to a uint32 value.
type System_Cpu_Index_Union_Uint32 struct {
	Uint32 uint32
}

// Is_System_Cpu_Index_Union ensures that System_Cpu_Index_Union_Uint32
// implements the System_Cpu_Index_Union interface.
func (*System_Cpu_Index_Union_Uint32) Is_System_Cpu_Index_Union() {}

// To_System_Cpu_Index_Union takes an input interface{} and attempts to convert it to a struct
// which implements the System_Cpu_Index_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *System_Cpu) To_System_Cpu_Index_Union(i interface{}) (System_Cpu_Index_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigSystem_Cpu_Index:
		return &System_Cpu_Index_Union_E_OpenconfigSystem_Cpu_Index{v}, nil
	case uint32:
		return &System_Cpu_Index_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to System_Cpu_Index_Union, unknown union type, got: %T, want any of [E_OpenconfigSystem_Cpu_Index, uint32]", i, i)
	}
}
