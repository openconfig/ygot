/*
Package exampleoc is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

NOTE WELL: This is an example code file that is distributed with ygot.
It should not be used within your application, as it WILL change,
without warning. Rather, you should generate structs directly from
OpenConfig models using the ygot package.

This package was generated by github.com/openconfig/ygot
using the following YANG input files:
	- public/release/models/system/openconfig-system.yang
Imported modules were sourced from:
	- public/...
	- deps/...
*/
package exampleoc

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &Device{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	ΛMetadata   []ygot.Annotation              `path:"@" ygotAnnotation:"true"`
	Components  *OpenconfigPlatform_Components `path:"components" module:"openconfig-platform"`
	ΛComponents []ygot.Annotation              `path:"@components" ygotAnnotation:"true"`
	System      *OpenconfigSystem_System       `path:"system" module:"openconfig-system"`
	ΛSystem     []ygot.Annotation              `path:"@system" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// GetOrCreateComponents retrieves the value of the Components field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateComponents() *OpenconfigPlatform_Components {
	if t.Components != nil {
		return t.Components
	}
	t.Components = &OpenconfigPlatform_Components{}
	return t.Components
}

// GetOrCreateSystem retrieves the value of the System field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateSystem() *OpenconfigSystem_System {
	if t.System != nil {
		return t.System
	}
	t.System = &OpenconfigSystem_System{}
	return t.System
}

// GetComponents returns the value of the Components struct pointer
// from Device. If the receiver or the field Components is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetComponents() *OpenconfigPlatform_Components {
	if t != nil && t.Components != nil {
		return t.Components
	}
	return nil
}

// GetSystem returns the value of the System struct pointer
// from Device. If the receiver or the field System is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetSystem() *OpenconfigSystem_System {
	if t != nil && t.System != nil {
		return t.System
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigPlatform_Components represents the /openconfig-platform/components YANG schema element.
type OpenconfigPlatform_Components struct {
	ΛMetadata  []ygot.Annotation                                   `path:"@" ygotAnnotation:"true"`
	Component  map[string]*OpenconfigPlatform_Components_Component `path:"component" module:"openconfig-platform"`
	ΛComponent []ygot.Annotation                                   `path:"@component" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components) IsYANGGoStruct() {}

// NewComponent creates a new entry in the Component list of the
// OpenconfigPlatform_Components struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigPlatform_Components) NewComponent(Name string) (*OpenconfigPlatform_Components_Component, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Component == nil {
		t.Component = make(map[string]*OpenconfigPlatform_Components_Component)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Component[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Component", key)
	}

	t.Component[key] = &OpenconfigPlatform_Components_Component{
		Name: &Name,
	}

	return t.Component[key], nil
}

// RenameComponent renames an entry in the list Component within
// the OpenconfigPlatform_Components struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigPlatform_Components) RenameComponent(oldK, newK string) error {
	if _, ok := t.Component[newK]; ok {
		return fmt.Errorf("key %v already exists in Component", newK)
	}

	e, ok := t.Component[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Component", oldK)
	}
	e.Name = &newK

	t.Component[newK] = e
	delete(t.Component, oldK)
	return nil
}

// GetOrCreateComponent retrieves the value with the specified keys from
// the receiver OpenconfigPlatform_Components. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigPlatform_Components) GetOrCreateComponent(Name string) *OpenconfigPlatform_Components_Component {

	key := Name

	if v, ok := t.Component[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewComponent(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateComponent got unexpected error: %v", err))
	}
	return v
}

// GetComponent retrieves the value with the specified key from
// the Component map field of OpenconfigPlatform_Components. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigPlatform_Components) GetComponent(Name string) *OpenconfigPlatform_Components_Component {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Component[key]; ok {
		return lm
	}
	return nil
}

// AppendComponent appends the supplied OpenconfigPlatform_Components_Component struct to the
// list Component of OpenconfigPlatform_Components. If the key value(s) specified in
// the supplied OpenconfigPlatform_Components_Component already exist in the list, an error is
// returned.
func (t *OpenconfigPlatform_Components) AppendComponent(v *OpenconfigPlatform_Components_Component) error {
	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Component == nil {
		t.Component = make(map[string]*OpenconfigPlatform_Components_Component)
	}

	if _, ok := t.Component[key]; ok {
		return fmt.Errorf("duplicate key for list Component %v", key)
	}

	t.Component[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigPlatform_Components_Component represents the /openconfig-platform/components/component YANG schema element.
type OpenconfigPlatform_Components_Component struct {
	ΛMetadata          []ygot.Annotation                                          `path:"@" ygotAnnotation:"true"`
	Backplane          *OpenconfigPlatform_Components_Component_Backplane         `path:"backplane" module:"openconfig-platform"`
	ΛBackplane         []ygot.Annotation                                          `path:"@backplane" ygotAnnotation:"true"`
	Chassis            *OpenconfigPlatform_Components_Component_Chassis           `path:"chassis" module:"openconfig-platform"`
	ΛChassis           []ygot.Annotation                                          `path:"@chassis" ygotAnnotation:"true"`
	Config             *OpenconfigPlatform_Components_Component_Config            `path:"config" module:"openconfig-platform"`
	ΛConfig            []ygot.Annotation                                          `path:"@config" ygotAnnotation:"true"`
	Cpu                *OpenconfigPlatform_Components_Component_Cpu               `path:"cpu" module:"openconfig-platform"`
	ΛCpu               []ygot.Annotation                                          `path:"@cpu" ygotAnnotation:"true"`
	Fabric             *OpenconfigPlatform_Components_Component_Fabric            `path:"fabric" module:"openconfig-platform"`
	ΛFabric            []ygot.Annotation                                          `path:"@fabric" ygotAnnotation:"true"`
	Fan                *OpenconfigPlatform_Components_Component_Fan               `path:"fan" module:"openconfig-platform"`
	ΛFan               []ygot.Annotation                                          `path:"@fan" ygotAnnotation:"true"`
	IntegratedCircuit  *OpenconfigPlatform_Components_Component_IntegratedCircuit `path:"integrated-circuit" module:"openconfig-platform"`
	ΛIntegratedCircuit []ygot.Annotation                                          `path:"@integrated-circuit" ygotAnnotation:"true"`
	Name               *string                                                    `path:"name" module:"openconfig-platform"`
	ΛName              []ygot.Annotation                                          `path:"@name" ygotAnnotation:"true"`
	Port               *OpenconfigPlatform_Components_Component_Port              `path:"port" module:"openconfig-platform"`
	ΛPort              []ygot.Annotation                                          `path:"@port" ygotAnnotation:"true"`
	PowerSupply        *OpenconfigPlatform_Components_Component_PowerSupply       `path:"power-supply" module:"openconfig-platform"`
	ΛPowerSupply       []ygot.Annotation                                          `path:"@power-supply" ygotAnnotation:"true"`
	Properties         *OpenconfigPlatform_Components_Component_Properties        `path:"properties" module:"openconfig-platform"`
	ΛProperties        []ygot.Annotation                                          `path:"@properties" ygotAnnotation:"true"`
	State              *OpenconfigPlatform_Components_Component_State             `path:"state" module:"openconfig-platform"`
	ΛState             []ygot.Annotation                                          `path:"@state" ygotAnnotation:"true"`
	Storage            *OpenconfigPlatform_Components_Component_Storage           `path:"storage" module:"openconfig-platform"`
	ΛStorage           []ygot.Annotation                                          `path:"@storage" ygotAnnotation:"true"`
	Subcomponents      *OpenconfigPlatform_Components_Component_Subcomponents     `path:"subcomponents" module:"openconfig-platform"`
	ΛSubcomponents     []ygot.Annotation                                          `path:"@subcomponents" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component) IsYANGGoStruct() {}

// GetOrCreateBackplane retrieves the value of the Backplane field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateBackplane() *OpenconfigPlatform_Components_Component_Backplane {
	if t.Backplane != nil {
		return t.Backplane
	}
	t.Backplane = &OpenconfigPlatform_Components_Component_Backplane{}
	return t.Backplane
}

// GetOrCreateChassis retrieves the value of the Chassis field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateChassis() *OpenconfigPlatform_Components_Component_Chassis {
	if t.Chassis != nil {
		return t.Chassis
	}
	t.Chassis = &OpenconfigPlatform_Components_Component_Chassis{}
	return t.Chassis
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Config{}
	return t.Config
}

// GetOrCreateCpu retrieves the value of the Cpu field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateCpu() *OpenconfigPlatform_Components_Component_Cpu {
	if t.Cpu != nil {
		return t.Cpu
	}
	t.Cpu = &OpenconfigPlatform_Components_Component_Cpu{}
	return t.Cpu
}

// GetOrCreateFabric retrieves the value of the Fabric field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateFabric() *OpenconfigPlatform_Components_Component_Fabric {
	if t.Fabric != nil {
		return t.Fabric
	}
	t.Fabric = &OpenconfigPlatform_Components_Component_Fabric{}
	return t.Fabric
}

// GetOrCreateFan retrieves the value of the Fan field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateFan() *OpenconfigPlatform_Components_Component_Fan {
	if t.Fan != nil {
		return t.Fan
	}
	t.Fan = &OpenconfigPlatform_Components_Component_Fan{}
	return t.Fan
}

// GetOrCreateIntegratedCircuit retrieves the value of the IntegratedCircuit field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateIntegratedCircuit() *OpenconfigPlatform_Components_Component_IntegratedCircuit {
	if t.IntegratedCircuit != nil {
		return t.IntegratedCircuit
	}
	t.IntegratedCircuit = &OpenconfigPlatform_Components_Component_IntegratedCircuit{}
	return t.IntegratedCircuit
}

// GetOrCreatePort retrieves the value of the Port field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreatePort() *OpenconfigPlatform_Components_Component_Port {
	if t.Port != nil {
		return t.Port
	}
	t.Port = &OpenconfigPlatform_Components_Component_Port{}
	return t.Port
}

// GetOrCreatePowerSupply retrieves the value of the PowerSupply field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreatePowerSupply() *OpenconfigPlatform_Components_Component_PowerSupply {
	if t.PowerSupply != nil {
		return t.PowerSupply
	}
	t.PowerSupply = &OpenconfigPlatform_Components_Component_PowerSupply{}
	return t.PowerSupply
}

// GetOrCreateProperties retrieves the value of the Properties field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateProperties() *OpenconfigPlatform_Components_Component_Properties {
	if t.Properties != nil {
		return t.Properties
	}
	t.Properties = &OpenconfigPlatform_Components_Component_Properties{}
	return t.Properties
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateState() *OpenconfigPlatform_Components_Component_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_State{}
	return t.State
}

// GetOrCreateStorage retrieves the value of the Storage field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateStorage() *OpenconfigPlatform_Components_Component_Storage {
	if t.Storage != nil {
		return t.Storage
	}
	t.Storage = &OpenconfigPlatform_Components_Component_Storage{}
	return t.Storage
}

// GetOrCreateSubcomponents retrieves the value of the Subcomponents field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateSubcomponents() *OpenconfigPlatform_Components_Component_Subcomponents {
	if t.Subcomponents != nil {
		return t.Subcomponents
	}
	t.Subcomponents = &OpenconfigPlatform_Components_Component_Subcomponents{}
	return t.Subcomponents
}

// GetBackplane returns the value of the Backplane struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Backplane is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetBackplane() *OpenconfigPlatform_Components_Component_Backplane {
	if t != nil && t.Backplane != nil {
		return t.Backplane
	}
	return nil
}

// GetChassis returns the value of the Chassis struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Chassis is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetChassis() *OpenconfigPlatform_Components_Component_Chassis {
	if t != nil && t.Chassis != nil {
		return t.Chassis
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetConfig() *OpenconfigPlatform_Components_Component_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetCpu returns the value of the Cpu struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Cpu is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetCpu() *OpenconfigPlatform_Components_Component_Cpu {
	if t != nil && t.Cpu != nil {
		return t.Cpu
	}
	return nil
}

// GetFabric returns the value of the Fabric struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Fabric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetFabric() *OpenconfigPlatform_Components_Component_Fabric {
	if t != nil && t.Fabric != nil {
		return t.Fabric
	}
	return nil
}

// GetFan returns the value of the Fan struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Fan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetFan() *OpenconfigPlatform_Components_Component_Fan {
	if t != nil && t.Fan != nil {
		return t.Fan
	}
	return nil
}

// GetIntegratedCircuit returns the value of the IntegratedCircuit struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field IntegratedCircuit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetIntegratedCircuit() *OpenconfigPlatform_Components_Component_IntegratedCircuit {
	if t != nil && t.IntegratedCircuit != nil {
		return t.IntegratedCircuit
	}
	return nil
}

// GetPort returns the value of the Port struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Port is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetPort() *OpenconfigPlatform_Components_Component_Port {
	if t != nil && t.Port != nil {
		return t.Port
	}
	return nil
}

// GetPowerSupply returns the value of the PowerSupply struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field PowerSupply is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetPowerSupply() *OpenconfigPlatform_Components_Component_PowerSupply {
	if t != nil && t.PowerSupply != nil {
		return t.PowerSupply
	}
	return nil
}

// GetProperties returns the value of the Properties struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Properties is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetProperties() *OpenconfigPlatform_Components_Component_Properties {
	if t != nil && t.Properties != nil {
		return t.Properties
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetState() *OpenconfigPlatform_Components_Component_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetStorage returns the value of the Storage struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Storage is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetStorage() *OpenconfigPlatform_Components_Component_Storage {
	if t != nil && t.Storage != nil {
		return t.Storage
	}
	return nil
}

// GetSubcomponents returns the value of the Subcomponents struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Subcomponents is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetSubcomponents() *OpenconfigPlatform_Components_Component_Subcomponents {
	if t != nil && t.Subcomponents != nil {
		return t.Subcomponents
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the OpenconfigPlatform_Components_Component
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// ΛListKeyMap returns the keys of the OpenconfigPlatform_Components_Component struct, which is a YANG list entry.
func (t *OpenconfigPlatform_Components_Component) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Backplane represents the /openconfig-platform/components/component/backplane YANG schema element.
type OpenconfigPlatform_Components_Component_Backplane struct {
	ΛMetadata []ygot.Annotation                                         `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Backplane_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                         `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Backplane_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                         `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Backplane implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Backplane) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Backplane) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Backplane_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Backplane_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Backplane) GetOrCreateState() *OpenconfigPlatform_Components_Component_Backplane_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Backplane_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Backplane. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Backplane) GetConfig() *OpenconfigPlatform_Components_Component_Backplane_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Backplane. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Backplane) GetState() *OpenconfigPlatform_Components_Component_Backplane_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Backplane) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Backplane"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Backplane) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Backplane_Config represents the /openconfig-platform/components/component/backplane/config YANG schema element.
type OpenconfigPlatform_Components_Component_Backplane_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Backplane_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Backplane_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Backplane_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Backplane_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Backplane_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Backplane_State represents the /openconfig-platform/components/component/backplane/state YANG schema element.
type OpenconfigPlatform_Components_Component_Backplane_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Backplane_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Backplane_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Backplane_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Backplane_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Backplane_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Chassis represents the /openconfig-platform/components/component/chassis YANG schema element.
type OpenconfigPlatform_Components_Component_Chassis struct {
	ΛMetadata []ygot.Annotation                                       `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Chassis_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                       `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Chassis_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                       `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Chassis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Chassis) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Chassis) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Chassis_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Chassis_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Chassis) GetOrCreateState() *OpenconfigPlatform_Components_Component_Chassis_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Chassis_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Chassis. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Chassis) GetConfig() *OpenconfigPlatform_Components_Component_Chassis_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Chassis. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Chassis) GetState() *OpenconfigPlatform_Components_Component_Chassis_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Chassis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Chassis) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Chassis_Config represents the /openconfig-platform/components/component/chassis/config YANG schema element.
type OpenconfigPlatform_Components_Component_Chassis_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Chassis_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Chassis_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Chassis_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Chassis_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Chassis_State represents the /openconfig-platform/components/component/chassis/state YANG schema element.
type OpenconfigPlatform_Components_Component_Chassis_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Chassis_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Chassis_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Chassis_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Chassis_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Config represents the /openconfig-platform/components/component/config YANG schema element.
type OpenconfigPlatform_Components_Component_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Config) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the OpenconfigPlatform_Components_Component_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Config) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Cpu represents the /openconfig-platform/components/component/cpu YANG schema element.
type OpenconfigPlatform_Components_Component_Cpu struct {
	ΛMetadata []ygot.Annotation                                   `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Cpu_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                   `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Cpu_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                   `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Cpu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Cpu) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Cpu) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Cpu_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Cpu_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Cpu) GetOrCreateState() *OpenconfigPlatform_Components_Component_Cpu_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Cpu_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Cpu. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Cpu) GetConfig() *OpenconfigPlatform_Components_Component_Cpu_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Cpu. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Cpu) GetState() *OpenconfigPlatform_Components_Component_Cpu_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Cpu) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Cpu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Cpu) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Cpu_Config represents the /openconfig-platform/components/component/cpu/config YANG schema element.
type OpenconfigPlatform_Components_Component_Cpu_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Cpu_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Cpu_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Cpu_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Cpu_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Cpu_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Cpu_State represents the /openconfig-platform/components/component/cpu/state YANG schema element.
type OpenconfigPlatform_Components_Component_Cpu_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Cpu_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Cpu_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Cpu_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Cpu_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Cpu_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Fabric represents the /openconfig-platform/components/component/fabric YANG schema element.
type OpenconfigPlatform_Components_Component_Fabric struct {
	ΛMetadata []ygot.Annotation                                      `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Fabric_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                      `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Fabric_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fabric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fabric) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Fabric) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Fabric_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Fabric_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Fabric) GetOrCreateState() *OpenconfigPlatform_Components_Component_Fabric_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Fabric_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Fabric. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Fabric) GetConfig() *OpenconfigPlatform_Components_Component_Fabric_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Fabric. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Fabric) GetState() *OpenconfigPlatform_Components_Component_Fabric_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fabric) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fabric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fabric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Fabric_Config represents the /openconfig-platform/components/component/fabric/config YANG schema element.
type OpenconfigPlatform_Components_Component_Fabric_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fabric_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fabric_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fabric_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fabric_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fabric_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Fabric_State represents the /openconfig-platform/components/component/fabric/state YANG schema element.
type OpenconfigPlatform_Components_Component_Fabric_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fabric_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fabric_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fabric_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fabric_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fabric_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Fan represents the /openconfig-platform/components/component/fan YANG schema element.
type OpenconfigPlatform_Components_Component_Fan struct {
	ΛMetadata []ygot.Annotation                                   `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Fan_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                   `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Fan_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                   `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fan) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Fan) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Fan_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Fan_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Fan) GetOrCreateState() *OpenconfigPlatform_Components_Component_Fan_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Fan_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Fan. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Fan) GetConfig() *OpenconfigPlatform_Components_Component_Fan_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Fan. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Fan) GetState() *OpenconfigPlatform_Components_Component_Fan_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fan) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Fan_Config represents the /openconfig-platform/components/component/fan/config YANG schema element.
type OpenconfigPlatform_Components_Component_Fan_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fan_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fan_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fan_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fan_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fan_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Fan_State represents the /openconfig-platform/components/component/fan/state YANG schema element.
type OpenconfigPlatform_Components_Component_Fan_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fan_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fan_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fan_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fan_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fan_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit represents the /openconfig-platform/components/component/integrated-circuit YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit struct {
	ΛMetadata []ygot.Annotation                                                 `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                                 `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_IntegratedCircuit_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                                 `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_IntegratedCircuit_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) GetOrCreateState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_IntegratedCircuit_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) GetConfig() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) GetState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_Config represents the /openconfig-platform/components/component/integrated-circuit/config YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_State represents the /openconfig-platform/components/component/integrated-circuit/state YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Port represents the /openconfig-platform/components/component/port YANG schema element.
type OpenconfigPlatform_Components_Component_Port struct {
	ΛMetadata []ygot.Annotation                                    `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Port_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                    `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Port_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                    `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Port) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Port) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Port_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Port_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Port) GetOrCreateState() *OpenconfigPlatform_Components_Component_Port_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Port_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Port. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Port) GetConfig() *OpenconfigPlatform_Components_Component_Port_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Port. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Port) GetState() *OpenconfigPlatform_Components_Component_Port_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Port_Config represents the /openconfig-platform/components/component/port/config YANG schema element.
type OpenconfigPlatform_Components_Component_Port_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Port_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Port_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Port_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Port_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Port_State represents the /openconfig-platform/components/component/port/state YANG schema element.
type OpenconfigPlatform_Components_Component_Port_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Port_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Port_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Port_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Port_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_PowerSupply represents the /openconfig-platform/components/component/power-supply YANG schema element.
type OpenconfigPlatform_Components_Component_PowerSupply struct {
	ΛMetadata []ygot.Annotation                                           `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_PowerSupply_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                           `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_PowerSupply_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                           `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_PowerSupply implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_PowerSupply) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_PowerSupply) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_PowerSupply_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_PowerSupply_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_PowerSupply) GetOrCreateState() *OpenconfigPlatform_Components_Component_PowerSupply_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_PowerSupply_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_PowerSupply. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_PowerSupply) GetConfig() *OpenconfigPlatform_Components_Component_PowerSupply_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_PowerSupply. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_PowerSupply) GetState() *OpenconfigPlatform_Components_Component_PowerSupply_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_PowerSupply) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_PowerSupply"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_PowerSupply) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_PowerSupply_Config represents the /openconfig-platform/components/component/power-supply/config YANG schema element.
type OpenconfigPlatform_Components_Component_PowerSupply_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_PowerSupply_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_PowerSupply_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_PowerSupply_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_PowerSupply_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_PowerSupply_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_PowerSupply_State represents the /openconfig-platform/components/component/power-supply/state YANG schema element.
type OpenconfigPlatform_Components_Component_PowerSupply_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_PowerSupply_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_PowerSupply_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_PowerSupply_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_PowerSupply_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_PowerSupply_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Properties represents the /openconfig-platform/components/component/properties YANG schema element.
type OpenconfigPlatform_Components_Component_Properties struct {
	ΛMetadata []ygot.Annotation                                                       `path:"@" ygotAnnotation:"true"`
	Property  map[string]*OpenconfigPlatform_Components_Component_Properties_Property `path:"property" module:"openconfig-platform"`
	ΛProperty []ygot.Annotation                                                       `path:"@property" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Properties implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Properties) IsYANGGoStruct() {}

// NewProperty creates a new entry in the Property list of the
// OpenconfigPlatform_Components_Component_Properties struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigPlatform_Components_Component_Properties) NewProperty(Name string) (*OpenconfigPlatform_Components_Component_Properties_Property, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Property == nil {
		t.Property = make(map[string]*OpenconfigPlatform_Components_Component_Properties_Property)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Property[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Property", key)
	}

	t.Property[key] = &OpenconfigPlatform_Components_Component_Properties_Property{
		Name: &Name,
	}

	return t.Property[key], nil
}

// RenameProperty renames an entry in the list Property within
// the OpenconfigPlatform_Components_Component_Properties struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigPlatform_Components_Component_Properties) RenameProperty(oldK, newK string) error {
	if _, ok := t.Property[newK]; ok {
		return fmt.Errorf("key %v already exists in Property", newK)
	}

	e, ok := t.Property[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Property", oldK)
	}
	e.Name = &newK

	t.Property[newK] = e
	delete(t.Property, oldK)
	return nil
}

// GetOrCreateProperty retrieves the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_Properties. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigPlatform_Components_Component_Properties) GetOrCreateProperty(Name string) *OpenconfigPlatform_Components_Component_Properties_Property {

	key := Name

	if v, ok := t.Property[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProperty(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProperty got unexpected error: %v", err))
	}
	return v
}

// GetProperty retrieves the value with the specified key from
// the Property map field of OpenconfigPlatform_Components_Component_Properties. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigPlatform_Components_Component_Properties) GetProperty(Name string) *OpenconfigPlatform_Components_Component_Properties_Property {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Property[key]; ok {
		return lm
	}
	return nil
}

// AppendProperty appends the supplied OpenconfigPlatform_Components_Component_Properties_Property struct to the
// list Property of OpenconfigPlatform_Components_Component_Properties. If the key value(s) specified in
// the supplied OpenconfigPlatform_Components_Component_Properties_Property already exist in the list, an error is
// returned.
func (t *OpenconfigPlatform_Components_Component_Properties) AppendProperty(v *OpenconfigPlatform_Components_Component_Properties_Property) error {
	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Property == nil {
		t.Property = make(map[string]*OpenconfigPlatform_Components_Component_Properties_Property)
	}

	if _, ok := t.Property[key]; ok {
		return fmt.Errorf("duplicate key for list Property %v", key)
	}

	t.Property[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Properties"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Properties) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Properties_Property represents the /openconfig-platform/components/component/properties/property YANG schema element.
type OpenconfigPlatform_Components_Component_Properties_Property struct {
	ΛMetadata []ygot.Annotation                                                   `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Properties_Property_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                                   `path:"@config" ygotAnnotation:"true"`
	Name      *string                                                             `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation                                                   `path:"@name" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Properties_Property_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                                   `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Properties_Property implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Properties_Property) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Properties_Property_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Properties_Property_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) GetOrCreateState() *OpenconfigPlatform_Components_Component_Properties_Property_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Properties_Property_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Properties_Property. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) GetConfig() *OpenconfigPlatform_Components_Component_Properties_Property_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Properties_Property. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) GetState() *OpenconfigPlatform_Components_Component_Properties_Property_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the OpenconfigPlatform_Components_Component_Properties_Property
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// ΛListKeyMap returns the keys of the OpenconfigPlatform_Components_Component_Properties_Property struct, which is a YANG list entry.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Properties_Property"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Properties_Property_Config represents the /openconfig-platform/components/component/properties/property/config YANG schema element.
type OpenconfigPlatform_Components_Component_Properties_Property_Config struct {
	ΛMetadata []ygot.Annotation                                                              `path:"@" ygotAnnotation:"true"`
	Name      *string                                                                        `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation                                                              `path:"@name" ygotAnnotation:"true"`
	Value     OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union `path:"value" module:"openconfig-platform"`
	ΛValue    []ygot.Annotation                                                              `path:"@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Properties_Property_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the OpenconfigPlatform_Components_Component_Properties_Property_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_Config) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetValue retrieves the value of the leaf Value from the OpenconfigPlatform_Components_Component_Properties_Property_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Value is set, it can safely use t.GetValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Value == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_Config) GetValue() OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Properties_Property_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-platform/components/component/properties/property/config/value within the YANG schema.
type OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface {
	Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union()
}

// OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Bool is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a bool value.
type OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Bool struct {
	Bool bool
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Bool
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Bool) Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {
}

// OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Float64 is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a float64 value.
type OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Float64 struct {
	Float64 float64
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Float64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Float64) Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {
}

// OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Int64 is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a int64 value.
type OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Int64 struct {
	Int64 int64
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Int64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Int64) Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {
}

// OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_String is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a string value.
type OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_String struct {
	String string
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_String
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_String) Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {
}

// OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Uint64 is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a uint64 value.
type OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Uint64 struct {
	Uint64 uint64
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Uint64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Uint64) Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {
}

// To_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_Config) To_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union(i interface{}) (OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union, error) {
	switch v := i.(type) {
	case bool:
		return &OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Bool{v}, nil
	case float64:
		return &OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Float64{v}, nil
	case int64:
		return &OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Int64{v}, nil
	case string:
		return &OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_String{v}, nil
	case uint64:
		return &OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Uint64{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union, unknown union type, got: %T, want any of [bool, float64, int64, string, uint64]", i, i)
	}
}

// OpenconfigPlatform_Components_Component_Properties_Property_State represents the /openconfig-platform/components/component/properties/property/state YANG schema element.
type OpenconfigPlatform_Components_Component_Properties_Property_State struct {
	ΛMetadata     []ygot.Annotation                                                             `path:"@" ygotAnnotation:"true"`
	Configurable  *bool                                                                         `path:"configurable" module:"openconfig-platform"`
	ΛConfigurable []ygot.Annotation                                                             `path:"@configurable" ygotAnnotation:"true"`
	Name          *string                                                                       `path:"name" module:"openconfig-platform"`
	ΛName         []ygot.Annotation                                                             `path:"@name" ygotAnnotation:"true"`
	Value         OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union `path:"value" module:"openconfig-platform"`
	ΛValue        []ygot.Annotation                                                             `path:"@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Properties_Property_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State) IsYANGGoStruct() {}

// GetConfigurable retrieves the value of the leaf Configurable from the OpenconfigPlatform_Components_Component_Properties_Property_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Configurable is set, it can safely use t.GetConfigurable()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Configurable == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_State) GetConfigurable() bool {
	if t == nil || t.Configurable == nil {
		return false
	}
	return *t.Configurable
}

// GetName retrieves the value of the leaf Name from the OpenconfigPlatform_Components_Component_Properties_Property_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_State) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetValue retrieves the value of the leaf Value from the OpenconfigPlatform_Components_Component_Properties_Property_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Value is set, it can safely use t.GetValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Value == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_State) GetValue() OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Properties_Property_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-platform/components/component/properties/property/state/value within the YANG schema.
type OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface {
	Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union()
}

// OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Bool is used when /openconfig-platform/components/component/properties/property/state/value
// is to be set to a bool value.
type OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Bool struct {
	Bool bool
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Bool
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Bool) Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {
}

// OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Float64 is used when /openconfig-platform/components/component/properties/property/state/value
// is to be set to a float64 value.
type OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Float64 struct {
	Float64 float64
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Float64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Float64) Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {
}

// OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Int64 is used when /openconfig-platform/components/component/properties/property/state/value
// is to be set to a int64 value.
type OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Int64 struct {
	Int64 int64
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Int64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Int64) Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {
}

// OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_String is used when /openconfig-platform/components/component/properties/property/state/value
// is to be set to a string value.
type OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_String struct {
	String string
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_String
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_String) Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {
}

// OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Uint64 is used when /openconfig-platform/components/component/properties/property/state/value
// is to be set to a uint64 value.
type OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Uint64 struct {
	Uint64 uint64
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Uint64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Uint64) Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {
}

// To_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_State) To_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union(i interface{}) (OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union, error) {
	switch v := i.(type) {
	case bool:
		return &OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Bool{v}, nil
	case float64:
		return &OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Float64{v}, nil
	case int64:
		return &OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Int64{v}, nil
	case string:
		return &OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_String{v}, nil
	case uint64:
		return &OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Uint64{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union, unknown union type, got: %T, want any of [bool, float64, int64, string, uint64]", i, i)
	}
}

// OpenconfigPlatform_Components_Component_State represents the /openconfig-platform/components/component/state YANG schema element.
type OpenconfigPlatform_Components_Component_State struct {
	ΛMetadata          []ygot.Annotation                                          `path:"@" ygotAnnotation:"true"`
	AllocatedPower     *uint32                                                    `path:"allocated-power" module:"openconfig-platform"`
	ΛAllocatedPower    []ygot.Annotation                                          `path:"@allocated-power" ygotAnnotation:"true"`
	Description        *string                                                    `path:"description" module:"openconfig-platform"`
	ΛDescription       []ygot.Annotation                                          `path:"@description" ygotAnnotation:"true"`
	Empty              *bool                                                      `path:"empty" module:"openconfig-platform"`
	ΛEmpty             []ygot.Annotation                                          `path:"@empty" ygotAnnotation:"true"`
	EquipmentFailure   *bool                                                      `path:"equipment-failure" module:"openconfig-alarms"`
	ΛEquipmentFailure  []ygot.Annotation                                          `path:"@equipment-failure" ygotAnnotation:"true"`
	EquipmentMismatch  *bool                                                      `path:"equipment-mismatch" module:"openconfig-alarms"`
	ΛEquipmentMismatch []ygot.Annotation                                          `path:"@equipment-mismatch" ygotAnnotation:"true"`
	FirmwareVersion    *string                                                    `path:"firmware-version" module:"openconfig-platform"`
	ΛFirmwareVersion   []ygot.Annotation                                          `path:"@firmware-version" ygotAnnotation:"true"`
	HardwareVersion    *string                                                    `path:"hardware-version" module:"openconfig-platform"`
	ΛHardwareVersion   []ygot.Annotation                                          `path:"@hardware-version" ygotAnnotation:"true"`
	Id                 *string                                                    `path:"id" module:"openconfig-platform"`
	ΛId                []ygot.Annotation                                          `path:"@id" ygotAnnotation:"true"`
	Location           *string                                                    `path:"location" module:"openconfig-platform"`
	ΛLocation          []ygot.Annotation                                          `path:"@location" ygotAnnotation:"true"`
	Memory             *OpenconfigPlatform_Components_Component_State_Memory      `path:"memory" module:"openconfig-platform"`
	ΛMemory            []ygot.Annotation                                          `path:"@memory" ygotAnnotation:"true"`
	MfgDate            *string                                                    `path:"mfg-date" module:"openconfig-platform"`
	ΛMfgDate           []ygot.Annotation                                          `path:"@mfg-date" ygotAnnotation:"true"`
	MfgName            *string                                                    `path:"mfg-name" module:"openconfig-platform"`
	ΛMfgName           []ygot.Annotation                                          `path:"@mfg-name" ygotAnnotation:"true"`
	Name               *string                                                    `path:"name" module:"openconfig-platform"`
	ΛName              []ygot.Annotation                                          `path:"@name" ygotAnnotation:"true"`
	OperStatus         E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS            `path:"oper-status" module:"openconfig-platform"`
	ΛOperStatus        []ygot.Annotation                                          `path:"@oper-status" ygotAnnotation:"true"`
	Parent             *string                                                    `path:"parent" module:"openconfig-platform"`
	ΛParent            []ygot.Annotation                                          `path:"@parent" ygotAnnotation:"true"`
	PartNo             *string                                                    `path:"part-no" module:"openconfig-platform"`
	ΛPartNo            []ygot.Annotation                                          `path:"@part-no" ygotAnnotation:"true"`
	Removable          *bool                                                      `path:"removable" module:"openconfig-platform"`
	ΛRemovable         []ygot.Annotation                                          `path:"@removable" ygotAnnotation:"true"`
	SerialNo           *string                                                    `path:"serial-no" module:"openconfig-platform"`
	ΛSerialNo          []ygot.Annotation                                          `path:"@serial-no" ygotAnnotation:"true"`
	SoftwareVersion    *string                                                    `path:"software-version" module:"openconfig-platform"`
	ΛSoftwareVersion   []ygot.Annotation                                          `path:"@software-version" ygotAnnotation:"true"`
	Temperature        *OpenconfigPlatform_Components_Component_State_Temperature `path:"temperature" module:"openconfig-platform"`
	ΛTemperature       []ygot.Annotation                                          `path:"@temperature" ygotAnnotation:"true"`
	Type               OpenconfigPlatform_Components_Component_State_Type_Union   `path:"type" module:"openconfig-platform"`
	ΛType              []ygot.Annotation                                          `path:"@type" ygotAnnotation:"true"`
	UsedPower          *uint32                                                    `path:"used-power" module:"openconfig-platform"`
	ΛUsedPower         []ygot.Annotation                                          `path:"@used-power" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State) IsYANGGoStruct() {}

// GetOrCreateMemory retrieves the value of the Memory field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_State) GetOrCreateMemory() *OpenconfigPlatform_Components_Component_State_Memory {
	if t.Memory != nil {
		return t.Memory
	}
	t.Memory = &OpenconfigPlatform_Components_Component_State_Memory{}
	return t.Memory
}

// GetOrCreateTemperature retrieves the value of the Temperature field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_State) GetOrCreateTemperature() *OpenconfigPlatform_Components_Component_State_Temperature {
	if t.Temperature != nil {
		return t.Temperature
	}
	t.Temperature = &OpenconfigPlatform_Components_Component_State_Temperature{}
	return t.Temperature
}

// GetMemory returns the value of the Memory struct pointer
// from OpenconfigPlatform_Components_Component_State. If the receiver or the field Memory is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_State) GetMemory() *OpenconfigPlatform_Components_Component_State_Memory {
	if t != nil && t.Memory != nil {
		return t.Memory
	}
	return nil
}

// GetTemperature returns the value of the Temperature struct pointer
// from OpenconfigPlatform_Components_Component_State. If the receiver or the field Temperature is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_State) GetTemperature() *OpenconfigPlatform_Components_Component_State_Temperature {
	if t != nil && t.Temperature != nil {
		return t.Temperature
	}
	return nil
}

// GetAllocatedPower retrieves the value of the leaf AllocatedPower from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AllocatedPower is set, it can safely use t.GetAllocatedPower()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AllocatedPower == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetAllocatedPower() uint32 {
	if t == nil || t.AllocatedPower == nil {
		return 0
	}
	return *t.AllocatedPower
}

// GetDescription retrieves the value of the leaf Description from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Description is set, it can safely use t.GetDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Description == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEmpty retrieves the value of the leaf Empty from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Empty is set, it can safely use t.GetEmpty()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Empty == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetEmpty() bool {
	if t == nil || t.Empty == nil {
		return false
	}
	return *t.Empty
}

// GetEquipmentFailure retrieves the value of the leaf EquipmentFailure from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EquipmentFailure is set, it can safely use t.GetEquipmentFailure()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EquipmentFailure == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetEquipmentFailure() bool {
	if t == nil || t.EquipmentFailure == nil {
		return false
	}
	return *t.EquipmentFailure
}

// GetEquipmentMismatch retrieves the value of the leaf EquipmentMismatch from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EquipmentMismatch is set, it can safely use t.GetEquipmentMismatch()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EquipmentMismatch == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetEquipmentMismatch() bool {
	if t == nil || t.EquipmentMismatch == nil {
		return false
	}
	return *t.EquipmentMismatch
}

// GetFirmwareVersion retrieves the value of the leaf FirmwareVersion from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FirmwareVersion is set, it can safely use t.GetFirmwareVersion()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FirmwareVersion == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetFirmwareVersion() string {
	if t == nil || t.FirmwareVersion == nil {
		return ""
	}
	return *t.FirmwareVersion
}

// GetHardwareVersion retrieves the value of the leaf HardwareVersion from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HardwareVersion is set, it can safely use t.GetHardwareVersion()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HardwareVersion == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetHardwareVersion() string {
	if t == nil || t.HardwareVersion == nil {
		return ""
	}
	return *t.HardwareVersion
}

// GetId retrieves the value of the leaf Id from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Id is set, it can safely use t.GetId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Id == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetLocation retrieves the value of the leaf Location from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Location is set, it can safely use t.GetLocation()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Location == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetLocation() string {
	if t == nil || t.Location == nil {
		return ""
	}
	return *t.Location
}

// GetMfgDate retrieves the value of the leaf MfgDate from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MfgDate is set, it can safely use t.GetMfgDate()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MfgDate == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetMfgDate() string {
	if t == nil || t.MfgDate == nil {
		return ""
	}
	return *t.MfgDate
}

// GetMfgName retrieves the value of the leaf MfgName from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MfgName is set, it can safely use t.GetMfgName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MfgName == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetMfgName() string {
	if t == nil || t.MfgName == nil {
		return ""
	}
	return *t.MfgName
}

// GetName retrieves the value of the leaf Name from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOperStatus retrieves the value of the leaf OperStatus from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OperStatus is set, it can safely use t.GetOperStatus()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OperStatus == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetOperStatus() E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS {
	if t == nil || t.OperStatus == 0 {
		return 0
	}
	return t.OperStatus
}

// GetParent retrieves the value of the leaf Parent from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Parent is set, it can safely use t.GetParent()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Parent == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetParent() string {
	if t == nil || t.Parent == nil {
		return ""
	}
	return *t.Parent
}

// GetPartNo retrieves the value of the leaf PartNo from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PartNo is set, it can safely use t.GetPartNo()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PartNo == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetPartNo() string {
	if t == nil || t.PartNo == nil {
		return ""
	}
	return *t.PartNo
}

// GetRemovable retrieves the value of the leaf Removable from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Removable is set, it can safely use t.GetRemovable()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Removable == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetRemovable() bool {
	if t == nil || t.Removable == nil {
		return false
	}
	return *t.Removable
}

// GetSerialNo retrieves the value of the leaf SerialNo from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SerialNo is set, it can safely use t.GetSerialNo()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SerialNo == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetSerialNo() string {
	if t == nil || t.SerialNo == nil {
		return ""
	}
	return *t.SerialNo
}

// GetSoftwareVersion retrieves the value of the leaf SoftwareVersion from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SoftwareVersion is set, it can safely use t.GetSoftwareVersion()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SoftwareVersion == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetSoftwareVersion() string {
	if t == nil || t.SoftwareVersion == nil {
		return ""
	}
	return *t.SoftwareVersion
}

// GetType retrieves the value of the leaf Type from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Type is set, it can safely use t.GetType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Type == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetType() OpenconfigPlatform_Components_Component_State_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// GetUsedPower retrieves the value of the leaf UsedPower from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if UsedPower is set, it can safely use t.GetUsedPower()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.UsedPower == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetUsedPower() uint32 {
	if t == nil || t.UsedPower == nil {
		return 0
	}
	return *t.UsedPower
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_State_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-platform/components/component/state/type within the YANG schema.
type OpenconfigPlatform_Components_Component_State_Type_Union interface {
	Is_OpenconfigPlatform_Components_Component_State_Type_Union()
}

// OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT is used when /openconfig-platform/components/component/state/type
// is to be set to a E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT value.
type OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT struct {
	E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
}

// Is_OpenconfigPlatform_Components_Component_State_Type_Union ensures that OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
// implements the OpenconfigPlatform_Components_Component_State_Type_Union interface.
func (*OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT) Is_OpenconfigPlatform_Components_Component_State_Type_Union() {
}

// OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT is used when /openconfig-platform/components/component/state/type
// is to be set to a E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT value.
type OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT struct {
	E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
}

// Is_OpenconfigPlatform_Components_Component_State_Type_Union ensures that OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
// implements the OpenconfigPlatform_Components_Component_State_Type_Union interface.
func (*OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT) Is_OpenconfigPlatform_Components_Component_State_Type_Union() {
}

// To_OpenconfigPlatform_Components_Component_State_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigPlatform_Components_Component_State_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigPlatform_Components_Component_State) To_OpenconfigPlatform_Components_Component_State_Type_Union(i interface{}) (OpenconfigPlatform_Components_Component_State_Type_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT:
		return &OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT{v}, nil
	case E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT:
		return &OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigPlatform_Components_Component_State_Type_Union, unknown union type, got: %T, want any of [E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT, E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT]", i, i)
	}
}

// OpenconfigPlatform_Components_Component_State_Memory represents the /openconfig-platform/components/component/state/memory YANG schema element.
type OpenconfigPlatform_Components_Component_State_Memory struct {
	ΛMetadata  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Available  *uint64           `path:"available" module:"openconfig-platform"`
	ΛAvailable []ygot.Annotation `path:"@available" ygotAnnotation:"true"`
	Utilized   *uint64           `path:"utilized" module:"openconfig-platform"`
	ΛUtilized  []ygot.Annotation `path:"@utilized" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_Memory) IsYANGGoStruct() {}

// GetAvailable retrieves the value of the leaf Available from the OpenconfigPlatform_Components_Component_State_Memory
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Available is set, it can safely use t.GetAvailable()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Available == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State_Memory) GetAvailable() uint64 {
	if t == nil || t.Available == nil {
		return 0
	}
	return *t.Available
}

// GetUtilized retrieves the value of the leaf Utilized from the OpenconfigPlatform_Components_Component_State_Memory
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Utilized is set, it can safely use t.GetUtilized()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Utilized == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State_Memory) GetUtilized() uint64 {
	if t == nil || t.Utilized == nil {
		return 0
	}
	return *t.Utilized
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Memory) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_Memory"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_Memory) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_State_Temperature represents the /openconfig-platform/components/component/state/temperature YANG schema element.
type OpenconfigPlatform_Components_Component_State_Temperature struct {
	ΛMetadata       []ygot.Annotation                                `path:"@" ygotAnnotation:"true"`
	AlarmSeverity   E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY `path:"alarm-severity" module:"openconfig-platform"`
	ΛAlarmSeverity  []ygot.Annotation                                `path:"@alarm-severity" ygotAnnotation:"true"`
	AlarmStatus     *bool                                            `path:"alarm-status" module:"openconfig-platform"`
	ΛAlarmStatus    []ygot.Annotation                                `path:"@alarm-status" ygotAnnotation:"true"`
	AlarmThreshold  *uint32                                          `path:"alarm-threshold" module:"openconfig-platform"`
	ΛAlarmThreshold []ygot.Annotation                                `path:"@alarm-threshold" ygotAnnotation:"true"`
	Avg             *float64                                         `path:"avg" module:"openconfig-platform"`
	ΛAvg            []ygot.Annotation                                `path:"@avg" ygotAnnotation:"true"`
	Instant         *float64                                         `path:"instant" module:"openconfig-platform"`
	ΛInstant        []ygot.Annotation                                `path:"@instant" ygotAnnotation:"true"`
	Interval        *uint64                                          `path:"interval" module:"openconfig-platform"`
	ΛInterval       []ygot.Annotation                                `path:"@interval" ygotAnnotation:"true"`
	Max             *float64                                         `path:"max" module:"openconfig-platform"`
	ΛMax            []ygot.Annotation                                `path:"@max" ygotAnnotation:"true"`
	MaxTime         *uint64                                          `path:"max-time" module:"openconfig-platform"`
	ΛMaxTime        []ygot.Annotation                                `path:"@max-time" ygotAnnotation:"true"`
	Min             *float64                                         `path:"min" module:"openconfig-platform"`
	ΛMin            []ygot.Annotation                                `path:"@min" ygotAnnotation:"true"`
	MinTime         *uint64                                          `path:"min-time" module:"openconfig-platform"`
	ΛMinTime        []ygot.Annotation                                `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_Temperature implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_Temperature) IsYANGGoStruct() {}

// GetAlarmSeverity retrieves the value of the leaf AlarmSeverity from the OpenconfigPlatform_Components_Component_State_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AlarmSeverity is set, it can safely use t.GetAlarmSeverity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AlarmSeverity == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) GetAlarmSeverity() E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY {
	if t == nil || t.AlarmSeverity == 0 {
		return 0
	}
	return t.AlarmSeverity
}

// GetAlarmStatus retrieves the value of the leaf AlarmStatus from the OpenconfigPlatform_Components_Component_State_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AlarmStatus is set, it can safely use t.GetAlarmStatus()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AlarmStatus == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) GetAlarmStatus() bool {
	if t == nil || t.AlarmStatus == nil {
		return false
	}
	return *t.AlarmStatus
}

// GetAlarmThreshold retrieves the value of the leaf AlarmThreshold from the OpenconfigPlatform_Components_Component_State_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AlarmThreshold is set, it can safely use t.GetAlarmThreshold()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AlarmThreshold == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) GetAlarmThreshold() uint32 {
	if t == nil || t.AlarmThreshold == nil {
		return 0
	}
	return *t.AlarmThreshold
}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigPlatform_Components_Component_State_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigPlatform_Components_Component_State_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigPlatform_Components_Component_State_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigPlatform_Components_Component_State_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigPlatform_Components_Component_State_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigPlatform_Components_Component_State_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigPlatform_Components_Component_State_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_Temperature"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Storage represents the /openconfig-platform/components/component/storage YANG schema element.
type OpenconfigPlatform_Components_Component_Storage struct {
	ΛMetadata []ygot.Annotation                                       `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Storage_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                       `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Storage_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                       `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Storage implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Storage) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Storage) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Storage_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Storage_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Storage) GetOrCreateState() *OpenconfigPlatform_Components_Component_Storage_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Storage_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Storage. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Storage) GetConfig() *OpenconfigPlatform_Components_Component_Storage_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Storage. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Storage) GetState() *OpenconfigPlatform_Components_Component_Storage_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Storage) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Storage"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Storage) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Storage_Config represents the /openconfig-platform/components/component/storage/config YANG schema element.
type OpenconfigPlatform_Components_Component_Storage_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Storage_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Storage_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Storage_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Storage_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Storage_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Storage_State represents the /openconfig-platform/components/component/storage/state YANG schema element.
type OpenconfigPlatform_Components_Component_Storage_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Storage_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Storage_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Storage_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Storage_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Storage_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Subcomponents represents the /openconfig-platform/components/component/subcomponents YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents struct {
	ΛMetadata     []ygot.Annotation                                                              `path:"@" ygotAnnotation:"true"`
	Subcomponent  map[string]*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent `path:"subcomponent" module:"openconfig-platform"`
	ΛSubcomponent []ygot.Annotation                                                              `path:"@subcomponent" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents) IsYANGGoStruct() {}

// NewSubcomponent creates a new entry in the Subcomponent list of the
// OpenconfigPlatform_Components_Component_Subcomponents struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) NewSubcomponent(Name string) (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subcomponent == nil {
		t.Subcomponent = make(map[string]*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subcomponent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subcomponent", key)
	}

	t.Subcomponent[key] = &OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent{
		Name: &Name,
	}

	return t.Subcomponent[key], nil
}

// RenameSubcomponent renames an entry in the list Subcomponent within
// the OpenconfigPlatform_Components_Component_Subcomponents struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) RenameSubcomponent(oldK, newK string) error {
	if _, ok := t.Subcomponent[newK]; ok {
		return fmt.Errorf("key %v already exists in Subcomponent", newK)
	}

	e, ok := t.Subcomponent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Subcomponent", oldK)
	}
	e.Name = &newK

	t.Subcomponent[newK] = e
	delete(t.Subcomponent, oldK)
	return nil
}

// GetOrCreateSubcomponent retrieves the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_Subcomponents. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) GetOrCreateSubcomponent(Name string) *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent {

	key := Name

	if v, ok := t.Subcomponent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubcomponent(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubcomponent got unexpected error: %v", err))
	}
	return v
}

// GetSubcomponent retrieves the value with the specified key from
// the Subcomponent map field of OpenconfigPlatform_Components_Component_Subcomponents. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) GetSubcomponent(Name string) *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Subcomponent[key]; ok {
		return lm
	}
	return nil
}

// AppendSubcomponent appends the supplied OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent struct to the
// list Subcomponent of OpenconfigPlatform_Components_Component_Subcomponents. If the key value(s) specified in
// the supplied OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent already exist in the list, an error is
// returned.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) AppendSubcomponent(v *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) error {
	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subcomponent == nil {
		t.Subcomponent = make(map[string]*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent)
	}

	if _, ok := t.Subcomponent[key]; ok {
		return fmt.Errorf("duplicate key for list Subcomponent %v", key)
	}

	t.Subcomponent[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent represents the /openconfig-platform/components/component/subcomponents/subcomponent YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent struct {
	ΛMetadata []ygot.Annotation                                                          `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                                          `path:"@config" ygotAnnotation:"true"`
	Name      *string                                                                    `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation                                                          `path:"@name" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                                          `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) GetOrCreateState() *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) GetConfig() *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) GetState() *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// ΛListKeyMap returns the keys of the OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent struct, which is a YANG list entry.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config represents the /openconfig-platform/components/component/subcomponents/subcomponent/config YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State represents the /openconfig-platform/components/component/subcomponents/subcomponent/state YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System represents the /openconfig-system/system YANG schema element.
type OpenconfigSystem_System struct {
	ΛMetadata     []ygot.Annotation                     `path:"@" ygotAnnotation:"true"`
	Aaa           *OpenconfigSystem_System_Aaa          `path:"aaa" module:"openconfig-system"`
	ΛAaa          []ygot.Annotation                     `path:"@aaa" ygotAnnotation:"true"`
	Alarms        *OpenconfigSystem_System_Alarms       `path:"alarms" module:"openconfig-system"`
	ΛAlarms       []ygot.Annotation                     `path:"@alarms" ygotAnnotation:"true"`
	Clock         *OpenconfigSystem_System_Clock        `path:"clock" module:"openconfig-system"`
	ΛClock        []ygot.Annotation                     `path:"@clock" ygotAnnotation:"true"`
	Config        *OpenconfigSystem_System_Config       `path:"config" module:"openconfig-system"`
	ΛConfig       []ygot.Annotation                     `path:"@config" ygotAnnotation:"true"`
	Cpus          *OpenconfigSystem_System_Cpus         `path:"cpus" module:"openconfig-system"`
	ΛCpus         []ygot.Annotation                     `path:"@cpus" ygotAnnotation:"true"`
	Dns           *OpenconfigSystem_System_Dns          `path:"dns" module:"openconfig-system"`
	ΛDns          []ygot.Annotation                     `path:"@dns" ygotAnnotation:"true"`
	GrpcServer    *OpenconfigSystem_System_GrpcServer   `path:"grpc-server" module:"openconfig-system"`
	ΛGrpcServer   []ygot.Annotation                     `path:"@grpc-server" ygotAnnotation:"true"`
	Logging       *OpenconfigSystem_System_Logging      `path:"logging" module:"openconfig-system"`
	ΛLogging      []ygot.Annotation                     `path:"@logging" ygotAnnotation:"true"`
	Memory        *OpenconfigSystem_System_Memory       `path:"memory" module:"openconfig-system"`
	ΛMemory       []ygot.Annotation                     `path:"@memory" ygotAnnotation:"true"`
	Ntp           *OpenconfigSystem_System_Ntp          `path:"ntp" module:"openconfig-system"`
	ΛNtp          []ygot.Annotation                     `path:"@ntp" ygotAnnotation:"true"`
	Processes     *OpenconfigSystem_System_Processes    `path:"processes" module:"openconfig-system"`
	ΛProcesses    []ygot.Annotation                     `path:"@processes" ygotAnnotation:"true"`
	SshServer     *OpenconfigSystem_System_SshServer    `path:"ssh-server" module:"openconfig-system"`
	ΛSshServer    []ygot.Annotation                     `path:"@ssh-server" ygotAnnotation:"true"`
	State         *OpenconfigSystem_System_State        `path:"state" module:"openconfig-system"`
	ΛState        []ygot.Annotation                     `path:"@state" ygotAnnotation:"true"`
	TelnetServer  *OpenconfigSystem_System_TelnetServer `path:"telnet-server" module:"openconfig-system"`
	ΛTelnetServer []ygot.Annotation                     `path:"@telnet-server" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System) IsYANGGoStruct() {}

// GetOrCreateAaa retrieves the value of the Aaa field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateAaa() *OpenconfigSystem_System_Aaa {
	if t.Aaa != nil {
		return t.Aaa
	}
	t.Aaa = &OpenconfigSystem_System_Aaa{}
	return t.Aaa
}

// GetOrCreateAlarms retrieves the value of the Alarms field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateAlarms() *OpenconfigSystem_System_Alarms {
	if t.Alarms != nil {
		return t.Alarms
	}
	t.Alarms = &OpenconfigSystem_System_Alarms{}
	return t.Alarms
}

// GetOrCreateClock retrieves the value of the Clock field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateClock() *OpenconfigSystem_System_Clock {
	if t.Clock != nil {
		return t.Clock
	}
	t.Clock = &OpenconfigSystem_System_Clock{}
	return t.Clock
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateConfig() *OpenconfigSystem_System_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Config{}
	return t.Config
}

// GetOrCreateCpus retrieves the value of the Cpus field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateCpus() *OpenconfigSystem_System_Cpus {
	if t.Cpus != nil {
		return t.Cpus
	}
	t.Cpus = &OpenconfigSystem_System_Cpus{}
	return t.Cpus
}

// GetOrCreateDns retrieves the value of the Dns field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateDns() *OpenconfigSystem_System_Dns {
	if t.Dns != nil {
		return t.Dns
	}
	t.Dns = &OpenconfigSystem_System_Dns{}
	return t.Dns
}

// GetOrCreateGrpcServer retrieves the value of the GrpcServer field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateGrpcServer() *OpenconfigSystem_System_GrpcServer {
	if t.GrpcServer != nil {
		return t.GrpcServer
	}
	t.GrpcServer = &OpenconfigSystem_System_GrpcServer{}
	return t.GrpcServer
}

// GetOrCreateLogging retrieves the value of the Logging field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateLogging() *OpenconfigSystem_System_Logging {
	if t.Logging != nil {
		return t.Logging
	}
	t.Logging = &OpenconfigSystem_System_Logging{}
	return t.Logging
}

// GetOrCreateMemory retrieves the value of the Memory field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateMemory() *OpenconfigSystem_System_Memory {
	if t.Memory != nil {
		return t.Memory
	}
	t.Memory = &OpenconfigSystem_System_Memory{}
	return t.Memory
}

// GetOrCreateNtp retrieves the value of the Ntp field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateNtp() *OpenconfigSystem_System_Ntp {
	if t.Ntp != nil {
		return t.Ntp
	}
	t.Ntp = &OpenconfigSystem_System_Ntp{}
	return t.Ntp
}

// GetOrCreateProcesses retrieves the value of the Processes field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateProcesses() *OpenconfigSystem_System_Processes {
	if t.Processes != nil {
		return t.Processes
	}
	t.Processes = &OpenconfigSystem_System_Processes{}
	return t.Processes
}

// GetOrCreateSshServer retrieves the value of the SshServer field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateSshServer() *OpenconfigSystem_System_SshServer {
	if t.SshServer != nil {
		return t.SshServer
	}
	t.SshServer = &OpenconfigSystem_System_SshServer{}
	return t.SshServer
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateState() *OpenconfigSystem_System_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_State{}
	return t.State
}

// GetOrCreateTelnetServer retrieves the value of the TelnetServer field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateTelnetServer() *OpenconfigSystem_System_TelnetServer {
	if t.TelnetServer != nil {
		return t.TelnetServer
	}
	t.TelnetServer = &OpenconfigSystem_System_TelnetServer{}
	return t.TelnetServer
}

// GetAaa returns the value of the Aaa struct pointer
// from OpenconfigSystem_System. If the receiver or the field Aaa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetAaa() *OpenconfigSystem_System_Aaa {
	if t != nil && t.Aaa != nil {
		return t.Aaa
	}
	return nil
}

// GetAlarms returns the value of the Alarms struct pointer
// from OpenconfigSystem_System. If the receiver or the field Alarms is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetAlarms() *OpenconfigSystem_System_Alarms {
	if t != nil && t.Alarms != nil {
		return t.Alarms
	}
	return nil
}

// GetClock returns the value of the Clock struct pointer
// from OpenconfigSystem_System. If the receiver or the field Clock is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetClock() *OpenconfigSystem_System_Clock {
	if t != nil && t.Clock != nil {
		return t.Clock
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetConfig() *OpenconfigSystem_System_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetCpus returns the value of the Cpus struct pointer
// from OpenconfigSystem_System. If the receiver or the field Cpus is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetCpus() *OpenconfigSystem_System_Cpus {
	if t != nil && t.Cpus != nil {
		return t.Cpus
	}
	return nil
}

// GetDns returns the value of the Dns struct pointer
// from OpenconfigSystem_System. If the receiver or the field Dns is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetDns() *OpenconfigSystem_System_Dns {
	if t != nil && t.Dns != nil {
		return t.Dns
	}
	return nil
}

// GetGrpcServer returns the value of the GrpcServer struct pointer
// from OpenconfigSystem_System. If the receiver or the field GrpcServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetGrpcServer() *OpenconfigSystem_System_GrpcServer {
	if t != nil && t.GrpcServer != nil {
		return t.GrpcServer
	}
	return nil
}

// GetLogging returns the value of the Logging struct pointer
// from OpenconfigSystem_System. If the receiver or the field Logging is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetLogging() *OpenconfigSystem_System_Logging {
	if t != nil && t.Logging != nil {
		return t.Logging
	}
	return nil
}

// GetMemory returns the value of the Memory struct pointer
// from OpenconfigSystem_System. If the receiver or the field Memory is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetMemory() *OpenconfigSystem_System_Memory {
	if t != nil && t.Memory != nil {
		return t.Memory
	}
	return nil
}

// GetNtp returns the value of the Ntp struct pointer
// from OpenconfigSystem_System. If the receiver or the field Ntp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetNtp() *OpenconfigSystem_System_Ntp {
	if t != nil && t.Ntp != nil {
		return t.Ntp
	}
	return nil
}

// GetProcesses returns the value of the Processes struct pointer
// from OpenconfigSystem_System. If the receiver or the field Processes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetProcesses() *OpenconfigSystem_System_Processes {
	if t != nil && t.Processes != nil {
		return t.Processes
	}
	return nil
}

// GetSshServer returns the value of the SshServer struct pointer
// from OpenconfigSystem_System. If the receiver or the field SshServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetSshServer() *OpenconfigSystem_System_SshServer {
	if t != nil && t.SshServer != nil {
		return t.SshServer
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetState() *OpenconfigSystem_System_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetTelnetServer returns the value of the TelnetServer struct pointer
// from OpenconfigSystem_System. If the receiver or the field TelnetServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetTelnetServer() *OpenconfigSystem_System_TelnetServer {
	if t != nil && t.TelnetServer != nil {
		return t.TelnetServer
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Aaa represents the /openconfig-system/system/aaa YANG schema element.
type OpenconfigSystem_System_Aaa struct {
	ΛMetadata       []ygot.Annotation                           `path:"@" ygotAnnotation:"true"`
	Accounting      *OpenconfigSystem_System_Aaa_Accounting     `path:"accounting" module:"openconfig-system"`
	ΛAccounting     []ygot.Annotation                           `path:"@accounting" ygotAnnotation:"true"`
	Authentication  *OpenconfigSystem_System_Aaa_Authentication `path:"authentication" module:"openconfig-system"`
	ΛAuthentication []ygot.Annotation                           `path:"@authentication" ygotAnnotation:"true"`
	Authorization   *OpenconfigSystem_System_Aaa_Authorization  `path:"authorization" module:"openconfig-system"`
	ΛAuthorization  []ygot.Annotation                           `path:"@authorization" ygotAnnotation:"true"`
	Config          *OpenconfigSystem_System_Aaa_Config         `path:"config" module:"openconfig-system"`
	ΛConfig         []ygot.Annotation                           `path:"@config" ygotAnnotation:"true"`
	ServerGroups    *OpenconfigSystem_System_Aaa_ServerGroups   `path:"server-groups" module:"openconfig-system"`
	ΛServerGroups   []ygot.Annotation                           `path:"@server-groups" ygotAnnotation:"true"`
	State           *OpenconfigSystem_System_Aaa_State          `path:"state" module:"openconfig-system"`
	ΛState          []ygot.Annotation                           `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa) IsYANGGoStruct() {}

// GetOrCreateAccounting retrieves the value of the Accounting field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa) GetOrCreateAccounting() *OpenconfigSystem_System_Aaa_Accounting {
	if t.Accounting != nil {
		return t.Accounting
	}
	t.Accounting = &OpenconfigSystem_System_Aaa_Accounting{}
	return t.Accounting
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa) GetOrCreateAuthentication() *OpenconfigSystem_System_Aaa_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &OpenconfigSystem_System_Aaa_Authentication{}
	return t.Authentication
}

// GetOrCreateAuthorization retrieves the value of the Authorization field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa) GetOrCreateAuthorization() *OpenconfigSystem_System_Aaa_Authorization {
	if t.Authorization != nil {
		return t.Authorization
	}
	t.Authorization = &OpenconfigSystem_System_Aaa_Authorization{}
	return t.Authorization
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_Config{}
	return t.Config
}

// GetOrCreateServerGroups retrieves the value of the ServerGroups field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa) GetOrCreateServerGroups() *OpenconfigSystem_System_Aaa_ServerGroups {
	if t.ServerGroups != nil {
		return t.ServerGroups
	}
	t.ServerGroups = &OpenconfigSystem_System_Aaa_ServerGroups{}
	return t.ServerGroups
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa) GetOrCreateState() *OpenconfigSystem_System_Aaa_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_State{}
	return t.State
}

// GetAccounting returns the value of the Accounting struct pointer
// from OpenconfigSystem_System_Aaa. If the receiver or the field Accounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa) GetAccounting() *OpenconfigSystem_System_Aaa_Accounting {
	if t != nil && t.Accounting != nil {
		return t.Accounting
	}
	return nil
}

// GetAuthentication returns the value of the Authentication struct pointer
// from OpenconfigSystem_System_Aaa. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa) GetAuthentication() *OpenconfigSystem_System_Aaa_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetAuthorization returns the value of the Authorization struct pointer
// from OpenconfigSystem_System_Aaa. If the receiver or the field Authorization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa) GetAuthorization() *OpenconfigSystem_System_Aaa_Authorization {
	if t != nil && t.Authorization != nil {
		return t.Authorization
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa) GetConfig() *OpenconfigSystem_System_Aaa_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetServerGroups returns the value of the ServerGroups struct pointer
// from OpenconfigSystem_System_Aaa. If the receiver or the field ServerGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa) GetServerGroups() *OpenconfigSystem_System_Aaa_ServerGroups {
	if t != nil && t.ServerGroups != nil {
		return t.ServerGroups
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa) GetState() *OpenconfigSystem_System_Aaa_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Aaa_Accounting represents the /openconfig-system/system/aaa/accounting YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting struct {
	ΛMetadata []ygot.Annotation                              `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Aaa_Accounting_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                              `path:"@config" ygotAnnotation:"true"`
	Events    *OpenconfigSystem_System_Aaa_Accounting_Events `path:"events" module:"openconfig-system"`
	ΛEvents   []ygot.Annotation                              `path:"@events" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Aaa_Accounting_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Accounting) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_Accounting_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_Accounting_Config{}
	return t.Config
}

// GetOrCreateEvents retrieves the value of the Events field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Accounting) GetOrCreateEvents() *OpenconfigSystem_System_Aaa_Accounting_Events {
	if t.Events != nil {
		return t.Events
	}
	t.Events = &OpenconfigSystem_System_Aaa_Accounting_Events{}
	return t.Events
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Accounting) GetOrCreateState() *OpenconfigSystem_System_Aaa_Accounting_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_Accounting_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_Accounting. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Accounting) GetConfig() *OpenconfigSystem_System_Aaa_Accounting_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetEvents returns the value of the Events struct pointer
// from OpenconfigSystem_System_Aaa_Accounting. If the receiver or the field Events is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Accounting) GetEvents() *OpenconfigSystem_System_Aaa_Accounting_Events {
	if t != nil && t.Events != nil {
		return t.Events
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_Accounting. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Accounting) GetState() *OpenconfigSystem_System_Aaa_Accounting_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Accounting_Config represents the /openconfig-system/system/aaa/accounting/config YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_Config struct {
	ΛMetadata         []ygot.Annotation                                                      `path:"@" ygotAnnotation:"true"`
	AccountingMethod  []OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union `path:"accounting-method" module:"openconfig-system"`
	ΛAccountingMethod []ygot.Annotation                                                      `path:"@accounting-method" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_Config) IsYANGGoStruct() {}

// GetAccountingMethod retrieves the value of the leaf AccountingMethod from the OpenconfigSystem_System_Aaa_Accounting_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AccountingMethod is set, it can safely use t.GetAccountingMethod()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AccountingMethod == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Accounting_Config) GetAccountingMethod() []OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union {
	if t == nil || t.AccountingMethod == nil {
		return nil
	}
	return t.AccountingMethod
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/accounting/config/accounting-method within the YANG schema.
type OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union interface {
	Is_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union()
}

// OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/accounting/config/accounting-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union ensures that OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union() {
}

// OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_String is used when /openconfig-system/system/aaa/accounting/config/accounting-method
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_String struct {
	String string
}

// Is_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union ensures that OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_String
// implements the OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_String) Is_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union() {
}

// To_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Accounting_Config) To_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}

// OpenconfigSystem_System_Aaa_Accounting_Events represents the /openconfig-system/system/aaa/accounting/events YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_Events struct {
	ΛMetadata []ygot.Annotation                                                                                       `path:"@" ygotAnnotation:"true"`
	Event     map[E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Accounting_Events_Event `path:"event" module:"openconfig-system"`
	ΛEvent    []ygot.Annotation                                                                                       `path:"@event" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_Events implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_Events) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// OpenconfigSystem_System_Aaa_Accounting_Events struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) NewEvent(EventType E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) (*OpenconfigSystem_System_Aaa_Accounting_Events_Event, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Accounting_Events_Event)
	}

	key := EventType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &OpenconfigSystem_System_Aaa_Accounting_Events_Event{
		EventType: EventType,
	}

	return t.Event[key], nil
}

// RenameEvent renames an entry in the list Event within
// the OpenconfigSystem_System_Aaa_Accounting_Events struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) RenameEvent(oldK, newK E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) error {
	if _, ok := t.Event[newK]; ok {
		return fmt.Errorf("key %v already exists in Event", newK)
	}

	e, ok := t.Event[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Event", oldK)
	}
	e.EventType = newK

	t.Event[newK] = e
	delete(t.Event, oldK)
	return nil
}

// GetOrCreateEvent retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Aaa_Accounting_Events. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) GetOrCreateEvent(EventType E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) *OpenconfigSystem_System_Aaa_Accounting_Events_Event {

	key := EventType

	if v, ok := t.Event[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvent(EventType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvent got unexpected error: %v", err))
	}
	return v
}

// GetEvent retrieves the value with the specified key from
// the Event map field of OpenconfigSystem_System_Aaa_Accounting_Events. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) GetEvent(EventType E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) *OpenconfigSystem_System_Aaa_Accounting_Events_Event {

	if t == nil {
		return nil
	}

	key := EventType

	if lm, ok := t.Event[key]; ok {
		return lm
	}
	return nil
}

// AppendEvent appends the supplied OpenconfigSystem_System_Aaa_Accounting_Events_Event struct to the
// list Event of OpenconfigSystem_System_Aaa_Accounting_Events. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Aaa_Accounting_Events_Event already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) AppendEvent(v *OpenconfigSystem_System_Aaa_Accounting_Events_Event) error {
	key := v.EventType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Accounting_Events_Event)
	}

	if _, ok := t.Event[key]; ok {
		return fmt.Errorf("duplicate key for list Event %v", key)
	}

	t.Event[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_Events"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Accounting_Events_Event represents the /openconfig-system/system/aaa/accounting/events/event YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_Events_Event struct {
	ΛMetadata  []ygot.Annotation                                           `path:"@" ygotAnnotation:"true"`
	Config     *OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config `path:"config" module:"openconfig-system"`
	ΛConfig    []ygot.Annotation                                           `path:"@config" ygotAnnotation:"true"`
	EventType  E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE              `path:"event-type" module:"openconfig-system"`
	ΛEventType []ygot.Annotation                                           `path:"@event-type" ygotAnnotation:"true"`
	State      *OpenconfigSystem_System_Aaa_Accounting_Events_Event_State  `path:"state" module:"openconfig-system"`
	ΛState     []ygot.Annotation                                           `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_Events_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_Events_Event) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) GetOrCreateState() *OpenconfigSystem_System_Aaa_Accounting_Events_Event_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_Accounting_Events_Event_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_Accounting_Events_Event. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) GetConfig() *OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_Accounting_Events_Event. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) GetState() *OpenconfigSystem_System_Aaa_Accounting_Events_Event_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetEventType retrieves the value of the leaf EventType from the OpenconfigSystem_System_Aaa_Accounting_Events_Event
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EventType is set, it can safely use t.GetEventType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EventType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) GetEventType() E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE {
	if t == nil || t.EventType == 0 {
		return 0
	}
	return t.EventType
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Aaa_Accounting_Events_Event struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"event-type": t.EventType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_Events_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config represents the /openconfig-system/system/aaa/accounting/events/event/config YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config struct {
	ΛMetadata  []ygot.Annotation                                                   `path:"@" ygotAnnotation:"true"`
	EventType  E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE                      `path:"event-type" module:"openconfig-system"`
	ΛEventType []ygot.Annotation                                                   `path:"@event-type" ygotAnnotation:"true"`
	Record     E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record `path:"record" module:"openconfig-system"`
	ΛRecord    []ygot.Annotation                                                   `path:"@record" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config) IsYANGGoStruct() {}

// GetEventType retrieves the value of the leaf EventType from the OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EventType is set, it can safely use t.GetEventType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EventType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config) GetEventType() E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE {
	if t == nil || t.EventType == 0 {
		return 0
	}
	return t.EventType
}

// GetRecord retrieves the value of the leaf Record from the OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Record is set, it can safely use t.GetRecord()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Record == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config) GetRecord() E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record {
	if t == nil || t.Record == 0 {
		return 0
	}
	return t.Record
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Accounting_Events_Event_State represents the /openconfig-system/system/aaa/accounting/events/event/state YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_Events_Event_State struct {
	ΛMetadata  []ygot.Annotation                                                   `path:"@" ygotAnnotation:"true"`
	EventType  E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE                      `path:"event-type" module:"openconfig-system"`
	ΛEventType []ygot.Annotation                                                   `path:"@event-type" ygotAnnotation:"true"`
	Record     E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record `path:"record" module:"openconfig-system"`
	ΛRecord    []ygot.Annotation                                                   `path:"@record" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_Events_Event_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_Events_Event_State) IsYANGGoStruct() {}

// GetEventType retrieves the value of the leaf EventType from the OpenconfigSystem_System_Aaa_Accounting_Events_Event_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EventType is set, it can safely use t.GetEventType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EventType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_State) GetEventType() E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE {
	if t == nil || t.EventType == 0 {
		return 0
	}
	return t.EventType
}

// GetRecord retrieves the value of the leaf Record from the OpenconfigSystem_System_Aaa_Accounting_Events_Event_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Record is set, it can safely use t.GetRecord()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Record == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_State) GetRecord() E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record {
	if t == nil || t.Record == 0 {
		return 0
	}
	return t.Record
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_Events_Event_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Accounting_State represents the /openconfig-system/system/aaa/accounting/state YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_State struct {
	ΛMetadata         []ygot.Annotation                                                     `path:"@" ygotAnnotation:"true"`
	AccountingMethod  []OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union `path:"accounting-method" module:"openconfig-system"`
	ΛAccountingMethod []ygot.Annotation                                                     `path:"@accounting-method" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_State) IsYANGGoStruct() {}

// GetAccountingMethod retrieves the value of the leaf AccountingMethod from the OpenconfigSystem_System_Aaa_Accounting_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AccountingMethod is set, it can safely use t.GetAccountingMethod()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AccountingMethod == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Accounting_State) GetAccountingMethod() []OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union {
	if t == nil || t.AccountingMethod == nil {
		return nil
	}
	return t.AccountingMethod
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/accounting/state/accounting-method within the YANG schema.
type OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union interface {
	Is_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union()
}

// OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/accounting/state/accounting-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union ensures that OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union() {
}

// OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_String is used when /openconfig-system/system/aaa/accounting/state/accounting-method
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_String struct {
	String string
}

// Is_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union ensures that OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_String
// implements the OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_String) Is_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union() {
}

// To_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Accounting_State) To_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}

// OpenconfigSystem_System_Aaa_Authentication represents the /openconfig-system/system/aaa/authentication YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication struct {
	ΛMetadata  []ygot.Annotation                                     `path:"@" ygotAnnotation:"true"`
	AdminUser  *OpenconfigSystem_System_Aaa_Authentication_AdminUser `path:"admin-user" module:"openconfig-system"`
	ΛAdminUser []ygot.Annotation                                     `path:"@admin-user" ygotAnnotation:"true"`
	Config     *OpenconfigSystem_System_Aaa_Authentication_Config    `path:"config" module:"openconfig-system"`
	ΛConfig    []ygot.Annotation                                     `path:"@config" ygotAnnotation:"true"`
	State      *OpenconfigSystem_System_Aaa_Authentication_State     `path:"state" module:"openconfig-system"`
	ΛState     []ygot.Annotation                                     `path:"@state" ygotAnnotation:"true"`
	Users      *OpenconfigSystem_System_Aaa_Authentication_Users     `path:"users" module:"openconfig-system"`
	ΛUsers     []ygot.Annotation                                     `path:"@users" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication) IsYANGGoStruct() {}

// GetOrCreateAdminUser retrieves the value of the AdminUser field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authentication) GetOrCreateAdminUser() *OpenconfigSystem_System_Aaa_Authentication_AdminUser {
	if t.AdminUser != nil {
		return t.AdminUser
	}
	t.AdminUser = &OpenconfigSystem_System_Aaa_Authentication_AdminUser{}
	return t.AdminUser
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authentication) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_Authentication_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_Authentication_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authentication) GetOrCreateState() *OpenconfigSystem_System_Aaa_Authentication_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_Authentication_State{}
	return t.State
}

// GetOrCreateUsers retrieves the value of the Users field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authentication) GetOrCreateUsers() *OpenconfigSystem_System_Aaa_Authentication_Users {
	if t.Users != nil {
		return t.Users
	}
	t.Users = &OpenconfigSystem_System_Aaa_Authentication_Users{}
	return t.Users
}

// GetAdminUser returns the value of the AdminUser struct pointer
// from OpenconfigSystem_System_Aaa_Authentication. If the receiver or the field AdminUser is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication) GetAdminUser() *OpenconfigSystem_System_Aaa_Authentication_AdminUser {
	if t != nil && t.AdminUser != nil {
		return t.AdminUser
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_Authentication. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication) GetConfig() *OpenconfigSystem_System_Aaa_Authentication_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_Authentication. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication) GetState() *OpenconfigSystem_System_Aaa_Authentication_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetUsers returns the value of the Users struct pointer
// from OpenconfigSystem_System_Aaa_Authentication. If the receiver or the field Users is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication) GetUsers() *OpenconfigSystem_System_Aaa_Authentication_Users {
	if t != nil && t.Users != nil {
		return t.Users
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authentication_AdminUser represents the /openconfig-system/system/aaa/authentication/admin-user YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_AdminUser struct {
	ΛMetadata []ygot.Annotation                                            `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                            `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Aaa_Authentication_AdminUser_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                            `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_AdminUser implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_AdminUser) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser) GetOrCreateState() *OpenconfigSystem_System_Aaa_Authentication_AdminUser_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_Authentication_AdminUser_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_Authentication_AdminUser. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser) GetConfig() *OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_Authentication_AdminUser. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser) GetState() *OpenconfigSystem_System_Aaa_Authentication_AdminUser_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_AdminUser"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config represents the /openconfig-system/system/aaa/authentication/admin-user/config YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config struct {
	ΛMetadata            []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AdminPassword        *string           `path:"admin-password" module:"openconfig-system"`
	ΛAdminPassword       []ygot.Annotation `path:"@admin-password" ygotAnnotation:"true"`
	AdminPasswordHashed  *string           `path:"admin-password-hashed" module:"openconfig-system"`
	ΛAdminPasswordHashed []ygot.Annotation `path:"@admin-password-hashed" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config) IsYANGGoStruct() {}

// GetAdminPassword retrieves the value of the leaf AdminPassword from the OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdminPassword is set, it can safely use t.GetAdminPassword()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdminPassword == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config) GetAdminPassword() string {
	if t == nil || t.AdminPassword == nil {
		return ""
	}
	return *t.AdminPassword
}

// GetAdminPasswordHashed retrieves the value of the leaf AdminPasswordHashed from the OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdminPasswordHashed is set, it can safely use t.GetAdminPasswordHashed()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdminPasswordHashed == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config) GetAdminPasswordHashed() string {
	if t == nil || t.AdminPasswordHashed == nil {
		return ""
	}
	return *t.AdminPasswordHashed
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authentication_AdminUser_State represents the /openconfig-system/system/aaa/authentication/admin-user/state YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_AdminUser_State struct {
	ΛMetadata            []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AdminPassword        *string           `path:"admin-password" module:"openconfig-system"`
	ΛAdminPassword       []ygot.Annotation `path:"@admin-password" ygotAnnotation:"true"`
	AdminPasswordHashed  *string           `path:"admin-password-hashed" module:"openconfig-system"`
	ΛAdminPasswordHashed []ygot.Annotation `path:"@admin-password-hashed" ygotAnnotation:"true"`
	AdminUsername        *string           `path:"admin-username" module:"openconfig-system"`
	ΛAdminUsername       []ygot.Annotation `path:"@admin-username" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_AdminUser_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_AdminUser_State) IsYANGGoStruct() {}

// GetAdminPassword retrieves the value of the leaf AdminPassword from the OpenconfigSystem_System_Aaa_Authentication_AdminUser_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdminPassword is set, it can safely use t.GetAdminPassword()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdminPassword == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_State) GetAdminPassword() string {
	if t == nil || t.AdminPassword == nil {
		return ""
	}
	return *t.AdminPassword
}

// GetAdminPasswordHashed retrieves the value of the leaf AdminPasswordHashed from the OpenconfigSystem_System_Aaa_Authentication_AdminUser_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdminPasswordHashed is set, it can safely use t.GetAdminPasswordHashed()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdminPasswordHashed == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_State) GetAdminPasswordHashed() string {
	if t == nil || t.AdminPasswordHashed == nil {
		return ""
	}
	return *t.AdminPasswordHashed
}

// GetAdminUsername retrieves the value of the leaf AdminUsername from the OpenconfigSystem_System_Aaa_Authentication_AdminUser_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdminUsername is set, it can safely use t.GetAdminUsername()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdminUsername == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_State) GetAdminUsername() string {
	if t == nil || t.AdminUsername == nil {
		return ""
	}
	return *t.AdminUsername
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_AdminUser_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authentication_Config represents the /openconfig-system/system/aaa/authentication/config YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_Config struct {
	ΛMetadata             []ygot.Annotation                                                              `path:"@" ygotAnnotation:"true"`
	AuthenticationMethod  []OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union `path:"authentication-method" module:"openconfig-system"`
	ΛAuthenticationMethod []ygot.Annotation                                                              `path:"@authentication-method" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_Config) IsYANGGoStruct() {}

// GetAuthenticationMethod retrieves the value of the leaf AuthenticationMethod from the OpenconfigSystem_System_Aaa_Authentication_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AuthenticationMethod is set, it can safely use t.GetAuthenticationMethod()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AuthenticationMethod == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Config) GetAuthenticationMethod() []OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union {
	if t == nil || t.AuthenticationMethod == nil {
		return nil
	}
	return t.AuthenticationMethod
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authentication/config/authentication-method within the YANG schema.
type OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union interface {
	Is_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union()
}

// OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/authentication/config/authentication-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union() {
}

// OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String is used when /openconfig-system/system/aaa/authentication/config/authentication-method
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String struct {
	String string
}

// Is_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String
// implements the OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String) Is_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union() {
}

// To_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authentication_Config) To_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}

// OpenconfigSystem_System_Aaa_Authentication_State represents the /openconfig-system/system/aaa/authentication/state YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_State struct {
	ΛMetadata             []ygot.Annotation                                                             `path:"@" ygotAnnotation:"true"`
	AuthenticationMethod  []OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union `path:"authentication-method" module:"openconfig-system"`
	ΛAuthenticationMethod []ygot.Annotation                                                             `path:"@authentication-method" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_State) IsYANGGoStruct() {}

// GetAuthenticationMethod retrieves the value of the leaf AuthenticationMethod from the OpenconfigSystem_System_Aaa_Authentication_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AuthenticationMethod is set, it can safely use t.GetAuthenticationMethod()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AuthenticationMethod == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_State) GetAuthenticationMethod() []OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union {
	if t == nil || t.AuthenticationMethod == nil {
		return nil
	}
	return t.AuthenticationMethod
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authentication/state/authentication-method within the YANG schema.
type OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union interface {
	Is_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union()
}

// OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/authentication/state/authentication-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union() {
}

// OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_String is used when /openconfig-system/system/aaa/authentication/state/authentication-method
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_String struct {
	String string
}

// Is_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_String
// implements the OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_String) Is_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union() {
}

// To_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authentication_State) To_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}

// OpenconfigSystem_System_Aaa_Authentication_Users represents the /openconfig-system/system/aaa/authentication/users YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_Users struct {
	ΛMetadata []ygot.Annotation                                                 `path:"@" ygotAnnotation:"true"`
	User      map[string]*OpenconfigSystem_System_Aaa_Authentication_Users_User `path:"user" module:"openconfig-system"`
	ΛUser     []ygot.Annotation                                                 `path:"@user" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_Users implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_Users) IsYANGGoStruct() {}

// NewUser creates a new entry in the User list of the
// OpenconfigSystem_System_Aaa_Authentication_Users struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) NewUser(Username string) (*OpenconfigSystem_System_Aaa_Authentication_Users_User, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*OpenconfigSystem_System_Aaa_Authentication_Users_User)
	}

	key := Username

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.User[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list User", key)
	}

	t.User[key] = &OpenconfigSystem_System_Aaa_Authentication_Users_User{
		Username: &Username,
	}

	return t.User[key], nil
}

// RenameUser renames an entry in the list User within
// the OpenconfigSystem_System_Aaa_Authentication_Users struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) RenameUser(oldK, newK string) error {
	if _, ok := t.User[newK]; ok {
		return fmt.Errorf("key %v already exists in User", newK)
	}

	e, ok := t.User[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in User", oldK)
	}
	e.Username = &newK

	t.User[newK] = e
	delete(t.User, oldK)
	return nil
}

// GetOrCreateUser retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Aaa_Authentication_Users. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) GetOrCreateUser(Username string) *OpenconfigSystem_System_Aaa_Authentication_Users_User {

	key := Username

	if v, ok := t.User[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUser(Username)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUser got unexpected error: %v", err))
	}
	return v
}

// GetUser retrieves the value with the specified key from
// the User map field of OpenconfigSystem_System_Aaa_Authentication_Users. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) GetUser(Username string) *OpenconfigSystem_System_Aaa_Authentication_Users_User {

	if t == nil {
		return nil
	}

	key := Username

	if lm, ok := t.User[key]; ok {
		return lm
	}
	return nil
}

// AppendUser appends the supplied OpenconfigSystem_System_Aaa_Authentication_Users_User struct to the
// list User of OpenconfigSystem_System_Aaa_Authentication_Users. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Aaa_Authentication_Users_User already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) AppendUser(v *OpenconfigSystem_System_Aaa_Authentication_Users_User) error {
	key := *v.Username

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*OpenconfigSystem_System_Aaa_Authentication_Users_User)
	}

	if _, ok := t.User[key]; ok {
		return fmt.Errorf("duplicate key for list User %v", key)
	}

	t.User[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_Users"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User represents the /openconfig-system/system/aaa/authentication/users/user YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_Users_User struct {
	ΛMetadata []ygot.Annotation                                             `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                             `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Aaa_Authentication_Users_User_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                             `path:"@state" ygotAnnotation:"true"`
	Username  *string                                                       `path:"username" module:"openconfig-system"`
	ΛUsername []ygot.Annotation                                             `path:"@username" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_Authentication_Users_User_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) GetOrCreateState() *OpenconfigSystem_System_Aaa_Authentication_Users_User_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_Authentication_Users_User_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_Authentication_Users_User. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) GetConfig() *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_Authentication_Users_User. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) GetState() *OpenconfigSystem_System_Aaa_Authentication_Users_User_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetUsername retrieves the value of the leaf Username from the OpenconfigSystem_System_Aaa_Authentication_Users_User
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Username is set, it can safely use t.GetUsername()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Username == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) GetUsername() string {
	if t == nil || t.Username == nil {
		return ""
	}
	return *t.Username
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Aaa_Authentication_Users_User struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Username == nil {
		return nil, fmt.Errorf("nil value for key Username")
	}

	return map[string]interface{}{
		"username": *t.Username,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_Users_User"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_Config represents the /openconfig-system/system/aaa/authentication/users/user/config YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_Config struct {
	ΛMetadata       []ygot.Annotation                                                       `path:"@" ygotAnnotation:"true"`
	Password        *string                                                                 `path:"password" module:"openconfig-system"`
	ΛPassword       []ygot.Annotation                                                       `path:"@password" ygotAnnotation:"true"`
	PasswordHashed  *string                                                                 `path:"password-hashed" module:"openconfig-system"`
	ΛPasswordHashed []ygot.Annotation                                                       `path:"@password-hashed" ygotAnnotation:"true"`
	Role            OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union `path:"role" module:"openconfig-system"`
	ΛRole           []ygot.Annotation                                                       `path:"@role" ygotAnnotation:"true"`
	SshKey          *string                                                                 `path:"ssh-key" module:"openconfig-system"`
	ΛSshKey         []ygot.Annotation                                                       `path:"@ssh-key" ygotAnnotation:"true"`
	Username        *string                                                                 `path:"username" module:"openconfig-system"`
	ΛUsername       []ygot.Annotation                                                       `path:"@username" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) IsYANGGoStruct() {}

// GetPassword retrieves the value of the leaf Password from the OpenconfigSystem_System_Aaa_Authentication_Users_User_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Password is set, it can safely use t.GetPassword()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Password == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetPasswordHashed retrieves the value of the leaf PasswordHashed from the OpenconfigSystem_System_Aaa_Authentication_Users_User_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PasswordHashed is set, it can safely use t.GetPasswordHashed()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PasswordHashed == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) GetPasswordHashed() string {
	if t == nil || t.PasswordHashed == nil {
		return ""
	}
	return *t.PasswordHashed
}

// GetRole retrieves the value of the leaf Role from the OpenconfigSystem_System_Aaa_Authentication_Users_User_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Role is set, it can safely use t.GetRole()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Role == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) GetRole() OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union {
	if t == nil || t.Role == nil {
		return nil
	}
	return t.Role
}

// GetSshKey retrieves the value of the leaf SshKey from the OpenconfigSystem_System_Aaa_Authentication_Users_User_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SshKey is set, it can safely use t.GetSshKey()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SshKey == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) GetSshKey() string {
	if t == nil || t.SshKey == nil {
		return ""
	}
	return *t.SshKey
}

// GetUsername retrieves the value of the leaf Username from the OpenconfigSystem_System_Aaa_Authentication_Users_User_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Username is set, it can safely use t.GetUsername()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Username == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) GetUsername() string {
	if t == nil || t.Username == nil {
		return ""
	}
	return *t.Username
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_Users_User_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authentication/users/user/config/role within the YANG schema.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union interface {
	Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union()
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES is used when /openconfig-system/system/aaa/authentication/users/user/config/role
// is to be set to a E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES value.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES struct {
	E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
}

// Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
// implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union() {
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_String is used when /openconfig-system/system/aaa/authentication/users/user/config/role
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_String struct {
	String string
}

// Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_String
// implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_String) Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union() {
}

// To_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) To_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES:
		return &OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES, string]", i, i)
	}
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_State represents the /openconfig-system/system/aaa/authentication/users/user/state YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_State struct {
	ΛMetadata       []ygot.Annotation                                                      `path:"@" ygotAnnotation:"true"`
	Password        *string                                                                `path:"password" module:"openconfig-system"`
	ΛPassword       []ygot.Annotation                                                      `path:"@password" ygotAnnotation:"true"`
	PasswordHashed  *string                                                                `path:"password-hashed" module:"openconfig-system"`
	ΛPasswordHashed []ygot.Annotation                                                      `path:"@password-hashed" ygotAnnotation:"true"`
	Role            OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union `path:"role" module:"openconfig-system"`
	ΛRole           []ygot.Annotation                                                      `path:"@role" ygotAnnotation:"true"`
	SshKey          *string                                                                `path:"ssh-key" module:"openconfig-system"`
	ΛSshKey         []ygot.Annotation                                                      `path:"@ssh-key" ygotAnnotation:"true"`
	Username        *string                                                                `path:"username" module:"openconfig-system"`
	ΛUsername       []ygot.Annotation                                                      `path:"@username" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_State) IsYANGGoStruct() {}

// GetPassword retrieves the value of the leaf Password from the OpenconfigSystem_System_Aaa_Authentication_Users_User_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Password is set, it can safely use t.GetPassword()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Password == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_State) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetPasswordHashed retrieves the value of the leaf PasswordHashed from the OpenconfigSystem_System_Aaa_Authentication_Users_User_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PasswordHashed is set, it can safely use t.GetPasswordHashed()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PasswordHashed == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_State) GetPasswordHashed() string {
	if t == nil || t.PasswordHashed == nil {
		return ""
	}
	return *t.PasswordHashed
}

// GetRole retrieves the value of the leaf Role from the OpenconfigSystem_System_Aaa_Authentication_Users_User_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Role is set, it can safely use t.GetRole()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Role == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_State) GetRole() OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union {
	if t == nil || t.Role == nil {
		return nil
	}
	return t.Role
}

// GetSshKey retrieves the value of the leaf SshKey from the OpenconfigSystem_System_Aaa_Authentication_Users_User_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SshKey is set, it can safely use t.GetSshKey()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SshKey == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_State) GetSshKey() string {
	if t == nil || t.SshKey == nil {
		return ""
	}
	return *t.SshKey
}

// GetUsername retrieves the value of the leaf Username from the OpenconfigSystem_System_Aaa_Authentication_Users_User_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Username is set, it can safely use t.GetUsername()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Username == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_State) GetUsername() string {
	if t == nil || t.Username == nil {
		return ""
	}
	return *t.Username
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_Users_User_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authentication/users/user/state/role within the YANG schema.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union interface {
	Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union()
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES is used when /openconfig-system/system/aaa/authentication/users/user/state/role
// is to be set to a E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES value.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES struct {
	E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
}

// Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
// implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union() {
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_String is used when /openconfig-system/system/aaa/authentication/users/user/state/role
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_String struct {
	String string
}

// Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_String
// implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_String) Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union() {
}

// To_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_State) To_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES:
		return &OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES, string]", i, i)
	}
}

// OpenconfigSystem_System_Aaa_Authorization represents the /openconfig-system/system/aaa/authorization YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization struct {
	ΛMetadata []ygot.Annotation                                 `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Aaa_Authorization_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                 `path:"@config" ygotAnnotation:"true"`
	Events    *OpenconfigSystem_System_Aaa_Authorization_Events `path:"events" module:"openconfig-system"`
	ΛEvents   []ygot.Annotation                                 `path:"@events" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Aaa_Authorization_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                 `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authorization) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_Authorization_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_Authorization_Config{}
	return t.Config
}

// GetOrCreateEvents retrieves the value of the Events field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authorization) GetOrCreateEvents() *OpenconfigSystem_System_Aaa_Authorization_Events {
	if t.Events != nil {
		return t.Events
	}
	t.Events = &OpenconfigSystem_System_Aaa_Authorization_Events{}
	return t.Events
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authorization) GetOrCreateState() *OpenconfigSystem_System_Aaa_Authorization_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_Authorization_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_Authorization. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authorization) GetConfig() *OpenconfigSystem_System_Aaa_Authorization_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetEvents returns the value of the Events struct pointer
// from OpenconfigSystem_System_Aaa_Authorization. If the receiver or the field Events is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authorization) GetEvents() *OpenconfigSystem_System_Aaa_Authorization_Events {
	if t != nil && t.Events != nil {
		return t.Events
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_Authorization. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authorization) GetState() *OpenconfigSystem_System_Aaa_Authorization_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authorization_Config represents the /openconfig-system/system/aaa/authorization/config YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_Config struct {
	ΛMetadata            []ygot.Annotation                                                            `path:"@" ygotAnnotation:"true"`
	AuthorizationMethod  []OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union `path:"authorization-method" module:"openconfig-system"`
	ΛAuthorizationMethod []ygot.Annotation                                                            `path:"@authorization-method" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_Config) IsYANGGoStruct() {}

// GetAuthorizationMethod retrieves the value of the leaf AuthorizationMethod from the OpenconfigSystem_System_Aaa_Authorization_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AuthorizationMethod is set, it can safely use t.GetAuthorizationMethod()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AuthorizationMethod == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authorization_Config) GetAuthorizationMethod() []OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union {
	if t == nil || t.AuthorizationMethod == nil {
		return nil
	}
	return t.AuthorizationMethod
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authorization/config/authorization-method within the YANG schema.
type OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union interface {
	Is_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union()
}

// OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/authorization/config/authorization-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union() {
}

// OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String is used when /openconfig-system/system/aaa/authorization/config/authorization-method
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String struct {
	String string
}

// Is_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String
// implements the OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String) Is_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union() {
}

// To_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authorization_Config) To_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}

// OpenconfigSystem_System_Aaa_Authorization_Events represents the /openconfig-system/system/aaa/authorization/events YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_Events struct {
	ΛMetadata []ygot.Annotation                                                                                             `path:"@" ygotAnnotation:"true"`
	Event     map[E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Authorization_Events_Event `path:"event" module:"openconfig-system"`
	ΛEvent    []ygot.Annotation                                                                                             `path:"@event" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_Events implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_Events) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// OpenconfigSystem_System_Aaa_Authorization_Events struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) NewEvent(EventType E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) (*OpenconfigSystem_System_Aaa_Authorization_Events_Event, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Authorization_Events_Event)
	}

	key := EventType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &OpenconfigSystem_System_Aaa_Authorization_Events_Event{
		EventType: EventType,
	}

	return t.Event[key], nil
}

// RenameEvent renames an entry in the list Event within
// the OpenconfigSystem_System_Aaa_Authorization_Events struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) RenameEvent(oldK, newK E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) error {
	if _, ok := t.Event[newK]; ok {
		return fmt.Errorf("key %v already exists in Event", newK)
	}

	e, ok := t.Event[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Event", oldK)
	}
	e.EventType = newK

	t.Event[newK] = e
	delete(t.Event, oldK)
	return nil
}

// GetOrCreateEvent retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Aaa_Authorization_Events. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) GetOrCreateEvent(EventType E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) *OpenconfigSystem_System_Aaa_Authorization_Events_Event {

	key := EventType

	if v, ok := t.Event[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvent(EventType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvent got unexpected error: %v", err))
	}
	return v
}

// GetEvent retrieves the value with the specified key from
// the Event map field of OpenconfigSystem_System_Aaa_Authorization_Events. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) GetEvent(EventType E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) *OpenconfigSystem_System_Aaa_Authorization_Events_Event {

	if t == nil {
		return nil
	}

	key := EventType

	if lm, ok := t.Event[key]; ok {
		return lm
	}
	return nil
}

// AppendEvent appends the supplied OpenconfigSystem_System_Aaa_Authorization_Events_Event struct to the
// list Event of OpenconfigSystem_System_Aaa_Authorization_Events. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Aaa_Authorization_Events_Event already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) AppendEvent(v *OpenconfigSystem_System_Aaa_Authorization_Events_Event) error {
	key := v.EventType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Authorization_Events_Event)
	}

	if _, ok := t.Event[key]; ok {
		return fmt.Errorf("duplicate key for list Event %v", key)
	}

	t.Event[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_Events"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authorization_Events_Event represents the /openconfig-system/system/aaa/authorization/events/event YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_Events_Event struct {
	ΛMetadata  []ygot.Annotation                                              `path:"@" ygotAnnotation:"true"`
	Config     *OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config `path:"config" module:"openconfig-system"`
	ΛConfig    []ygot.Annotation                                              `path:"@config" ygotAnnotation:"true"`
	EventType  E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE              `path:"event-type" module:"openconfig-system"`
	ΛEventType []ygot.Annotation                                              `path:"@event-type" ygotAnnotation:"true"`
	State      *OpenconfigSystem_System_Aaa_Authorization_Events_Event_State  `path:"state" module:"openconfig-system"`
	ΛState     []ygot.Annotation                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_Events_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_Events_Event) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) GetOrCreateState() *OpenconfigSystem_System_Aaa_Authorization_Events_Event_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_Authorization_Events_Event_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_Authorization_Events_Event. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) GetConfig() *OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_Authorization_Events_Event. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) GetState() *OpenconfigSystem_System_Aaa_Authorization_Events_Event_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetEventType retrieves the value of the leaf EventType from the OpenconfigSystem_System_Aaa_Authorization_Events_Event
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EventType is set, it can safely use t.GetEventType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EventType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) GetEventType() E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE {
	if t == nil || t.EventType == 0 {
		return 0
	}
	return t.EventType
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Aaa_Authorization_Events_Event struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"event-type": t.EventType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_Events_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config represents the /openconfig-system/system/aaa/authorization/events/event/config YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config struct {
	ΛMetadata  []ygot.Annotation                                 `path:"@" ygotAnnotation:"true"`
	EventType  E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE `path:"event-type" module:"openconfig-system"`
	ΛEventType []ygot.Annotation                                 `path:"@event-type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config) IsYANGGoStruct() {}

// GetEventType retrieves the value of the leaf EventType from the OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EventType is set, it can safely use t.GetEventType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EventType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config) GetEventType() E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE {
	if t == nil || t.EventType == 0 {
		return 0
	}
	return t.EventType
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authorization_Events_Event_State represents the /openconfig-system/system/aaa/authorization/events/event/state YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_Events_Event_State struct {
	ΛMetadata  []ygot.Annotation                                 `path:"@" ygotAnnotation:"true"`
	EventType  E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE `path:"event-type" module:"openconfig-system"`
	ΛEventType []ygot.Annotation                                 `path:"@event-type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_Events_Event_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_Events_Event_State) IsYANGGoStruct() {}

// GetEventType retrieves the value of the leaf EventType from the OpenconfigSystem_System_Aaa_Authorization_Events_Event_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EventType is set, it can safely use t.GetEventType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EventType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event_State) GetEventType() E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE {
	if t == nil || t.EventType == 0 {
		return 0
	}
	return t.EventType
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_Events_Event_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authorization_State represents the /openconfig-system/system/aaa/authorization/state YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_State struct {
	ΛMetadata            []ygot.Annotation                                                           `path:"@" ygotAnnotation:"true"`
	AuthorizationMethod  []OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union `path:"authorization-method" module:"openconfig-system"`
	ΛAuthorizationMethod []ygot.Annotation                                                           `path:"@authorization-method" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_State) IsYANGGoStruct() {}

// GetAuthorizationMethod retrieves the value of the leaf AuthorizationMethod from the OpenconfigSystem_System_Aaa_Authorization_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AuthorizationMethod is set, it can safely use t.GetAuthorizationMethod()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AuthorizationMethod == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authorization_State) GetAuthorizationMethod() []OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union {
	if t == nil || t.AuthorizationMethod == nil {
		return nil
	}
	return t.AuthorizationMethod
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authorization/state/authorization-method within the YANG schema.
type OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union interface {
	Is_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union()
}

// OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/authorization/state/authorization-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union() {
}

// OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_String is used when /openconfig-system/system/aaa/authorization/state/authorization-method
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_String struct {
	String string
}

// Is_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_String
// implements the OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_String) Is_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union() {
}

// To_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authorization_State) To_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}

// OpenconfigSystem_System_Aaa_Config represents the /openconfig-system/system/aaa/config YANG schema element.
type OpenconfigSystem_System_Aaa_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups represents the /openconfig-system/system/aaa/server-groups YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups struct {
	ΛMetadata    []ygot.Annotation                                                `path:"@" ygotAnnotation:"true"`
	ServerGroup  map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup `path:"server-group" module:"openconfig-system"`
	ΛServerGroup []ygot.Annotation                                                `path:"@server-group" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups) IsYANGGoStruct() {}

// NewServerGroup creates a new entry in the ServerGroup list of the
// OpenconfigSystem_System_Aaa_ServerGroups struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) NewServerGroup(Name string) (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerGroup == nil {
		t.ServerGroup = make(map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServerGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServerGroup", key)
	}

	t.ServerGroup[key] = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup{
		Name: &Name,
	}

	return t.ServerGroup[key], nil
}

// RenameServerGroup renames an entry in the list ServerGroup within
// the OpenconfigSystem_System_Aaa_ServerGroups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) RenameServerGroup(oldK, newK string) error {
	if _, ok := t.ServerGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in ServerGroup", newK)
	}

	e, ok := t.ServerGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ServerGroup", oldK)
	}
	e.Name = &newK

	t.ServerGroup[newK] = e
	delete(t.ServerGroup, oldK)
	return nil
}

// GetOrCreateServerGroup retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Aaa_ServerGroups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) GetOrCreateServerGroup(Name string) *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup {

	key := Name

	if v, ok := t.ServerGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServerGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServerGroup got unexpected error: %v", err))
	}
	return v
}

// GetServerGroup retrieves the value with the specified key from
// the ServerGroup map field of OpenconfigSystem_System_Aaa_ServerGroups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) GetServerGroup(Name string) *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ServerGroup[key]; ok {
		return lm
	}
	return nil
}

// AppendServerGroup appends the supplied OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup struct to the
// list ServerGroup of OpenconfigSystem_System_Aaa_ServerGroups. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) AppendServerGroup(v *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) error {
	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerGroup == nil {
		t.ServerGroup = make(map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup)
	}

	if _, ok := t.ServerGroup[key]; ok {
		return fmt.Errorf("duplicate key for list ServerGroup %v", key)
	}

	t.ServerGroup[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup represents the /openconfig-system/system/aaa/server-groups/server-group YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup struct {
	ΛMetadata []ygot.Annotation                                             `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config  `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                             `path:"@config" ygotAnnotation:"true"`
	Name      *string                                                       `path:"name" module:"openconfig-system"`
	ΛName     []ygot.Annotation                                             `path:"@name" ygotAnnotation:"true"`
	Servers   *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers `path:"servers" module:"openconfig-system"`
	ΛServers  []ygot.Annotation                                             `path:"@servers" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State   `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                             `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config{}
	return t.Config
}

// GetOrCreateServers retrieves the value of the Servers field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) GetOrCreateServers() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers {
	if t.Servers != nil {
		return t.Servers
	}
	t.Servers = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers{}
	return t.Servers
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) GetOrCreateState() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) GetConfig() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetServers returns the value of the Servers struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup. If the receiver or the field Servers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) GetServers() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers {
	if t != nil && t.Servers != nil {
		return t.Servers
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) GetState() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config represents the /openconfig-system/system/aaa/server-groups/server-group/config YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config struct {
	ΛMetadata []ygot.Annotation                    `path:"@" ygotAnnotation:"true"`
	Name      *string                              `path:"name" module:"openconfig-system"`
	ΛName     []ygot.Annotation                    `path:"@name" ygotAnnotation:"true"`
	Type      E_OpenconfigAaaTypes_AAA_SERVER_TYPE `path:"type" module:"openconfig-system"`
	ΛType     []ygot.Annotation                    `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Type is set, it can safely use t.GetType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Type == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config) GetType() E_OpenconfigAaaTypes_AAA_SERVER_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers represents the /openconfig-system/system/aaa/server-groups/server-group/servers YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers struct {
	ΛMetadata []ygot.Annotation                                                               `path:"@" ygotAnnotation:"true"`
	Server    map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server `path:"server" module:"openconfig-system"`
	ΛServer   []ygot.Annotation                                                               `path:"@server" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) NewServer(Address string) (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Address = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) GetOrCreateServer(Address string) *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server {

	key := Address

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) GetServer(Address string) *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// AppendServer appends the supplied OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server struct to the
// list Server of OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) AppendServer(v *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) error {
	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server struct {
	ΛMetadata []ygot.Annotation                                                           `path:"@" ygotAnnotation:"true"`
	Address   *string                                                                     `path:"address" module:"openconfig-system"`
	ΛAddress  []ygot.Annotation                                                           `path:"@address" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                                           `path:"@config" ygotAnnotation:"true"`
	Radius    *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius `path:"radius" module:"openconfig-system"`
	ΛRadius   []ygot.Annotation                                                           `path:"@radius" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                                           `path:"@state" ygotAnnotation:"true"`
	Tacacs    *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs `path:"tacacs" module:"openconfig-system"`
	ΛTacacs   []ygot.Annotation                                                           `path:"@tacacs" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config{}
	return t.Config
}

// GetOrCreateRadius retrieves the value of the Radius field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetOrCreateRadius() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius {
	if t.Radius != nil {
		return t.Radius
	}
	t.Radius = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius{}
	return t.Radius
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetOrCreateState() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State{}
	return t.State
}

// GetOrCreateTacacs retrieves the value of the Tacacs field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetOrCreateTacacs() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs {
	if t.Tacacs != nil {
		return t.Tacacs
	}
	t.Tacacs = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs{}
	return t.Tacacs
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetConfig() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetRadius returns the value of the Radius struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server. If the receiver or the field Radius is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetRadius() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius {
	if t != nil && t.Radius != nil {
		return t.Radius
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetState() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetTacacs returns the value of the Tacacs struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server. If the receiver or the field Tacacs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetTacacs() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs {
	if t != nil && t.Tacacs != nil {
		return t.Tacacs
	}
	return nil
}

// GetAddress retrieves the value of the leaf Address from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Address is set, it can safely use t.GetAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Address == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/config YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Address   *string           `path:"address" module:"openconfig-system"`
	ΛAddress  []ygot.Annotation `path:"@address" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-system"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
	Timeout   *uint16           `path:"timeout" module:"openconfig-system"`
	ΛTimeout  []ygot.Annotation `path:"@timeout" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Address is set, it can safely use t.GetAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Address == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetName retrieves the value of the leaf Name from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTimeout retrieves the value of the leaf Timeout from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Timeout is set, it can safely use t.GetTimeout()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Timeout == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius struct {
	ΛMetadata []ygot.Annotation                                                                  `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                                                  `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) GetOrCreateState() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) GetConfig() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) GetState() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AcctPort            *uint16           `path:"acct-port" module:"openconfig-system"`
	ΛAcctPort           []ygot.Annotation `path:"@acct-port" ygotAnnotation:"true"`
	AuthPort            *uint16           `path:"auth-port" module:"openconfig-system"`
	ΛAuthPort           []ygot.Annotation `path:"@auth-port" ygotAnnotation:"true"`
	RetransmitAttempts  *uint8            `path:"retransmit-attempts" module:"openconfig-system"`
	ΛRetransmitAttempts []ygot.Annotation `path:"@retransmit-attempts" ygotAnnotation:"true"`
	SecretKey           *string           `path:"secret-key" module:"openconfig-system"`
	ΛSecretKey          []ygot.Annotation `path:"@secret-key" ygotAnnotation:"true"`
	SourceAddress       *string           `path:"source-address" module:"openconfig-system"`
	ΛSourceAddress      []ygot.Annotation `path:"@source-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) IsYANGGoStruct() {
}

// GetAcctPort retrieves the value of the leaf AcctPort from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AcctPort is set, it can safely use t.GetAcctPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AcctPort == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) GetAcctPort() uint16 {
	if t == nil || t.AcctPort == nil {
		return 1813
	}
	return *t.AcctPort
}

// GetAuthPort retrieves the value of the leaf AuthPort from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AuthPort is set, it can safely use t.GetAuthPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AuthPort == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) GetAuthPort() uint16 {
	if t == nil || t.AuthPort == nil {
		return 1812
	}
	return *t.AuthPort
}

// GetRetransmitAttempts retrieves the value of the leaf RetransmitAttempts from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RetransmitAttempts is set, it can safely use t.GetRetransmitAttempts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RetransmitAttempts == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) GetRetransmitAttempts() uint8 {
	if t == nil || t.RetransmitAttempts == nil {
		return 0
	}
	return *t.RetransmitAttempts
}

// GetSecretKey retrieves the value of the leaf SecretKey from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SecretKey is set, it can safely use t.GetSecretKey()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SecretKey == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) GetSecretKey() string {
	if t == nil || t.SecretKey == nil {
		return ""
	}
	return *t.SecretKey
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SourceAddress is set, it can safely use t.GetSourceAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SourceAddress == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State struct {
	ΛMetadata           []ygot.Annotation                                                                          `path:"@" ygotAnnotation:"true"`
	AcctPort            *uint16                                                                                    `path:"acct-port" module:"openconfig-system"`
	ΛAcctPort           []ygot.Annotation                                                                          `path:"@acct-port" ygotAnnotation:"true"`
	AuthPort            *uint16                                                                                    `path:"auth-port" module:"openconfig-system"`
	ΛAuthPort           []ygot.Annotation                                                                          `path:"@auth-port" ygotAnnotation:"true"`
	Counters            *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters `path:"counters" module:"openconfig-system"`
	ΛCounters           []ygot.Annotation                                                                          `path:"@counters" ygotAnnotation:"true"`
	RetransmitAttempts  *uint8                                                                                     `path:"retransmit-attempts" module:"openconfig-system"`
	ΛRetransmitAttempts []ygot.Annotation                                                                          `path:"@retransmit-attempts" ygotAnnotation:"true"`
	SecretKey           *string                                                                                    `path:"secret-key" module:"openconfig-system"`
	ΛSecretKey          []ygot.Annotation                                                                          `path:"@secret-key" ygotAnnotation:"true"`
	SourceAddress       *string                                                                                    `path:"source-address" module:"openconfig-system"`
	ΛSourceAddress      []ygot.Annotation                                                                          `path:"@source-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) IsYANGGoStruct() {
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetOrCreateCounters() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetCounters() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetAcctPort retrieves the value of the leaf AcctPort from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AcctPort is set, it can safely use t.GetAcctPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AcctPort == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetAcctPort() uint16 {
	if t == nil || t.AcctPort == nil {
		return 1813
	}
	return *t.AcctPort
}

// GetAuthPort retrieves the value of the leaf AuthPort from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AuthPort is set, it can safely use t.GetAuthPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AuthPort == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetAuthPort() uint16 {
	if t == nil || t.AuthPort == nil {
		return 1812
	}
	return *t.AuthPort
}

// GetRetransmitAttempts retrieves the value of the leaf RetransmitAttempts from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RetransmitAttempts is set, it can safely use t.GetRetransmitAttempts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RetransmitAttempts == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetRetransmitAttempts() uint8 {
	if t == nil || t.RetransmitAttempts == nil {
		return 0
	}
	return *t.RetransmitAttempts
}

// GetSecretKey retrieves the value of the leaf SecretKey from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SecretKey is set, it can safely use t.GetSecretKey()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SecretKey == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetSecretKey() string {
	if t == nil || t.SecretKey == nil {
		return ""
	}
	return *t.SecretKey
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SourceAddress is set, it can safely use t.GetSourceAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SourceAddress == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters struct {
	ΛMetadata              []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AccessAccepts          *uint64           `path:"access-accepts" module:"openconfig-system"`
	ΛAccessAccepts         []ygot.Annotation `path:"@access-accepts" ygotAnnotation:"true"`
	AccessRejects          *uint64           `path:"access-rejects" module:"openconfig-system"`
	ΛAccessRejects         []ygot.Annotation `path:"@access-rejects" ygotAnnotation:"true"`
	RetriedAccessRequests  *uint64           `path:"retried-access-requests" module:"openconfig-system"`
	ΛRetriedAccessRequests []ygot.Annotation `path:"@retried-access-requests" ygotAnnotation:"true"`
	TimeoutAccessRequests  *uint64           `path:"timeout-access-requests" module:"openconfig-system"`
	ΛTimeoutAccessRequests []ygot.Annotation `path:"@timeout-access-requests" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) IsYANGGoStruct() {
}

// GetAccessAccepts retrieves the value of the leaf AccessAccepts from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AccessAccepts is set, it can safely use t.GetAccessAccepts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AccessAccepts == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) GetAccessAccepts() uint64 {
	if t == nil || t.AccessAccepts == nil {
		return 0
	}
	return *t.AccessAccepts
}

// GetAccessRejects retrieves the value of the leaf AccessRejects from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AccessRejects is set, it can safely use t.GetAccessRejects()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AccessRejects == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) GetAccessRejects() uint64 {
	if t == nil || t.AccessRejects == nil {
		return 0
	}
	return *t.AccessRejects
}

// GetRetriedAccessRequests retrieves the value of the leaf RetriedAccessRequests from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RetriedAccessRequests is set, it can safely use t.GetRetriedAccessRequests()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RetriedAccessRequests == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) GetRetriedAccessRequests() uint64 {
	if t == nil || t.RetriedAccessRequests == nil {
		return 0
	}
	return *t.RetriedAccessRequests
}

// GetTimeoutAccessRequests retrieves the value of the leaf TimeoutAccessRequests from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TimeoutAccessRequests is set, it can safely use t.GetTimeoutAccessRequests()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TimeoutAccessRequests == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) GetTimeoutAccessRequests() uint64 {
	if t == nil || t.TimeoutAccessRequests == nil {
		return 0
	}
	return *t.TimeoutAccessRequests
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Address             *string           `path:"address" module:"openconfig-system"`
	ΛAddress            []ygot.Annotation `path:"@address" ygotAnnotation:"true"`
	ConnectionAborts    *uint64           `path:"connection-aborts" module:"openconfig-system"`
	ΛConnectionAborts   []ygot.Annotation `path:"@connection-aborts" ygotAnnotation:"true"`
	ConnectionCloses    *uint64           `path:"connection-closes" module:"openconfig-system"`
	ΛConnectionCloses   []ygot.Annotation `path:"@connection-closes" ygotAnnotation:"true"`
	ConnectionFailures  *uint64           `path:"connection-failures" module:"openconfig-system"`
	ΛConnectionFailures []ygot.Annotation `path:"@connection-failures" ygotAnnotation:"true"`
	ConnectionOpens     *uint64           `path:"connection-opens" module:"openconfig-system"`
	ΛConnectionOpens    []ygot.Annotation `path:"@connection-opens" ygotAnnotation:"true"`
	ConnectionTimeouts  *uint64           `path:"connection-timeouts" module:"openconfig-system"`
	ΛConnectionTimeouts []ygot.Annotation `path:"@connection-timeouts" ygotAnnotation:"true"`
	ErrorsReceived      *uint64           `path:"errors-received" module:"openconfig-system"`
	ΛErrorsReceived     []ygot.Annotation `path:"@errors-received" ygotAnnotation:"true"`
	MessagesReceived    *uint64           `path:"messages-received" module:"openconfig-system"`
	ΛMessagesReceived   []ygot.Annotation `path:"@messages-received" ygotAnnotation:"true"`
	MessagesSent        *uint64           `path:"messages-sent" module:"openconfig-system"`
	ΛMessagesSent       []ygot.Annotation `path:"@messages-sent" ygotAnnotation:"true"`
	Name                *string           `path:"name" module:"openconfig-system"`
	ΛName               []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
	Timeout             *uint16           `path:"timeout" module:"openconfig-system"`
	ΛTimeout            []ygot.Annotation `path:"@timeout" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Address is set, it can safely use t.GetAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Address == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetConnectionAborts retrieves the value of the leaf ConnectionAborts from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ConnectionAborts is set, it can safely use t.GetConnectionAborts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ConnectionAborts == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetConnectionAborts() uint64 {
	if t == nil || t.ConnectionAborts == nil {
		return 0
	}
	return *t.ConnectionAborts
}

// GetConnectionCloses retrieves the value of the leaf ConnectionCloses from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ConnectionCloses is set, it can safely use t.GetConnectionCloses()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ConnectionCloses == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetConnectionCloses() uint64 {
	if t == nil || t.ConnectionCloses == nil {
		return 0
	}
	return *t.ConnectionCloses
}

// GetConnectionFailures retrieves the value of the leaf ConnectionFailures from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ConnectionFailures is set, it can safely use t.GetConnectionFailures()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ConnectionFailures == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetConnectionFailures() uint64 {
	if t == nil || t.ConnectionFailures == nil {
		return 0
	}
	return *t.ConnectionFailures
}

// GetConnectionOpens retrieves the value of the leaf ConnectionOpens from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ConnectionOpens is set, it can safely use t.GetConnectionOpens()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ConnectionOpens == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetConnectionOpens() uint64 {
	if t == nil || t.ConnectionOpens == nil {
		return 0
	}
	return *t.ConnectionOpens
}

// GetConnectionTimeouts retrieves the value of the leaf ConnectionTimeouts from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ConnectionTimeouts is set, it can safely use t.GetConnectionTimeouts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ConnectionTimeouts == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetConnectionTimeouts() uint64 {
	if t == nil || t.ConnectionTimeouts == nil {
		return 0
	}
	return *t.ConnectionTimeouts
}

// GetErrorsReceived retrieves the value of the leaf ErrorsReceived from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ErrorsReceived is set, it can safely use t.GetErrorsReceived()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ErrorsReceived == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetErrorsReceived() uint64 {
	if t == nil || t.ErrorsReceived == nil {
		return 0
	}
	return *t.ErrorsReceived
}

// GetMessagesReceived retrieves the value of the leaf MessagesReceived from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MessagesReceived is set, it can safely use t.GetMessagesReceived()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MessagesReceived == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetMessagesReceived() uint64 {
	if t == nil || t.MessagesReceived == nil {
		return 0
	}
	return *t.MessagesReceived
}

// GetMessagesSent retrieves the value of the leaf MessagesSent from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MessagesSent is set, it can safely use t.GetMessagesSent()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MessagesSent == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetMessagesSent() uint64 {
	if t == nil || t.MessagesSent == nil {
		return 0
	}
	return *t.MessagesSent
}

// GetName retrieves the value of the leaf Name from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTimeout retrieves the value of the leaf Timeout from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Timeout is set, it can safely use t.GetTimeout()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Timeout == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs struct {
	ΛMetadata []ygot.Annotation                                                                  `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                                                  `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) GetOrCreateState() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) GetConfig() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) GetState() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/config YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Port           *uint16           `path:"port" module:"openconfig-system"`
	ΛPort          []ygot.Annotation `path:"@port" ygotAnnotation:"true"`
	SecretKey      *string           `path:"secret-key" module:"openconfig-system"`
	ΛSecretKey     []ygot.Annotation `path:"@secret-key" ygotAnnotation:"true"`
	SourceAddress  *string           `path:"source-address" module:"openconfig-system"`
	ΛSourceAddress []ygot.Annotation `path:"@source-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) IsYANGGoStruct() {
}

// GetPort retrieves the value of the leaf Port from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Port is set, it can safely use t.GetPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Port == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 49
	}
	return *t.Port
}

// GetSecretKey retrieves the value of the leaf SecretKey from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SecretKey is set, it can safely use t.GetSecretKey()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SecretKey == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) GetSecretKey() string {
	if t == nil || t.SecretKey == nil {
		return ""
	}
	return *t.SecretKey
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SourceAddress is set, it can safely use t.GetSourceAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SourceAddress == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Port           *uint16           `path:"port" module:"openconfig-system"`
	ΛPort          []ygot.Annotation `path:"@port" ygotAnnotation:"true"`
	SecretKey      *string           `path:"secret-key" module:"openconfig-system"`
	ΛSecretKey     []ygot.Annotation `path:"@secret-key" ygotAnnotation:"true"`
	SourceAddress  *string           `path:"source-address" module:"openconfig-system"`
	ΛSourceAddress []ygot.Annotation `path:"@source-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) IsYANGGoStruct() {
}

// GetPort retrieves the value of the leaf Port from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Port is set, it can safely use t.GetPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Port == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 49
	}
	return *t.Port
}

// GetSecretKey retrieves the value of the leaf SecretKey from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SecretKey is set, it can safely use t.GetSecretKey()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SecretKey == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) GetSecretKey() string {
	if t == nil || t.SecretKey == nil {
		return ""
	}
	return *t.SecretKey
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SourceAddress is set, it can safely use t.GetSourceAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SourceAddress == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State represents the /openconfig-system/system/aaa/server-groups/server-group/state YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State struct {
	ΛMetadata []ygot.Annotation                    `path:"@" ygotAnnotation:"true"`
	Name      *string                              `path:"name" module:"openconfig-system"`
	ΛName     []ygot.Annotation                    `path:"@name" ygotAnnotation:"true"`
	Type      E_OpenconfigAaaTypes_AAA_SERVER_TYPE `path:"type" module:"openconfig-system"`
	ΛType     []ygot.Annotation                    `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Type is set, it can safely use t.GetType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Type == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State) GetType() E_OpenconfigAaaTypes_AAA_SERVER_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_State represents the /openconfig-system/system/aaa/state YANG schema element.
type OpenconfigSystem_System_Aaa_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Alarms represents the /openconfig-system/system/alarms YANG schema element.
type OpenconfigSystem_System_Alarms struct {
	ΛMetadata []ygot.Annotation                                `path:"@" ygotAnnotation:"true"`
	Alarm     map[string]*OpenconfigSystem_System_Alarms_Alarm `path:"alarm" module:"openconfig-system"`
	ΛAlarm    []ygot.Annotation                                `path:"@alarm" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Alarms implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Alarms) IsYANGGoStruct() {}

// NewAlarm creates a new entry in the Alarm list of the
// OpenconfigSystem_System_Alarms struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Alarms) NewAlarm(Id string) (*OpenconfigSystem_System_Alarms_Alarm, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alarm == nil {
		t.Alarm = make(map[string]*OpenconfigSystem_System_Alarms_Alarm)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Alarm[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Alarm", key)
	}

	t.Alarm[key] = &OpenconfigSystem_System_Alarms_Alarm{
		Id: &Id,
	}

	return t.Alarm[key], nil
}

// RenameAlarm renames an entry in the list Alarm within
// the OpenconfigSystem_System_Alarms struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Alarms) RenameAlarm(oldK, newK string) error {
	if _, ok := t.Alarm[newK]; ok {
		return fmt.Errorf("key %v already exists in Alarm", newK)
	}

	e, ok := t.Alarm[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Alarm", oldK)
	}
	e.Id = &newK

	t.Alarm[newK] = e
	delete(t.Alarm, oldK)
	return nil
}

// GetOrCreateAlarm retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Alarms. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Alarms) GetOrCreateAlarm(Id string) *OpenconfigSystem_System_Alarms_Alarm {

	key := Id

	if v, ok := t.Alarm[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAlarm(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAlarm got unexpected error: %v", err))
	}
	return v
}

// GetAlarm retrieves the value with the specified key from
// the Alarm map field of OpenconfigSystem_System_Alarms. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Alarms) GetAlarm(Id string) *OpenconfigSystem_System_Alarms_Alarm {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Alarm[key]; ok {
		return lm
	}
	return nil
}

// AppendAlarm appends the supplied OpenconfigSystem_System_Alarms_Alarm struct to the
// list Alarm of OpenconfigSystem_System_Alarms. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Alarms_Alarm already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Alarms) AppendAlarm(v *OpenconfigSystem_System_Alarms_Alarm) error {
	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alarm == nil {
		t.Alarm = make(map[string]*OpenconfigSystem_System_Alarms_Alarm)
	}

	if _, ok := t.Alarm[key]; ok {
		return fmt.Errorf("duplicate key for list Alarm %v", key)
	}

	t.Alarm[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Alarms) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Alarms"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Alarms) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Alarms_Alarm represents the /openconfig-system/system/alarms/alarm YANG schema element.
type OpenconfigSystem_System_Alarms_Alarm struct {
	ΛMetadata []ygot.Annotation                            `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Alarms_Alarm_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                            `path:"@config" ygotAnnotation:"true"`
	Id        *string                                      `path:"id" module:"openconfig-system"`
	ΛId       []ygot.Annotation                            `path:"@id" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Alarms_Alarm_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                            `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Alarms_Alarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Alarms_Alarm) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Alarms_Alarm) GetOrCreateConfig() *OpenconfigSystem_System_Alarms_Alarm_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Alarms_Alarm_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Alarms_Alarm) GetOrCreateState() *OpenconfigSystem_System_Alarms_Alarm_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Alarms_Alarm_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Alarms_Alarm. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Alarms_Alarm) GetConfig() *OpenconfigSystem_System_Alarms_Alarm_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Alarms_Alarm. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Alarms_Alarm) GetState() *OpenconfigSystem_System_Alarms_Alarm_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetId retrieves the value of the leaf Id from the OpenconfigSystem_System_Alarms_Alarm
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Id is set, it can safely use t.GetId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Id == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Alarms_Alarm) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Alarms_Alarm struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Alarms_Alarm) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Alarms_Alarm) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Alarms_Alarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Alarms_Alarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Alarms_Alarm_Config represents the /openconfig-system/system/alarms/alarm/config YANG schema element.
type OpenconfigSystem_System_Alarms_Alarm_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Alarms_Alarm_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Alarms_Alarm_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Alarms_Alarm_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Alarms_Alarm_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Alarms_Alarm_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Alarms_Alarm_State represents the /openconfig-system/system/alarms/alarm/state YANG schema element.
type OpenconfigSystem_System_Alarms_Alarm_State struct {
	ΛMetadata    []ygot.Annotation                                       `path:"@" ygotAnnotation:"true"`
	Id           *string                                                 `path:"id" module:"openconfig-system"`
	ΛId          []ygot.Annotation                                       `path:"@id" ygotAnnotation:"true"`
	Resource     *string                                                 `path:"resource" module:"openconfig-system"`
	ΛResource    []ygot.Annotation                                       `path:"@resource" ygotAnnotation:"true"`
	Severity     E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY        `path:"severity" module:"openconfig-system"`
	ΛSeverity    []ygot.Annotation                                       `path:"@severity" ygotAnnotation:"true"`
	Text         *string                                                 `path:"text" module:"openconfig-system"`
	ΛText        []ygot.Annotation                                       `path:"@text" ygotAnnotation:"true"`
	TimeCreated  *uint64                                                 `path:"time-created" module:"openconfig-system"`
	ΛTimeCreated []ygot.Annotation                                       `path:"@time-created" ygotAnnotation:"true"`
	TypeId       OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union `path:"type-id" module:"openconfig-system"`
	ΛTypeId      []ygot.Annotation                                       `path:"@type-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Alarms_Alarm_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Alarms_Alarm_State) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the OpenconfigSystem_System_Alarms_Alarm_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Id is set, it can safely use t.GetId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Id == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetResource retrieves the value of the leaf Resource from the OpenconfigSystem_System_Alarms_Alarm_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Resource is set, it can safely use t.GetResource()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Resource == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) GetResource() string {
	if t == nil || t.Resource == nil {
		return ""
	}
	return *t.Resource
}

// GetSeverity retrieves the value of the leaf Severity from the OpenconfigSystem_System_Alarms_Alarm_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Severity is set, it can safely use t.GetSeverity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Severity == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) GetSeverity() E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// GetText retrieves the value of the leaf Text from the OpenconfigSystem_System_Alarms_Alarm_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Text is set, it can safely use t.GetText()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Text == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) GetText() string {
	if t == nil || t.Text == nil {
		return ""
	}
	return *t.Text
}

// GetTimeCreated retrieves the value of the leaf TimeCreated from the OpenconfigSystem_System_Alarms_Alarm_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TimeCreated is set, it can safely use t.GetTimeCreated()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TimeCreated == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) GetTimeCreated() uint64 {
	if t == nil || t.TimeCreated == nil {
		return 0
	}
	return *t.TimeCreated
}

// GetTypeId retrieves the value of the leaf TypeId from the OpenconfigSystem_System_Alarms_Alarm_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TypeId is set, it can safely use t.GetTypeId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TypeId == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) GetTypeId() OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union {
	if t == nil || t.TypeId == nil {
		return nil
	}
	return t.TypeId
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Alarms_Alarm_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/alarms/alarm/state/type-id within the YANG schema.
type OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union interface {
	Is_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union()
}

// OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID is used when /openconfig-system/system/alarms/alarm/state/type-id
// is to be set to a E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID value.
type OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID struct {
	E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
}

// Is_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union ensures that OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
// implements the OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union interface.
func (*OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID) Is_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union() {
}

// OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_String is used when /openconfig-system/system/alarms/alarm/state/type-id
// is to be set to a string value.
type OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_String struct {
	String string
}

// Is_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union ensures that OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_String
// implements the OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union interface.
func (*OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_String) Is_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union() {
}

// To_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) To_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union(i interface{}) (OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID:
		return &OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID{v}, nil
	case string:
		return &OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union, unknown union type, got: %T, want any of [E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID, string]", i, i)
	}
}

// OpenconfigSystem_System_Clock represents the /openconfig-system/system/clock YANG schema element.
type OpenconfigSystem_System_Clock struct {
	ΛMetadata []ygot.Annotation                     `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Clock_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                     `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Clock_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                     `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Clock implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Clock) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Clock) GetOrCreateConfig() *OpenconfigSystem_System_Clock_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Clock_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Clock) GetOrCreateState() *OpenconfigSystem_System_Clock_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Clock_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Clock. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Clock) GetConfig() *OpenconfigSystem_System_Clock_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Clock. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Clock) GetState() *OpenconfigSystem_System_Clock_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Clock) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Clock"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Clock) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Clock_Config represents the /openconfig-system/system/clock/config YANG schema element.
type OpenconfigSystem_System_Clock_Config struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	TimezoneName  *string           `path:"timezone-name" module:"openconfig-system"`
	ΛTimezoneName []ygot.Annotation `path:"@timezone-name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Clock_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Clock_Config) IsYANGGoStruct() {}

// GetTimezoneName retrieves the value of the leaf TimezoneName from the OpenconfigSystem_System_Clock_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TimezoneName is set, it can safely use t.GetTimezoneName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TimezoneName == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Clock_Config) GetTimezoneName() string {
	if t == nil || t.TimezoneName == nil {
		return ""
	}
	return *t.TimezoneName
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Clock_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Clock_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Clock_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Clock_State represents the /openconfig-system/system/clock/state YANG schema element.
type OpenconfigSystem_System_Clock_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	TimezoneName  *string           `path:"timezone-name" module:"openconfig-system"`
	ΛTimezoneName []ygot.Annotation `path:"@timezone-name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Clock_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Clock_State) IsYANGGoStruct() {}

// GetTimezoneName retrieves the value of the leaf TimezoneName from the OpenconfigSystem_System_Clock_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TimezoneName is set, it can safely use t.GetTimezoneName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TimezoneName == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Clock_State) GetTimezoneName() string {
	if t == nil || t.TimezoneName == nil {
		return ""
	}
	return *t.TimezoneName
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Clock_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Clock_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Clock_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Config represents the /openconfig-system/system/config YANG schema element.
type OpenconfigSystem_System_Config struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DomainName   *string           `path:"domain-name" module:"openconfig-system"`
	ΛDomainName  []ygot.Annotation `path:"@domain-name" ygotAnnotation:"true"`
	Hostname     *string           `path:"hostname" module:"openconfig-system"`
	ΛHostname    []ygot.Annotation `path:"@hostname" ygotAnnotation:"true"`
	LoginBanner  *string           `path:"login-banner" module:"openconfig-system"`
	ΛLoginBanner []ygot.Annotation `path:"@login-banner" ygotAnnotation:"true"`
	MotdBanner   *string           `path:"motd-banner" module:"openconfig-system"`
	ΛMotdBanner  []ygot.Annotation `path:"@motd-banner" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Config) IsYANGGoStruct() {}

// GetDomainName retrieves the value of the leaf DomainName from the OpenconfigSystem_System_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DomainName is set, it can safely use t.GetDomainName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DomainName == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Config) GetDomainName() string {
	if t == nil || t.DomainName == nil {
		return ""
	}
	return *t.DomainName
}

// GetHostname retrieves the value of the leaf Hostname from the OpenconfigSystem_System_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Hostname is set, it can safely use t.GetHostname()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Hostname == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Config) GetHostname() string {
	if t == nil || t.Hostname == nil {
		return ""
	}
	return *t.Hostname
}

// GetLoginBanner retrieves the value of the leaf LoginBanner from the OpenconfigSystem_System_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LoginBanner is set, it can safely use t.GetLoginBanner()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LoginBanner == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Config) GetLoginBanner() string {
	if t == nil || t.LoginBanner == nil {
		return ""
	}
	return *t.LoginBanner
}

// GetMotdBanner retrieves the value of the leaf MotdBanner from the OpenconfigSystem_System_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MotdBanner is set, it can safely use t.GetMotdBanner()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MotdBanner == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Config) GetMotdBanner() string {
	if t == nil || t.MotdBanner == nil {
		return ""
	}
	return *t.MotdBanner
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Cpus represents the /openconfig-system/system/cpus YANG schema element.
type OpenconfigSystem_System_Cpus struct {
	ΛMetadata []ygot.Annotation                                                                        `path:"@" ygotAnnotation:"true"`
	Cpu       map[OpenconfigSystem_System_Cpus_Cpu_State_Index_Union]*OpenconfigSystem_System_Cpus_Cpu `path:"cpu" module:"openconfig-system"`
	ΛCpu      []ygot.Annotation                                                                        `path:"@cpu" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus) IsYANGGoStruct() {}

// NewCpu creates a new entry in the Cpu list of the
// OpenconfigSystem_System_Cpus struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Cpus) NewCpu(Index OpenconfigSystem_System_Cpus_Cpu_State_Index_Union) (*OpenconfigSystem_System_Cpus_Cpu, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cpu == nil {
		t.Cpu = make(map[OpenconfigSystem_System_Cpus_Cpu_State_Index_Union]*OpenconfigSystem_System_Cpus_Cpu)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Cpu[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Cpu", key)
	}

	t.Cpu[key] = &OpenconfigSystem_System_Cpus_Cpu{
		Index: Index,
	}

	return t.Cpu[key], nil
}

// RenameCpu renames an entry in the list Cpu within
// the OpenconfigSystem_System_Cpus struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Cpus) RenameCpu(oldK, newK OpenconfigSystem_System_Cpus_Cpu_State_Index_Union) error {
	if _, ok := t.Cpu[newK]; ok {
		return fmt.Errorf("key %v already exists in Cpu", newK)
	}

	e, ok := t.Cpu[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Cpu", oldK)
	}
	e.Index = newK

	t.Cpu[newK] = e
	delete(t.Cpu, oldK)
	return nil
}

// GetOrCreateCpu retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Cpus. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Cpus) GetOrCreateCpu(Index OpenconfigSystem_System_Cpus_Cpu_State_Index_Union) *OpenconfigSystem_System_Cpus_Cpu {

	key := Index

	if v, ok := t.Cpu[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCpu(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCpu got unexpected error: %v", err))
	}
	return v
}

// GetCpu retrieves the value with the specified key from
// the Cpu map field of OpenconfigSystem_System_Cpus. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Cpus) GetCpu(Index OpenconfigSystem_System_Cpus_Cpu_State_Index_Union) *OpenconfigSystem_System_Cpus_Cpu {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Cpu[key]; ok {
		return lm
	}
	return nil
}

// AppendCpu appends the supplied OpenconfigSystem_System_Cpus_Cpu struct to the
// list Cpu of OpenconfigSystem_System_Cpus. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Cpus_Cpu already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Cpus) AppendCpu(v *OpenconfigSystem_System_Cpus_Cpu) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cpu == nil {
		t.Cpu = make(map[OpenconfigSystem_System_Cpus_Cpu_State_Index_Union]*OpenconfigSystem_System_Cpus_Cpu)
	}

	if _, ok := t.Cpu[key]; ok {
		return fmt.Errorf("duplicate key for list Cpu %v", key)
	}

	t.Cpu[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Cpus_Cpu represents the /openconfig-system/system/cpus/cpu YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu struct {
	ΛMetadata []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	Index     OpenconfigSystem_System_Cpus_Cpu_State_Index_Union `path:"index" module:"openconfig-system"`
	ΛIndex    []ygot.Annotation                                  `path:"@index" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Cpus_Cpu_State            `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu) IsYANGGoStruct() {}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu) GetOrCreateState() *OpenconfigSystem_System_Cpus_Cpu_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Cpus_Cpu_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Cpus_Cpu. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu) GetState() *OpenconfigSystem_System_Cpus_Cpu_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetIndex retrieves the value of the leaf Index from the OpenconfigSystem_System_Cpus_Cpu
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Index is set, it can safely use t.GetIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Index == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu) GetIndex() OpenconfigSystem_System_Cpus_Cpu_State_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Cpus_Cpu struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Cpus_Cpu) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Cpus_Cpu_State_Index_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/cpus/cpu/index within the YANG schema.
type OpenconfigSystem_System_Cpus_Cpu_State_Index_Union interface {
	Is_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union()
}

// OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_E_OpenconfigSystem_System_Cpus_Cpu_State_Index is used when /openconfig-system/system/cpus/cpu/index
// is to be set to a E_OpenconfigSystem_System_Cpus_Cpu_State_Index value.
type OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_E_OpenconfigSystem_System_Cpus_Cpu_State_Index struct {
	E_OpenconfigSystem_System_Cpus_Cpu_State_Index E_OpenconfigSystem_System_Cpus_Cpu_State_Index
}

// Is_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union ensures that OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_E_OpenconfigSystem_System_Cpus_Cpu_State_Index
// implements the OpenconfigSystem_System_Cpus_Cpu_State_Index_Union interface.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_E_OpenconfigSystem_System_Cpus_Cpu_State_Index) Is_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union() {
}

// OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_Uint32 is used when /openconfig-system/system/cpus/cpu/index
// is to be set to a uint32 value.
type OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_Uint32 struct {
	Uint32 uint32
}

// Is_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union ensures that OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_Uint32
// implements the OpenconfigSystem_System_Cpus_Cpu_State_Index_Union interface.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_Uint32) Is_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union() {
}

// To_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Cpus_Cpu_State_Index_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Cpus_Cpu) To_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union(i interface{}) (OpenconfigSystem_System_Cpus_Cpu_State_Index_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigSystem_System_Cpus_Cpu_State_Index:
		return &OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_E_OpenconfigSystem_System_Cpus_Cpu_State_Index{v}, nil
	case uint32:
		return &OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Cpus_Cpu_State_Index_Union, unknown union type, got: %T, want any of [E_OpenconfigSystem_System_Cpus_Cpu_State_Index, uint32]", i, i)
	}
}

// OpenconfigSystem_System_Cpus_Cpu_State represents the /openconfig-system/system/cpus/cpu/state YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State struct {
	ΛMetadata          []ygot.Annotation                                         `path:"@" ygotAnnotation:"true"`
	HardwareInterrupt  *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt `path:"hardware-interrupt" module:"openconfig-system"`
	ΛHardwareInterrupt []ygot.Annotation                                         `path:"@hardware-interrupt" ygotAnnotation:"true"`
	Idle               *OpenconfigSystem_System_Cpus_Cpu_State_Idle              `path:"idle" module:"openconfig-system"`
	ΛIdle              []ygot.Annotation                                         `path:"@idle" ygotAnnotation:"true"`
	Index              OpenconfigSystem_System_Cpus_Cpu_State_Index_Union        `path:"index" module:"openconfig-system"`
	ΛIndex             []ygot.Annotation                                         `path:"@index" ygotAnnotation:"true"`
	Kernel             *OpenconfigSystem_System_Cpus_Cpu_State_Kernel            `path:"kernel" module:"openconfig-system"`
	ΛKernel            []ygot.Annotation                                         `path:"@kernel" ygotAnnotation:"true"`
	Nice               *OpenconfigSystem_System_Cpus_Cpu_State_Nice              `path:"nice" module:"openconfig-system"`
	ΛNice              []ygot.Annotation                                         `path:"@nice" ygotAnnotation:"true"`
	SoftwareInterrupt  *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt `path:"software-interrupt" module:"openconfig-system"`
	ΛSoftwareInterrupt []ygot.Annotation                                         `path:"@software-interrupt" ygotAnnotation:"true"`
	Total              *OpenconfigSystem_System_Cpus_Cpu_State_Total             `path:"total" module:"openconfig-system"`
	ΛTotal             []ygot.Annotation                                         `path:"@total" ygotAnnotation:"true"`
	User               *OpenconfigSystem_System_Cpus_Cpu_State_User              `path:"user" module:"openconfig-system"`
	ΛUser              []ygot.Annotation                                         `path:"@user" ygotAnnotation:"true"`
	Wait               *OpenconfigSystem_System_Cpus_Cpu_State_Wait              `path:"wait" module:"openconfig-system"`
	ΛWait              []ygot.Annotation                                         `path:"@wait" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State) IsYANGGoStruct() {}

// GetOrCreateHardwareInterrupt retrieves the value of the HardwareInterrupt field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetOrCreateHardwareInterrupt() *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt {
	if t.HardwareInterrupt != nil {
		return t.HardwareInterrupt
	}
	t.HardwareInterrupt = &OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt{}
	return t.HardwareInterrupt
}

// GetOrCreateIdle retrieves the value of the Idle field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetOrCreateIdle() *OpenconfigSystem_System_Cpus_Cpu_State_Idle {
	if t.Idle != nil {
		return t.Idle
	}
	t.Idle = &OpenconfigSystem_System_Cpus_Cpu_State_Idle{}
	return t.Idle
}

// GetOrCreateKernel retrieves the value of the Kernel field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetOrCreateKernel() *OpenconfigSystem_System_Cpus_Cpu_State_Kernel {
	if t.Kernel != nil {
		return t.Kernel
	}
	t.Kernel = &OpenconfigSystem_System_Cpus_Cpu_State_Kernel{}
	return t.Kernel
}

// GetOrCreateNice retrieves the value of the Nice field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetOrCreateNice() *OpenconfigSystem_System_Cpus_Cpu_State_Nice {
	if t.Nice != nil {
		return t.Nice
	}
	t.Nice = &OpenconfigSystem_System_Cpus_Cpu_State_Nice{}
	return t.Nice
}

// GetOrCreateSoftwareInterrupt retrieves the value of the SoftwareInterrupt field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetOrCreateSoftwareInterrupt() *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt {
	if t.SoftwareInterrupt != nil {
		return t.SoftwareInterrupt
	}
	t.SoftwareInterrupt = &OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt{}
	return t.SoftwareInterrupt
}

// GetOrCreateTotal retrieves the value of the Total field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetOrCreateTotal() *OpenconfigSystem_System_Cpus_Cpu_State_Total {
	if t.Total != nil {
		return t.Total
	}
	t.Total = &OpenconfigSystem_System_Cpus_Cpu_State_Total{}
	return t.Total
}

// GetOrCreateUser retrieves the value of the User field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetOrCreateUser() *OpenconfigSystem_System_Cpus_Cpu_State_User {
	if t.User != nil {
		return t.User
	}
	t.User = &OpenconfigSystem_System_Cpus_Cpu_State_User{}
	return t.User
}

// GetOrCreateWait retrieves the value of the Wait field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetOrCreateWait() *OpenconfigSystem_System_Cpus_Cpu_State_Wait {
	if t.Wait != nil {
		return t.Wait
	}
	t.Wait = &OpenconfigSystem_System_Cpus_Cpu_State_Wait{}
	return t.Wait
}

// GetHardwareInterrupt returns the value of the HardwareInterrupt struct pointer
// from OpenconfigSystem_System_Cpus_Cpu_State. If the receiver or the field HardwareInterrupt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetHardwareInterrupt() *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt {
	if t != nil && t.HardwareInterrupt != nil {
		return t.HardwareInterrupt
	}
	return nil
}

// GetIdle returns the value of the Idle struct pointer
// from OpenconfigSystem_System_Cpus_Cpu_State. If the receiver or the field Idle is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetIdle() *OpenconfigSystem_System_Cpus_Cpu_State_Idle {
	if t != nil && t.Idle != nil {
		return t.Idle
	}
	return nil
}

// GetKernel returns the value of the Kernel struct pointer
// from OpenconfigSystem_System_Cpus_Cpu_State. If the receiver or the field Kernel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetKernel() *OpenconfigSystem_System_Cpus_Cpu_State_Kernel {
	if t != nil && t.Kernel != nil {
		return t.Kernel
	}
	return nil
}

// GetNice returns the value of the Nice struct pointer
// from OpenconfigSystem_System_Cpus_Cpu_State. If the receiver or the field Nice is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetNice() *OpenconfigSystem_System_Cpus_Cpu_State_Nice {
	if t != nil && t.Nice != nil {
		return t.Nice
	}
	return nil
}

// GetSoftwareInterrupt returns the value of the SoftwareInterrupt struct pointer
// from OpenconfigSystem_System_Cpus_Cpu_State. If the receiver or the field SoftwareInterrupt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetSoftwareInterrupt() *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt {
	if t != nil && t.SoftwareInterrupt != nil {
		return t.SoftwareInterrupt
	}
	return nil
}

// GetTotal returns the value of the Total struct pointer
// from OpenconfigSystem_System_Cpus_Cpu_State. If the receiver or the field Total is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetTotal() *OpenconfigSystem_System_Cpus_Cpu_State_Total {
	if t != nil && t.Total != nil {
		return t.Total
	}
	return nil
}

// GetUser returns the value of the User struct pointer
// from OpenconfigSystem_System_Cpus_Cpu_State. If the receiver or the field User is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetUser() *OpenconfigSystem_System_Cpus_Cpu_State_User {
	if t != nil && t.User != nil {
		return t.User
	}
	return nil
}

// GetWait returns the value of the Wait struct pointer
// from OpenconfigSystem_System_Cpus_Cpu_State. If the receiver or the field Wait is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetWait() *OpenconfigSystem_System_Cpus_Cpu_State_Wait {
	if t != nil && t.Wait != nil {
		return t.Wait
	}
	return nil
}

// GetIndex retrieves the value of the leaf Index from the OpenconfigSystem_System_Cpus_Cpu_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Index is set, it can safely use t.GetIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Index == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetIndex() OpenconfigSystem_System_Cpus_Cpu_State_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// To_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Cpus_Cpu_State_Index_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) To_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union(i interface{}) (OpenconfigSystem_System_Cpus_Cpu_State_Index_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigSystem_System_Cpus_Cpu_State_Index:
		return &OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_E_OpenconfigSystem_System_Cpus_Cpu_State_Index{v}, nil
	case uint32:
		return &OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Cpus_Cpu_State_Index_Union, unknown union type, got: %T, want any of [E_OpenconfigSystem_System_Cpus_Cpu_State_Index, uint32]", i, i)
	}
}

// OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Cpus_Cpu_State_Idle represents the /openconfig-system/system/cpus/cpu/state/idle YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_Idle struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_Idle implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Idle) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigSystem_System_Cpus_Cpu_State_Idle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Idle) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigSystem_System_Cpus_Cpu_State_Idle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Idle) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigSystem_System_Cpus_Cpu_State_Idle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Idle) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigSystem_System_Cpus_Cpu_State_Idle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Idle) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigSystem_System_Cpus_Cpu_State_Idle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Idle) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigSystem_System_Cpus_Cpu_State_Idle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Idle) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigSystem_System_Cpus_Cpu_State_Idle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Idle) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Idle) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_Idle"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Idle) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Cpus_Cpu_State_Kernel represents the /openconfig-system/system/cpus/cpu/state/kernel YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_Kernel struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_Kernel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Kernel) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigSystem_System_Cpus_Cpu_State_Kernel
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Kernel) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigSystem_System_Cpus_Cpu_State_Kernel
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Kernel) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigSystem_System_Cpus_Cpu_State_Kernel
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Kernel) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigSystem_System_Cpus_Cpu_State_Kernel
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Kernel) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigSystem_System_Cpus_Cpu_State_Kernel
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Kernel) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigSystem_System_Cpus_Cpu_State_Kernel
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Kernel) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigSystem_System_Cpus_Cpu_State_Kernel
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Kernel) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Kernel) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_Kernel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Kernel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Cpus_Cpu_State_Nice represents the /openconfig-system/system/cpus/cpu/state/nice YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_Nice struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_Nice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Nice) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigSystem_System_Cpus_Cpu_State_Nice
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Nice) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigSystem_System_Cpus_Cpu_State_Nice
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Nice) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigSystem_System_Cpus_Cpu_State_Nice
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Nice) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigSystem_System_Cpus_Cpu_State_Nice
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Nice) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigSystem_System_Cpus_Cpu_State_Nice
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Nice) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigSystem_System_Cpus_Cpu_State_Nice
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Nice) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigSystem_System_Cpus_Cpu_State_Nice
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Nice) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Nice) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_Nice"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Nice) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt represents the /openconfig-system/system/cpus/cpu/state/software-interrupt YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Cpus_Cpu_State_Total represents the /openconfig-system/system/cpus/cpu/state/total YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_Total struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_Total implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Total) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigSystem_System_Cpus_Cpu_State_Total
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Total) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigSystem_System_Cpus_Cpu_State_Total
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Total) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigSystem_System_Cpus_Cpu_State_Total
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Total) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigSystem_System_Cpus_Cpu_State_Total
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Total) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigSystem_System_Cpus_Cpu_State_Total
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Total) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigSystem_System_Cpus_Cpu_State_Total
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Total) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigSystem_System_Cpus_Cpu_State_Total
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Total) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Total) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_Total"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Total) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Cpus_Cpu_State_User represents the /openconfig-system/system/cpus/cpu/state/user YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_User struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_User) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigSystem_System_Cpus_Cpu_State_User
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_User) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigSystem_System_Cpus_Cpu_State_User
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_User) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigSystem_System_Cpus_Cpu_State_User
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_User) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigSystem_System_Cpus_Cpu_State_User
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_User) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigSystem_System_Cpus_Cpu_State_User
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_User) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigSystem_System_Cpus_Cpu_State_User
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_User) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigSystem_System_Cpus_Cpu_State_User
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_User) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_User) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_User"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_User) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Cpus_Cpu_State_Wait represents the /openconfig-system/system/cpus/cpu/state/wait YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_Wait struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_Wait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Wait) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigSystem_System_Cpus_Cpu_State_Wait
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Wait) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigSystem_System_Cpus_Cpu_State_Wait
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Wait) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigSystem_System_Cpus_Cpu_State_Wait
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Wait) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigSystem_System_Cpus_Cpu_State_Wait
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Wait) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigSystem_System_Cpus_Cpu_State_Wait
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Wait) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigSystem_System_Cpus_Cpu_State_Wait
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Wait) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigSystem_System_Cpus_Cpu_State_Wait
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Wait) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Wait) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_Wait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Wait) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Dns represents the /openconfig-system/system/dns YANG schema element.
type OpenconfigSystem_System_Dns struct {
	ΛMetadata    []ygot.Annotation                        `path:"@" ygotAnnotation:"true"`
	Config       *OpenconfigSystem_System_Dns_Config      `path:"config" module:"openconfig-system"`
	ΛConfig      []ygot.Annotation                        `path:"@config" ygotAnnotation:"true"`
	HostEntries  *OpenconfigSystem_System_Dns_HostEntries `path:"host-entries" module:"openconfig-system"`
	ΛHostEntries []ygot.Annotation                        `path:"@host-entries" ygotAnnotation:"true"`
	Servers      *OpenconfigSystem_System_Dns_Servers     `path:"servers" module:"openconfig-system"`
	ΛServers     []ygot.Annotation                        `path:"@servers" ygotAnnotation:"true"`
	State        *OpenconfigSystem_System_Dns_State       `path:"state" module:"openconfig-system"`
	ΛState       []ygot.Annotation                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Dns) GetOrCreateConfig() *OpenconfigSystem_System_Dns_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Dns_Config{}
	return t.Config
}

// GetOrCreateHostEntries retrieves the value of the HostEntries field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Dns) GetOrCreateHostEntries() *OpenconfigSystem_System_Dns_HostEntries {
	if t.HostEntries != nil {
		return t.HostEntries
	}
	t.HostEntries = &OpenconfigSystem_System_Dns_HostEntries{}
	return t.HostEntries
}

// GetOrCreateServers retrieves the value of the Servers field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Dns) GetOrCreateServers() *OpenconfigSystem_System_Dns_Servers {
	if t.Servers != nil {
		return t.Servers
	}
	t.Servers = &OpenconfigSystem_System_Dns_Servers{}
	return t.Servers
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Dns) GetOrCreateState() *OpenconfigSystem_System_Dns_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Dns_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Dns. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Dns) GetConfig() *OpenconfigSystem_System_Dns_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetHostEntries returns the value of the HostEntries struct pointer
// from OpenconfigSystem_System_Dns. If the receiver or the field HostEntries is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Dns) GetHostEntries() *OpenconfigSystem_System_Dns_HostEntries {
	if t != nil && t.HostEntries != nil {
		return t.HostEntries
	}
	return nil
}

// GetServers returns the value of the Servers struct pointer
// from OpenconfigSystem_System_Dns. If the receiver or the field Servers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Dns) GetServers() *OpenconfigSystem_System_Dns_Servers {
	if t != nil && t.Servers != nil {
		return t.Servers
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Dns. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Dns) GetState() *OpenconfigSystem_System_Dns_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Dns_Config represents the /openconfig-system/system/dns/config YANG schema element.
type OpenconfigSystem_System_Dns_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Search    []string          `path:"search" module:"openconfig-system"`
	ΛSearch   []ygot.Annotation `path:"@search" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_Config) IsYANGGoStruct() {}

// GetSearch retrieves the value of the leaf Search from the OpenconfigSystem_System_Dns_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Search is set, it can safely use t.GetSearch()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Search == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_Config) GetSearch() []string {
	if t == nil || t.Search == nil {
		return nil
	}
	return t.Search
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Dns_HostEntries represents the /openconfig-system/system/dns/host-entries YANG schema element.
type OpenconfigSystem_System_Dns_HostEntries struct {
	ΛMetadata  []ygot.Annotation                                             `path:"@" ygotAnnotation:"true"`
	HostEntry  map[string]*OpenconfigSystem_System_Dns_HostEntries_HostEntry `path:"host-entry" module:"openconfig-system"`
	ΛHostEntry []ygot.Annotation                                             `path:"@host-entry" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_HostEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_HostEntries) IsYANGGoStruct() {}

// NewHostEntry creates a new entry in the HostEntry list of the
// OpenconfigSystem_System_Dns_HostEntries struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Dns_HostEntries) NewHostEntry(Hostname string) (*OpenconfigSystem_System_Dns_HostEntries_HostEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostEntry == nil {
		t.HostEntry = make(map[string]*OpenconfigSystem_System_Dns_HostEntries_HostEntry)
	}

	key := Hostname

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HostEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HostEntry", key)
	}

	t.HostEntry[key] = &OpenconfigSystem_System_Dns_HostEntries_HostEntry{
		Hostname: &Hostname,
	}

	return t.HostEntry[key], nil
}

// RenameHostEntry renames an entry in the list HostEntry within
// the OpenconfigSystem_System_Dns_HostEntries struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Dns_HostEntries) RenameHostEntry(oldK, newK string) error {
	if _, ok := t.HostEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in HostEntry", newK)
	}

	e, ok := t.HostEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HostEntry", oldK)
	}
	e.Hostname = &newK

	t.HostEntry[newK] = e
	delete(t.HostEntry, oldK)
	return nil
}

// GetOrCreateHostEntry retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Dns_HostEntries. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Dns_HostEntries) GetOrCreateHostEntry(Hostname string) *OpenconfigSystem_System_Dns_HostEntries_HostEntry {

	key := Hostname

	if v, ok := t.HostEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHostEntry(Hostname)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHostEntry got unexpected error: %v", err))
	}
	return v
}

// GetHostEntry retrieves the value with the specified key from
// the HostEntry map field of OpenconfigSystem_System_Dns_HostEntries. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Dns_HostEntries) GetHostEntry(Hostname string) *OpenconfigSystem_System_Dns_HostEntries_HostEntry {

	if t == nil {
		return nil
	}

	key := Hostname

	if lm, ok := t.HostEntry[key]; ok {
		return lm
	}
	return nil
}

// AppendHostEntry appends the supplied OpenconfigSystem_System_Dns_HostEntries_HostEntry struct to the
// list HostEntry of OpenconfigSystem_System_Dns_HostEntries. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Dns_HostEntries_HostEntry already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Dns_HostEntries) AppendHostEntry(v *OpenconfigSystem_System_Dns_HostEntries_HostEntry) error {
	key := *v.Hostname

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostEntry == nil {
		t.HostEntry = make(map[string]*OpenconfigSystem_System_Dns_HostEntries_HostEntry)
	}

	if _, ok := t.HostEntry[key]; ok {
		return fmt.Errorf("duplicate key for list HostEntry %v", key)
	}

	t.HostEntry[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_HostEntries) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_HostEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_HostEntries) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Dns_HostEntries_HostEntry represents the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type OpenconfigSystem_System_Dns_HostEntries_HostEntry struct {
	ΛMetadata []ygot.Annotation                                         `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                         `path:"@config" ygotAnnotation:"true"`
	Hostname  *string                                                   `path:"hostname" module:"openconfig-system"`
	ΛHostname []ygot.Annotation                                         `path:"@hostname" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                         `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_HostEntries_HostEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_HostEntries_HostEntry) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) GetOrCreateConfig() *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) GetOrCreateState() *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Dns_HostEntries_HostEntry_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Dns_HostEntries_HostEntry. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) GetConfig() *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Dns_HostEntries_HostEntry. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) GetState() *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetHostname retrieves the value of the leaf Hostname from the OpenconfigSystem_System_Dns_HostEntries_HostEntry
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Hostname is set, it can safely use t.GetHostname()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Hostname == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) GetHostname() string {
	if t == nil || t.Hostname == nil {
		return ""
	}
	return *t.Hostname
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Dns_HostEntries_HostEntry struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Hostname == nil {
		return nil, fmt.Errorf("nil value for key Hostname")
	}

	return map[string]interface{}{
		"hostname": *t.Hostname,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_HostEntries_HostEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config represents the /openconfig-system/system/dns/host-entries/host-entry/config YANG schema element.
type OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Alias        []string          `path:"alias" module:"openconfig-system"`
	ΛAlias       []ygot.Annotation `path:"@alias" ygotAnnotation:"true"`
	Hostname     *string           `path:"hostname" module:"openconfig-system"`
	ΛHostname    []ygot.Annotation `path:"@hostname" ygotAnnotation:"true"`
	Ipv4Address  []string          `path:"ipv4-address" module:"openconfig-system"`
	ΛIpv4Address []ygot.Annotation `path:"@ipv4-address" ygotAnnotation:"true"`
	Ipv6Address  []string          `path:"ipv6-address" module:"openconfig-system"`
	ΛIpv6Address []ygot.Annotation `path:"@ipv6-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config) IsYANGGoStruct() {}

// GetAlias retrieves the value of the leaf Alias from the OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Alias is set, it can safely use t.GetAlias()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Alias == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config) GetAlias() []string {
	if t == nil || t.Alias == nil {
		return nil
	}
	return t.Alias
}

// GetHostname retrieves the value of the leaf Hostname from the OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Hostname is set, it can safely use t.GetHostname()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Hostname == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config) GetHostname() string {
	if t == nil || t.Hostname == nil {
		return ""
	}
	return *t.Hostname
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ipv4Address is set, it can safely use t.GetIpv4Address()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ipv4Address == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config) GetIpv4Address() []string {
	if t == nil || t.Ipv4Address == nil {
		return nil
	}
	return t.Ipv4Address
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ipv6Address is set, it can safely use t.GetIpv6Address()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ipv6Address == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config) GetIpv6Address() []string {
	if t == nil || t.Ipv6Address == nil {
		return nil
	}
	return t.Ipv6Address
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Dns_HostEntries_HostEntry_State represents the /openconfig-system/system/dns/host-entries/host-entry/state YANG schema element.
type OpenconfigSystem_System_Dns_HostEntries_HostEntry_State struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Alias        []string          `path:"alias" module:"openconfig-system"`
	ΛAlias       []ygot.Annotation `path:"@alias" ygotAnnotation:"true"`
	Hostname     *string           `path:"hostname" module:"openconfig-system"`
	ΛHostname    []ygot.Annotation `path:"@hostname" ygotAnnotation:"true"`
	Ipv4Address  []string          `path:"ipv4-address" module:"openconfig-system"`
	ΛIpv4Address []ygot.Annotation `path:"@ipv4-address" ygotAnnotation:"true"`
	Ipv6Address  []string          `path:"ipv6-address" module:"openconfig-system"`
	ΛIpv6Address []ygot.Annotation `path:"@ipv6-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_HostEntries_HostEntry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_HostEntries_HostEntry_State) IsYANGGoStruct() {}

// GetAlias retrieves the value of the leaf Alias from the OpenconfigSystem_System_Dns_HostEntries_HostEntry_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Alias is set, it can safely use t.GetAlias()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Alias == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State) GetAlias() []string {
	if t == nil || t.Alias == nil {
		return nil
	}
	return t.Alias
}

// GetHostname retrieves the value of the leaf Hostname from the OpenconfigSystem_System_Dns_HostEntries_HostEntry_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Hostname is set, it can safely use t.GetHostname()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Hostname == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State) GetHostname() string {
	if t == nil || t.Hostname == nil {
		return ""
	}
	return *t.Hostname
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the OpenconfigSystem_System_Dns_HostEntries_HostEntry_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ipv4Address is set, it can safely use t.GetIpv4Address()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ipv4Address == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State) GetIpv4Address() []string {
	if t == nil || t.Ipv4Address == nil {
		return nil
	}
	return t.Ipv4Address
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the OpenconfigSystem_System_Dns_HostEntries_HostEntry_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ipv6Address is set, it can safely use t.GetIpv6Address()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ipv6Address == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State) GetIpv6Address() []string {
	if t == nil || t.Ipv6Address == nil {
		return nil
	}
	return t.Ipv6Address
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_HostEntries_HostEntry_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Dns_Servers represents the /openconfig-system/system/dns/servers YANG schema element.
type OpenconfigSystem_System_Dns_Servers struct {
	ΛMetadata []ygot.Annotation                                      `path:"@" ygotAnnotation:"true"`
	Server    map[string]*OpenconfigSystem_System_Dns_Servers_Server `path:"server" module:"openconfig-system"`
	ΛServer   []ygot.Annotation                                      `path:"@server" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_Servers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_Servers) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// OpenconfigSystem_System_Dns_Servers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Dns_Servers) NewServer(Address string) (*OpenconfigSystem_System_Dns_Servers_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigSystem_System_Dns_Servers_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &OpenconfigSystem_System_Dns_Servers_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the OpenconfigSystem_System_Dns_Servers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Dns_Servers) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Address = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Dns_Servers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Dns_Servers) GetOrCreateServer(Address string) *OpenconfigSystem_System_Dns_Servers_Server {

	key := Address

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of OpenconfigSystem_System_Dns_Servers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Dns_Servers) GetServer(Address string) *OpenconfigSystem_System_Dns_Servers_Server {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// AppendServer appends the supplied OpenconfigSystem_System_Dns_Servers_Server struct to the
// list Server of OpenconfigSystem_System_Dns_Servers. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Dns_Servers_Server already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Dns_Servers) AppendServer(v *OpenconfigSystem_System_Dns_Servers_Server) error {
	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigSystem_System_Dns_Servers_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Servers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_Servers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_Servers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Dns_Servers_Server represents the /openconfig-system/system/dns/servers/server YANG schema element.
type OpenconfigSystem_System_Dns_Servers_Server struct {
	ΛMetadata []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	Address   *string                                            `path:"address" module:"openconfig-system"`
	ΛAddress  []ygot.Annotation                                  `path:"@address" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Dns_Servers_Server_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                  `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Dns_Servers_Server_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_Servers_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_Servers_Server) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Dns_Servers_Server) GetOrCreateConfig() *OpenconfigSystem_System_Dns_Servers_Server_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Dns_Servers_Server_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Dns_Servers_Server) GetOrCreateState() *OpenconfigSystem_System_Dns_Servers_Server_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Dns_Servers_Server_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Dns_Servers_Server. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Dns_Servers_Server) GetConfig() *OpenconfigSystem_System_Dns_Servers_Server_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Dns_Servers_Server. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Dns_Servers_Server) GetState() *OpenconfigSystem_System_Dns_Servers_Server_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetAddress retrieves the value of the leaf Address from the OpenconfigSystem_System_Dns_Servers_Server
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Address is set, it can safely use t.GetAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Address == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_Servers_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Dns_Servers_Server struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Dns_Servers_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Servers_Server) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_Servers_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_Servers_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Dns_Servers_Server_Config represents the /openconfig-system/system/dns/servers/server/config YANG schema element.
type OpenconfigSystem_System_Dns_Servers_Server_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Address   *string           `path:"address" module:"openconfig-system"`
	ΛAddress  []ygot.Annotation `path:"@address" ygotAnnotation:"true"`
	Port      *uint16           `path:"port" module:"openconfig-system"`
	ΛPort     []ygot.Annotation `path:"@port" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_Servers_Server_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_Servers_Server_Config) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the OpenconfigSystem_System_Dns_Servers_Server_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Address is set, it can safely use t.GetAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Address == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_Servers_Server_Config) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetPort retrieves the value of the leaf Port from the OpenconfigSystem_System_Dns_Servers_Server_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Port is set, it can safely use t.GetPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Port == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_Servers_Server_Config) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 53
	}
	return *t.Port
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Servers_Server_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_Servers_Server_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_Servers_Server_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Dns_Servers_Server_State represents the /openconfig-system/system/dns/servers/server/state YANG schema element.
type OpenconfigSystem_System_Dns_Servers_Server_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Address   *string           `path:"address" module:"openconfig-system"`
	ΛAddress  []ygot.Annotation `path:"@address" ygotAnnotation:"true"`
	Port      *uint16           `path:"port" module:"openconfig-system"`
	ΛPort     []ygot.Annotation `path:"@port" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_Servers_Server_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_Servers_Server_State) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the OpenconfigSystem_System_Dns_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Address is set, it can safely use t.GetAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Address == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_Servers_Server_State) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetPort retrieves the value of the leaf Port from the OpenconfigSystem_System_Dns_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Port is set, it can safely use t.GetPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Port == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_Servers_Server_State) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 53
	}
	return *t.Port
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Servers_Server_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_Servers_Server_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_Servers_Server_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Dns_State represents the /openconfig-system/system/dns/state YANG schema element.
type OpenconfigSystem_System_Dns_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Search    []string          `path:"search" module:"openconfig-system"`
	ΛSearch   []ygot.Annotation `path:"@search" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_State) IsYANGGoStruct() {}

// GetSearch retrieves the value of the leaf Search from the OpenconfigSystem_System_Dns_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Search is set, it can safely use t.GetSearch()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Search == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_State) GetSearch() []string {
	if t == nil || t.Search == nil {
		return nil
	}
	return t.Search
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_GrpcServer represents the /openconfig-system/system/grpc-server YANG schema element.
type OpenconfigSystem_System_GrpcServer struct {
	ΛMetadata []ygot.Annotation                          `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_GrpcServer_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                          `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_GrpcServer_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                          `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_GrpcServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_GrpcServer) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_GrpcServer) GetOrCreateConfig() *OpenconfigSystem_System_GrpcServer_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_GrpcServer_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_GrpcServer) GetOrCreateState() *OpenconfigSystem_System_GrpcServer_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_GrpcServer_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_GrpcServer. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_GrpcServer) GetConfig() *OpenconfigSystem_System_GrpcServer_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_GrpcServer. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_GrpcServer) GetState() *OpenconfigSystem_System_GrpcServer_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_GrpcServer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_GrpcServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_GrpcServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_GrpcServer_Config represents the /openconfig-system/system/grpc-server/config YANG schema element.
type OpenconfigSystem_System_GrpcServer_Config struct {
	ΛMetadata          []ygot.Annotation                                                 `path:"@" ygotAnnotation:"true"`
	CertificateId      *string                                                           `path:"certificate-id" module:"openconfig-system"`
	ΛCertificateId     []ygot.Annotation                                                 `path:"@certificate-id" ygotAnnotation:"true"`
	Enable             *bool                                                             `path:"enable" module:"openconfig-system"`
	ΛEnable            []ygot.Annotation                                                 `path:"@enable" ygotAnnotation:"true"`
	ListenAddresses    []OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union `path:"listen-addresses" module:"openconfig-system"`
	ΛListenAddresses   []ygot.Annotation                                                 `path:"@listen-addresses" ygotAnnotation:"true"`
	Port               *uint16                                                           `path:"port" module:"openconfig-system"`
	ΛPort              []ygot.Annotation                                                 `path:"@port" ygotAnnotation:"true"`
	TransportSecurity  *bool                                                             `path:"transport-security" module:"openconfig-system"`
	ΛTransportSecurity []ygot.Annotation                                                 `path:"@transport-security" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_GrpcServer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_GrpcServer_Config) IsYANGGoStruct() {}

// GetCertificateId retrieves the value of the leaf CertificateId from the OpenconfigSystem_System_GrpcServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CertificateId is set, it can safely use t.GetCertificateId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CertificateId == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_GrpcServer_Config) GetCertificateId() string {
	if t == nil || t.CertificateId == nil {
		return ""
	}
	return *t.CertificateId
}

// GetEnable retrieves the value of the leaf Enable from the OpenconfigSystem_System_GrpcServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enable is set, it can safely use t.GetEnable()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enable == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_GrpcServer_Config) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return true
	}
	return *t.Enable
}

// GetListenAddresses retrieves the value of the leaf ListenAddresses from the OpenconfigSystem_System_GrpcServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ListenAddresses is set, it can safely use t.GetListenAddresses()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ListenAddresses == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_GrpcServer_Config) GetListenAddresses() []OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union {
	if t == nil || t.ListenAddresses == nil {
		return nil
	}
	return t.ListenAddresses
}

// GetPort retrieves the value of the leaf Port from the OpenconfigSystem_System_GrpcServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Port is set, it can safely use t.GetPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Port == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_GrpcServer_Config) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// GetTransportSecurity retrieves the value of the leaf TransportSecurity from the OpenconfigSystem_System_GrpcServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TransportSecurity is set, it can safely use t.GetTransportSecurity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TransportSecurity == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_GrpcServer_Config) GetTransportSecurity() bool {
	if t == nil || t.TransportSecurity == nil {
		return false
	}
	return *t.TransportSecurity
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_GrpcServer_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_GrpcServer_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_GrpcServer_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/grpc-server/config/listen-addresses within the YANG schema.
type OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union interface {
	Is_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union()
}

// OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses is used when /openconfig-system/system/grpc-server/config/listen-addresses
// is to be set to a E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses value.
type OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses struct {
	E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses
}

// Is_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union ensures that OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses
// implements the OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union interface.
func (*OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses) Is_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union() {
}

// OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_String is used when /openconfig-system/system/grpc-server/config/listen-addresses
// is to be set to a string value.
type OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_String struct {
	String string
}

// Is_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union ensures that OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_String
// implements the OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union interface.
func (*OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_String) Is_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union() {
}

// To_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_GrpcServer_Config) To_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union(i interface{}) (OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses:
		return &OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses{v}, nil
	case string:
		return &OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union, unknown union type, got: %T, want any of [E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses, string]", i, i)
	}
}

// OpenconfigSystem_System_GrpcServer_State represents the /openconfig-system/system/grpc-server/state YANG schema element.
type OpenconfigSystem_System_GrpcServer_State struct {
	ΛMetadata          []ygot.Annotation                                                `path:"@" ygotAnnotation:"true"`
	CertificateId      *string                                                          `path:"certificate-id" module:"openconfig-system"`
	ΛCertificateId     []ygot.Annotation                                                `path:"@certificate-id" ygotAnnotation:"true"`
	Enable             *bool                                                            `path:"enable" module:"openconfig-system"`
	ΛEnable            []ygot.Annotation                                                `path:"@enable" ygotAnnotation:"true"`
	ListenAddresses    []OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union `path:"listen-addresses" module:"openconfig-system"`
	ΛListenAddresses   []ygot.Annotation                                                `path:"@listen-addresses" ygotAnnotation:"true"`
	Port               *uint16                                                          `path:"port" module:"openconfig-system"`
	ΛPort              []ygot.Annotation                                                `path:"@port" ygotAnnotation:"true"`
	TransportSecurity  *bool                                                            `path:"transport-security" module:"openconfig-system"`
	ΛTransportSecurity []ygot.Annotation                                                `path:"@transport-security" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_GrpcServer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_GrpcServer_State) IsYANGGoStruct() {}

// GetCertificateId retrieves the value of the leaf CertificateId from the OpenconfigSystem_System_GrpcServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CertificateId is set, it can safely use t.GetCertificateId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CertificateId == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_GrpcServer_State) GetCertificateId() string {
	if t == nil || t.CertificateId == nil {
		return ""
	}
	return *t.CertificateId
}

// GetEnable retrieves the value of the leaf Enable from the OpenconfigSystem_System_GrpcServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enable is set, it can safely use t.GetEnable()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enable == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_GrpcServer_State) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return true
	}
	return *t.Enable
}

// GetListenAddresses retrieves the value of the leaf ListenAddresses from the OpenconfigSystem_System_GrpcServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ListenAddresses is set, it can safely use t.GetListenAddresses()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ListenAddresses == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_GrpcServer_State) GetListenAddresses() []OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union {
	if t == nil || t.ListenAddresses == nil {
		return nil
	}
	return t.ListenAddresses
}

// GetPort retrieves the value of the leaf Port from the OpenconfigSystem_System_GrpcServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Port is set, it can safely use t.GetPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Port == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_GrpcServer_State) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// GetTransportSecurity retrieves the value of the leaf TransportSecurity from the OpenconfigSystem_System_GrpcServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TransportSecurity is set, it can safely use t.GetTransportSecurity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TransportSecurity == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_GrpcServer_State) GetTransportSecurity() bool {
	if t == nil || t.TransportSecurity == nil {
		return false
	}
	return *t.TransportSecurity
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_GrpcServer_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_GrpcServer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_GrpcServer_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/grpc-server/state/listen-addresses within the YANG schema.
type OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union interface {
	Is_OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union()
}

// OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses is used when /openconfig-system/system/grpc-server/state/listen-addresses
// is to be set to a E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses value.
type OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses struct {
	E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses
}

// Is_OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union ensures that OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses
// implements the OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union interface.
func (*OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses) Is_OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union() {
}

// OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_String is used when /openconfig-system/system/grpc-server/state/listen-addresses
// is to be set to a string value.
type OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_String struct {
	String string
}

// Is_OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union ensures that OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_String
// implements the OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union interface.
func (*OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_String) Is_OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union() {
}

// To_OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_GrpcServer_State) To_OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union(i interface{}) (OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses:
		return &OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses{v}, nil
	case string:
		return &OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union, unknown union type, got: %T, want any of [E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses, string]", i, i)
	}
}

// OpenconfigSystem_System_Logging represents the /openconfig-system/system/logging YANG schema element.
type OpenconfigSystem_System_Logging struct {
	ΛMetadata      []ygot.Annotation                              `path:"@" ygotAnnotation:"true"`
	Console        *OpenconfigSystem_System_Logging_Console       `path:"console" module:"openconfig-system"`
	ΛConsole       []ygot.Annotation                              `path:"@console" ygotAnnotation:"true"`
	RemoteServers  *OpenconfigSystem_System_Logging_RemoteServers `path:"remote-servers" module:"openconfig-system"`
	ΛRemoteServers []ygot.Annotation                              `path:"@remote-servers" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging) IsYANGGoStruct() {}

// GetOrCreateConsole retrieves the value of the Console field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging) GetOrCreateConsole() *OpenconfigSystem_System_Logging_Console {
	if t.Console != nil {
		return t.Console
	}
	t.Console = &OpenconfigSystem_System_Logging_Console{}
	return t.Console
}

// GetOrCreateRemoteServers retrieves the value of the RemoteServers field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging) GetOrCreateRemoteServers() *OpenconfigSystem_System_Logging_RemoteServers {
	if t.RemoteServers != nil {
		return t.RemoteServers
	}
	t.RemoteServers = &OpenconfigSystem_System_Logging_RemoteServers{}
	return t.RemoteServers
}

// GetConsole returns the value of the Console struct pointer
// from OpenconfigSystem_System_Logging. If the receiver or the field Console is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging) GetConsole() *OpenconfigSystem_System_Logging_Console {
	if t != nil && t.Console != nil {
		return t.Console
	}
	return nil
}

// GetRemoteServers returns the value of the RemoteServers struct pointer
// from OpenconfigSystem_System_Logging. If the receiver or the field RemoteServers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging) GetRemoteServers() *OpenconfigSystem_System_Logging_RemoteServers {
	if t != nil && t.RemoteServers != nil {
		return t.RemoteServers
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_Console represents the /openconfig-system/system/logging/console YANG schema element.
type OpenconfigSystem_System_Logging_Console struct {
	ΛMetadata  []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	Config     *OpenconfigSystem_System_Logging_Console_Config    `path:"config" module:"openconfig-system"`
	ΛConfig    []ygot.Annotation                                  `path:"@config" ygotAnnotation:"true"`
	Selectors  *OpenconfigSystem_System_Logging_Console_Selectors `path:"selectors" module:"openconfig-system"`
	ΛSelectors []ygot.Annotation                                  `path:"@selectors" ygotAnnotation:"true"`
	State      *OpenconfigSystem_System_Logging_Console_State     `path:"state" module:"openconfig-system"`
	ΛState     []ygot.Annotation                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_Console) GetOrCreateConfig() *OpenconfigSystem_System_Logging_Console_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Logging_Console_Config{}
	return t.Config
}

// GetOrCreateSelectors retrieves the value of the Selectors field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_Console) GetOrCreateSelectors() *OpenconfigSystem_System_Logging_Console_Selectors {
	if t.Selectors != nil {
		return t.Selectors
	}
	t.Selectors = &OpenconfigSystem_System_Logging_Console_Selectors{}
	return t.Selectors
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_Console) GetOrCreateState() *OpenconfigSystem_System_Logging_Console_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Logging_Console_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Logging_Console. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_Console) GetConfig() *OpenconfigSystem_System_Logging_Console_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetSelectors returns the value of the Selectors struct pointer
// from OpenconfigSystem_System_Logging_Console. If the receiver or the field Selectors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_Console) GetSelectors() *OpenconfigSystem_System_Logging_Console_Selectors {
	if t != nil && t.Selectors != nil {
		return t.Selectors
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Logging_Console. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_Console) GetState() *OpenconfigSystem_System_Logging_Console_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_Console_Config represents the /openconfig-system/system/logging/console/config YANG schema element.
type OpenconfigSystem_System_Logging_Console_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_Console_Selectors represents the /openconfig-system/system/logging/console/selectors YANG schema element.
type OpenconfigSystem_System_Logging_Console_Selectors struct {
	ΛMetadata []ygot.Annotation                                                                                                              `path:"@" ygotAnnotation:"true"`
	Selector  map[OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_Console_Selectors_Selector `path:"selector" module:"openconfig-system"`
	ΛSelector []ygot.Annotation                                                                                                              `path:"@selector" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_Selectors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_Selectors) IsYANGGoStruct() {}

// OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/console/selectors.
type OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key struct {
	Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility"`
	Severity E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity"`
}

// NewSelector creates a new entry in the Selector list of the
// OpenconfigSystem_System_Logging_Console_Selectors struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) NewSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) (*OpenconfigSystem_System_Logging_Console_Selectors_Selector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_Console_Selectors_Selector)
	}

	key := OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &OpenconfigSystem_System_Logging_Console_Selectors_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// RenameSelector renames an entry in the list Selector within
// the OpenconfigSystem_System_Logging_Console_Selectors struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) RenameSelector(oldK, newK OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key) error {
	if _, ok := t.Selector[newK]; ok {
		return fmt.Errorf("key %v already exists in Selector", newK)
	}

	e, ok := t.Selector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Selector", oldK)
	}
	e.Facility = newK.Facility
	e.Severity = newK.Severity

	t.Selector[newK] = e
	delete(t.Selector, oldK)
	return nil
}

// GetOrCreateSelector retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Logging_Console_Selectors. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) GetOrCreateSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) *OpenconfigSystem_System_Logging_Console_Selectors_Selector {

	key := OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if v, ok := t.Selector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSelector(Facility, Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSelector got unexpected error: %v", err))
	}
	return v
}

// GetSelector retrieves the value with the specified key from
// the Selector map field of OpenconfigSystem_System_Logging_Console_Selectors. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) GetSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) *OpenconfigSystem_System_Logging_Console_Selectors_Selector {

	if t == nil {
		return nil
	}

	key := OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if lm, ok := t.Selector[key]; ok {
		return lm
	}
	return nil
}

// AppendSelector appends the supplied OpenconfigSystem_System_Logging_Console_Selectors_Selector struct to the
// list Selector of OpenconfigSystem_System_Logging_Console_Selectors. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Logging_Console_Selectors_Selector already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) AppendSelector(v *OpenconfigSystem_System_Logging_Console_Selectors_Selector) error {
	key := OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key{Facility: v.Facility, Severity: v.Severity}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_Console_Selectors_Selector)
	}

	if _, ok := t.Selector[key]; ok {
		return fmt.Errorf("duplicate key for list Selector %v", key)
	}

	t.Selector[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_Selectors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_Console_Selectors_Selector represents the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type OpenconfigSystem_System_Logging_Console_Selectors_Selector struct {
	ΛMetadata []ygot.Annotation                                                  `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                                  `path:"@config" ygotAnnotation:"true"`
	Facility  E_OpenconfigSystemLogging_SYSLOG_FACILITY                          `path:"facility" module:"openconfig-system"`
	ΛFacility []ygot.Annotation                                                  `path:"@facility" ygotAnnotation:"true"`
	Severity  E_OpenconfigSystemLogging_SyslogSeverity                           `path:"severity" module:"openconfig-system"`
	ΛSeverity []ygot.Annotation                                                  `path:"@severity" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Logging_Console_Selectors_Selector_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_Selectors_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_Selectors_Selector) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) GetOrCreateConfig() *OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) GetOrCreateState() *OpenconfigSystem_System_Logging_Console_Selectors_Selector_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Logging_Console_Selectors_Selector_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Logging_Console_Selectors_Selector. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) GetConfig() *OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Logging_Console_Selectors_Selector. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) GetState() *OpenconfigSystem_System_Logging_Console_Selectors_Selector_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetFacility retrieves the value of the leaf Facility from the OpenconfigSystem_System_Logging_Console_Selectors_Selector
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Facility is set, it can safely use t.GetFacility()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Facility == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) GetFacility() E_OpenconfigSystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the OpenconfigSystem_System_Logging_Console_Selectors_Selector
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Severity is set, it can safely use t.GetSeverity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Severity == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) GetSeverity() E_OpenconfigSystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Logging_Console_Selectors_Selector struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_Selectors_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config represents the /openconfig-system/system/logging/console/selectors/selector/config YANG schema element.
type OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config struct {
	ΛMetadata []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	Facility  E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility" module:"openconfig-system"`
	ΛFacility []ygot.Annotation                         `path:"@facility" ygotAnnotation:"true"`
	Severity  E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity" module:"openconfig-system"`
	ΛSeverity []ygot.Annotation                         `path:"@severity" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config) IsYANGGoStruct() {}

// GetFacility retrieves the value of the leaf Facility from the OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Facility is set, it can safely use t.GetFacility()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Facility == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config) GetFacility() E_OpenconfigSystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Severity is set, it can safely use t.GetSeverity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Severity == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config) GetSeverity() E_OpenconfigSystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_Console_Selectors_Selector_State represents the /openconfig-system/system/logging/console/selectors/selector/state YANG schema element.
type OpenconfigSystem_System_Logging_Console_Selectors_Selector_State struct {
	ΛMetadata []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	Facility  E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility" module:"openconfig-system"`
	ΛFacility []ygot.Annotation                         `path:"@facility" ygotAnnotation:"true"`
	Severity  E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity" module:"openconfig-system"`
	ΛSeverity []ygot.Annotation                         `path:"@severity" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_Selectors_Selector_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_Selectors_Selector_State) IsYANGGoStruct() {}

// GetFacility retrieves the value of the leaf Facility from the OpenconfigSystem_System_Logging_Console_Selectors_Selector_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Facility is set, it can safely use t.GetFacility()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Facility == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_State) GetFacility() E_OpenconfigSystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the OpenconfigSystem_System_Logging_Console_Selectors_Selector_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Severity is set, it can safely use t.GetSeverity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Severity == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_State) GetSeverity() E_OpenconfigSystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_Selectors_Selector_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_Console_State represents the /openconfig-system/system/logging/console/state YANG schema element.
type OpenconfigSystem_System_Logging_Console_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_RemoteServers represents the /openconfig-system/system/logging/remote-servers YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers struct {
	ΛMetadata     []ygot.Annotation                                                      `path:"@" ygotAnnotation:"true"`
	RemoteServer  map[string]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer `path:"remote-server" module:"openconfig-system"`
	ΛRemoteServer []ygot.Annotation                                                      `path:"@remote-server" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers) IsYANGGoStruct() {}

// NewRemoteServer creates a new entry in the RemoteServer list of the
// OpenconfigSystem_System_Logging_RemoteServers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Logging_RemoteServers) NewRemoteServer(Host string) (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteServer == nil {
		t.RemoteServer = make(map[string]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer)
	}

	key := Host

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RemoteServer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RemoteServer", key)
	}

	t.RemoteServer[key] = &OpenconfigSystem_System_Logging_RemoteServers_RemoteServer{
		Host: &Host,
	}

	return t.RemoteServer[key], nil
}

// RenameRemoteServer renames an entry in the list RemoteServer within
// the OpenconfigSystem_System_Logging_RemoteServers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Logging_RemoteServers) RenameRemoteServer(oldK, newK string) error {
	if _, ok := t.RemoteServer[newK]; ok {
		return fmt.Errorf("key %v already exists in RemoteServer", newK)
	}

	e, ok := t.RemoteServer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RemoteServer", oldK)
	}
	e.Host = &newK

	t.RemoteServer[newK] = e
	delete(t.RemoteServer, oldK)
	return nil
}

// GetOrCreateRemoteServer retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Logging_RemoteServers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Logging_RemoteServers) GetOrCreateRemoteServer(Host string) *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer {

	key := Host

	if v, ok := t.RemoteServer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRemoteServer(Host)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRemoteServer got unexpected error: %v", err))
	}
	return v
}

// GetRemoteServer retrieves the value with the specified key from
// the RemoteServer map field of OpenconfigSystem_System_Logging_RemoteServers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Logging_RemoteServers) GetRemoteServer(Host string) *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer {

	if t == nil {
		return nil
	}

	key := Host

	if lm, ok := t.RemoteServer[key]; ok {
		return lm
	}
	return nil
}

// AppendRemoteServer appends the supplied OpenconfigSystem_System_Logging_RemoteServers_RemoteServer struct to the
// list RemoteServer of OpenconfigSystem_System_Logging_RemoteServers. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Logging_RemoteServers_RemoteServer already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Logging_RemoteServers) AppendRemoteServer(v *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) error {
	key := *v.Host

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteServer == nil {
		t.RemoteServer = make(map[string]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer)
	}

	if _, ok := t.RemoteServer[key]; ok {
		return fmt.Errorf("duplicate key for list RemoteServer %v", key)
	}

	t.RemoteServer[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer represents the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer struct {
	ΛMetadata  []ygot.Annotation                                                     `path:"@" ygotAnnotation:"true"`
	Config     *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config    `path:"config" module:"openconfig-system"`
	ΛConfig    []ygot.Annotation                                                     `path:"@config" ygotAnnotation:"true"`
	Host       *string                                                               `path:"host" module:"openconfig-system"`
	ΛHost      []ygot.Annotation                                                     `path:"@host" ygotAnnotation:"true"`
	Selectors  *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors `path:"selectors" module:"openconfig-system"`
	ΛSelectors []ygot.Annotation                                                     `path:"@selectors" ygotAnnotation:"true"`
	State      *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State     `path:"state" module:"openconfig-system"`
	ΛState     []ygot.Annotation                                                     `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) GetOrCreateConfig() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config{}
	return t.Config
}

// GetOrCreateSelectors retrieves the value of the Selectors field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) GetOrCreateSelectors() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors {
	if t.Selectors != nil {
		return t.Selectors
	}
	t.Selectors = &OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors{}
	return t.Selectors
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) GetOrCreateState() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Logging_RemoteServers_RemoteServer. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) GetConfig() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetSelectors returns the value of the Selectors struct pointer
// from OpenconfigSystem_System_Logging_RemoteServers_RemoteServer. If the receiver or the field Selectors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) GetSelectors() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors {
	if t != nil && t.Selectors != nil {
		return t.Selectors
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Logging_RemoteServers_RemoteServer. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) GetState() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetHost retrieves the value of the leaf Host from the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Host is set, it can safely use t.GetHost()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Host == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) GetHost() string {
	if t == nil || t.Host == nil {
		return ""
	}
	return *t.Host
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Host == nil {
		return nil, fmt.Errorf("nil value for key Host")
	}

	return map[string]interface{}{
		"host": *t.Host,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config represents the /openconfig-system/system/logging/remote-servers/remote-server/config YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Host           *string           `path:"host" module:"openconfig-system"`
	ΛHost          []ygot.Annotation `path:"@host" ygotAnnotation:"true"`
	RemotePort     *uint16           `path:"remote-port" module:"openconfig-system"`
	ΛRemotePort    []ygot.Annotation `path:"@remote-port" ygotAnnotation:"true"`
	SourceAddress  *string           `path:"source-address" module:"openconfig-system"`
	ΛSourceAddress []ygot.Annotation `path:"@source-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config) IsYANGGoStruct() {}

// GetHost retrieves the value of the leaf Host from the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Host is set, it can safely use t.GetHost()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Host == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config) GetHost() string {
	if t == nil || t.Host == nil {
		return ""
	}
	return *t.Host
}

// GetRemotePort retrieves the value of the leaf RemotePort from the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RemotePort is set, it can safely use t.GetRemotePort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RemotePort == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config) GetRemotePort() uint16 {
	if t == nil || t.RemotePort == nil {
		return 514
	}
	return *t.RemotePort
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SourceAddress is set, it can safely use t.GetSourceAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SourceAddress == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                    `path:"@" ygotAnnotation:"true"`
	Selector  map[OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector `path:"selector" module:"openconfig-system"`
	ΛSelector []ygot.Annotation                                                                                                                                                    `path:"@selector" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) IsYANGGoStruct() {}

// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/remote-servers/remote-server/selectors.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key struct {
	Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility"`
	Severity E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity"`
}

// NewSelector creates a new entry in the Selector list of the
// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) NewSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector)
	}

	key := OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// RenameSelector renames an entry in the list Selector within
// the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) RenameSelector(oldK, newK OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key) error {
	if _, ok := t.Selector[newK]; ok {
		return fmt.Errorf("key %v already exists in Selector", newK)
	}

	e, ok := t.Selector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Selector", oldK)
	}
	e.Facility = newK.Facility
	e.Severity = newK.Severity

	t.Selector[newK] = e
	delete(t.Selector, oldK)
	return nil
}

// GetOrCreateSelector retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) GetOrCreateSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector {

	key := OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if v, ok := t.Selector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSelector(Facility, Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSelector got unexpected error: %v", err))
	}
	return v
}

// GetSelector retrieves the value with the specified key from
// the Selector map field of OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) GetSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector {

	if t == nil {
		return nil
	}

	key := OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if lm, ok := t.Selector[key]; ok {
		return lm
	}
	return nil
}

// AppendSelector appends the supplied OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector struct to the
// list Selector of OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) AppendSelector(v *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) error {
	key := OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key{Facility: v.Facility, Severity: v.Severity}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector)
	}

	if _, ok := t.Selector[key]; ok {
		return fmt.Errorf("duplicate key for list Selector %v", key)
	}

	t.Selector[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector struct {
	ΛMetadata []ygot.Annotation                                                                     `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                                                     `path:"@config" ygotAnnotation:"true"`
	Facility  E_OpenconfigSystemLogging_SYSLOG_FACILITY                                             `path:"facility" module:"openconfig-system"`
	ΛFacility []ygot.Annotation                                                                     `path:"@facility" ygotAnnotation:"true"`
	Severity  E_OpenconfigSystemLogging_SyslogSeverity                                              `path:"severity" module:"openconfig-system"`
	ΛSeverity []ygot.Annotation                                                                     `path:"@severity" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                                                     `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) GetOrCreateConfig() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) GetOrCreateState() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) GetConfig() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) GetState() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetFacility retrieves the value of the leaf Facility from the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Facility is set, it can safely use t.GetFacility()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Facility == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) GetFacility() E_OpenconfigSystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Severity is set, it can safely use t.GetSeverity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Severity == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) GetSeverity() E_OpenconfigSystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/config YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config struct {
	ΛMetadata []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	Facility  E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility" module:"openconfig-system"`
	ΛFacility []ygot.Annotation                         `path:"@facility" ygotAnnotation:"true"`
	Severity  E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity" module:"openconfig-system"`
	ΛSeverity []ygot.Annotation                         `path:"@severity" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) IsYANGGoStruct() {
}

// GetFacility retrieves the value of the leaf Facility from the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Facility is set, it can safely use t.GetFacility()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Facility == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) GetFacility() E_OpenconfigSystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Severity is set, it can safely use t.GetSeverity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Severity == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) GetSeverity() E_OpenconfigSystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/state YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State struct {
	ΛMetadata []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	Facility  E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility" module:"openconfig-system"`
	ΛFacility []ygot.Annotation                         `path:"@facility" ygotAnnotation:"true"`
	Severity  E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity" module:"openconfig-system"`
	ΛSeverity []ygot.Annotation                         `path:"@severity" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) IsYANGGoStruct() {
}

// GetFacility retrieves the value of the leaf Facility from the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Facility is set, it can safely use t.GetFacility()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Facility == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) GetFacility() E_OpenconfigSystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Severity is set, it can safely use t.GetSeverity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Severity == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) GetSeverity() E_OpenconfigSystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State represents the /openconfig-system/system/logging/remote-servers/remote-server/state YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Host           *string           `path:"host" module:"openconfig-system"`
	ΛHost          []ygot.Annotation `path:"@host" ygotAnnotation:"true"`
	RemotePort     *uint16           `path:"remote-port" module:"openconfig-system"`
	ΛRemotePort    []ygot.Annotation `path:"@remote-port" ygotAnnotation:"true"`
	SourceAddress  *string           `path:"source-address" module:"openconfig-system"`
	ΛSourceAddress []ygot.Annotation `path:"@source-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State) IsYANGGoStruct() {}

// GetHost retrieves the value of the leaf Host from the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Host is set, it can safely use t.GetHost()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Host == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State) GetHost() string {
	if t == nil || t.Host == nil {
		return ""
	}
	return *t.Host
}

// GetRemotePort retrieves the value of the leaf RemotePort from the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RemotePort is set, it can safely use t.GetRemotePort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RemotePort == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State) GetRemotePort() uint16 {
	if t == nil || t.RemotePort == nil {
		return 514
	}
	return *t.RemotePort
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SourceAddress is set, it can safely use t.GetSourceAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SourceAddress == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Memory represents the /openconfig-system/system/memory YANG schema element.
type OpenconfigSystem_System_Memory struct {
	ΛMetadata []ygot.Annotation                      `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Memory_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                      `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Memory_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Memory) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Memory) GetOrCreateConfig() *OpenconfigSystem_System_Memory_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Memory_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Memory) GetOrCreateState() *OpenconfigSystem_System_Memory_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Memory_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Memory. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Memory) GetConfig() *OpenconfigSystem_System_Memory_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Memory. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Memory) GetState() *OpenconfigSystem_System_Memory_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Memory) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Memory"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Memory) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Memory_Config represents the /openconfig-system/system/memory/config YANG schema element.
type OpenconfigSystem_System_Memory_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Memory_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Memory_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Memory_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Memory_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Memory_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Memory_State represents the /openconfig-system/system/memory/state YANG schema element.
type OpenconfigSystem_System_Memory_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Physical  *uint64           `path:"physical" module:"openconfig-system"`
	ΛPhysical []ygot.Annotation `path:"@physical" ygotAnnotation:"true"`
	Reserved  *uint64           `path:"reserved" module:"openconfig-system"`
	ΛReserved []ygot.Annotation `path:"@reserved" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Memory_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Memory_State) IsYANGGoStruct() {}

// GetPhysical retrieves the value of the leaf Physical from the OpenconfigSystem_System_Memory_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Physical is set, it can safely use t.GetPhysical()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Physical == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Memory_State) GetPhysical() uint64 {
	if t == nil || t.Physical == nil {
		return 0
	}
	return *t.Physical
}

// GetReserved retrieves the value of the leaf Reserved from the OpenconfigSystem_System_Memory_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Reserved is set, it can safely use t.GetReserved()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Reserved == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Memory_State) GetReserved() uint64 {
	if t == nil || t.Reserved == nil {
		return 0
	}
	return *t.Reserved
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Memory_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Memory_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Memory_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Ntp represents the /openconfig-system/system/ntp YANG schema element.
type OpenconfigSystem_System_Ntp struct {
	ΛMetadata []ygot.Annotation                    `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Ntp_Config  `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                    `path:"@config" ygotAnnotation:"true"`
	NtpKeys   *OpenconfigSystem_System_Ntp_NtpKeys `path:"ntp-keys" module:"openconfig-system"`
	ΛNtpKeys  []ygot.Annotation                    `path:"@ntp-keys" ygotAnnotation:"true"`
	Servers   *OpenconfigSystem_System_Ntp_Servers `path:"servers" module:"openconfig-system"`
	ΛServers  []ygot.Annotation                    `path:"@servers" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Ntp_State   `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                    `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Ntp) GetOrCreateConfig() *OpenconfigSystem_System_Ntp_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Ntp_Config{}
	return t.Config
}

// GetOrCreateNtpKeys retrieves the value of the NtpKeys field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Ntp) GetOrCreateNtpKeys() *OpenconfigSystem_System_Ntp_NtpKeys {
	if t.NtpKeys != nil {
		return t.NtpKeys
	}
	t.NtpKeys = &OpenconfigSystem_System_Ntp_NtpKeys{}
	return t.NtpKeys
}

// GetOrCreateServers retrieves the value of the Servers field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Ntp) GetOrCreateServers() *OpenconfigSystem_System_Ntp_Servers {
	if t.Servers != nil {
		return t.Servers
	}
	t.Servers = &OpenconfigSystem_System_Ntp_Servers{}
	return t.Servers
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Ntp) GetOrCreateState() *OpenconfigSystem_System_Ntp_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Ntp_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Ntp. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Ntp) GetConfig() *OpenconfigSystem_System_Ntp_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetNtpKeys returns the value of the NtpKeys struct pointer
// from OpenconfigSystem_System_Ntp. If the receiver or the field NtpKeys is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Ntp) GetNtpKeys() *OpenconfigSystem_System_Ntp_NtpKeys {
	if t != nil && t.NtpKeys != nil {
		return t.NtpKeys
	}
	return nil
}

// GetServers returns the value of the Servers struct pointer
// from OpenconfigSystem_System_Ntp. If the receiver or the field Servers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Ntp) GetServers() *OpenconfigSystem_System_Ntp_Servers {
	if t != nil && t.Servers != nil {
		return t.Servers
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Ntp. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Ntp) GetState() *OpenconfigSystem_System_Ntp_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Ntp_Config represents the /openconfig-system/system/ntp/config YANG schema element.
type OpenconfigSystem_System_Ntp_Config struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	EnableNtpAuth     *bool             `path:"enable-ntp-auth" module:"openconfig-system"`
	ΛEnableNtpAuth    []ygot.Annotation `path:"@enable-ntp-auth" ygotAnnotation:"true"`
	Enabled           *bool             `path:"enabled" module:"openconfig-system"`
	ΛEnabled          []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	NtpSourceAddress  *string           `path:"ntp-source-address" module:"openconfig-system"`
	ΛNtpSourceAddress []ygot.Annotation `path:"@ntp-source-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_Config) IsYANGGoStruct() {}

// GetEnableNtpAuth retrieves the value of the leaf EnableNtpAuth from the OpenconfigSystem_System_Ntp_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EnableNtpAuth is set, it can safely use t.GetEnableNtpAuth()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EnableNtpAuth == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Config) GetEnableNtpAuth() bool {
	if t == nil || t.EnableNtpAuth == nil {
		return false
	}
	return *t.EnableNtpAuth
}

// GetEnabled retrieves the value of the leaf Enabled from the OpenconfigSystem_System_Ntp_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Config) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetNtpSourceAddress retrieves the value of the leaf NtpSourceAddress from the OpenconfigSystem_System_Ntp_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NtpSourceAddress is set, it can safely use t.GetNtpSourceAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NtpSourceAddress == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Config) GetNtpSourceAddress() string {
	if t == nil || t.NtpSourceAddress == nil {
		return ""
	}
	return *t.NtpSourceAddress
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Ntp_NtpKeys represents the /openconfig-system/system/ntp/ntp-keys YANG schema element.
type OpenconfigSystem_System_Ntp_NtpKeys struct {
	ΛMetadata []ygot.Annotation                                      `path:"@" ygotAnnotation:"true"`
	NtpKey    map[uint16]*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey `path:"ntp-key" module:"openconfig-system"`
	ΛNtpKey   []ygot.Annotation                                      `path:"@ntp-key" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_NtpKeys implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_NtpKeys) IsYANGGoStruct() {}

// NewNtpKey creates a new entry in the NtpKey list of the
// OpenconfigSystem_System_Ntp_NtpKeys struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) NewNtpKey(KeyId uint16) (*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NtpKey == nil {
		t.NtpKey = make(map[uint16]*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey)
	}

	key := KeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NtpKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NtpKey", key)
	}

	t.NtpKey[key] = &OpenconfigSystem_System_Ntp_NtpKeys_NtpKey{
		KeyId: &KeyId,
	}

	return t.NtpKey[key], nil
}

// RenameNtpKey renames an entry in the list NtpKey within
// the OpenconfigSystem_System_Ntp_NtpKeys struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) RenameNtpKey(oldK, newK uint16) error {
	if _, ok := t.NtpKey[newK]; ok {
		return fmt.Errorf("key %v already exists in NtpKey", newK)
	}

	e, ok := t.NtpKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NtpKey", oldK)
	}
	e.KeyId = &newK

	t.NtpKey[newK] = e
	delete(t.NtpKey, oldK)
	return nil
}

// GetOrCreateNtpKey retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Ntp_NtpKeys. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) GetOrCreateNtpKey(KeyId uint16) *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey {

	key := KeyId

	if v, ok := t.NtpKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNtpKey(KeyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNtpKey got unexpected error: %v", err))
	}
	return v
}

// GetNtpKey retrieves the value with the specified key from
// the NtpKey map field of OpenconfigSystem_System_Ntp_NtpKeys. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) GetNtpKey(KeyId uint16) *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey {

	if t == nil {
		return nil
	}

	key := KeyId

	if lm, ok := t.NtpKey[key]; ok {
		return lm
	}
	return nil
}

// AppendNtpKey appends the supplied OpenconfigSystem_System_Ntp_NtpKeys_NtpKey struct to the
// list NtpKey of OpenconfigSystem_System_Ntp_NtpKeys. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Ntp_NtpKeys_NtpKey already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) AppendNtpKey(v *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) error {
	key := *v.KeyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NtpKey == nil {
		t.NtpKey = make(map[uint16]*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey)
	}

	if _, ok := t.NtpKey[key]; ok {
		return fmt.Errorf("duplicate key for list NtpKey %v", key)
	}

	t.NtpKey[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_NtpKeys"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Ntp_NtpKeys_NtpKey represents the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type OpenconfigSystem_System_Ntp_NtpKeys_NtpKey struct {
	ΛMetadata []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                  `path:"@config" ygotAnnotation:"true"`
	KeyId     *uint16                                            `path:"key-id" module:"openconfig-system"`
	ΛKeyId    []ygot.Annotation                                  `path:"@key-id" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_NtpKeys_NtpKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) GetOrCreateConfig() *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) GetOrCreateState() *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Ntp_NtpKeys_NtpKey. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) GetConfig() *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Ntp_NtpKeys_NtpKey. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) GetState() *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetKeyId retrieves the value of the leaf KeyId from the OpenconfigSystem_System_Ntp_NtpKeys_NtpKey
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if KeyId is set, it can safely use t.GetKeyId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.KeyId == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) GetKeyId() uint16 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Ntp_NtpKeys_NtpKey struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.KeyId == nil {
		return nil, fmt.Errorf("nil value for key KeyId")
	}

	return map[string]interface{}{
		"key-id": *t.KeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_NtpKeys_NtpKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/config YANG schema element.
type OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config struct {
	ΛMetadata []ygot.Annotation                `path:"@" ygotAnnotation:"true"`
	KeyId     *uint16                          `path:"key-id" module:"openconfig-system"`
	ΛKeyId    []ygot.Annotation                `path:"@key-id" ygotAnnotation:"true"`
	KeyType   E_OpenconfigSystem_NTP_AUTH_TYPE `path:"key-type" module:"openconfig-system"`
	ΛKeyType  []ygot.Annotation                `path:"@key-type" ygotAnnotation:"true"`
	KeyValue  *string                          `path:"key-value" module:"openconfig-system"`
	ΛKeyValue []ygot.Annotation                `path:"@key-value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config) IsYANGGoStruct() {}

// GetKeyId retrieves the value of the leaf KeyId from the OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if KeyId is set, it can safely use t.GetKeyId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.KeyId == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config) GetKeyId() uint16 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetKeyType retrieves the value of the leaf KeyType from the OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if KeyType is set, it can safely use t.GetKeyType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.KeyType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config) GetKeyType() E_OpenconfigSystem_NTP_AUTH_TYPE {
	if t == nil || t.KeyType == 0 {
		return 0
	}
	return t.KeyType
}

// GetKeyValue retrieves the value of the leaf KeyValue from the OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if KeyValue is set, it can safely use t.GetKeyValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.KeyValue == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config) GetKeyValue() string {
	if t == nil || t.KeyValue == nil {
		return ""
	}
	return *t.KeyValue
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/state YANG schema element.
type OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State struct {
	ΛMetadata []ygot.Annotation                `path:"@" ygotAnnotation:"true"`
	KeyId     *uint16                          `path:"key-id" module:"openconfig-system"`
	ΛKeyId    []ygot.Annotation                `path:"@key-id" ygotAnnotation:"true"`
	KeyType   E_OpenconfigSystem_NTP_AUTH_TYPE `path:"key-type" module:"openconfig-system"`
	ΛKeyType  []ygot.Annotation                `path:"@key-type" ygotAnnotation:"true"`
	KeyValue  *string                          `path:"key-value" module:"openconfig-system"`
	ΛKeyValue []ygot.Annotation                `path:"@key-value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State) IsYANGGoStruct() {}

// GetKeyId retrieves the value of the leaf KeyId from the OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if KeyId is set, it can safely use t.GetKeyId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.KeyId == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State) GetKeyId() uint16 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetKeyType retrieves the value of the leaf KeyType from the OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if KeyType is set, it can safely use t.GetKeyType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.KeyType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State) GetKeyType() E_OpenconfigSystem_NTP_AUTH_TYPE {
	if t == nil || t.KeyType == 0 {
		return 0
	}
	return t.KeyType
}

// GetKeyValue retrieves the value of the leaf KeyValue from the OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if KeyValue is set, it can safely use t.GetKeyValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.KeyValue == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State) GetKeyValue() string {
	if t == nil || t.KeyValue == nil {
		return ""
	}
	return *t.KeyValue
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Ntp_Servers represents the /openconfig-system/system/ntp/servers YANG schema element.
type OpenconfigSystem_System_Ntp_Servers struct {
	ΛMetadata []ygot.Annotation                                      `path:"@" ygotAnnotation:"true"`
	Server    map[string]*OpenconfigSystem_System_Ntp_Servers_Server `path:"server" module:"openconfig-system"`
	ΛServer   []ygot.Annotation                                      `path:"@server" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_Servers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_Servers) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// OpenconfigSystem_System_Ntp_Servers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Ntp_Servers) NewServer(Address string) (*OpenconfigSystem_System_Ntp_Servers_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigSystem_System_Ntp_Servers_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &OpenconfigSystem_System_Ntp_Servers_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the OpenconfigSystem_System_Ntp_Servers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Ntp_Servers) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Address = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Ntp_Servers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Ntp_Servers) GetOrCreateServer(Address string) *OpenconfigSystem_System_Ntp_Servers_Server {

	key := Address

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of OpenconfigSystem_System_Ntp_Servers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Ntp_Servers) GetServer(Address string) *OpenconfigSystem_System_Ntp_Servers_Server {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// AppendServer appends the supplied OpenconfigSystem_System_Ntp_Servers_Server struct to the
// list Server of OpenconfigSystem_System_Ntp_Servers. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Ntp_Servers_Server already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Ntp_Servers) AppendServer(v *OpenconfigSystem_System_Ntp_Servers_Server) error {
	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigSystem_System_Ntp_Servers_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Servers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_Servers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_Servers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Ntp_Servers_Server represents the /openconfig-system/system/ntp/servers/server YANG schema element.
type OpenconfigSystem_System_Ntp_Servers_Server struct {
	ΛMetadata []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	Address   *string                                            `path:"address" module:"openconfig-system"`
	ΛAddress  []ygot.Annotation                                  `path:"@address" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Ntp_Servers_Server_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                  `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Ntp_Servers_Server_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_Servers_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_Servers_Server) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) GetOrCreateConfig() *OpenconfigSystem_System_Ntp_Servers_Server_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Ntp_Servers_Server_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) GetOrCreateState() *OpenconfigSystem_System_Ntp_Servers_Server_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Ntp_Servers_Server_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Ntp_Servers_Server. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) GetConfig() *OpenconfigSystem_System_Ntp_Servers_Server_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Ntp_Servers_Server. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) GetState() *OpenconfigSystem_System_Ntp_Servers_Server_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetAddress retrieves the value of the leaf Address from the OpenconfigSystem_System_Ntp_Servers_Server
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Address is set, it can safely use t.GetAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Address == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Ntp_Servers_Server struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_Servers_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Ntp_Servers_Server_Config represents the /openconfig-system/system/ntp/servers/server/config YANG schema element.
type OpenconfigSystem_System_Ntp_Servers_Server_Config struct {
	ΛMetadata        []ygot.Annotation                                                   `path:"@" ygotAnnotation:"true"`
	Address          *string                                                             `path:"address" module:"openconfig-system"`
	ΛAddress         []ygot.Annotation                                                   `path:"@address" ygotAnnotation:"true"`
	AssociationType  E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType `path:"association-type" module:"openconfig-system"`
	ΛAssociationType []ygot.Annotation                                                   `path:"@association-type" ygotAnnotation:"true"`
	Iburst           *bool                                                               `path:"iburst" module:"openconfig-system"`
	ΛIburst          []ygot.Annotation                                                   `path:"@iburst" ygotAnnotation:"true"`
	Port             *uint16                                                             `path:"port" module:"openconfig-system"`
	ΛPort            []ygot.Annotation                                                   `path:"@port" ygotAnnotation:"true"`
	Prefer           *bool                                                               `path:"prefer" module:"openconfig-system"`
	ΛPrefer          []ygot.Annotation                                                   `path:"@prefer" ygotAnnotation:"true"`
	Version          *uint8                                                              `path:"version" module:"openconfig-system"`
	ΛVersion         []ygot.Annotation                                                   `path:"@version" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_Servers_Server_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_Servers_Server_Config) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the OpenconfigSystem_System_Ntp_Servers_Server_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Address is set, it can safely use t.GetAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Address == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_Config) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAssociationType retrieves the value of the leaf AssociationType from the OpenconfigSystem_System_Ntp_Servers_Server_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AssociationType is set, it can safely use t.GetAssociationType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AssociationType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_Config) GetAssociationType() E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType {
	if t == nil || t.AssociationType == 0 {
		return OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_SERVER
	}
	return t.AssociationType
}

// GetIburst retrieves the value of the leaf Iburst from the OpenconfigSystem_System_Ntp_Servers_Server_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Iburst is set, it can safely use t.GetIburst()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Iburst == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_Config) GetIburst() bool {
	if t == nil || t.Iburst == nil {
		return false
	}
	return *t.Iburst
}

// GetPort retrieves the value of the leaf Port from the OpenconfigSystem_System_Ntp_Servers_Server_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Port is set, it can safely use t.GetPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Port == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_Config) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 123
	}
	return *t.Port
}

// GetPrefer retrieves the value of the leaf Prefer from the OpenconfigSystem_System_Ntp_Servers_Server_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Prefer is set, it can safely use t.GetPrefer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Prefer == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_Config) GetPrefer() bool {
	if t == nil || t.Prefer == nil {
		return false
	}
	return *t.Prefer
}

// GetVersion retrieves the value of the leaf Version from the OpenconfigSystem_System_Ntp_Servers_Server_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Version is set, it can safely use t.GetVersion()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Version == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_Config) GetVersion() uint8 {
	if t == nil || t.Version == nil {
		return 4
	}
	return *t.Version
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_Servers_Server_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Ntp_Servers_Server_State represents the /openconfig-system/system/ntp/servers/server/state YANG schema element.
type OpenconfigSystem_System_Ntp_Servers_Server_State struct {
	ΛMetadata        []ygot.Annotation                                                   `path:"@" ygotAnnotation:"true"`
	Address          *string                                                             `path:"address" module:"openconfig-system"`
	ΛAddress         []ygot.Annotation                                                   `path:"@address" ygotAnnotation:"true"`
	AssociationType  E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType `path:"association-type" module:"openconfig-system"`
	ΛAssociationType []ygot.Annotation                                                   `path:"@association-type" ygotAnnotation:"true"`
	Iburst           *bool                                                               `path:"iburst" module:"openconfig-system"`
	ΛIburst          []ygot.Annotation                                                   `path:"@iburst" ygotAnnotation:"true"`
	Offset           *uint64                                                             `path:"offset" module:"openconfig-system"`
	ΛOffset          []ygot.Annotation                                                   `path:"@offset" ygotAnnotation:"true"`
	PollInterval     *uint32                                                             `path:"poll-interval" module:"openconfig-system"`
	ΛPollInterval    []ygot.Annotation                                                   `path:"@poll-interval" ygotAnnotation:"true"`
	Port             *uint16                                                             `path:"port" module:"openconfig-system"`
	ΛPort            []ygot.Annotation                                                   `path:"@port" ygotAnnotation:"true"`
	Prefer           *bool                                                               `path:"prefer" module:"openconfig-system"`
	ΛPrefer          []ygot.Annotation                                                   `path:"@prefer" ygotAnnotation:"true"`
	RootDelay        *uint32                                                             `path:"root-delay" module:"openconfig-system"`
	ΛRootDelay       []ygot.Annotation                                                   `path:"@root-delay" ygotAnnotation:"true"`
	RootDispersion   *uint64                                                             `path:"root-dispersion" module:"openconfig-system"`
	ΛRootDispersion  []ygot.Annotation                                                   `path:"@root-dispersion" ygotAnnotation:"true"`
	Stratum          *uint8                                                              `path:"stratum" module:"openconfig-system"`
	ΛStratum         []ygot.Annotation                                                   `path:"@stratum" ygotAnnotation:"true"`
	Version          *uint8                                                              `path:"version" module:"openconfig-system"`
	ΛVersion         []ygot.Annotation                                                   `path:"@version" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_Servers_Server_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_Servers_Server_State) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the OpenconfigSystem_System_Ntp_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Address is set, it can safely use t.GetAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Address == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAssociationType retrieves the value of the leaf AssociationType from the OpenconfigSystem_System_Ntp_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AssociationType is set, it can safely use t.GetAssociationType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AssociationType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) GetAssociationType() E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType {
	if t == nil || t.AssociationType == 0 {
		return OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_SERVER
	}
	return t.AssociationType
}

// GetIburst retrieves the value of the leaf Iburst from the OpenconfigSystem_System_Ntp_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Iburst is set, it can safely use t.GetIburst()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Iburst == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) GetIburst() bool {
	if t == nil || t.Iburst == nil {
		return false
	}
	return *t.Iburst
}

// GetOffset retrieves the value of the leaf Offset from the OpenconfigSystem_System_Ntp_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Offset is set, it can safely use t.GetOffset()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Offset == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) GetOffset() uint64 {
	if t == nil || t.Offset == nil {
		return 0
	}
	return *t.Offset
}

// GetPollInterval retrieves the value of the leaf PollInterval from the OpenconfigSystem_System_Ntp_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PollInterval is set, it can safely use t.GetPollInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PollInterval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) GetPollInterval() uint32 {
	if t == nil || t.PollInterval == nil {
		return 0
	}
	return *t.PollInterval
}

// GetPort retrieves the value of the leaf Port from the OpenconfigSystem_System_Ntp_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Port is set, it can safely use t.GetPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Port == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 123
	}
	return *t.Port
}

// GetPrefer retrieves the value of the leaf Prefer from the OpenconfigSystem_System_Ntp_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Prefer is set, it can safely use t.GetPrefer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Prefer == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) GetPrefer() bool {
	if t == nil || t.Prefer == nil {
		return false
	}
	return *t.Prefer
}

// GetRootDelay retrieves the value of the leaf RootDelay from the OpenconfigSystem_System_Ntp_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RootDelay is set, it can safely use t.GetRootDelay()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RootDelay == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) GetRootDelay() uint32 {
	if t == nil || t.RootDelay == nil {
		return 0
	}
	return *t.RootDelay
}

// GetRootDispersion retrieves the value of the leaf RootDispersion from the OpenconfigSystem_System_Ntp_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RootDispersion is set, it can safely use t.GetRootDispersion()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RootDispersion == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) GetRootDispersion() uint64 {
	if t == nil || t.RootDispersion == nil {
		return 0
	}
	return *t.RootDispersion
}

// GetStratum retrieves the value of the leaf Stratum from the OpenconfigSystem_System_Ntp_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Stratum is set, it can safely use t.GetStratum()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Stratum == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) GetStratum() uint8 {
	if t == nil || t.Stratum == nil {
		return 0
	}
	return *t.Stratum
}

// GetVersion retrieves the value of the leaf Version from the OpenconfigSystem_System_Ntp_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Version is set, it can safely use t.GetVersion()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Version == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) GetVersion() uint8 {
	if t == nil || t.Version == nil {
		return 4
	}
	return *t.Version
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_Servers_Server_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Ntp_State represents the /openconfig-system/system/ntp/state YANG schema element.
type OpenconfigSystem_System_Ntp_State struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AuthMismatch      *uint64           `path:"auth-mismatch" module:"openconfig-system"`
	ΛAuthMismatch     []ygot.Annotation `path:"@auth-mismatch" ygotAnnotation:"true"`
	EnableNtpAuth     *bool             `path:"enable-ntp-auth" module:"openconfig-system"`
	ΛEnableNtpAuth    []ygot.Annotation `path:"@enable-ntp-auth" ygotAnnotation:"true"`
	Enabled           *bool             `path:"enabled" module:"openconfig-system"`
	ΛEnabled          []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	NtpSourceAddress  *string           `path:"ntp-source-address" module:"openconfig-system"`
	ΛNtpSourceAddress []ygot.Annotation `path:"@ntp-source-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_State) IsYANGGoStruct() {}

// GetAuthMismatch retrieves the value of the leaf AuthMismatch from the OpenconfigSystem_System_Ntp_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AuthMismatch is set, it can safely use t.GetAuthMismatch()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AuthMismatch == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_State) GetAuthMismatch() uint64 {
	if t == nil || t.AuthMismatch == nil {
		return 0
	}
	return *t.AuthMismatch
}

// GetEnableNtpAuth retrieves the value of the leaf EnableNtpAuth from the OpenconfigSystem_System_Ntp_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EnableNtpAuth is set, it can safely use t.GetEnableNtpAuth()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EnableNtpAuth == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_State) GetEnableNtpAuth() bool {
	if t == nil || t.EnableNtpAuth == nil {
		return false
	}
	return *t.EnableNtpAuth
}

// GetEnabled retrieves the value of the leaf Enabled from the OpenconfigSystem_System_Ntp_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_State) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetNtpSourceAddress retrieves the value of the leaf NtpSourceAddress from the OpenconfigSystem_System_Ntp_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NtpSourceAddress is set, it can safely use t.GetNtpSourceAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NtpSourceAddress == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_State) GetNtpSourceAddress() string {
	if t == nil || t.NtpSourceAddress == nil {
		return ""
	}
	return *t.NtpSourceAddress
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Processes represents the /openconfig-system/system/processes YANG schema element.
type OpenconfigSystem_System_Processes struct {
	ΛMetadata []ygot.Annotation                                     `path:"@" ygotAnnotation:"true"`
	Process   map[uint64]*OpenconfigSystem_System_Processes_Process `path:"process" module:"openconfig-system"`
	ΛProcess  []ygot.Annotation                                     `path:"@process" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Processes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Processes) IsYANGGoStruct() {}

// NewProcess creates a new entry in the Process list of the
// OpenconfigSystem_System_Processes struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Processes) NewProcess(Pid uint64) (*OpenconfigSystem_System_Processes_Process, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Process == nil {
		t.Process = make(map[uint64]*OpenconfigSystem_System_Processes_Process)
	}

	key := Pid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Process[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Process", key)
	}

	t.Process[key] = &OpenconfigSystem_System_Processes_Process{
		Pid: &Pid,
	}

	return t.Process[key], nil
}

// RenameProcess renames an entry in the list Process within
// the OpenconfigSystem_System_Processes struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Processes) RenameProcess(oldK, newK uint64) error {
	if _, ok := t.Process[newK]; ok {
		return fmt.Errorf("key %v already exists in Process", newK)
	}

	e, ok := t.Process[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Process", oldK)
	}
	e.Pid = &newK

	t.Process[newK] = e
	delete(t.Process, oldK)
	return nil
}

// GetOrCreateProcess retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Processes. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Processes) GetOrCreateProcess(Pid uint64) *OpenconfigSystem_System_Processes_Process {

	key := Pid

	if v, ok := t.Process[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProcess(Pid)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProcess got unexpected error: %v", err))
	}
	return v
}

// GetProcess retrieves the value with the specified key from
// the Process map field of OpenconfigSystem_System_Processes. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Processes) GetProcess(Pid uint64) *OpenconfigSystem_System_Processes_Process {

	if t == nil {
		return nil
	}

	key := Pid

	if lm, ok := t.Process[key]; ok {
		return lm
	}
	return nil
}

// AppendProcess appends the supplied OpenconfigSystem_System_Processes_Process struct to the
// list Process of OpenconfigSystem_System_Processes. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Processes_Process already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Processes) AppendProcess(v *OpenconfigSystem_System_Processes_Process) error {
	key := *v.Pid

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Process == nil {
		t.Process = make(map[uint64]*OpenconfigSystem_System_Processes_Process)
	}

	if _, ok := t.Process[key]; ok {
		return fmt.Errorf("duplicate key for list Process %v", key)
	}

	t.Process[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Processes) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Processes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Processes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Processes_Process represents the /openconfig-system/system/processes/process YANG schema element.
type OpenconfigSystem_System_Processes_Process struct {
	ΛMetadata []ygot.Annotation                                `path:"@" ygotAnnotation:"true"`
	Pid       *uint64                                          `path:"pid" module:"openconfig-system"`
	ΛPid      []ygot.Annotation                                `path:"@pid" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Processes_Process_State `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Processes_Process implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Processes_Process) IsYANGGoStruct() {}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Processes_Process) GetOrCreateState() *OpenconfigSystem_System_Processes_Process_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Processes_Process_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Processes_Process. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Processes_Process) GetState() *OpenconfigSystem_System_Processes_Process_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetPid retrieves the value of the leaf Pid from the OpenconfigSystem_System_Processes_Process
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Pid is set, it can safely use t.GetPid()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Pid == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Processes_Process) GetPid() uint64 {
	if t == nil || t.Pid == nil {
		return 0
	}
	return *t.Pid
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Processes_Process struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Processes_Process) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Pid == nil {
		return nil, fmt.Errorf("nil value for key Pid")
	}

	return map[string]interface{}{
		"pid": *t.Pid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Processes_Process) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Processes_Process"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Processes_Process) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Processes_Process_State represents the /openconfig-system/system/processes/process/state YANG schema element.
type OpenconfigSystem_System_Processes_Process_State struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Args               []string          `path:"args" module:"openconfig-system"`
	ΛArgs              []ygot.Annotation `path:"@args" ygotAnnotation:"true"`
	CpuUsageSystem     *uint64           `path:"cpu-usage-system" module:"openconfig-system"`
	ΛCpuUsageSystem    []ygot.Annotation `path:"@cpu-usage-system" ygotAnnotation:"true"`
	CpuUsageUser       *uint64           `path:"cpu-usage-user" module:"openconfig-system"`
	ΛCpuUsageUser      []ygot.Annotation `path:"@cpu-usage-user" ygotAnnotation:"true"`
	CpuUtilization     *uint8            `path:"cpu-utilization" module:"openconfig-system"`
	ΛCpuUtilization    []ygot.Annotation `path:"@cpu-utilization" ygotAnnotation:"true"`
	MemoryUsage        *uint64           `path:"memory-usage" module:"openconfig-system"`
	ΛMemoryUsage       []ygot.Annotation `path:"@memory-usage" ygotAnnotation:"true"`
	MemoryUtilization  *uint8            `path:"memory-utilization" module:"openconfig-system"`
	ΛMemoryUtilization []ygot.Annotation `path:"@memory-utilization" ygotAnnotation:"true"`
	Name               *string           `path:"name" module:"openconfig-system"`
	ΛName              []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
	Pid                *uint64           `path:"pid" module:"openconfig-system"`
	ΛPid               []ygot.Annotation `path:"@pid" ygotAnnotation:"true"`
	StartTime          *uint64           `path:"start-time" module:"openconfig-system"`
	ΛStartTime         []ygot.Annotation `path:"@start-time" ygotAnnotation:"true"`
	Uptime             *uint64           `path:"uptime" module:"openconfig-system"`
	ΛUptime            []ygot.Annotation `path:"@uptime" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Processes_Process_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Processes_Process_State) IsYANGGoStruct() {}

// GetArgs retrieves the value of the leaf Args from the OpenconfigSystem_System_Processes_Process_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Args is set, it can safely use t.GetArgs()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Args == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Processes_Process_State) GetArgs() []string {
	if t == nil || t.Args == nil {
		return nil
	}
	return t.Args
}

// GetCpuUsageSystem retrieves the value of the leaf CpuUsageSystem from the OpenconfigSystem_System_Processes_Process_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CpuUsageSystem is set, it can safely use t.GetCpuUsageSystem()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CpuUsageSystem == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Processes_Process_State) GetCpuUsageSystem() uint64 {
	if t == nil || t.CpuUsageSystem == nil {
		return 0
	}
	return *t.CpuUsageSystem
}

// GetCpuUsageUser retrieves the value of the leaf CpuUsageUser from the OpenconfigSystem_System_Processes_Process_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CpuUsageUser is set, it can safely use t.GetCpuUsageUser()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CpuUsageUser == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Processes_Process_State) GetCpuUsageUser() uint64 {
	if t == nil || t.CpuUsageUser == nil {
		return 0
	}
	return *t.CpuUsageUser
}

// GetCpuUtilization retrieves the value of the leaf CpuUtilization from the OpenconfigSystem_System_Processes_Process_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CpuUtilization is set, it can safely use t.GetCpuUtilization()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CpuUtilization == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Processes_Process_State) GetCpuUtilization() uint8 {
	if t == nil || t.CpuUtilization == nil {
		return 0
	}
	return *t.CpuUtilization
}

// GetMemoryUsage retrieves the value of the leaf MemoryUsage from the OpenconfigSystem_System_Processes_Process_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MemoryUsage is set, it can safely use t.GetMemoryUsage()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MemoryUsage == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Processes_Process_State) GetMemoryUsage() uint64 {
	if t == nil || t.MemoryUsage == nil {
		return 0
	}
	return *t.MemoryUsage
}

// GetMemoryUtilization retrieves the value of the leaf MemoryUtilization from the OpenconfigSystem_System_Processes_Process_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MemoryUtilization is set, it can safely use t.GetMemoryUtilization()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MemoryUtilization == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Processes_Process_State) GetMemoryUtilization() uint8 {
	if t == nil || t.MemoryUtilization == nil {
		return 0
	}
	return *t.MemoryUtilization
}

// GetName retrieves the value of the leaf Name from the OpenconfigSystem_System_Processes_Process_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Processes_Process_State) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPid retrieves the value of the leaf Pid from the OpenconfigSystem_System_Processes_Process_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Pid is set, it can safely use t.GetPid()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Pid == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Processes_Process_State) GetPid() uint64 {
	if t == nil || t.Pid == nil {
		return 0
	}
	return *t.Pid
}

// GetStartTime retrieves the value of the leaf StartTime from the OpenconfigSystem_System_Processes_Process_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if StartTime is set, it can safely use t.GetStartTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.StartTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Processes_Process_State) GetStartTime() uint64 {
	if t == nil || t.StartTime == nil {
		return 0
	}
	return *t.StartTime
}

// GetUptime retrieves the value of the leaf Uptime from the OpenconfigSystem_System_Processes_Process_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Uptime is set, it can safely use t.GetUptime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Uptime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Processes_Process_State) GetUptime() uint64 {
	if t == nil || t.Uptime == nil {
		return 0
	}
	return *t.Uptime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Processes_Process_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Processes_Process_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Processes_Process_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_SshServer represents the /openconfig-system/system/ssh-server YANG schema element.
type OpenconfigSystem_System_SshServer struct {
	ΛMetadata []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_SshServer_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                         `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_SshServer_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                         `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_SshServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_SshServer) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_SshServer) GetOrCreateConfig() *OpenconfigSystem_System_SshServer_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_SshServer_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_SshServer) GetOrCreateState() *OpenconfigSystem_System_SshServer_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_SshServer_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_SshServer. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_SshServer) GetConfig() *OpenconfigSystem_System_SshServer_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_SshServer. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_SshServer) GetState() *OpenconfigSystem_System_SshServer_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_SshServer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_SshServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_SshServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_SshServer_Config represents the /openconfig-system/system/ssh-server/config YANG schema element.
type OpenconfigSystem_System_SshServer_Config struct {
	ΛMetadata        []ygot.Annotation                                          `path:"@" ygotAnnotation:"true"`
	Enable           *bool                                                      `path:"enable" module:"openconfig-system"`
	ΛEnable          []ygot.Annotation                                          `path:"@enable" ygotAnnotation:"true"`
	ProtocolVersion  E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion `path:"protocol-version" module:"openconfig-system"`
	ΛProtocolVersion []ygot.Annotation                                          `path:"@protocol-version" ygotAnnotation:"true"`
	RateLimit        *uint16                                                    `path:"rate-limit" module:"openconfig-system"`
	ΛRateLimit       []ygot.Annotation                                          `path:"@rate-limit" ygotAnnotation:"true"`
	SessionLimit     *uint16                                                    `path:"session-limit" module:"openconfig-system"`
	ΛSessionLimit    []ygot.Annotation                                          `path:"@session-limit" ygotAnnotation:"true"`
	Timeout          *uint16                                                    `path:"timeout" module:"openconfig-system"`
	ΛTimeout         []ygot.Annotation                                          `path:"@timeout" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_SshServer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_SshServer_Config) IsYANGGoStruct() {}

// GetEnable retrieves the value of the leaf Enable from the OpenconfigSystem_System_SshServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enable is set, it can safely use t.GetEnable()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enable == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_SshServer_Config) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return true
	}
	return *t.Enable
}

// GetProtocolVersion retrieves the value of the leaf ProtocolVersion from the OpenconfigSystem_System_SshServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ProtocolVersion is set, it can safely use t.GetProtocolVersion()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ProtocolVersion == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_SshServer_Config) GetProtocolVersion() E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion {
	if t == nil || t.ProtocolVersion == 0 {
		return OpenconfigSystem_System_SshServer_Config_ProtocolVersion_V2
	}
	return t.ProtocolVersion
}

// GetRateLimit retrieves the value of the leaf RateLimit from the OpenconfigSystem_System_SshServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RateLimit is set, it can safely use t.GetRateLimit()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RateLimit == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_SshServer_Config) GetRateLimit() uint16 {
	if t == nil || t.RateLimit == nil {
		return 0
	}
	return *t.RateLimit
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the OpenconfigSystem_System_SshServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SessionLimit is set, it can safely use t.GetSessionLimit()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SessionLimit == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_SshServer_Config) GetSessionLimit() uint16 {
	if t == nil || t.SessionLimit == nil {
		return 0
	}
	return *t.SessionLimit
}

// GetTimeout retrieves the value of the leaf Timeout from the OpenconfigSystem_System_SshServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Timeout is set, it can safely use t.GetTimeout()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Timeout == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_SshServer_Config) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_SshServer_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_SshServer_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_SshServer_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_SshServer_State represents the /openconfig-system/system/ssh-server/state YANG schema element.
type OpenconfigSystem_System_SshServer_State struct {
	ΛMetadata        []ygot.Annotation                                          `path:"@" ygotAnnotation:"true"`
	Enable           *bool                                                      `path:"enable" module:"openconfig-system"`
	ΛEnable          []ygot.Annotation                                          `path:"@enable" ygotAnnotation:"true"`
	ProtocolVersion  E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion `path:"protocol-version" module:"openconfig-system"`
	ΛProtocolVersion []ygot.Annotation                                          `path:"@protocol-version" ygotAnnotation:"true"`
	RateLimit        *uint16                                                    `path:"rate-limit" module:"openconfig-system"`
	ΛRateLimit       []ygot.Annotation                                          `path:"@rate-limit" ygotAnnotation:"true"`
	SessionLimit     *uint16                                                    `path:"session-limit" module:"openconfig-system"`
	ΛSessionLimit    []ygot.Annotation                                          `path:"@session-limit" ygotAnnotation:"true"`
	Timeout          *uint16                                                    `path:"timeout" module:"openconfig-system"`
	ΛTimeout         []ygot.Annotation                                          `path:"@timeout" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_SshServer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_SshServer_State) IsYANGGoStruct() {}

// GetEnable retrieves the value of the leaf Enable from the OpenconfigSystem_System_SshServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enable is set, it can safely use t.GetEnable()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enable == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_SshServer_State) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return true
	}
	return *t.Enable
}

// GetProtocolVersion retrieves the value of the leaf ProtocolVersion from the OpenconfigSystem_System_SshServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ProtocolVersion is set, it can safely use t.GetProtocolVersion()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ProtocolVersion == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_SshServer_State) GetProtocolVersion() E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion {
	if t == nil || t.ProtocolVersion == 0 {
		return OpenconfigSystem_System_SshServer_Config_ProtocolVersion_V2
	}
	return t.ProtocolVersion
}

// GetRateLimit retrieves the value of the leaf RateLimit from the OpenconfigSystem_System_SshServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RateLimit is set, it can safely use t.GetRateLimit()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RateLimit == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_SshServer_State) GetRateLimit() uint16 {
	if t == nil || t.RateLimit == nil {
		return 0
	}
	return *t.RateLimit
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the OpenconfigSystem_System_SshServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SessionLimit is set, it can safely use t.GetSessionLimit()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SessionLimit == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_SshServer_State) GetSessionLimit() uint16 {
	if t == nil || t.SessionLimit == nil {
		return 0
	}
	return *t.SessionLimit
}

// GetTimeout retrieves the value of the leaf Timeout from the OpenconfigSystem_System_SshServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Timeout is set, it can safely use t.GetTimeout()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Timeout == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_SshServer_State) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_SshServer_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_SshServer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_SshServer_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_State represents the /openconfig-system/system/state YANG schema element.
type OpenconfigSystem_System_State struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	BootTime         *uint64           `path:"boot-time" module:"openconfig-system"`
	ΛBootTime        []ygot.Annotation `path:"@boot-time" ygotAnnotation:"true"`
	CurrentDatetime  *string           `path:"current-datetime" module:"openconfig-system"`
	ΛCurrentDatetime []ygot.Annotation `path:"@current-datetime" ygotAnnotation:"true"`
	DomainName       *string           `path:"domain-name" module:"openconfig-system"`
	ΛDomainName      []ygot.Annotation `path:"@domain-name" ygotAnnotation:"true"`
	Hostname         *string           `path:"hostname" module:"openconfig-system"`
	ΛHostname        []ygot.Annotation `path:"@hostname" ygotAnnotation:"true"`
	LoginBanner      *string           `path:"login-banner" module:"openconfig-system"`
	ΛLoginBanner     []ygot.Annotation `path:"@login-banner" ygotAnnotation:"true"`
	MotdBanner       *string           `path:"motd-banner" module:"openconfig-system"`
	ΛMotdBanner      []ygot.Annotation `path:"@motd-banner" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_State) IsYANGGoStruct() {}

// GetBootTime retrieves the value of the leaf BootTime from the OpenconfigSystem_System_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if BootTime is set, it can safely use t.GetBootTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.BootTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_State) GetBootTime() uint64 {
	if t == nil || t.BootTime == nil {
		return 0
	}
	return *t.BootTime
}

// GetCurrentDatetime retrieves the value of the leaf CurrentDatetime from the OpenconfigSystem_System_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CurrentDatetime is set, it can safely use t.GetCurrentDatetime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CurrentDatetime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_State) GetCurrentDatetime() string {
	if t == nil || t.CurrentDatetime == nil {
		return ""
	}
	return *t.CurrentDatetime
}

// GetDomainName retrieves the value of the leaf DomainName from the OpenconfigSystem_System_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DomainName is set, it can safely use t.GetDomainName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DomainName == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_State) GetDomainName() string {
	if t == nil || t.DomainName == nil {
		return ""
	}
	return *t.DomainName
}

// GetHostname retrieves the value of the leaf Hostname from the OpenconfigSystem_System_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Hostname is set, it can safely use t.GetHostname()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Hostname == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_State) GetHostname() string {
	if t == nil || t.Hostname == nil {
		return ""
	}
	return *t.Hostname
}

// GetLoginBanner retrieves the value of the leaf LoginBanner from the OpenconfigSystem_System_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LoginBanner is set, it can safely use t.GetLoginBanner()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LoginBanner == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_State) GetLoginBanner() string {
	if t == nil || t.LoginBanner == nil {
		return ""
	}
	return *t.LoginBanner
}

// GetMotdBanner retrieves the value of the leaf MotdBanner from the OpenconfigSystem_System_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MotdBanner is set, it can safely use t.GetMotdBanner()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MotdBanner == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_State) GetMotdBanner() string {
	if t == nil || t.MotdBanner == nil {
		return ""
	}
	return *t.MotdBanner
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_TelnetServer represents the /openconfig-system/system/telnet-server YANG schema element.
type OpenconfigSystem_System_TelnetServer struct {
	ΛMetadata []ygot.Annotation                            `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_TelnetServer_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                            `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_TelnetServer_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                            `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_TelnetServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_TelnetServer) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_TelnetServer) GetOrCreateConfig() *OpenconfigSystem_System_TelnetServer_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_TelnetServer_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_TelnetServer) GetOrCreateState() *OpenconfigSystem_System_TelnetServer_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_TelnetServer_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_TelnetServer. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_TelnetServer) GetConfig() *OpenconfigSystem_System_TelnetServer_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_TelnetServer. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_TelnetServer) GetState() *OpenconfigSystem_System_TelnetServer_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_TelnetServer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_TelnetServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_TelnetServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_TelnetServer_Config represents the /openconfig-system/system/telnet-server/config YANG schema element.
type OpenconfigSystem_System_TelnetServer_Config struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enable        *bool             `path:"enable" module:"openconfig-system"`
	ΛEnable       []ygot.Annotation `path:"@enable" ygotAnnotation:"true"`
	RateLimit     *uint16           `path:"rate-limit" module:"openconfig-system"`
	ΛRateLimit    []ygot.Annotation `path:"@rate-limit" ygotAnnotation:"true"`
	SessionLimit  *uint16           `path:"session-limit" module:"openconfig-system"`
	ΛSessionLimit []ygot.Annotation `path:"@session-limit" ygotAnnotation:"true"`
	Timeout       *uint16           `path:"timeout" module:"openconfig-system"`
	ΛTimeout      []ygot.Annotation `path:"@timeout" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_TelnetServer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_TelnetServer_Config) IsYANGGoStruct() {}

// GetEnable retrieves the value of the leaf Enable from the OpenconfigSystem_System_TelnetServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enable is set, it can safely use t.GetEnable()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enable == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_TelnetServer_Config) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// GetRateLimit retrieves the value of the leaf RateLimit from the OpenconfigSystem_System_TelnetServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RateLimit is set, it can safely use t.GetRateLimit()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RateLimit == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_TelnetServer_Config) GetRateLimit() uint16 {
	if t == nil || t.RateLimit == nil {
		return 0
	}
	return *t.RateLimit
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the OpenconfigSystem_System_TelnetServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SessionLimit is set, it can safely use t.GetSessionLimit()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SessionLimit == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_TelnetServer_Config) GetSessionLimit() uint16 {
	if t == nil || t.SessionLimit == nil {
		return 0
	}
	return *t.SessionLimit
}

// GetTimeout retrieves the value of the leaf Timeout from the OpenconfigSystem_System_TelnetServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Timeout is set, it can safely use t.GetTimeout()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Timeout == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_TelnetServer_Config) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_TelnetServer_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_TelnetServer_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_TelnetServer_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_TelnetServer_State represents the /openconfig-system/system/telnet-server/state YANG schema element.
type OpenconfigSystem_System_TelnetServer_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enable        *bool             `path:"enable" module:"openconfig-system"`
	ΛEnable       []ygot.Annotation `path:"@enable" ygotAnnotation:"true"`
	RateLimit     *uint16           `path:"rate-limit" module:"openconfig-system"`
	ΛRateLimit    []ygot.Annotation `path:"@rate-limit" ygotAnnotation:"true"`
	SessionLimit  *uint16           `path:"session-limit" module:"openconfig-system"`
	ΛSessionLimit []ygot.Annotation `path:"@session-limit" ygotAnnotation:"true"`
	Timeout       *uint16           `path:"timeout" module:"openconfig-system"`
	ΛTimeout      []ygot.Annotation `path:"@timeout" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_TelnetServer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_TelnetServer_State) IsYANGGoStruct() {}

// GetEnable retrieves the value of the leaf Enable from the OpenconfigSystem_System_TelnetServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enable is set, it can safely use t.GetEnable()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enable == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_TelnetServer_State) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// GetRateLimit retrieves the value of the leaf RateLimit from the OpenconfigSystem_System_TelnetServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RateLimit is set, it can safely use t.GetRateLimit()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RateLimit == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_TelnetServer_State) GetRateLimit() uint16 {
	if t == nil || t.RateLimit == nil {
		return 0
	}
	return *t.RateLimit
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the OpenconfigSystem_System_TelnetServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SessionLimit is set, it can safely use t.GetSessionLimit()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SessionLimit == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_TelnetServer_State) GetSessionLimit() uint16 {
	if t == nil || t.SessionLimit == nil {
		return 0
	}
	return *t.SessionLimit
}

// GetTimeout retrieves the value of the leaf Timeout from the OpenconfigSystem_System_TelnetServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Timeout is set, it can safely use t.GetTimeout()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Timeout == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_TelnetServer_State) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_TelnetServer_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_TelnetServer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_TelnetServer_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE. An additional value named
// OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE int64

// IsYANGGoEnum ensures that OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE.
func (E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_UNSET corresponds to the value UNSET of OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE
	OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_UNSET E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE = 0
	// OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_AAA_ACCOUNTING_EVENT_COMMAND corresponds to the value AAA_ACCOUNTING_EVENT_COMMAND of OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE
	OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_AAA_ACCOUNTING_EVENT_COMMAND E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE = 1
	// OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_AAA_ACCOUNTING_EVENT_LOGIN corresponds to the value AAA_ACCOUNTING_EVENT_LOGIN of OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE
	OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_AAA_ACCOUNTING_EVENT_LOGIN E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE = 2
)

// E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE. An additional value named
// OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE int64

// IsYANGGoEnum ensures that OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE.
func (E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_UNSET corresponds to the value UNSET of OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
	OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_UNSET E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE = 0
	// OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_AAA_AUTHORIZATION_EVENT_COMMAND corresponds to the value AAA_AUTHORIZATION_EVENT_COMMAND of OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
	OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_AAA_AUTHORIZATION_EVENT_COMMAND E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE = 1
	// OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_AAA_AUTHORIZATION_EVENT_CONFIG corresponds to the value AAA_AUTHORIZATION_EVENT_CONFIG of OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
	OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_AAA_AUTHORIZATION_EVENT_CONFIG E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE = 2
)

// E_OpenconfigAaaTypes_AAA_METHOD_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigAaaTypes_AAA_METHOD_TYPE. An additional value named
// OpenconfigAaaTypes_AAA_METHOD_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAaaTypes_AAA_METHOD_TYPE int64

// IsYANGGoEnum ensures that OpenconfigAaaTypes_AAA_METHOD_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigAaaTypes_AAA_METHOD_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAaaTypes_AAA_METHOD_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAaaTypes_AAA_METHOD_TYPE.
func (E_OpenconfigAaaTypes_AAA_METHOD_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAaaTypes_AAA_METHOD_TYPE_UNSET corresponds to the value UNSET of OpenconfigAaaTypes_AAA_METHOD_TYPE
	OpenconfigAaaTypes_AAA_METHOD_TYPE_UNSET E_OpenconfigAaaTypes_AAA_METHOD_TYPE = 0
	// OpenconfigAaaTypes_AAA_METHOD_TYPE_LOCAL corresponds to the value LOCAL of OpenconfigAaaTypes_AAA_METHOD_TYPE
	OpenconfigAaaTypes_AAA_METHOD_TYPE_LOCAL E_OpenconfigAaaTypes_AAA_METHOD_TYPE = 1
	// OpenconfigAaaTypes_AAA_METHOD_TYPE_RADIUS_ALL corresponds to the value RADIUS_ALL of OpenconfigAaaTypes_AAA_METHOD_TYPE
	OpenconfigAaaTypes_AAA_METHOD_TYPE_RADIUS_ALL E_OpenconfigAaaTypes_AAA_METHOD_TYPE = 2
	// OpenconfigAaaTypes_AAA_METHOD_TYPE_TACACS_ALL corresponds to the value TACACS_ALL of OpenconfigAaaTypes_AAA_METHOD_TYPE
	OpenconfigAaaTypes_AAA_METHOD_TYPE_TACACS_ALL E_OpenconfigAaaTypes_AAA_METHOD_TYPE = 3
)

// E_OpenconfigAaaTypes_AAA_SERVER_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigAaaTypes_AAA_SERVER_TYPE. An additional value named
// OpenconfigAaaTypes_AAA_SERVER_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAaaTypes_AAA_SERVER_TYPE int64

// IsYANGGoEnum ensures that OpenconfigAaaTypes_AAA_SERVER_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigAaaTypes_AAA_SERVER_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAaaTypes_AAA_SERVER_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAaaTypes_AAA_SERVER_TYPE.
func (E_OpenconfigAaaTypes_AAA_SERVER_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAaaTypes_AAA_SERVER_TYPE_UNSET corresponds to the value UNSET of OpenconfigAaaTypes_AAA_SERVER_TYPE
	OpenconfigAaaTypes_AAA_SERVER_TYPE_UNSET E_OpenconfigAaaTypes_AAA_SERVER_TYPE = 0
	// OpenconfigAaaTypes_AAA_SERVER_TYPE_RADIUS corresponds to the value RADIUS of OpenconfigAaaTypes_AAA_SERVER_TYPE
	OpenconfigAaaTypes_AAA_SERVER_TYPE_RADIUS E_OpenconfigAaaTypes_AAA_SERVER_TYPE = 1
	// OpenconfigAaaTypes_AAA_SERVER_TYPE_TACACS corresponds to the value TACACS of OpenconfigAaaTypes_AAA_SERVER_TYPE
	OpenconfigAaaTypes_AAA_SERVER_TYPE_TACACS E_OpenconfigAaaTypes_AAA_SERVER_TYPE = 2
)

// E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES is a derived int64 type which is used to represent
// the enumerated node OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES. An additional value named
// OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES int64

// IsYANGGoEnum ensures that OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES implements the yang.GoEnum
// interface. This ensures that OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES.
func (E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES_UNSET corresponds to the value UNSET of OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
	OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES_UNSET E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES = 0
	// OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES_SYSTEM_ROLE_ADMIN corresponds to the value SYSTEM_ROLE_ADMIN of OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
	OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES_SYSTEM_ROLE_ADMIN E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES = 1
)

// E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY is a derived int64 type which is used to represent
// the enumerated node OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY. An additional value named
// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY int64

// IsYANGGoEnum ensures that OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY implements the yang.GoEnum
// interface. This ensures that OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY.
func (E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNSET corresponds to the value UNSET of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNSET E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 0
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_CRITICAL corresponds to the value CRITICAL of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_CRITICAL E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 1
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MAJOR corresponds to the value MAJOR of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MAJOR E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 2
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MINOR corresponds to the value MINOR of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MINOR E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 3
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNKNOWN corresponds to the value UNKNOWN of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNKNOWN E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 4
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_WARNING corresponds to the value WARNING of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_WARNING E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 5
)

// E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID is a derived int64 type which is used to represent
// the enumerated node OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID. An additional value named
// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID int64

// IsYANGGoEnum ensures that OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID implements the yang.GoEnum
// interface. This ensures that OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID.
func (E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_UNSET corresponds to the value UNSET of OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_UNSET E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID = 0
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_AIS corresponds to the value AIS of OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_AIS E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID = 1
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_EQPT corresponds to the value EQPT of OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_EQPT E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID = 2
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_LOS corresponds to the value LOS of OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_LOS E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID = 3
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_OTS corresponds to the value OTS of OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_OTS E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID = 4
)

// E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS is a derived int64 type which is used to represent
// the enumerated node OpenconfigPlatformTypes_COMPONENT_OPER_STATUS. An additional value named
// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS int64

// IsYANGGoEnum ensures that OpenconfigPlatformTypes_COMPONENT_OPER_STATUS implements the yang.GoEnum
// interface. This ensures that OpenconfigPlatformTypes_COMPONENT_OPER_STATUS can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPlatformTypes_COMPONENT_OPER_STATUS.
func (E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_UNSET corresponds to the value UNSET of OpenconfigPlatformTypes_COMPONENT_OPER_STATUS
	OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_UNSET E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS = 0
	// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_ACTIVE corresponds to the value ACTIVE of OpenconfigPlatformTypes_COMPONENT_OPER_STATUS
	OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_ACTIVE E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS = 1
	// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_DISABLED corresponds to the value DISABLED of OpenconfigPlatformTypes_COMPONENT_OPER_STATUS
	OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_DISABLED E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS = 2
	// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_INACTIVE corresponds to the value INACTIVE of OpenconfigPlatformTypes_COMPONENT_OPER_STATUS
	OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_INACTIVE E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS = 3
)

// E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT is a derived int64 type which is used to represent
// the enumerated node OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT. An additional value named
// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT int64

// IsYANGGoEnum ensures that OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT implements the yang.GoEnum
// interface. This ensures that OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT.
func (E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_UNSET corresponds to the value UNSET of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_UNSET E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 0
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_BACKPLANE corresponds to the value BACKPLANE of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_BACKPLANE E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 1
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CHASSIS corresponds to the value CHASSIS of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CHASSIS E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 2
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CONTROLLER_CARD corresponds to the value CONTROLLER_CARD of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CONTROLLER_CARD E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 3
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CPU corresponds to the value CPU of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CPU E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 4
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FABRIC corresponds to the value FABRIC of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FABRIC E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 5
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FAN corresponds to the value FAN of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FAN E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 6
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FRU corresponds to the value FRU of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FRU E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 7
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_INTEGRATED_CIRCUIT corresponds to the value INTEGRATED_CIRCUIT of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_INTEGRATED_CIRCUIT E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 8
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_LINECARD corresponds to the value LINECARD of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_LINECARD E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 9
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_PORT corresponds to the value PORT of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_PORT E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 10
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_POWER_SUPPLY corresponds to the value POWER_SUPPLY of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_POWER_SUPPLY E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 11
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_SENSOR corresponds to the value SENSOR of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_SENSOR E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 12
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_STORAGE corresponds to the value STORAGE of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_STORAGE E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 13
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_TRANSCEIVER corresponds to the value TRANSCEIVER of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_TRANSCEIVER E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 14
)

// E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT is a derived int64 type which is used to represent
// the enumerated node OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT. An additional value named
// OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT int64

// IsYANGGoEnum ensures that OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT implements the yang.GoEnum
// interface. This ensures that OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT.
func (E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_UNSET corresponds to the value UNSET of OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_UNSET E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT = 0
	// OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_OPERATING_SYSTEM corresponds to the value OPERATING_SYSTEM of OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_OPERATING_SYSTEM E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT = 1
)

// E_OpenconfigSystemLogging_SYSLOG_FACILITY is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystemLogging_SYSLOG_FACILITY. An additional value named
// OpenconfigSystemLogging_SYSLOG_FACILITY_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystemLogging_SYSLOG_FACILITY int64

// IsYANGGoEnum ensures that OpenconfigSystemLogging_SYSLOG_FACILITY implements the yang.GoEnum
// interface. This ensures that OpenconfigSystemLogging_SYSLOG_FACILITY can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystemLogging_SYSLOG_FACILITY) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystemLogging_SYSLOG_FACILITY.
func (E_OpenconfigSystemLogging_SYSLOG_FACILITY) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigSystemLogging_SYSLOG_FACILITY_UNSET corresponds to the value UNSET of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_UNSET E_OpenconfigSystemLogging_SYSLOG_FACILITY = 0
	// OpenconfigSystemLogging_SYSLOG_FACILITY_ALL corresponds to the value ALL of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_ALL E_OpenconfigSystemLogging_SYSLOG_FACILITY = 1
	// OpenconfigSystemLogging_SYSLOG_FACILITY_AUDIT corresponds to the value AUDIT of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_AUDIT E_OpenconfigSystemLogging_SYSLOG_FACILITY = 2
	// OpenconfigSystemLogging_SYSLOG_FACILITY_AUTH corresponds to the value AUTH of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_AUTH E_OpenconfigSystemLogging_SYSLOG_FACILITY = 3
	// OpenconfigSystemLogging_SYSLOG_FACILITY_AUTHPRIV corresponds to the value AUTHPRIV of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_AUTHPRIV E_OpenconfigSystemLogging_SYSLOG_FACILITY = 4
	// OpenconfigSystemLogging_SYSLOG_FACILITY_CONSOLE corresponds to the value CONSOLE of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_CONSOLE E_OpenconfigSystemLogging_SYSLOG_FACILITY = 5
	// OpenconfigSystemLogging_SYSLOG_FACILITY_KERNEL corresponds to the value KERNEL of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_KERNEL E_OpenconfigSystemLogging_SYSLOG_FACILITY = 6
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL0 corresponds to the value LOCAL0 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL0 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 7
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL1 corresponds to the value LOCAL1 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL1 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 8
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL2 corresponds to the value LOCAL2 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL2 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 9
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL3 corresponds to the value LOCAL3 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL3 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 10
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL4 corresponds to the value LOCAL4 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL4 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 11
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL5 corresponds to the value LOCAL5 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL5 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 12
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL6 corresponds to the value LOCAL6 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL6 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 13
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL7 corresponds to the value LOCAL7 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL7 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 14
	// OpenconfigSystemLogging_SYSLOG_FACILITY_MAIL corresponds to the value MAIL of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_MAIL E_OpenconfigSystemLogging_SYSLOG_FACILITY = 15
	// OpenconfigSystemLogging_SYSLOG_FACILITY_NTP corresponds to the value NTP of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_NTP E_OpenconfigSystemLogging_SYSLOG_FACILITY = 16
	// OpenconfigSystemLogging_SYSLOG_FACILITY_SYSLOG corresponds to the value SYSLOG of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_SYSLOG E_OpenconfigSystemLogging_SYSLOG_FACILITY = 17
	// OpenconfigSystemLogging_SYSLOG_FACILITY_SYSTEM_DAEMON corresponds to the value SYSTEM_DAEMON of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_SYSTEM_DAEMON E_OpenconfigSystemLogging_SYSLOG_FACILITY = 18
	// OpenconfigSystemLogging_SYSLOG_FACILITY_USER corresponds to the value USER of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_USER E_OpenconfigSystemLogging_SYSLOG_FACILITY = 19
)

// E_OpenconfigSystemLogging_SyslogSeverity is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystemLogging_SyslogSeverity. An additional value named
// OpenconfigSystemLogging_SyslogSeverity_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystemLogging_SyslogSeverity int64

// IsYANGGoEnum ensures that OpenconfigSystemLogging_SyslogSeverity implements the yang.GoEnum
// interface. This ensures that OpenconfigSystemLogging_SyslogSeverity can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystemLogging_SyslogSeverity) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystemLogging_SyslogSeverity.
func (E_OpenconfigSystemLogging_SyslogSeverity) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigSystemLogging_SyslogSeverity_UNSET corresponds to the value UNSET of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_UNSET E_OpenconfigSystemLogging_SyslogSeverity = 0
	// OpenconfigSystemLogging_SyslogSeverity_EMERGENCY corresponds to the value EMERGENCY of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_EMERGENCY E_OpenconfigSystemLogging_SyslogSeverity = 1
	// OpenconfigSystemLogging_SyslogSeverity_ALERT corresponds to the value ALERT of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_ALERT E_OpenconfigSystemLogging_SyslogSeverity = 2
	// OpenconfigSystemLogging_SyslogSeverity_CRITICAL corresponds to the value CRITICAL of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_CRITICAL E_OpenconfigSystemLogging_SyslogSeverity = 3
	// OpenconfigSystemLogging_SyslogSeverity_ERROR corresponds to the value ERROR of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_ERROR E_OpenconfigSystemLogging_SyslogSeverity = 4
	// OpenconfigSystemLogging_SyslogSeverity_WARNING corresponds to the value WARNING of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_WARNING E_OpenconfigSystemLogging_SyslogSeverity = 5
	// OpenconfigSystemLogging_SyslogSeverity_NOTICE corresponds to the value NOTICE of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_NOTICE E_OpenconfigSystemLogging_SyslogSeverity = 6
	// OpenconfigSystemLogging_SyslogSeverity_INFORMATIONAL corresponds to the value INFORMATIONAL of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_INFORMATIONAL E_OpenconfigSystemLogging_SyslogSeverity = 7
	// OpenconfigSystemLogging_SyslogSeverity_DEBUG corresponds to the value DEBUG of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_DEBUG E_OpenconfigSystemLogging_SyslogSeverity = 8
)

// E_OpenconfigSystem_NTP_AUTH_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystem_NTP_AUTH_TYPE. An additional value named
// OpenconfigSystem_NTP_AUTH_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystem_NTP_AUTH_TYPE int64

// IsYANGGoEnum ensures that OpenconfigSystem_NTP_AUTH_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigSystem_NTP_AUTH_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystem_NTP_AUTH_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystem_NTP_AUTH_TYPE.
func (E_OpenconfigSystem_NTP_AUTH_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigSystem_NTP_AUTH_TYPE_UNSET corresponds to the value UNSET of OpenconfigSystem_NTP_AUTH_TYPE
	OpenconfigSystem_NTP_AUTH_TYPE_UNSET E_OpenconfigSystem_NTP_AUTH_TYPE = 0
	// OpenconfigSystem_NTP_AUTH_TYPE_NTP_AUTH_MD5 corresponds to the value NTP_AUTH_MD5 of OpenconfigSystem_NTP_AUTH_TYPE
	OpenconfigSystem_NTP_AUTH_TYPE_NTP_AUTH_MD5 E_OpenconfigSystem_NTP_AUTH_TYPE = 1
)

// E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record. An additional value named
// OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record int64

// IsYANGGoEnum ensures that OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record implements the yang.GoEnum
// interface. This ensures that OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record.
func (E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record_UNSET corresponds to the value UNSET of OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record
	OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record_UNSET E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record = 0
	// OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record_START_STOP corresponds to the value START_STOP of OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record
	OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record_START_STOP E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record = 1
	// OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record_STOP corresponds to the value STOP of OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record
	OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record_STOP E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record = 2
)

// E_OpenconfigSystem_System_Cpus_Cpu_State_Index is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystem_System_Cpus_Cpu_State_Index. An additional value named
// OpenconfigSystem_System_Cpus_Cpu_State_Index_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystem_System_Cpus_Cpu_State_Index int64

// IsYANGGoEnum ensures that OpenconfigSystem_System_Cpus_Cpu_State_Index implements the yang.GoEnum
// interface. This ensures that OpenconfigSystem_System_Cpus_Cpu_State_Index can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystem_System_Cpus_Cpu_State_Index) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystem_System_Cpus_Cpu_State_Index.
func (E_OpenconfigSystem_System_Cpus_Cpu_State_Index) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigSystem_System_Cpus_Cpu_State_Index_UNSET corresponds to the value UNSET of OpenconfigSystem_System_Cpus_Cpu_State_Index
	OpenconfigSystem_System_Cpus_Cpu_State_Index_UNSET E_OpenconfigSystem_System_Cpus_Cpu_State_Index = 0
	// OpenconfigSystem_System_Cpus_Cpu_State_Index_ALL corresponds to the value ALL of OpenconfigSystem_System_Cpus_Cpu_State_Index
	OpenconfigSystem_System_Cpus_Cpu_State_Index_ALL E_OpenconfigSystem_System_Cpus_Cpu_State_Index = 1
)

// E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystem_System_GrpcServer_Config_ListenAddresses. An additional value named
// OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses int64

// IsYANGGoEnum ensures that OpenconfigSystem_System_GrpcServer_Config_ListenAddresses implements the yang.GoEnum
// interface. This ensures that OpenconfigSystem_System_GrpcServer_Config_ListenAddresses can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystem_System_GrpcServer_Config_ListenAddresses.
func (E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_UNSET corresponds to the value UNSET of OpenconfigSystem_System_GrpcServer_Config_ListenAddresses
	OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_UNSET E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses = 0
	// OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_ANY corresponds to the value ANY of OpenconfigSystem_System_GrpcServer_Config_ListenAddresses
	OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_ANY E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses = 1
)

// E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType. An additional value named
// OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType int64

// IsYANGGoEnum ensures that OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType implements the yang.GoEnum
// interface. This ensures that OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType.
func (E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_UNSET corresponds to the value UNSET of OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType
	OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_UNSET E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType = 0
	// OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_SERVER corresponds to the value SERVER of OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType
	OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_SERVER E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType = 1
	// OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_PEER corresponds to the value PEER of OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType
	OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_PEER E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType = 2
	// OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_POOL corresponds to the value POOL of OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType
	OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_POOL E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType = 3
)

// E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystem_System_SshServer_Config_ProtocolVersion. An additional value named
// OpenconfigSystem_System_SshServer_Config_ProtocolVersion_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion int64

// IsYANGGoEnum ensures that OpenconfigSystem_System_SshServer_Config_ProtocolVersion implements the yang.GoEnum
// interface. This ensures that OpenconfigSystem_System_SshServer_Config_ProtocolVersion can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystem_System_SshServer_Config_ProtocolVersion.
func (E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigSystem_System_SshServer_Config_ProtocolVersion_UNSET corresponds to the value UNSET of OpenconfigSystem_System_SshServer_Config_ProtocolVersion
	OpenconfigSystem_System_SshServer_Config_ProtocolVersion_UNSET E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion = 0
	// OpenconfigSystem_System_SshServer_Config_ProtocolVersion_V2 corresponds to the value V2 of OpenconfigSystem_System_SshServer_Config_ProtocolVersion
	OpenconfigSystem_System_SshServer_Config_ProtocolVersion_V2 E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion = 1
	// OpenconfigSystem_System_SshServer_Config_ProtocolVersion_V1 corresponds to the value V1 of OpenconfigSystem_System_SshServer_Config_ProtocolVersion
	OpenconfigSystem_System_SshServer_Config_ProtocolVersion_V1 E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion = 2
	// OpenconfigSystem_System_SshServer_Config_ProtocolVersion_V1_V2 corresponds to the value V1_V2 of OpenconfigSystem_System_SshServer_Config_ProtocolVersion
	OpenconfigSystem_System_SshServer_Config_ProtocolVersion_V1_V2 E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion = 3
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE": {
		1: {Name: "AAA_ACCOUNTING_EVENT_COMMAND", DefiningModule: "openconfig-aaa-types"},
		2: {Name: "AAA_ACCOUNTING_EVENT_LOGIN", DefiningModule: "openconfig-aaa-types"},
	},
	"E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE": {
		1: {Name: "AAA_AUTHORIZATION_EVENT_COMMAND", DefiningModule: "openconfig-aaa-types"},
		2: {Name: "AAA_AUTHORIZATION_EVENT_CONFIG", DefiningModule: "openconfig-aaa-types"},
	},
	"E_OpenconfigAaaTypes_AAA_METHOD_TYPE": {
		1: {Name: "LOCAL", DefiningModule: "openconfig-aaa-types"},
		2: {Name: "RADIUS_ALL", DefiningModule: "openconfig-aaa-types"},
		3: {Name: "TACACS_ALL", DefiningModule: "openconfig-aaa-types"},
	},
	"E_OpenconfigAaaTypes_AAA_SERVER_TYPE": {
		1: {Name: "RADIUS", DefiningModule: "openconfig-aaa"},
		2: {Name: "TACACS", DefiningModule: "openconfig-aaa"},
	},
	"E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES": {
		1: {Name: "SYSTEM_ROLE_ADMIN", DefiningModule: "openconfig-aaa-types"},
	},
	"E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY": {
		1: {Name: "CRITICAL", DefiningModule: "openconfig-alarm-types"},
		2: {Name: "MAJOR", DefiningModule: "openconfig-alarm-types"},
		3: {Name: "MINOR", DefiningModule: "openconfig-alarm-types"},
		4: {Name: "UNKNOWN", DefiningModule: "openconfig-alarm-types"},
		5: {Name: "WARNING", DefiningModule: "openconfig-alarm-types"},
	},
	"E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID": {
		1: {Name: "AIS", DefiningModule: "openconfig-alarm-types"},
		2: {Name: "EQPT", DefiningModule: "openconfig-alarm-types"},
		3: {Name: "LOS", DefiningModule: "openconfig-alarm-types"},
		4: {Name: "OTS", DefiningModule: "openconfig-alarm-types"},
	},
	"E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS": {
		1: {Name: "ACTIVE", DefiningModule: "openconfig-platform-types"},
		2: {Name: "DISABLED", DefiningModule: "openconfig-platform-types"},
		3: {Name: "INACTIVE", DefiningModule: "openconfig-platform-types"},
	},
	"E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT": {
		1:  {Name: "BACKPLANE", DefiningModule: "openconfig-platform-types"},
		2:  {Name: "CHASSIS", DefiningModule: "openconfig-platform-types"},
		3:  {Name: "CONTROLLER_CARD", DefiningModule: "openconfig-platform-types"},
		4:  {Name: "CPU", DefiningModule: "openconfig-platform-types"},
		5:  {Name: "FABRIC", DefiningModule: "openconfig-platform-types"},
		6:  {Name: "FAN", DefiningModule: "openconfig-platform-types"},
		7:  {Name: "FRU", DefiningModule: "openconfig-platform-types"},
		8:  {Name: "INTEGRATED_CIRCUIT", DefiningModule: "openconfig-platform-types"},
		9:  {Name: "LINECARD", DefiningModule: "openconfig-platform-types"},
		10: {Name: "PORT", DefiningModule: "openconfig-platform-types"},
		11: {Name: "POWER_SUPPLY", DefiningModule: "openconfig-platform-types"},
		12: {Name: "SENSOR", DefiningModule: "openconfig-platform-types"},
		13: {Name: "STORAGE", DefiningModule: "openconfig-platform-types"},
		14: {Name: "TRANSCEIVER", DefiningModule: "openconfig-platform-types"},
	},
	"E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT": {
		1: {Name: "OPERATING_SYSTEM", DefiningModule: "openconfig-platform-types"},
	},
	"E_OpenconfigSystemLogging_SYSLOG_FACILITY": {
		1:  {Name: "ALL", DefiningModule: "openconfig-system-logging"},
		2:  {Name: "AUDIT", DefiningModule: "openconfig-system-logging"},
		3:  {Name: "AUTH", DefiningModule: "openconfig-system-logging"},
		4:  {Name: "AUTHPRIV", DefiningModule: "openconfig-system-logging"},
		5:  {Name: "CONSOLE", DefiningModule: "openconfig-system-logging"},
		6:  {Name: "KERNEL", DefiningModule: "openconfig-system-logging"},
		7:  {Name: "LOCAL0", DefiningModule: "openconfig-system-logging"},
		8:  {Name: "LOCAL1", DefiningModule: "openconfig-system-logging"},
		9:  {Name: "LOCAL2", DefiningModule: "openconfig-system-logging"},
		10: {Name: "LOCAL3", DefiningModule: "openconfig-system-logging"},
		11: {Name: "LOCAL4", DefiningModule: "openconfig-system-logging"},
		12: {Name: "LOCAL5", DefiningModule: "openconfig-system-logging"},
		13: {Name: "LOCAL6", DefiningModule: "openconfig-system-logging"},
		14: {Name: "LOCAL7", DefiningModule: "openconfig-system-logging"},
		15: {Name: "MAIL", DefiningModule: "openconfig-system-logging"},
		16: {Name: "NTP", DefiningModule: "openconfig-system-logging"},
		17: {Name: "SYSLOG", DefiningModule: "openconfig-system-logging"},
		18: {Name: "SYSTEM_DAEMON", DefiningModule: "openconfig-system-logging"},
		19: {Name: "USER", DefiningModule: "openconfig-system-logging"},
	},
	"E_OpenconfigSystemLogging_SyslogSeverity": {
		1: {Name: "EMERGENCY"},
		2: {Name: "ALERT"},
		3: {Name: "CRITICAL"},
		4: {Name: "ERROR"},
		5: {Name: "WARNING"},
		6: {Name: "NOTICE"},
		7: {Name: "INFORMATIONAL"},
		8: {Name: "DEBUG"},
	},
	"E_OpenconfigSystem_NTP_AUTH_TYPE": {
		1: {Name: "NTP_AUTH_MD5", DefiningModule: "openconfig-system"},
	},
	"E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record": {
		1: {Name: "START_STOP"},
		2: {Name: "STOP"},
	},
	"E_OpenconfigSystem_System_Cpus_Cpu_State_Index": {
		1: {Name: "ALL"},
	},
	"E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses": {
		1: {Name: "ANY"},
	},
	"E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType": {
		1: {Name: "SERVER"},
		2: {Name: "PEER"},
		3: {Name: "POOL"},
	},
	"E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion": {
		1: {Name: "V2"},
		2: {Name: "V1"},
		3: {Name: "V1_V2"},
	},
}

var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0xbd, 0x5b, 0x73, 0x1a, 0xc7,
		0xd6, 0x3f, 0x7c, 0xaf, 0x4f, 0x41, 0x51, 0xfb, 0x42, 0xda, 0x8f, 0xc6, 0x02, 0x04, 0xc8, 0xf2,
		0x4d, 0x8a, 0xc8, 0x38, 0xd1, 0x13, 0x9d, 0x5e, 0x49, 0xce, 0xae, 0xc4, 0x62, 0xab, 0xc6, 0xd0,
		0x92, 0xe7, 0x0d, 0x0c, 0x3c, 0x33, 0x83, 0x63, 0xc5, 0xe6, 0xbb, 0xff, 0x8b, 0x01, 0x06, 0x10,
		0xa7, 0xee, 0xd5, 0xab, 0xe7, 0x00, 0x3f, 0xd7, 0xae, 0x6d, 0x59, 0xa1, 0x7b, 0x98, 0xee, 0x75,
		0xf8, 0xad, 0xf3, 0xf7, 0xbd, 0x5c, 0x2e, 0x97, 0xcb, 0x5f, 0xd9, 0x1d, 0x91, 0x7f, 0x97, 0xcb,
		0xb7, 0xc4, 0x57, 0xa7, 0x29, 0xf2, 0x87, 0xa3, 0xdf, 0xfe, 0xe6, 0xb8, 0xad, 0xfc, 0xbb, 0x5c,
		0x71, 0xfc, 0xcf, 0xb3, 0xae, 0xfb, 0xe4, 0x3c, 0xe7, 0xdf, 0xe5, 0x0a, 0xe3, 0x5f, 0xbc, 0x77,
		0xbc, 0xfc, 0xbb, 0xdc, 0x68, 0x8b, 0xf0, 0x17, 0xcd, 0x6e, 0xa7, 0xd7, 0x75, 0x85, 0x1b, 0xf8,
		0x73, 0xbf, 0x9f, 0x7b, 0xc4, 0xcc, 0x67, 0x0e, 0xe7, 0x3f, 0x31, 0xff, 0xb8, 0xe8, 0xd7, 0xaf,
		0x1f, 0x1b, 0xfd, 0x87, 0x1b, 0x4f, 0x3c, 0x39, 0xdf, 0x16, 0x9e, 0x34, 0xf7, 0xb4, 0x6e, 0xd3,
		0xea, 0xb5, 0xed, 0xe0, 0xa9, 0xeb, 0x75, 0x5e, 0x3d, 0x2e, 0xfc, 0xd8, 0x5d, 0xb7, 0xef, 0x35,
		0xc5, 0xd2, 0x2d, 0x46, 0x5f, 0x49, 0xbc, 0xfc, 0xdd, 0xf5, 0x86, 0xdf, 0x2a, 0xdf, 0x1b, 0x3d,
		0xed, 0x70, 0xf9, 0x07, 0x7f, 0xb5, 0xfd, 0x9a, 0xf7, 0xdc, 0xef, 0x08, 0x37, 0xc8, 0xbf, 0xcb,
		0x05, 0x5e, 0x5f, 0xac, 0xf8, 0xe0, 0xcc, 0xa7, 0xe6, 0xbe, 0xdc, 0xc2, 0xa7, 0x07, 0x73, 0xbf,
		0x19, 0xbc, 0x7a, 0xf7, 0xd7, 0x47, 0xbf, 0x78, 0x05, 0xab, 0x5f, 0x6a, 0xe1, 0x26, 0x56, 0xbd,
		0xd4, 0xf2, 0x0b, 0xd9, 0x78, 0x31, 0x32, 0x17, 0xa4, 0x78, 0x51, 0xb2, 0x17, 0xa6, 0x7c, 0x71,
		0xca, 0x17, 0xa8, 0x7e, 0x91, 0xcb, 0x2f, 0x74, 0xc5, 0xc5, 0x6e, 0xbc, 0xe0, 0xe8, 0x03, 0x9f,
		0xed, 0xe6, 0x5f, 0xbd, 0xb6, 0xed, 0x4a, 0x1c, 0xc6, 0xe4, 0x8c, 0xa7, 0x4b, 0x36, 0xbc, 0xdb,
		0xfa, 0x8b, 0x97, 0x26, 0x00, 0x15, 0x42, 0x20, 0x12, 0x84, 0x2a, 0x61, 0x90, 0x09, 0x84, 0x4c,
		0x28, 0x74, 0x82, 0x59, 0x4f, 0x38, 0x1b, 0x08, 0x48, 0x9a, 0x90, 0x66, 0x24, 0xc7, 0xf8, 0x36,
		0x25, 0x4f, 0x70, 0x2a, 0x46, 0xc2, 0x75, 0x92, 0xa7, 0x20, 0x47, 0x5a, 0xca, 0x24, 0x46, 0x21,
		0x35, 0x4d, 0x92, 0xa3, 0x92, 0x9e, 0x36, 0x09, 0x6a, 0x93, 0xa2, 0x3e, 0x49, 0xca, 0x91, 0xa6,
		0x24, 0x89, 0x4e, 0xbf, 0x8e, 0xeb, 0x76, 0x03, 0x3b, 0x70, 0xba, 0xae, 0xda, 0xfd, 0xf9, 0xcd,
		0x2f, 0xa2, 0x63, 0xf7, 0xec, 0xe0, 0xcb, 0xf0, 0x45, 0x8e, 0xba, 0x3d, 0xe1, 0x8e, 0x88, 0x32,
		0x7a, 0xa3, 0xa3, 0x29, 0xea, 0x98, 0xfe, 0x78, 0x14, 0xc9, 0xc3, 0x23, 0x25, 0x1a, 0x1e, 0x3d,
		0x33, 0xf0, 0xfa, 0xcd, 0xc0, 0x1d, 0x53, 0xce, 0x75, 0xf4, 0xc8, 0x9b, 0xf1, 0x13, 0x1f, 0xcf,
		0xa2, 0x27, 0x4e, 0x7f, 0x7c, 0xfc, 0x79, 0xf2, 0xc4, 0xc7, 0x31, 0x61, 0xef, 0xf1, 0x9c, 0xb2,
		0xc4, 0x09, 0xe7, 0xfd, 0xc0, 0x0e, 0x84, 0x3a, 0x7b, 0x8f, 0x96, 0x19, 0xe6, 0xee, 0x12, 0xb8,
		0x1b, 0xdc, 0x6d, 0x8c, 0xbb, 0x55, 0x48, 0x98, 0x85, 0xb9, 0xef, 0xc2, 0x07, 0x72, 0xf1, 0xb6,
		0x96, 0xfa, 0x57, 0x3c, 0x75, 0xfd, 0xd3, 0xce, 0x4b, 0x89, 0x22, 0xad, 0xf3, 0x5d, 0x7f, 0xb2,
		0xab, 0xcf, 0x6b, 0xcd, 0x59, 0xe5, 0x9b, 0x5f, 0x6c, 0xdf, 0x77, 0x7c, 0x79, 0x30, 0x3d, 0x59,
		0x00, 0x28, 0x0d, 0x28, 0x0d, 0x28, 0x0d, 0x65, 0xbb, 0xdb, 0xca, 0x76, 0x2c, 0x0d, 0x63, 0x03,
		0xd2, 0x67, 0xa3, 0xe7, 0x01, 0x46, 0x03, 0x46, 0x83, 0xb3, 0x63, 0xe1, 0xec, 0x98, 0x40, 0xf4,
		0x84, 0xb1, 0x77, 0x10, 0x42, 0xcb, 0x21, 0x4a, 0xfd, 0xb3, 0x35, 0x02, 0x9f, 0xe5, 0x10, 0x8f,
		0x1a, 0xd2, 0x01, 0x78, 0xde, 0x45, 0xf0, 0x3c, 0xa6, 0x6a, 0x45, 0xfd, 0x1a, 0xae, 0x52, 0x53,
		0xaf, 0x05, 0x00, 0x67, 0xa8, 0xd7, 0xd7, 0x5f, 0xe7, 0xfe, 0xa5, 0x27, 0x68, 0x37, 0xe7, 0x07,
		0x9e, 0xe3, 0x2a, 0x41, 0xdf, 0x89, 0x78, 0x7b, 0xbb, 0x5b, 0x6a, 0x4e, 0xd6, 0x44, 0xa0, 0x6a,
		0x39, 0x09, 0x93, 0x80, 0xa8, 0xe4, 0x7a, 0x7d, 0x05, 0x0d, 0xd7, 0xeb, 0x43, 0xbd, 0x41, 0xbd,
		0xc1, 0x37, 0x04, 0x15, 0xb7, 0xeb, 0x16, 0x64, 0xaf, 0x1f, 0x9f, 0x5f, 0xa8, 0xd7, 0x87, 0x4f,
		0x08, 0x3e, 0x21, 0x70, 0xb4, 0x71, 0x8e, 0x8e, 0xcb, 0x1f, 0xd4, 0xeb, 0xef, 0xa4, 0x2f, 0x68,
		0x23, 0x7a, 0xd4, 0x3b, 0x53, 0x13, 0xf0, 0xf8, 0xc9, 0xfe, 0xec, 0x39, 0x4d, 0x79, 0x84, 0x3c,
		0xfe, 0x3c, 0x40, 0x32, 0x40, 0x32, 0x40, 0x32, 0x54, 0xea, 0x6e, 0xab, 0xd4, 0x91, 0x30, 0x8c,
		0x0d, 0x27, 0x7f, 0x08, 0x1f, 0x07, 0xa8, 0x0c, 0xa8, 0x0c, 0xbe, 0x8e, 0x83, 0xaf, 0x63, 0x42,
		0xcb, 0x63, 0xb6, 0xde, 0x41, 0xc0, 0x2c, 0x05, 0x26, 0xb5, 0x4f, 0xd6, 0x0c, 0x6c, 0x76, 0x55,
		0x30, 0xb3, 0x0b, 0xc0, 0x0c, 0xc0, 0x0c, 0xc0, 0x0c, 0xc5, 0xba, 0xf3, 0x8a, 0xd5, 0x8d, 0x11,
		0x2d, 0xbb, 0x80, 0xca, 0x80, 0xca, 0xe0, 0x68, 0xe3, 0x1c, 0x1d, 0x1b, 0x4e, 0x76, 0x77, 0x13,
		0x24, 0xbb, 0x26, 0x11, 0xb2, 0x6b, 0x02, 0x1e, 0x3b, 0x6e, 0x20, 0x9e, 0x3d, 0x3b, 0x10, 0x2d,
		0xab, 0xe9, 0x78, 0xcd, 0xbe, 0x13, 0xc8, 0xa3, 0xe5, 0x25, 0x6b, 0x01, 0x9e, 0x01, 0x9e, 0x01,
		0x9e, 0xa1, 0x6a, 0x77, 0x5b, 0xd5, 0x2e, 0x0a, 0xc6, 0xd8, 0xb0, 0xf4, 0x79, 0xf4, 0xe8, 0xb3,
		0xd1, 0x93, 0x81, 0xac, 0x81, 0xac, 0xc1, 0xee, 0x71, 0xb3, 0x7b, 0x4c, 0x40, 0x7b, 0x91, 0xdb,
		0x77, 0x10, 0x76, 0x2b, 0xc3, 0x50, 0xce, 0x03, 0x37, 0x81, 0xc9, 0xa5, 0x4a, 0x34, 0x54, 0x4a,
		0x33, 0x24, 0x4b, 0x32, 0x80, 0xbb, 0xb3, 0x80, 0xbb, 0xa5, 0x4b, 0x28, 0xa2, 0x93, 0x6f, 0x0b,
		0xfb, 0xc9, 0x13, 0x4f, 0x32, 0xa7, 0x3e, 0x51, 0xab, 0x27, 0x12, 0x9f, 0xbd, 0x19, 0x73, 0xea,
		0x9b, 0x37, 0x63, 0x74, 0x73, 0x14, 0x92, 0xa2, 0x01, 0x86, 0xe8, 0x75, 0x3d, 0x05, 0xb3, 0x34,
		0xfc, 0x34, 0x0c, 0x51, 0x18, 0xa2, 0x30, 0x44, 0x81, 0x4c, 0x77, 0x1b, 0x99, 0x0e, 0x45, 0x61,
		0x6c, 0xa6, 0xe7, 0x4d, 0xd7, 0x83, 0xb5, 0x09, 0x6b, 0x13, 0x3c, 0x1d, 0x03, 0x4f, 0xc7, 0x64,
		0x5f, 0x86, 0x2c, 0xbd, 0x83, 0x26, 0xa5, 0x04, 0x84, 0xd4, 0x3c, 0x55, 0x33, 0x30, 0xf9, 0x6f,
		0xe1, 0x59, 0x7e, 0xbf, 0xd7, 0x6b, 0xbf, 0xa8, 0xc0, 0xe5, 0x99, 0x55, 0x80, 0xcd, 0x80, 0xcd,
		0x80, 0xcd, 0x50, 0xb1, 0xbb, 0xae, 0x62, 0xa7, 0x22, 0x31, 0x46, 0xf8, 0xfc, 0xb7, 0xf0, 0xee,
		0xc2, 0x67, 0x02, 0x45, 0x03, 0x45, 0x83, 0xc5, 0xe3, 0x63, 0xf1, 0xd8, 0xd0, 0xf4, 0x94, 0xc3,
		0x77, 0x12, 0x54, 0x4b, 0x03, 0x4d, 0x9e, 0x43, 0x36, 0x82, 0xb1, 0xbd, 0x6e, 0x4f, 0x78, 0x81,
		0x23, 0x14, 0x7a, 0x19, 0xcf, 0xac, 0x01, 0xbe, 0x06, 0xbe, 0x5e, 0x41, 0x52, 0x2f, 0xea, 0xda,
		0x37, 0x5a, 0x09, 0x8c, 0x0d, 0x05, 0xac, 0xa9, 0x80, 0x65, 0xc9, 0x95, 0x6a, 0x16, 0xea, 0x99,
		0x87, 0x44, 0x12, 0x26, 0x93, 0xb2, 0x0e, 0x49, 0x33, 0x91, 0xb6, 0x2e, 0x89, 0xb3, 0x91, 0x3a,
		0x1b, 0xc9, 0xf3, 0x91, 0xbe, 0x1a, 0x0b, 0x28, 0xb2, 0x02, 0x99, 0x25, 0xa2, 0x85, 0x4a, 0x3d,
		0x36, 0x57, 0x92, 0x8d, 0x42, 0xcf, 0xcd, 0x55, 0x6c, 0x52, 0x20, 0x2e, 0xa7, 0xb2, 0x0b, 0x07,
		0xdb, 0x30, 0xb3, 0x0f, 0x17, 0x1b, 0xb1, 0xb3, 0x13, 0x3b, 0x5b, 0xf1, 0xb3, 0x17, 0x8d, 0xcd,
		0x88, 0xec, 0x16, 0x7d, 0x7d, 0xe5, 0x1e, 0xa1, 0x6b, 0xbc, 0x13, 0x8a, 0x3d, 0x43, 0x57, 0xaa,
		0x9b, 0xb7, 0x7b, 0xf1, 0x9c, 0x1b, 0xe1, 0xcc, 0xf2, 0x5f, 0xed, 0x76, 0x9f, 0x41, 0xdc, 0x8c,
		0xb6, 0x81, 0xbc, 0x81, 0xbc, 0x81, 0xbc, 0x21, 0x52, 0x4e, 0xdf, 0x75, 0xba, 0x2e, 0x87, 0xb8,
		0x39, 0xd5, 0xd8, 0x63, 0xfc, 0x3a, 0x9f, 0xb4, 0xee, 0x54, 0x8f, 0x66, 0x79, 0x85, 0x30, 0x93,
		0x30, 0xd6, 0x24, 0x13, 0x03, 0x27, 0xf3, 0xb9, 0xdb, 0x6d, 0x0b, 0xdb, 0xe5, 0x3c, 0x9a, 0xe2,
		0x96, 0x1c, 0x8d, 0xe3, 0x06, 0xd5, 0x32, 0xe3, 0xc1, 0x94, 0x19, 0xb6, 0xba, 0xb5, 0xdd, 0x67,
		0x7d, 0xce, 0xe2, 0x3b, 0xac, 0xe8, 0x8b, 0x5d, 0x3a, 0xae, 0xb6, 0x9a, 0x61, 0x32, 0xb4, 0x37,
		0x6e, 0xfb, 0xfb, 0x18, 0xac, 0x9c, 0x96, 0x4a, 0xc7, 0xc7, 0x27, 0xa5, 0xc2, 0x71, 0xf5, 0x6d,
		0xa5, 0x7c, 0x72, 0x52, 0x79, 0x5b, 0x78, 0xcb, 0xfc, 0xa4, 0x0f, 0x9e, 0xdd, 0x0c, 0x9c, 0xae,
		0xfb, 0xde, 0x79, 0x76, 0xc2, 0x89, 0xe9, 0x05, 0xb6, 0xfd, 0x07, 0x87, 0x8c, 0x97, 0x67, 0x7f,
		0x33, 0x76, 0x79, 0x85, 0xd8, 0x2e, 0xef, 0x24, 0x43, 0x97, 0xb7, 0x97, 0x8e, 0x5d, 0x1a, 0x5b,
		0x22, 0xaa, 0xfb, 0xdc, 0xb2, 0xfa, 0x2d, 0x64, 0x75, 0xba, 0xd8, 0xbd, 0x00, 0xc9, 0x9c, 0x95,
		0xab, 0x2a, 0xbe, 0x2d, 0x97, 0xab, 0x27, 0xe5, 0x72, 0xe1, 0xe4, 0xf8, 0xa4, 0x70, 0x5a, 0xa9,
		0x14, 0xab, 0xc5, 0x0a, 0x44, 0xf3, 0xae, 0x8a, 0xe6, 0x96, 0x68, 0x3a, 0x1d, 0xbb, 0xcd, 0x2a,
		0x9d, 0x8b, 0x25, 0x86, 0xbd, 0x16, 0x68, 0xa8, 0x04, 0x99, 0x4f, 0xbb, 0x8e, 0x12, 0x64, 0x7e,
		0x56, 0x64, 0xfe, 0x31, 0xae, 0x6a, 0x4b, 0x04, 0xfc, 0x5e, 0xbc, 0xcf, 0x1d, 0xa4, 0x2c, 0x2e,
		0x4a, 0xcc, 0xd5, 0x8b, 0xd6, 0x93, 0x13, 0xc8, 0xa2, 0x3c, 0xaa, 0xc9, 0x8f, 0x84, 0xec, 0xdc,
		0xe9, 0xb7, 0xa0, 0xa5, 0x97, 0x45, 0xdf, 0x61, 0xf2, 0xa3, 0x5a, 0xb6, 0xae, 0xfa, 0x0d, 0x29,
		0xdc, 0x0e, 0x2d, 0xf0, 0xac, 0x13, 0x70, 0x26, 0xe2, 0x59, 0xe4, 0x63, 0x20, 0x1f, 0x43, 0x5d,
		0xee, 0x90, 0x03, 0x35, 0x84, 0x4e, 0x08, 0x2b, 0xe1, 0x2f, 0xc1, 0xd3, 0x45, 0xea, 0x94, 0x10,
		0x8f, 0xc0, 0x50, 0x4b, 0xfb, 0x5f, 0x38, 0x4f, 0xd5, 0xc4, 0xe9, 0x1c, 0x47, 0x0a, 0x57, 0x09,
		0x22, 0x03, 0x22, 0x43, 0xf2, 0x6b, 0x92, 0x53, 0xb8, 0x46, 0x7c, 0xda, 0xf7, 0xec, 0xcf, 0x6d,
		0x86, 0xdc, 0x8a, 0xb9, 0xdd, 0x90, 0x62, 0x81, 0x14, 0x8b, 0xc4, 0xd8, 0x4d, 0xcf, 0x86, 0x49,
		0x3e, 0xc5, 0x42, 0x3f, 0x66, 0xae, 0x19, 0x2b, 0x8f, 0x27, 0xa7, 0x0b, 0x19, 0xa4, 0x10, 0x37,
		0x10, 0x37, 0xc8, 0x20, 0x45, 0x06, 0x29, 0xe4, 0x0d, 0xe4, 0xcd, 0xee, 0xc8, 0x1b, 0x64, 0x90,
		0x9a, 0x10, 0xc2, 0x4c, 0xc2, 0x58, 0x93, 0x4c, 0x0c, 0x9c, 0x0c, 0x32, 0x48, 0x57, 0x1e, 0x0d,
		0x32, 0x48, 0x15, 0xbe, 0x18, 0x32, 0x48, 0x97, 0x3d, 0x09, 0x31, 0x6b, 0x64, 0x90, 0xf2, 0x81,
		0x0b, 0xfe, 0x5d, 0x90, 0x41, 0xba, 0x82, 0x6a, 0x91, 0x41, 0x9a, 0x32, 0x76, 0x47, 0x36, 0x51,
		0x66, 0xae, 0x0a, 0x19, 0xa4, 0x10, 0xcd, 0xc8, 0x20, 0xdd, 0x21, 0x99, 0x8f, 0x0c, 0x52, 0x64,
		0x90, 0x42, 0xc0, 0xc7, 0x2c, 0xe0, 0x91, 0x41, 0x9a, 0x9a, 0x0c, 0x52, 0x4a, 0x0e, 0x53, 0x8e,
		0x37, 0x81, 0x54, 0xa1, 0x19, 0xa4, 0xfa, 0xfd, 0xf0, 0xb6, 0x09, 0xfb, 0x4d, 0xbc, 0x28, 0x46,
		0x96, 0xf3, 0x17, 0x8e, 0x1f, 0xd4, 0x82, 0x40, 0xb1, 0xbd, 0xd8, 0xa5, 0xe3, 0xd6, 0xdb, 0xa2,
		0x33, 0x3c, 0xbd, 0xfc, 0xbb, 0x9c, 0xdb, 0x6f, 0xb7, 0x15, 0xd2, 0xda, 0x2e, 0xed, 0x6f, 0xf4,
		0xc5, 0xd7, 0x5e, 0x4b, 0x78, 0xa2, 0xf5, 0xf3, 0xcb, 0x78, 0x69, 0xb6, 0xfb, 0x9c, 0x2e, 0x52,
		0x7c, 0x0c, 0x8d, 0x4e, 0x17, 0x69, 0x7c, 0xc7, 0x5a, 0x9d, 0xca, 0x76, 0xfc, 0x64, 0x39, 0x64,
		0x13, 0x7d, 0x4e, 0xe5, 0x12, 0x43, 0x95, 0x12, 0x41, 0x95, 0xbb, 0x9b, 0x96, 0xd0, 0xdd, 0x54,
		0x42, 0xa0, 0xa4, 0xbc, 0xbb, 0xa9, 0xdd, 0x6e, 0x77, 0x9b, 0xe1, 0x70, 0xc6, 0xb0, 0xff, 0xaf,
		0x7a, 0x93, 0xd3, 0xd7, 0x1b, 0xa8, 0xf5, 0x3a, 0x2d, 0xa0, 0xd7, 0x29, 0x7a, 0x9d, 0xbe, 0xfe,
		0x3a, 0xca, 0xf1, 0xfa, 0x39, 0x57, 0xf5, 0x71, 0x49, 0xe5, 0xd2, 0xc6, 0x74, 0xa8, 0x10, 0xde,
		0x20, 0xba, 0x21, 0x08, 0x30, 0x5a, 0xc7, 0xad, 0xa0, 0x9b, 0xb0, 0xa3, 0x69, 0x7b, 0x72, 0xd8,
		0x98, 0x94, 0x54, 0x29, 0x1d, 0xf3, 0x9e, 0xeb, 0xc8, 0xca, 0xa5, 0xd3, 0xf2, 0x69, 0xf5, 0xa4,
		0x74, 0x5a, 0x49, 0xf0, 0xec, 0x0c, 0x59, 0x2b, 0x8d, 0x18, 0x67, 0x5e, 0xb4, 0x84, 0xdf, 0xf4,
		0x9c, 0x9e, 0x12, 0x18, 0x9f, 0xf1, 0x8c, 0x4e, 0x17, 0x43, 0x25, 0x41, 0x25, 0x25, 0xa6, 0x92,
		0x94, 0xb3, 0xa3, 0x14, 0xb3, 0xa0, 0x78, 0x78, 0x4d, 0x74, 0x7a, 0x94, 0x0e, 0xf7, 0xa3, 0x65,
		0xb2, 0x2d, 0xcc, 0xc5, 0x93, 0xdd, 0x6f, 0x87, 0x37, 0xfa, 0x64, 0xb7, 0x7d, 0x01, 0xbe, 0x04,
		0x5f, 0x26, 0xc7, 0x97, 0xea, 0xb9, 0x79, 0x8a, 0x39, 0x78, 0x4c, 0x8c, 0xf9, 0x7f, 0x7d, 0xa7,
		0x37, 0x3c, 0x70, 0xeb, 0xc9, 0x76, 0xda, 0x7d, 0x8f, 0x30, 0x04, 0x6a, 0x71, 0x8b, 0xdd, 0x66,
		0x58, 0xbb, 0x6d, 0x7b, 0x1d, 0x7f, 0x27, 0xd9, 0x75, 0xfc, 0xea, 0x60, 0x56, 0xd3, 0xcc, 0xda,
		0x71, 0xfc, 0x8e, 0x1d, 0x34, 0xbf, 0xe8, 0x70, 0x6b, 0xb4, 0x07, 0xd8, 0x15, 0xec, 0x0a, 0x76,
		0xe5, 0x67, 0xd7, 0x27, 0xc7, 0xeb, 0xfc, 0x6d, 0x7b, 0xc2, 0xfa, 0x2a, 0x3c, 0x9f, 0x64, 0x65,
		0x2e, 0xec, 0x00, 0x48, 0x0b, 0x48, 0x0b, 0x53, 0x73, 0xed, 0x33, 0xbf, 0xd8, 0x5e, 0x4b, 0x8f,
		0xeb, 0x16, 0x76, 0x00, 0xd7, 0x81, 0xeb, 0xc0, 0x75, 0x6b, 0x9f, 0xe9, 0xb4, 0xd4, 0xf9, 0xcc,
		0x69, 0x81, 0xb3, 0xc0, 0x59, 0xe0, 0xac, 0xf5, 0xcf, 0x0c, 0xc3, 0xdf, 0x24, 0x3d, 0x16, 0xad,
		0x04, 0x97, 0x81, 0xcb, 0xc0, 0x65, 0x6b, 0x9f, 0xd9, 0x11, 0x9d, 0xae, 0x47, 0x88, 0x50, 0x8c,
		0xd7, 0x61, 0x02, 0x2f, 0x38, 0x4c, 0x93, 0xc3, 0x94, 0x27, 0xf0, 0xda, 0x5f, 0x6d, 0xa7, 0x4d,
		0x6a, 0x50, 0x37, 0x4d, 0xae, 0x8a, 0xb6, 0x40, 0xdf, 0x57, 0x43, 0x84, 0xce, 0x46, 0xf0, 0x6c,
		0x84, 0xcf, 0xc7, 0x00, 0x6a, 0x8c, 0xa0, 0xc8, 0x10, 0x74, 0xd5, 0xb3, 0x70, 0xf3, 0xe4, 0x0a,
		0x63, 0x8d, 0x8a, 0x62, 0xcd, 0x6a, 0x32, 0x8d, 0x66, 0x32, 0x1c, 0xd5, 0x62, 0x4c, 0x65, 0xa6,
		0x5c, 0x25, 0x46, 0x9c, 0x25, 0x45, 0x1a, 0xd5, 0x5e, 0x2c, 0xd5, 0x5d, 0xdc, 0x47, 0xcb, 0x5f,
		0xb1, 0xcb, 0x7a, 0xda, 0x31, 0x15, 0x2c, 0x35, 0x52, 0xd0, 0x4d, 0xb9, 0x1f, 0x38, 0x6d, 0xe7,
		0x1f, 0xd1, 0xa2, 0xeb, 0xe3, 0x68, 0x07, 0xa8, 0x63, 0xa8, 0x63, 0xa8, 0x63, 0xa8, 0x63, 0xa8,
		0x63, 0xa8, 0x63, 0xa8, 0x63, 0x53, 0x26, 0x77, 0xdc, 0xd5, 0x98, 0x61, 0x99, 0xdc, 0x91, 0x92,
		0xcb, 0x28, 0x47, 0xaf, 0x10, 0x0c, 0xcb, 0x8a, 0x1f, 0x2f, 0x47, 0x4f, 0x8b, 0xd3, 0x95, 0xf6,
		0xf4, 0x6c, 0xb5, 0x54, 0xe6, 0x4a, 0x4c, 0x9d, 0x69, 0x93, 0x95, 0x70, 0x58, 0xc3, 0x9d, 0xa6,
		0xc9, 0xdb, 0x74, 0x87, 0x75, 0x4b, 0xad, 0x21, 0xc0, 0xd4, 0x5d, 0xad, 0xb0, 0xe6, 0xc6, 0x0e,
		0x02, 0xe1, 0xb9, 0xca, 0x78, 0x24, 0xff, 0xdf, 0x4f, 0x05, 0xeb, 0xb4, 0xf1, 0xbd, 0x3c, 0x78,
		0x78, 0xb0, 0x46, 0x3f, 0x96, 0x66, 0x7f, 0xfc, 0x57, 0x3e, 0x95, 0xa5, 0x36, 0x43, 0xc6, 0x56,
		0xea, 0x69, 0x3f, 0x27, 0x12, 0x54, 0xba, 0x0d, 0x40, 0x24, 0x40, 0x24, 0xf0, 0x8b, 0x84, 0x6c,
		0xc4, 0xb0, 0x68, 0x1c, 0x06, 0xee, 0x02, 0x77, 0x81, 0xbb, 0x36, 0x73, 0x57, 0xb7, 0x27, 0x3c,
		0x6b, 0x88, 0xe0, 0xfb, 0xbe, 0x3a, 0x93, 0xcd, 0x2e, 0x06, 0xaf, 0x81, 0xd7, 0x12, 0xe3, 0x35,
		0xa7, 0x25, 0xdc, 0xc0, 0x09, 0x5e, 0xd4, 0xc6, 0x20, 0x46, 0x0c, 0xa7, 0xe0, 0xca, 0xc8, 0x9f,
		0x8f, 0x1f, 0xf5, 0xb3, 0xed, 0x6b, 0x84, 0xa8, 0xcf, 0xae, 0x2f, 0x6f, 0xae, 0xaf, 0xea, 0x57,
		0xf7, 0x8f, 0xd7, 0x37, 0xf5, 0xdb, 0xc7, 0xbb, 0xfb, 0xda, 0xfd, 0xc7, 0x3b, 0xd5, 0xfb, 0x0f,
		0x9d, 0x33, 0x3e, 0xc9, 0xfb, 0xa7, 0x39, 0x14, 0xe5, 0xfc, 0xaa, 0x76, 0x76, 0x7f, 0xfe, 0x7b,
		0x3d, 0x1f, 0x47, 0x7b, 0x02, 0xcd, 0xef, 0xfa, 0xfe, 0xfc, 0xae, 0xf6, 0xf3, 0x45, 0xfd, 0x7d,
		0x16, 0xbe, 0x2b, 0xf9, 0x54, 0xf7, 0xcc, 0xb8, 0xb1, 0x06, 0x31, 0x6a, 0xa2, 0x9e, 0xed, 0x8d,
		0x44, 0x91, 0xa2, 0x12, 0x1a, 0xaf, 0x83, 0xfe, 0x81, 0xfe, 0x49, 0x4c, 0xff, 0xa8, 0x8f, 0xe0,
		0xa5, 0x8c, 0xde, 0x9d, 0x1d, 0xb9, 0x4b, 0x99, 0xba, 0xcb, 0xc6, 0xa7, 0x81, 0xe5, 0x76, 0x49,
		0x8c, 0x1a, 0x2e, 0x04, 0xa7, 0x82, 0x53, 0x61, 0x95, 0xad, 0x7d, 0xa6, 0x27, 0x3a, 0xdd, 0xaf,
		0x4a, 0x49, 0x90, 0xd1, 0x0b, 0x4e, 0x97, 0x82, 0xcf, 0xc0, 0x67, 0x89, 0xf1, 0x59, 0x46, 0x8a,
		0x99, 0x7d, 0xe1, 0x39, 0x76, 0x9b, 0xa4, 0xce, 0xa6, 0x4b, 0xc1, 0x68, 0x60, 0x34, 0x28, 0xb4,
		0xf5, 0x7c, 0xd6, 0x7d, 0x0a, 0xf4, 0xca, 0x97, 0x17, 0x76, 0x00, 0xd7, 0x81, 0xeb, 0xc0, 0x75,
		0x6b, 0x9f, 0x19, 0x88, 0x4e, 0x4f, 0x78, 0x76, 0x40, 0x6a, 0x80, 0x35, 0xbb, 0x18, 0x85, 0x60,
		0xe0, 0x35, 0x4d, 0x5e, 0x53, 0x2f, 0x04, 0x6b, 0xdb, 0x5e, 0xc7, 0xf2, 0xc5, 0x57, 0xe1, 0x39,
		0x0a, 0x5d, 0x16, 0x17, 0x2e, 0xfe, 0xd5, 0x3e, 0xc8, 0x41, 0x37, 0x44, 0xf2, 0x6c, 0xa4, 0xcf,
		0xc6, 0x02, 0x7c, 0xac, 0xa0, 0xc6, 0x12, 0x8a, 0xac, 0x41, 0x57, 0x47, 0x0b, 0x37, 0x4f, 0x8b,
		0x83, 0x2d, 0xc8, 0x6f, 0x42, 0x6a, 0xaf, 0x5e, 0x5c, 0x6c, 0xe1, 0x45, 0xae, 0x6f, 0xea, 0x57,
		0x67, 0xd7, 0x57, 0x1f, 0xce, 0x7f, 0x79, 0xac, 0x5d, 0xd4, 0x6e, 0x2f, 0x1f, 0xef, 0xea, 0xbf,
		0xd7, 0x6f, 0xcf, 0xef, 0xff, 0xc8, 0xeb, 0xb4, 0x99, 0xf6, 0xb5, 0xc6, 0xa0, 0x69, 0x66, 0x64,
		0x4f, 0x5e, 0xed, 0x3f, 0xb5, 0xdb, 0xab, 0xf3, 0xab, 0x5f, 0xf2, 0x49, 0xe4, 0x96, 0x33, 0xbd,
		0xc2, 0xe5, 0xf9, 0xd5, 0xf5, 0x6d, 0xa6, 0x5f, 0xa0, 0xf6, 0xbf, 0xd9, 0x7e, 0x81, 0x8f, 0x57,
		0xbf, 0x5d, 0x5d, 0xff, 0xe7, 0x2a, 0xcb, 0xaf, 0x70, 0x76, 0x7b, 0x7e, 0x7f, 0x7e, 0x56, 0xbb,
		0xc8, 0xc7, 0x9c, 0xf6, 0xdf, 0x48, 0x4d, 0x5b, 0x78, 0x95, 0x2a, 0xbc, 0x31, 0x8a, 0x51, 0x4b,
		0xd4, 0x59, 0x85, 0x85, 0x54, 0x32, 0x76, 0x80, 0x84, 0x80, 0x84, 0x32, 0x88, 0x84, 0xd4, 0xfd,
		0xcf, 0x0b, 0x28, 0xa8, 0x98, 0x1a, 0xb6, 0x0f, 0xbe, 0x78, 0xc2, 0xff, 0xd2, 0x6d, 0xb7, 0x74,
		0x39, 0x7f, 0xba, 0x11, 0x98, 0x1f, 0xcc, 0xbf, 0xd5, 0xa5, 0xb8, 0x4a, 0x03, 0x8d, 0x5e, 0xd3,
		0xf9, 0x09, 0x4a, 0x71, 0x73, 0x74, 0x33, 0x0b, 0xa5, 0xb8, 0x26, 0x8f, 0x56, 0x77, 0x50, 0x92,
		0x91, 0x33, 0xde, 0xa1, 0x7e, 0x18, 0xf6, 0xd7, 0x67, 0x9d, 0xd6, 0x54, 0xcf, 0x3b, 0xa6, 0x7a,
		0xad, 0xe0, 0xa5, 0x27, 0x7c, 0x28, 0xe0, 0x35, 0x0a, 0x78, 0x7c, 0x44, 0x5b, 0xa7, 0x86, 0x5b,
		0xa2, 0xe9, 0x74, 0xec, 0xb6, 0x56, 0x53, 0x8c, 0x22, 0x61, 0x92, 0xff, 0xa2, 0x64, 0x2b, 0xee,
		0xaa, 0x3e, 0x2f, 0x41, 0x9f, 0x9b, 0xd2, 0xe7, 0xc7, 0x5b, 0x78, 0xb4, 0x3b, 0xa4, 0xc6, 0x1d,
		0xd7, 0x0f, 0x6c, 0x85, 0x7a, 0x83, 0x05, 0xe9, 0x36, 0xd9, 0x00, 0xea, 0x1c, 0xea, 0x1c, 0xea,
		0x1c, 0xea, 0x1c, 0xea, 0x1c, 0xea, 0x1c, 0xea, 0x3c, 0x39, 0x75, 0x1e, 0x08, 0xef, 0xab, 0xdd,
		0xd6, 0xd1, 0xe7, 0xe3, 0x1d, 0x76, 0x43, 0xa1, 0x43, 0x8f, 0xaf, 0xd2, 0xe3, 0x5b, 0xaa, 0xbe,
		0xfd, 0xc0, 0x0e, 0x2c, 0x22, 0x91, 0xe7, 0x34, 0xdb, 0x54, 0x7e, 0x74, 0x47, 0xb2, 0x2c, 0xef,
		0xda, 0x6e, 0xd7, 0x17, 0xcd, 0xae, 0xdb, 0x22, 0xd1, 0x1e, 0x7c, 0xec, 0x50, 0xe2, 0x71, 0x1c,
		0x2d, 0xda, 0x5d, 0xa6, 0x45, 0xaf, 0x77, 0x08, 0xd4, 0x31, 0x6d, 0xb3, 0x66, 0x7f, 0x83, 0x79,
		0x0e, 0xb5, 0x0e, 0xf3, 0x1c, 0xe6, 0x39, 0xcc, 0x73, 0x98, 0xe7, 0x30, 0xcf, 0x93, 0x54, 0xe3,
		0x56, 0xe0, 0x74, 0x84, 0x96, 0x2e, 0x1f, 0xed, 0x00, 0xf3, 0x1c, 0xe6, 0xf9, 0x16, 0xaa, 0xef,
		0x21, 0x6d, 0x07, 0x4e, 0xf3, 0x2f, 0x1f, 0x33, 0x24, 0x60, 0x54, 0xc3, 0xa8, 0x86, 0x36, 0x36,
		0xa9, 0x8d, 0x09, 0x8c, 0x37, 0x55, 0xc4, 0x8e, 0x0b, 0xa3, 0x1a, 0xca, 0x18, 0x46, 0x35, 0x8c,
		0x6a, 0x18, 0xd5, 0x30, 0xaa, 0x61, 0x54, 0x27, 0xa9, 0xc6, 0x75, 0x8d, 0xea, 0xc9, 0x0e, 0x30,
		0xaa, 0x61, 0x54, 0xc3, 0xa8, 0x86, 0x51, 0x0d, 0xa3, 0x1a, 0x46, 0x35, 0xb4, 0xb1, 0xe2, 0x27,
		0xd3, 0x3d, 0x98, 0x51, 0xbd, 0x8f, 0x5b, 0x4e, 0x77, 0x3a, 0xe3, 0xfd, 0xcc, 0x23, 0xe3, 0x6c,
		0x77, 0xa7, 0xa2, 0x2f, 0xa6, 0x3a, 0x62, 0xb8, 0x0a, 0xcd, 0x24, 0xd1, 0xe0, 0x4e, 0x93, 0xbb,
		0xe9, 0xcd, 0x24, 0xfb, 0xae, 0x7c, 0x3f, 0xd3, 0x39, 0xc7, 0xc2, 0xa9, 0xc2, 0x9a, 0xf1, 0xd7,
		0x53, 0xc3, 0x23, 0x68, 0x45, 0x36, 0xd7, 0x8a, 0xec, 0xd7, 0xda, 0xed, 0xfb, 0xff, 0xd4, 0x6e,
		0xeb, 0x8f, 0xd1, 0xf8, 0x9e, 0xec, 0xb7, 0x23, 0xbb, 0xbf, 0xad, 0x5d, 0xdd, 0x9d, 0xd5, 0xcf,
		0x7f, 0xaf, 0x67, 0xba, 0x21, 0xd6, 0xdd, 0xfd, 0xf5, 0x6d, 0xed, 0x97, 0x7a, 0x96, 0x5f, 0xe1,
		0xc3, 0xed, 0xc7, 0x4c, 0xdf, 0x40, 0xfd, 0xea, 0x2e, 0xdb, 0x4d, 0xd5, 0xce, 0xaf, 0xee, 0xeb,
		0xbf, 0xdc, 0xd6, 0xee, 0xeb, 0xef, 0x1f, 0xcf, 0xce, 0x6f, 0xcf, 0x3e, 0x9e, 0xdf, 0x67, 0xba,
		0xbf, 0xda, 0xaf, 0xb5, 0xbb, 0xbb, 0xf3, 0xbb, 0x4c, 0xbf, 0xc2, 0xf5, 0xd5, 0xfd, 0xed, 0xf5,
		0xc5, 0x45, 0xfd, 0xf6, 0xf1, 0xac, 0x76, 0xfb, 0x3e, 0xcb, 0xaf, 0x72, 0x73, 0xfd, 0x9f, 0xfa,
		0xed, 0xe3, 0xdd, 0xc7, 0x9b, 0x9b, 0x8b, 0x3f, 0xb2, 0xfc, 0x1e, 0x17, 0xe7, 0x57, 0xf5, 0xac,
		0xdf, 0xc5, 0x87, 0xda, 0x55, 0xb6, 0x49, 0xe9, 0x36, 0xdb, 0x82, 0xe9, 0x26, 0xd3, 0x7a, 0xee,
		0xe7, 0xda, 0xd9, 0x6f, 0x37, 0x17, 0xb5, 0xab, 0x6c, 0x63, 0x8d, 0xda, 0xcf, 0xb7, 0xe7, 0x67,
		0x5b, 0xd7, 0x7a, 0xf3, 0x10, 0xd6, 0x0d, 0xdd, 0xba, 0xb9, 0xbb, 0xfe, 0x70, 0xbf, 0x6d, 0xd6,
		0xcd, 0xf5, 0x4d, 0xfd, 0xb6, 0x76, 0x7f, 0x7e, 0xf5, 0xcb, 0xe3, 0xdd, 0x1f, 0x77, 0xf7, 0xf5,
		0xcb, 0xdd, 0x6d, 0x36, 0xdb, 0x88, 0xd1, 0x11, 0xd7, 0xf7, 0x45, 0xcb, 0xea, 0x75, 0xff, 0x16,
		0x9e, 0xba, 0x3b, 0x6e, 0x66, 0x2d, 0x9c, 0x72, 0x70, 0xca, 0x25, 0xe7, 0x94, 0x53, 0xed, 0x21,
		0x49, 0xe8, 0x1d, 0x49, 0x8c, 0x12, 0x12, 0xf4, 0x96, 0x4e, 0x54, 0x50, 0x33, 0x64, 0xa5, 0x1b,
		0x05, 0xe4, 0x88, 0x47, 0x11, 0x00, 0x97, 0x56, 0xb4, 0x8f, 0xeb, 0xc8, 0x74, 0x7b, 0x3d, 0xb2,
		0x9c, 0x5d, 0xda, 0x15, 0xd2, 0x9e, 0xc6, 0xcd, 0xab, 0xc6, 0xe4, 0xf4, 0x62, 0x71, 0x79, 0x99,
		0x49, 0x69, 0xf4, 0xb8, 0xdb, 0x7a, 0x21, 0xbb, 0xfa, 0x9c, 0xd6, 0x9c, 0x51, 0xde, 0x0f, 0xba,
		0x9e, 0xfd, 0xbc, 0x59, 0x86, 0xce, 0xb4, 0x19, 0x18, 0x2d, 0xd8, 0x70, 0xee, 0x72, 0xa3, 0xa2,
		0xa4, 0x95, 0xb5, 0x8a, 0x92, 0x26, 0x2a, 0x67, 0x55, 0xa5, 0x4c, 0x56, 0xc6, 0x64, 0x25, 0x4c,
		0x57, 0xbe, 0x7a, 0x3c, 0x24, 0x3b, 0xda, 0x29, 0xdf, 0x9c, 0xdc, 0xa6, 0x22, 0x26, 0x1c, 0xaf,
		0xc3, 0x14, 0x32, 0xe0, 0x41, 0x4d, 0x3c, 0x18, 0x7f, 0x0a, 0x46, 0x28, 0x0d, 0x8f, 0x94, 0x28,
		0x58, 0x4b, 0x0f, 0x84, 0xcf, 0x7b, 0x1c, 0x13, 0x75, 0x9c, 0x13, 0x3e, 0x43, 0x0d, 0xa4, 0x3e,
		0xd6, 0x53, 0x52, 0x2f, 0x6a, 0x71, 0x76, 0x09, 0x9c, 0x0d, 0xce, 0x36, 0xc4, 0xd9, 0x2a, 0x04,
		0xcc, 0xc0, 0xd8, 0x12, 0x40, 0x6f, 0xfb, 0xa0, 0xb3, 0x0c, 0xa2, 0xd4, 0x3f, 0x5b, 0x23, 0xf0,
		0xb9, 0xff, 0x79, 0xfa, 0x4e, 0x0a, 0x20, 0x7a, 0x6e, 0x19, 0xa0, 0x34, 0xa0, 0xf4, 0x3a, 0xc2,
		0x22, 0x68, 0xdd, 0xd9, 0xd5, 0x80, 0xd5, 0x50, 0xbe, 0x9a, 0xca, 0x57, 0x79, 0xb8, 0xaf, 0xa2,
		0x25, 0xa8, 0x67, 0x11, 0x12, 0x49, 0x98, 0x4c, 0xca, 0x3a, 0x24, 0xcd, 0x44, 0xda, 0xba, 0x24,
		0xce, 0x46, 0xea, 0x6c, 0x24, 0xcf, 0x47, 0xfa, 0x44, 0xc7, 0xa6, 0xe2, 0xdd, 0xab, 0xb2, 0x44,
		0xb4, 0x70, 0x8c, 0x5e, 0x34, 0xe3, 0xba, 0xe1, 0x2e, 0x87, 0x89, 0x38, 0xaf, 0xa9, 0xec, 0xc2,
		0xc1, 0x36, 0xcc, 0xec, 0xc3, 0xc5, 0x46, 0xec, 0xec, 0xc4, 0xce, 0x56, 0xfc, 0xec, 0x45, 0x63,
		0x33, 0x22, 0xbb, 0x45, 0x5f, 0x9f, 0x5c, 0x33, 0xb8, 0x40, 0x39, 0x6d, 0x61, 0x3f, 0xd1, 0xd2,
		0x3b, 0x16, 0xf4, 0xcd, 0x89, 0xc6, 0x1e, 0x37, 0x63, 0x7b, 0xe9, 0xcd, 0x9b, 0xa3, 0xd9, 0xff,
		0x4d, 0xcd, 0xa3, 0x91, 0x2a, 0x3c, 0x0a, 0x19, 0x3e, 0xa6, 0x72, 0x2b, 0xb3, 0x92, 0x93, 0x68,
		0xc9, 0xeb, 0xdb, 0x99, 0xb3, 0x46, 0xd7, 0xdc, 0xbf, 0x8e, 0x48, 0x70, 0x43, 0xc7, 0x22, 0x9d,
		0xfd, 0x2a, 0x73, 0xff, 0x52, 0xf2, 0xec, 0xa9, 0xdf, 0x97, 0x4a, 0xf9, 0x39, 0x49, 0x51, 0xe9,
		0x28, 0x28, 0x4c, 0x21, 0x05, 0x7e, 0x8b, 0x4d, 0x0a, 0xe9, 0x17, 0x9f, 0xd3, 0x15, 0x88, 0x8e,
		0xe2, 0x98, 0x55, 0x18, 0x64, 0xd5, 0x60, 0x46, 0x60, 0xa8, 0x85, 0x08, 0x16, 0x9d, 0x16, 0x8a,
		0x9e, 0x56, 0x16, 0x93, 0xaf, 0x04, 0x91, 0x01, 0x91, 0x01, 0x93, 0x0f, 0x26, 0x1f, 0x4c, 0x3e,
		0x98, 0x7c, 0x30, 0xf9, 0x76, 0xc7, 0xe4, 0xa3, 0xa0, 0x0d, 0x33, 0x16, 0x9f, 0x42, 0xc8, 0x97,
		0x80, 0xdf, 0x58, 0xe3, 0x00, 0xbf, 0x89, 0x17, 0x45, 0x4d, 0x94, 0xbf, 0x70, 0xfc, 0xa0, 0x16,
		0x04, 0x8a, 0xf1, 0x83, 0x4b, 0xc7, 0xad, 0xb7, 0x45, 0x67, 0x1c, 0x55, 0x75, 0xfb, 0xed, 0xb6,
		0x02, 0x0e, 0xbd, 0xb4, 0xbf, 0xd1, 0x17, 0x5f, 0x7b, 0x2d, 0xe1, 0x89, 0xd6, 0xcf, 0x2f, 0xe3,
		0xa5, 0xd9, 0x4e, 0x62, 0x58, 0x49, 0xff, 0x31, 0x64, 0x34, 0xac, 0xa4, 0xf8, 0x1d, 0x4b, 0x6f,
		0x50, 0x88, 0xf5, 0x73, 0x1d, 0x37, 0x39, 0xd5, 0x61, 0x4f, 0xe1, 0x24, 0x25, 0xa4, 0x81, 0x1c,
		0xf7, 0x2b, 0x71, 0xbb, 0x12, 0x77, 0xcb, 0x71, 0xf3, 0xaa, 0xf7, 0x93, 0xa4, 0x10, 0x2a, 0x65,
		0xe4, 0xd7, 0xa6, 0x65, 0x13, 0x68, 0x60, 0xf9, 0xad, 0x2f, 0xde, 0xe9, 0xfc, 0x6f, 0x5e, 0xbd,
		0xfd, 0xa6, 0xb7, 0x56, 0x7b, 0xdb, 0x25, 0xef, 0xa8, 0xf2, 0x6e, 0xf3, 0x6f, 0x34, 0xfd, 0xde,
		0x33, 0xdf, 0x39, 0xef, 0xbf, 0xf8, 0x81, 0xe8, 0x2c, 0x7c, 0xd7, 0xa9, 0x5b, 0x61, 0xf4, 0xdf,
		0x5f, 0xbd, 0xe5, 0x72, 0xbf, 0xc1, 0x4a, 0x43, 0x67, 0x9d, 0x01, 0x33, 0x6b, 0x98, 0xf8, 0x2f,
		0x4b, 0x5f, 0x79, 0x83, 0xad, 0x21, 0x6d, 0x43, 0x48, 0xdb, 0x06, 0xaf, 0x31, 0xff, 0xf0, 0x7b,
		0x29, 0xd2, 0xc1, 0x2a, 0x6b, 0x37, 0x6f, 0xdb, 0xf6, 0xea, 0x37, 0x99, 0x9c, 0xc5, 0xf0, 0x43,
		0xab, 0xc4, 0xc6, 0x5a, 0x97, 0xcd, 0x46, 0x5b, 0x53, 0xc6, 0x96, 0x9c, 0xbd, 0x92, 0xd5, 0xdf,
		0x44, 0xc5, 0x0c, 0x54, 0x36, 0xf3, 0x94, 0xcd, 0xb8, 0xd7, 0x57, 0x36, 0xfc, 0xde, 0x4c, 0x82,
		0x7a, 0x93, 0xe3, 0x22, 0x6f, 0x37, 0x9b, 0xdd, 0xbe, 0x1b, 0x38, 0xee, 0xb3, 0x7c, 0x0e, 0xdb,
		0xcc, 0x9a, 0x6c, 0x24, 0xb0, 0xad, 0x27, 0x04, 0xaa, 0x5f, 0x20, 0xf9, 0xdc, 0xb5, 0xb5, 0x84,
		0xc2, 0x83, 0x95, 0x50, 0x01, 0xc2, 0x4f, 0x68, 0xba, 0x8e, 0xa8, 0xf4, 0x65, 0xa9, 0x49, 0x11,
		0xa2, 0x19, 0xc3, 0x54, 0x39, 0x41, 0x6d, 0x2a, 0xbd, 0xac, 0x8e, 0x08, 0xbe, 0x74, 0x5b, 0xf4,
		0xb8, 0xc5, 0xe2, 0x56, 0xbb, 0x11, 0xf6, 0x54, 0x23, 0xf3, 0xdd, 0x09, 0x5f, 0x28, 0xb1, 0x41,
		0x3c, 0xfe, 0x37, 0xfd, 0x60, 0xa7, 0x6a, 0x0f, 0xcb, 0x05, 0x59, 0x7d, 0x4a, 0x58, 0x4b, 0xea,
		0x69, 0x39, 0xf9, 0xc3, 0xe0, 0x2f, 0xd6, 0xeb, 0x02, 0xb3, 0x70, 0x04, 0x1a, 0x8d, 0x9b, 0x79,
		0xba, 0xc2, 0x2c, 0xbc, 0x60, 0xad, 0x56, 0x7b, 0xbc, 0xac, 0xdf, 0xff, 0x7a, 0xfd, 0xfe, 0xf1,
		0xfe, 0x8f, 0x9b, 0x7a, 0x9e, 0xa3, 0x69, 0xb5, 0x5e, 0x5f, 0x18, 0xfd, 0xdb, 0x5b, 0xfa, 0xa2,
		0xf7, 0xb5, 0xb3, 0xda, 0xd9, 0xdd, 0x63, 0xed, 0xe2, 0x22, 0xaf, 0xbd, 0xf1, 0xe0, 0x30, 0x6d,
		0x6f, 0x77, 0x71, 0x7d, 0x56, 0xdb, 0xca, 0x17, 0xbb, 0xad, 0xbd, 0x3f, 0xff, 0xc8, 0x75, 0x6d,
		0x5a, 0x3b, 0x34, 0xb2, 0x11, 0x2c, 0x63, 0x10, 0x7a, 0x7e, 0xe0, 0x6d, 0xb6, 0xe9, 0xa4, 0xe4,
		0xdd, 0xdb, 0x74, 0x76, 0x87, 0x57, 0xd4, 0x9d, 0xa4, 0x00, 0x06, 0x4b, 0x20, 0x83, 0x25, 0xa0,
		0xb1, 0xd4, 0x15, 0xaa, 0x99, 0x89, 0xd0, 0xf7, 0xa5, 0xbb, 0x37, 0x71, 0xc3, 0xbf, 0xd7, 0x10,
		0xb0, 0x3b, 0x7a, 0x2b, 0xeb, 0xf3, 0x8b, 0x0e, 0xc5, 0x72, 0x86, 0xdc, 0xe7, 0xe0, 0x60, 0x78,
		0x52, 0xe9, 0x0c, 0xe1, 0x6e, 0x4d, 0x1d, 0xef, 0xc8, 0xc1, 0x7b, 0x34, 0xfe, 0xcb, 0xb6, 0xed,
		0xa3, 0xa9, 0x45, 0xc6, 0x58, 0x98, 0x7f, 0x17, 0xee, 0xff, 0x38, 0xfe, 0xab, 0x66, 0xdb, 0x8f,
		0xb5, 0xe8, 0x31, 0x09, 0xd4, 0xe3, 0x8b, 0xaf, 0x52, 0x25, 0xa7, 0x0b, 0xbc, 0x3b, 0x5e, 0x07,
		0x4f, 0x0b, 0x3c, 0x2d, 0xf1, 0x78, 0x5a, 0x42, 0x82, 0xa3, 0x7b, 0x57, 0x46, 0xcb, 0x77, 0xa3,
		0x10, 0x10, 0x1e, 0x95, 0xcc, 0x78, 0x54, 0xc8, 0xb9, 0xa0, 0xc4, 0xca, 0xd8, 0x05, 0x72, 0x21,
		0x97, 0xac, 0x68, 0x30, 0x88, 0x36, 0xa3, 0x70, 0x30, 0x0c, 0x1f, 0xe3, 0x70, 0x62, 0xd2, 0x5c,
		0x26, 0x53, 0x41, 0x49, 0x8c, 0x95, 0x88, 0x61, 0x4b, 0x66, 0xb8, 0x79, 0x3d, 0x64, 0x05, 0xba,
		0xc9, 0xa4, 0x8b, 0xca, 0xc9, 0x52, 0x98, 0x30, 0xb5, 0x89, 0x21, 0x75, 0xc7, 0xc6, 0xe9, 0x32,
		0x26, 0x27, 0x83, 0xf2, 0x33, 0x2a, 0x37, 0xc3, 0x1a, 0x63, 0x5c, 0x63, 0x0c, 0x6c, 0x84, 0x91,
		0x79, 0x3c, 0x64, 0x9a, 0xde, 0x43, 0xfd, 0x34, 0xef, 0x05, 0x7a, 0xe3, 0x71, 0xdf, 0x2f, 0xe8,
		0xcc, 0x0a, 0xc3, 0x5e, 0xac, 0xee, 0xfc, 0x85, 0x17, 0xaf, 0xd5, 0x6a, 0x8f, 0xb5, 0xb3, 0xb3,
		0xeb, 0x8f, 0x57, 0x61, 0x6b, 0xf4, 0xfa, 0xef, 0xf5, 0xab, 0x7b, 0x0e, 0x07, 0x7f, 0xf4, 0x20,
		0x46, 0x47, 0xbf, 0xbe, 0xe7, 0x52, 0xfd, 0x28, 0xce, 0xae, 0x2f, 0x2f, 0x6b, 0x57, 0xef, 0xf3,
		0x6c, 0x8f, 0x1c, 0x1c, 0x66, 0xf2, 0x1c, 0x2e, 0xae, 0x7f, 0x39, 0xbf, 0x62, 0x3c, 0x05, 0x96,
		0x9d, 0x1a, 0x49, 0xcb, 0xb1, 0x44, 0x66, 0xcf, 0x7a, 0xa2, 0x39, 0x52, 0x40, 0x4c, 0xc8, 0x64,
		0xbc, 0x1f, 0x50, 0x09, 0x50, 0x09, 0x50, 0x49, 0xaa, 0x50, 0x89, 0x70, 0xfb, 0x1d, 0xe1, 0x8d,
		0x3c, 0xe0, 0x8c, 0xa8, 0xa4, 0xcc, 0xb0, 0x57, 0xdd, 0xed, 0x87, 0x89, 0xd4, 0x89, 0x09, 0xd0,
		0x58, 0x2d, 0x4a, 0xcd, 0xa2, 0xb4, 0x68, 0x1f, 0x62, 0x64, 0x62, 0xe4, 0x88, 0x1f, 0xfd, 0x75,
		0xa4, 0xe5, 0xcd, 0xc9, 0x91, 0xc3, 0x16, 0xf5, 0xf0, 0x3b, 0x8c, 0xfe, 0x22, 0x75, 0x1e, 0xa1,
		0xdf, 0x1c, 0x65, 0x64, 0x03, 0x83, 0x09, 0xcf, 0x67, 0xba, 0x6f, 0x5b, 0x4d, 0x35, 0x7c, 0x68,
		0x5b, 0xef, 0x43, 0xdb, 0xe6, 0x4a, 0xea, 0x71, 0xcd, 0xf4, 0x0c, 0x5b, 0xa7, 0x58, 0x90, 0xd1,
		0x3a, 0xa5, 0x2c, 0xdc, 0x02, 0xb5, 0x86, 0x39, 0xc7, 0x19, 0x02, 0x28, 0x41, 0x7c, 0x41, 0x7c,
		0xc5, 0x22, 0xbe, 0x10, 0x02, 0x80, 0xb1, 0x0d, 0x63, 0x1b, 0xc6, 0xb6, 0x02, 0xbd, 0x21, 0x04,
		0x80, 0x10, 0x00, 0x42, 0x00, 0x08, 0x01, 0xc4, 0xe6, 0xc1, 0x42, 0x08, 0x00, 0xa8, 0x04, 0xa8,
		0x04, 0xa8, 0x64, 0xbd, 0xcd, 0x80, 0x10, 0x40, 0x3a, 0x2c, 0xca, 0x34, 0x85, 0x00, 0x74, 0x9c,
		0x39, 0x39, 0x9e, 0x08, 0x00, 0xa1, 0x13, 0x9d, 0x86, 0xdf, 0xcc, 0x68, 0x7e, 0xee, 0xb8, 0x37,
		0x15, 0xd9, 0x3a, 0xdf, 0xca, 0xb2, 0x2f, 0xe9, 0x7e, 0x76, 0xd4, 0x53, 0x37, 0xd7, 0xe7, 0x51,
		0x9a, 0x8f, 0x38, 0x5b, 0x3a, 0x4a, 0x73, 0x4e, 0x1e, 0xa5, 0x57, 0xab, 0x6e, 0xc5, 0x78, 0xe9,
		0xd5, 0xe8, 0x1e, 0x30, 0x0a, 0x35, 0xd6, 0x51, 0xa8, 0x28, 0xbc, 0x8a, 0x9d, 0x7b, 0xd1, 0xe2,
		0x26, 0x1e, 0x2b, 0x11, 0x05, 0x59, 0x86, 0xac, 0x3a, 0xb4, 0xb8, 0x59, 0xfd, 0xb5, 0xd1, 0xe2,
		0x06, 0x2d, 0x6e, 0x34, 0x5f, 0x14, 0x2d, 0x6e, 0x32, 0xf9, 0x62, 0x68, 0x71, 0x13, 0xbf, 0xd0,
		0x43, 0x8b, 0x9b, 0xed, 0xf7, 0x75, 0xa0, 0xc5, 0x8d, 0x19, 0x28, 0x98, 0x43, 0x8b, 0x9b, 0x94,
		0xf9, 0x59, 0x54, 0x1d, 0xc7, 0x34, 0x37, 0x8b, 0x82, 0x6f, 0x38, 0x3b, 0x93, 0x1b, 0xd6, 0x9d,
		0xab, 0xce, 0xa8, 0x86, 0x75, 0x27, 0x49, 0x9e, 0xcd, 0xb0, 0xa6, 0x89, 0xb9, 0xdd, 0x0f, 0xbe,
		0x0c, 0xc1, 0x73, 0x53, 0xee, 0x54, 0xa6, 0x76, 0xfd, 0xfc, 0x3a, 0xf4, 0xf1, 0x46, 0x1f, 0xef,
		0x31, 0x41, 0xb5, 0x3a, 0x8e, 0x6b, 0x85, 0xa2, 0x5d, 0xd9, 0xcf, 0x39, 0xb3, 0x16, 0x5d, 0xa6,
		0xe0, 0xec, 0x8c, 0xc7, 0xd9, 0x49, 0x6c, 0xab, 0xa3, 0xd7, 0x4e, 0x07, 0x7d, 0xa6, 0xe0, 0xd6,
		0x4c, 0x6b, 0x9f, 0xa9, 0x91, 0x14, 0xee, 0xd9, 0xbe, 0xff, 0xb7, 0x4e, 0x56, 0xd9, 0x2b, 0xa9,
		0x1e, 0xed, 0x87, 0x9a, 0x39, 0x14, 0x9d, 0xc4, 0xcc, 0x68, 0x89, 0x78, 0x9b, 0x18, 0x6b, 0xe6,
		0x12, 0xf7, 0x3a, 0x11, 0x4f, 0xa0, 0xfe, 0x2d, 0xd0, 0x73, 0x78, 0xf3, 0x51, 0x77, 0xb7, 0x69,
		0x89, 0x6f, 0xc1, 0xbb, 0x19, 0x0b, 0xee, 0x8b, 0xed, 0x7f, 0x11, 0x2d, 0xeb, 0xab, 0xdd, 0xee,
		0x0b, 0x5e, 0xaa, 0x7f, 0xb2, 0xdb, 0x3e, 0x27, 0xd9, 0xc7, 0x4d, 0xf0, 0x8d, 0x58, 0x2a, 0x19,
		0xe7, 0xd5, 0xc2, 0xf8, 0x3a, 0xb8, 0xb5, 0xcd, 0x64, 0x5b, 0x28, 0x1d, 0x28, 0x1d, 0x28, 0x1d,
		0x35, 0xbb, 0xc6, 0x7b, 0xe9, 0x05, 0x53, 0x46, 0xd2, 0xac, 0x53, 0x8c, 0x3d, 0xee, 0x31, 0xd8,
		0x9e, 0x74, 0xc5, 0x39, 0x57, 0xdb, 0xd1, 0xd4, 0x49, 0x42, 0xef, 0xfd, 0xa1, 0xe2, 0x7e, 0x9c,
		0x7b, 0xfa, 0x63, 0x6d, 0xf8, 0xf4, 0x8f, 0xbe, 0xf0, 0x48, 0x4d, 0x3f, 0x14, 0xfc, 0xea, 0x4a,
		0x5e, 0x69, 0x4a, 0x4d, 0xbc, 0x56, 0x2d, 0xbc, 0xb6, 0xfd, 0x5e, 0x82, 0xfd, 0x0e, 0xfb, 0x1d,
		0xf6, 0x3b, 0xa0, 0x14, 0xa0, 0x14, 0xec, 0x77, 0xd8, 0xef, 0xb0, 0xdf, 0x61, 0xbf, 0xc3, 0x7e,
		0x87, 0xd2, 0x81, 0xd2, 0x81, 0xfd, 0xae, 0x2b, 0x92, 0x86, 0xa6, 0xf1, 0xd8, 0xb2, 0x65, 0x91,
		0x45, 0xd1, 0x7e, 0x10, 0x42, 0x10, 0x42, 0x10, 0x42, 0xd9, 0x42, 0xbe, 0xf0, 0x1b, 0x2e, 0xf1,
		0x1b, 0x52, 0x1b, 0x06, 0x70, 0xb8, 0x0d, 0x09, 0x9d, 0x02, 0xb6, 0x3a, 0x1b, 0x77, 0xd5, 0x25,
		0x19, 0x4a, 0xcb, 0x5d, 0x71, 0x2d, 0x71, 0x16, 0x41, 0x2b, 0x26, 0x5c, 0xd1, 0x12, 0xad, 0x90,
		0x19, 0x98, 0x43, 0x66, 0xa0, 0x9e, 0x43, 0xf5, 0x55, 0x8e, 0xb3, 0x7e, 0x29, 0xf4, 0xd2, 0xed,
		0x50, 0x0e, 0x6d, 0x0e, 0x2c, 0x22, 0xee, 0x80, 0x72, 0x68, 0xc3, 0x7e, 0x4a, 0x94, 0x43, 0x13,
		0xb7, 0x45, 0x39, 0x74, 0x32, 0x6f, 0x87, 0x72, 0x68, 0x63, 0xe6, 0xf6, 0xe4, 0x0f, 0xca, 0xa1,
		0xd3, 0x6b, 0xde, 0xa3, 0x1c, 0x5a, 0x66, 0x13, 0x94, 0x43, 0xc7, 0xe3, 0x27, 0x44, 0x39, 0x74,
		0xda, 0x1c, 0x30, 0xca, 0x29, 0x75, 0x74, 0xe7, 0x8b, 0x4a, 0x02, 0x1d, 0xda, 0xcf, 0xc1, 0xef,
		0x02, 0xbf, 0x0b, 0xfc, 0x2e, 0xf0, 0xbb, 0xc0, 0xef, 0x02, 0xbf, 0x0b, 0xfc, 0x2e, 0xf0, 0xbb,
		0xc0, 0xef, 0x02, 0xbf, 0x0b, 0xfc, 0x2e, 0xf0, 0xbb, 0xc0, 0xef, 0x02, 0xbf, 0x0b, 0xfc, 0x2e,
		0x99, 0xf7, 0xbb, 0x98, 0x6c, 0x45, 0x37, 0xef, 0x76, 0xe1, 0x6d, 0x47, 0x27, 0xe1, 0x75, 0x19,
		0xd2, 0x97, 0xaf, 0xee, 0x75, 0x19, 0x2d, 0x43, 0xb6, 0x0b, 0xbc, 0x2e, 0xf1, 0x78, 0x5d, 0x94,
		0x5a, 0xb6, 0x71, 0xa8, 0x1b, 0xf4, 0xc0, 0x82, 0x4f, 0x25, 0xad, 0x35, 0xb4, 0xc4, 0xa6, 0x70,
		0x0b, 0xe4, 0x42, 0xae, 0xd0, 0xcf, 0x71, 0x0e, 0x5a, 0x47, 0xe5, 0x80, 0x09, 0x46, 0x32, 0x82,
		0x4c, 0x73, 0x3b, 0x3e, 0x68, 0x5d, 0xbb, 0x6c, 0x7d, 0x81, 0xf0, 0x34, 0x0b, 0xd7, 0x5f, 0x33,
		0x23, 0xc6, 0x99, 0xc6, 0xc9, 0xac, 0xc6, 0x98, 0xd6, 0x18, 0xf3, 0x1a, 0x61, 0x62, 0x1e, 0xff,
		0x58, 0xfa, 0xc6, 0x99, 0x6a, 0xfb, 0xb1, 0x98, 0xfc, 0x59, 0x5c, 0x27, 0xa4, 0x5d, 0x30, 0xaf,
		0xef, 0x23, 0x5c, 0xe9, 0x84, 0x31, 0x59, 0x40, 0xbf, 0x82, 0x9b, 0x18, 0x0a, 0xe9, 0x97, 0xb2,
		0x53, 0x86, 0x1d, 0xcd, 0x87, 0xfa, 0xaa, 0x51, 0xb7, 0xd4, 0x7e, 0xa5, 0x86, 0xd4, 0x2b, 0xb6,
		0x87, 0xa2, 0x84, 0xa2, 0x84, 0xa2, 0x34, 0xa4, 0x28, 0x79, 0x8b, 0xf9, 0xb9, 0xb5, 0x66, 0x22,
		0xe2, 0xd0, 0xeb, 0xb6, 0x19, 0xa3, 0xec, 0xe1, 0x6e, 0x10, 0x7c, 0x10, 0x7c, 0x10, 0x7c, 0xa9,
		0x12, 0x7c, 0xd4, 0x9c, 0xa6, 0x95, 0xa2, 0xee, 0x94, 0x61, 0x2f, 0xad, 0x9c, 0x27, 0x33, 0x50,
		0xdf, 0x8c, 0x59, 0xc5, 0xac, 0x28, 0x98, 0xc8, 0xcc, 0xe0, 0xc9, 0xf1, 0x64, 0x93, 0xad, 0x3c,
		0xbe, 0x0a, 0xe3, 0x9e, 0xac, 0xd9, 0x66, 0x2b, 0x0f, 0xe4, 0xee, 0x8f, 0xbb, 0xfb, 0xfa, 0xe5,
		0xe3, 0xfb, 0xfa, 0x87, 0xf3, 0xab, 0xfa, 0xfb, 0xc7, 0xdb, 0xeb, 0x8b, 0xfa, 0x1d, 0xe3, 0xc9,
		0xe4, 0x98, 0x53, 0xd2, 0xcc, 0x91, 0xc8, 0xba, 0xd3, 0x19, 0x9e, 0xca, 0x63, 0xed, 0xfd, 0xe5,
		0xf9, 0x55, 0x9e, 0xfd, 0x79, 0x03, 0xd6, 0x1d, 0x1b, 0x7b, 0xe9, 0xfa, 0x5e, 0xfa, 0xbb, 0x34,
		0x32, 0x08, 0x5d, 0x7d, 0xff, 0x8b, 0xf5, 0x97, 0x78, 0xe1, 0x43, 0xaf, 0x93, 0x0d, 0x01, 0x60,
		0x01, 0x60, 0x01, 0x60, 0x53, 0x05, 0x60, 0x53, 0xe7, 0xe2, 0x4e, 0x44, 0xe2, 0x69, 0xf7, 0xe4,
		0x5b, 0x34, 0x0c, 0xf4, 0xba, 0xf2, 0x41, 0xe6, 0x41, 0xe6, 0x41, 0xe6, 0x41, 0xe6, 0x19, 0x59,
		0x49, 0xcd, 0x9e, 0xd0, 0xec, 0x0e, 0x38, 0xc5, 0x97, 0xf4, 0x3c, 0xdc, 0x30, 0xeb, 0xf4, 0x48,
		0x6f, 0xba, 0xc8, 0xf4, 0x7b, 0x50, 0x73, 0x74, 0x3f, 0x0e, 0xbf, 0xc5, 0x23, 0x79, 0xcc, 0x08,
		0xfd, 0xf6, 0x06, 0xa4, 0xa6, 0x88, 0x94, 0xf1, 0x23, 0x4b, 0x98, 0x86, 0xd6, 0x94, 0x31, 0xc7,
		0x99, 0x29, 0x56, 0x42, 0xa6, 0x98, 0x41, 0xed, 0x84, 0x4c, 0xb1, 0xe9, 0x37, 0x47, 0xa6, 0x18,
		0x20, 0x25, 0x20, 0x25, 0x20, 0x65, 0x56, 0x21, 0x25, 0x32, 0xc5, 0x38, 0xb9, 0x09, 0x99, 0x62,
		0x9c, 0xde, 0x16, 0x64, 0x8a, 0x41, 0x51, 0x42, 0x51, 0xee, 0xa6, 0xa2, 0x44, 0xa6, 0xd8, 0xc2,
		0x77, 0x47, 0xa6, 0x18, 0x04, 0x1f, 0x04, 0xdf, 0xb6, 0x0b, 0x3e, 0x64, 0x8a, 0x25, 0x69, 0x56,
		0x31, 0x2b, 0x0a, 0x26, 0x32, 0x33, 0x78, 0x72, 0xc8, 0x14, 0x7b, 0x75, 0x20, 0xc8, 0x14, 0x93,
		0x38, 0x1d, 0x64, 0x8a, 0x25, 0xb7, 0x0b, 0x32, 0xc5, 0x90, 0x29, 0x06, 0x00, 0x0b, 0x00, 0x9b,
		0x56, 0x00, 0x8b, 0x4c, 0x31, 0x64, 0x8a, 0x41, 0xe6, 0x41, 0xe6, 0x41, 0xe6, 0x65, 0x52, 0xe6,
		0xed, 0x70, 0xa6, 0x98, 0x4e, 0xea, 0x52, 0x8e, 0x2b, 0x51, 0x8c, 0x30, 0x58, 0x96, 0x7e, 0x77,
		0x94, 0x3c, 0x31, 0xbe, 0xb9, 0xe4, 0x98, 0x48, 0x8e, 0x6c, 0xb1, 0xa4, 0x35, 0x52, 0x56, 0x27,
		0x92, 0xb7, 0x85, 0xfd, 0xc4, 0x34, 0x2b, 0xe0, 0x44, 0x63, 0x8f, 0x9b, 0xb1, 0xc8, 0x7d, 0xf3,
		0x66, 0x9c, 0x67, 0x7b, 0x14, 0x31, 0xf5, 0x56, 0x0c, 0x3a, 0xff, 0x2d, 0x74, 0x5a, 0x50, 0x25,
		0xd5, 0x56, 0x36, 0xf4, 0x1e, 0x6e, 0xb1, 0xad, 0xc3, 0xe5, 0xa7, 0x60, 0x20, 0xd6, 0xb1, 0xf2,
		0x53, 0xf5, 0x8f, 0x89, 0xf2, 0xeb, 0x6e, 0x26, 0x96, 0xc6, 0xda, 0xe1, 0x65, 0xb0, 0x35, 0xd6,
		0xde, 0xd3, 0x38, 0x6f, 0xd5, 0x73, 0xd6, 0x38, 0xdf, 0xbc, 0xd4, 0xd8, 0x35, 0xda, 0x89, 0xae,
		0x3f, 0xcb, 0xd5, 0x27, 0xb4, 0xe6, 0x74, 0xc2, 0x61, 0x58, 0x5d, 0xcf, 0xf9, 0x47, 0xee, 0x70,
		0xe6, 0x66, 0x68, 0x4d, 0x97, 0x6d, 0x38, 0x7d, 0xb9, 0x62, 0x04, 0x69, 0x18, 0xa9, 0x02, 0x17,
		0xd5, 0x61, 0xa1, 0x2a, 0xfc, 0x23, 0xc3, 0x3c, 0x32, 0x9c, 0x23, 0xc1, 0x36, 0x3d, 0xfe, 0x91,
		0x4d, 0xce, 0x57, 0xed, 0x93, 0x4c, 0xeb, 0x8b, 0x8c, 0xee, 0xf6, 0x39, 0x74, 0xb7, 0xa7, 0x11,
		0xe8, 0x72, 0xb9, 0xc7, 0x32, 0x52, 0x70, 0x61, 0x37, 0x4c, 0x14, 0x34, 0x67, 0x64, 0xa3, 0xfb,
		0x3d, 0x26, 0x0a, 0x4a, 0xfd, 0xc1, 0x44, 0xc1, 0xcd, 0x2f, 0x88, 0x89, 0x82, 0xf1, 0x79, 0xae,
		0x0c, 0xbe, 0x1d, 0x26, 0x0a, 0x1a, 0x73, 0x53, 0x4e, 0xfe, 0x60, 0xa2, 0xa0, 0xba, 0xbc, 0xc3,
		0x44, 0x41, 0x4c, 0x14, 0xe4, 0x86, 0x7f, 0x39, 0x4c, 0x14, 0x64, 0x82, 0x90, 0x5b, 0xee, 0xf8,
		0x8c, 0x8c, 0x32, 0xf5, 0xee, 0x25, 0x8a, 0x6e, 0xba, 0xe8, 0x49, 0x4a, 0x1d, 0x4a, 0x78, 0x26,
		0x0a, 0x8a, 0xaf, 0x63, 0xa1, 0xa0, 0xe8, 0x75, 0x19, 0xaf, 0x83, 0xd7, 0x05, 0x5e, 0x97, 0x78,
		0xbc, 0x2e, 0x21, 0xc1, 0xd1, 0xdd, 0x2c, 0xa3, 0xe5, 0x98, 0x2a, 0x08, 0xbf, 0x4a, 0xaa, 0xfc,
		0x2a, 0x98, 0x2a, 0x88, 0xec, 0x1f, 0x63, 0x8c, 0x64, 0x04, 0x9d, 0xe6, 0x76, 0xbc, 0x57, 0x54,
		0xa8, 0x48, 0x46, 0xb5, 0xf0, 0x6c, 0x5e, 0xb4, 0x99, 0x3d, 0x91, 0x58, 0x6e, 0x9e, 0x51, 0xb9,
		0x19, 0xd6, 0x18, 0xe3, 0x1a, 0x63, 0x60, 0x23, 0x8c, 0xcc, 0xe3, 0x27, 0x4b, 0x5f, 0x62, 0x39,
		0x6f, 0x79, 0x2e, 0x67, 0x59, 0xae, 0x99, 0x72, 0xdc, 0x39, 0xe7, 0x7e, 0xed, 0xe3, 0xfd, 0xaf,
		0xd7, 0xb7, 0xe7, 0x7f, 0xd6, 0xee, 0xcf, 0xaf, 0xaf, 0x1e, 0xeb, 0xbf, 0xd7, 0xaf, 0xee, 0x39,
		0x3c, 0xfd, 0xd1, 0xb3, 0x0c, 0x94, 0xe1, 0x1a, 0x2a, 0x4a, 0x5e, 0x75, 0x1a, 0x67, 0xd7, 0x97,
		0x97, 0xb5, 0xab, 0xf7, 0x7c, 0x45, 0xb8, 0x83, 0xc3, 0xec, 0x1e, 0xc5, 0xd5, 0x87, 0xf3, 0x5f,
		0xf2, 0x29, 0x2b, 0xf7, 0x6d, 0x24, 0x2d, 0xd1, 0x50, 0x08, 0x22, 0xe9, 0x68, 0x1b, 0x39, 0x95,
		0x46, 0x7f, 0xc5, 0xde, 0x33, 0x78, 0xea, 0x85, 0xab, 0x87, 0x5f, 0x63, 0xf4, 0x57, 0x06, 0x9a,
		0x06, 0x33, 0x20, 0x52, 0x3e, 0x24, 0x8a, 0x82, 0x10, 0x98, 0x84, 0x28, 0x08, 0x49, 0x5b, 0x41,
		0xc8, 0x0c, 0x5b, 0xa3, 0xfb, 0x79, 0x2c, 0x1e, 0x2d, 0x74, 0x3f, 0x87, 0xf8, 0x82, 0x47, 0x0b,
		0x1e, 0x2d, 0x78, 0xb4, 0xe0, 0xd1, 0x82, 0x47, 0x0b, 0x1e, 0x2d, 0x78, 0xb4, 0xe0, 0xd1, 0x82,
		0x47, 0x6b, 0xb7, 0x3d, 0x5a, 0x31, 0xf7, 0x36, 0x59, 0xe1, 0xd0, 0x8a, 0xb7, 0xb9, 0x49, 0x1c,
		0x9d, 0x01, 0xc8, 0x60, 0x13, 0xbd, 0x01, 0x72, 0x19, 0xe8, 0x0d, 0xb0, 0x9c, 0x9b, 0xcc, 0x37,
		0x07, 0x58, 0xce, 0x3f, 0xe8, 0x0e, 0xb0, 0xee, 0x6e, 0xe2, 0x48, 0x92, 0x1d, 0xdd, 0x46, 0x9c,
		0x49, 0xb2, 0x6a, 0x8e, 0x29, 0x92, 0x23, 0x8a, 0x9c, 0x22, 0x5b, 0x42, 0x8a, 0x2c, 0xa7, 0x5d,
		0x89, 0xc2, 0x64, 0x14, 0x26, 0x23, 0x81, 0x96, 0xd3, 0x99, 0x82, 0xc2, 0xe4, 0xd5, 0x5f, 0x1b,
		0x85, 0xc9, 0x28, 0x4c, 0xd6, 0x7c, 0x51, 0x14, 0x26, 0x67, 0xf2, 0xc5, 0x50, 0x98, 0x1c, 0xbf,
		0xd0, 0x43, 0x61, 0xf2, 0xf6, 0x7b, 0x3f, 0x50, 0x98, 0x6c, 0x06, 0x0a, 0xe6, 0x50, 0x98, 0x9c,
		0x3e, 0x9f, 0x8b, 0xaa, 0x43, 0x99, 0xec, 0x72, 0x51, 0xf0, 0x19, 0x67, 0xbd, 0x1f, 0xa3, 0x6c,
		0x6b, 0x42, 0x9d, 0xf3, 0x34, 0xd1, 0x8d, 0x51, 0xb2, 0x20, 0x50, 0xad, 0xf0, 0x0f, 0xfd, 0x17,
		0x79, 0xa5, 0x6a, 0x02, 0xfd, 0x17, 0x4d, 0xf2, 0x8b, 0x74, 0x8a, 0xb6, 0x02, 0xa3, 0xc8, 0xe4,
		0x5b, 0xd3, 0x38, 0xc4, 0x17, 0xde, 0x57, 0xe1, 0x59, 0xcf, 0x5e, 0xb7, 0xdf, 0xf3, 0xe5, 0x19,
		0x65, 0x7e, 0x19, 0xf8, 0x05, 0xfd, 0x4a, 0x17, 0xc9, 0x89, 0x10, 0x1b, 0x98, 0x5d, 0x8d, 0x2e,
		0x1a, 0x31, 0x7a, 0x49, 0x77, 0x3a, 0x44, 0x40, 0x6c, 0x1b, 0xa0, 0xd7, 0x2e, 0x00, 0x7d, 0x34,
		0x62, 0x25, 0x70, 0x76, 0xdb, 0x6f, 0x9b, 0xfb, 0x68, 0xf0, 0x4c, 0xd1, 0xc1, 0x04, 0x1d, 0x54,
		0x1c, 0x24, 0xc1, 0x54, 0x89, 0x78, 0x62, 0x19, 0x0b, 0xa6, 0xb2, 0xe7, 0x91, 0xa5, 0xd4, 0x35,
		0xf1, 0x94, 0x66, 0xa2, 0x28, 0x13, 0x32, 0x06, 0x32, 0x46, 0x9d, 0x5e, 0x76, 0x22, 0xd4, 0x7d,
		0x57, 0xbf, 0xfd, 0xbd, 0x7e, 0xbb, 0xe5, 0xa1, 0xee, 0x51, 0xcc, 0x74, 0x1b, 0xa3, 0xc1, 0xa3,
		0x20, 0xfe, 0xce, 0x45, 0x82, 0x53, 0x66, 0x44, 0xc4, 0x99, 0xd8, 0x3c, 0xe7, 0x55, 0x9c, 0xfb,
		0x17, 0xbd, 0xf1, 0x85, 0x82, 0x97, 0xf5, 0x2e, 0x7c, 0xe0, 0x2f, 0xe1, 0xd3, 0x67, 0xff, 0x41,
		0x6a, 0x77, 0xa1, 0x10, 0x70, 0x53, 0xf0, 0x0f, 0x91, 0x2c, 0x33, 0x1d, 0x8b, 0x0c, 0xd9, 0x8a,
		0x70, 0x53, 0xa4, 0x3e, 0x5b, 0x91, 0xde, 0x62, 0x42, 0xa7, 0xb5, 0xc4, 0x92, 0x96, 0x12, 0xea,
		0xf3, 0x45, 0xcd, 0x88, 0x89, 0x91, 0xe8, 0xf4, 0xe9, 0x92, 0x62, 0xb2, 0x01, 0x7c, 0x9a, 0x10,
		0x16, 0xdb, 0xe1, 0xd3, 0x1c, 0x51, 0x34, 0x43, 0x23, 0x95, 0xd1, 0x3e, 0xe8, 0x0d, 0x0c, 0x9f,
		0xc3, 0x4e, 0xf8, 0x1c, 0xb4, 0x3b, 0xa9, 0xd8, 0xad, 0x96, 0x27, 0x7c, 0x9f, 0xcf, 0xb4, 0x9f,
		0x6c, 0x88, 0x1e, 0x2a, 0xe6, 0x59, 0x94, 0x9b, 0x55, 0x8d, 0xb1, 0xac, 0x31, 0xd6, 0x35, 0xc2,
		0xc2, 0x3c, 0xae, 0x89, 0xf4, 0xf5, 0x50, 0xd1, 0xef, 0xf5, 0xc6, 0x01, 0xcc, 0x25, 0x80, 0xfa,
		0x44, 0x86, 0x24, 0xd5, 0xf1, 0x41, 0x43, 0x69, 0x6a, 0x0e, 0x39, 0x58, 0xb8, 0x33, 0xed, 0x96,
		0xa2, 0x0c, 0xc0, 0x06, 0xd2, 0x14, 0xd2, 0x34, 0xeb, 0xd2, 0x54, 0x17, 0x28, 0xb1, 0x03, 0x26,
		0x43, 0xc0, 0x89, 0x19, 0x40, 0xb1, 0xb3, 0xbe, 0x09, 0x11, 0x60, 0x4e, 0x14, 0x98, 0x12, 0x09,
		0xc6, 0x45, 0x83, 0x71, 0x11, 0x61, 0x54, 0x54, 0xf0, 0x88, 0x0c, 0x26, 0xd1, 0xc1, 0x0f, 0xc8,
		0x16, 0xe8, 0xd5, 0xe9, 0x59, 0xbc, 0xdc, 0x9f, 0xd3, 0x2c, 0xf6, 0xde, 0x74, 0x06, 0x9f, 0x58,
		0x69, 0x88, 0x97, 0xa7, 0x5e, 0x9d, 0xec, 0xd7, 0xb2, 0x81, 0xb3, 0x5d, 0x38, 0xe3, 0xb7, 0x06,
		0xf6, 0xbe, 0xb1, 0x83, 0x40, 0x78, 0x2e, 0xfb, 0x71, 0x47, 0x0f, 0xf8, 0xef, 0xfe, 0xfe, 0xa7,
		0x82, 0x75, 0xda, 0xf8, 0xf1, 0xa9, 0x68, 0x9d, 0x36, 0x46, 0x3f, 0x16, 0xc3, 0xbf, 0x46, 0x3f,
		0x97, 0x3e, 0x15, 0xac, 0xf2, 0xe4, 0xe7, 0xca, 0xa7, 0x82, 0x55, 0x69, 0x1c, 0x3c, 0x3c, 0xbc,
		0x39, 0xf8, 0x7e, 0x3c, 0x50, 0x5f, 0xf8, 0xaf, 0x3c, 0xfb, 0x4b, 0x34, 0x58, 0x77, 0x1c, 0x1c,
		0x66, 0x88, 0xa8, 0xab, 0x20, 0xea, 0xf5, 0x44, 0x6d, 0x5b, 0x4f, 0x35, 0xeb, 0x43, 0xe3, 0x7b,
		0xf1, 0xb0, 0x3c, 0x78, 0x77, 0xf0, 0xfd, 0x64, 0xf0, 0xfa, 0x97, 0x3f, 0x96, 0x7d, 0xac, 0x78,
		0x78, 0x32, 0x78, 0xb7, 0xe2, 0xbf, 0x54, 0x07, 0xef, 0x24, 0xf7, 0xa8, 0x0c, 0xf6, 0x17, 0x3e,
		0x3a, 0xfc, 0x7d, 0x69, 0xd5, 0x82, 0xf2, 0x8a, 0x05, 0xc7, 0xab, 0x16, 0x1c, 0xaf, 0x58, 0xb0,
		0xf2, 0x2b, 0x95, 0x56, 0x2c, 0xa8, 0x0c, 0x7e, 0x2c, 0x7c, 0x7e, 0x7f, 0xf9, 0x47, 0xab, 0x83,
		0x83, 0x1f, 0xab, 0xfe, 0xdb, 0xc9, 0xe0, 0xc7, 0xbb, 0x83, 0x0c, 0xb0, 0xf8, 0x5e, 0xba, 0xbe,
		0xd7, 0x20, 0x0d, 0x79, 0x41, 0x7a, 0xf9, 0xe4, 0x2b, 0x85, 0x94, 0x46, 0x7e, 0x39, 0x6c, 0x19,
		0xd8, 0x32, 0xb0, 0x65, 0x32, 0x6a, 0xcb, 0x68, 0xe7, 0xc7, 0xaf, 0x86, 0x23, 0x5b, 0x24, 0x73,
		0x03, 0xa7, 0x23, 0xba, 0xfd, 0x80, 0x5f, 0xec, 0x4e, 0x36, 0x86, 0xe4, 0x85, 0xe4, 0x85, 0xe4,
		0xdd, 0x29, 0xc9, 0xdb, 0x77, 0xdc, 0xa0, 0x58, 0x35, 0x20, 0x79, 0xab, 0x8c, 0x5b, 0xde, 0xda,
		0xee, 0x73, 0x26, 0x3c, 0x48, 0x97, 0x8e, 0xcb, 0xce, 0xa8, 0x86, 0xc4, 0xea, 0xc2, 0xf6, 0x61,
		0x3d, 0x84, 0xc1, 0xfd, 0x3f, 0x78, 0x76, 0x33, 0x70, 0xba, 0xee, 0x7b, 0xe7, 0xd9, 0x09, 0xbb,
		0x60, 0x15, 0xd8, 0x9f, 0x33, 0x30, 0xe0, 0x7b, 0xb8, 0xb4, 0xbf, 0x65, 0xfe, 0x4a, 0xab, 0x95,
		0xca, 0x71, 0x25, 0xc3, 0xd7, 0x0a, 0x7b, 0xde, 0xe0, 0x0e, 0xba, 0x41, 0x52, 0xa6, 0xe1, 0x13,
		0xd1, 0x7e, 0x4c, 0xd5, 0x25, 0xe3, 0x74, 0xe7, 0xf1, 0xdf, 0x47, 0x2c, 0x29, 0x11, 0x39, 0xa6,
		0xe2, 0x93, 0xd1, 0xcf, 0x93, 0xdf, 0x69, 0x8d, 0x5e, 0xd5, 0xa7, 0x01, 0x9d, 0xc4, 0x15, 0xcf,
		0x6e, 0x39, 0x7d, 0xc6, 0x3c, 0xc0, 0xf1, 0x7e, 0x48, 0x5c, 0x89, 0xcf, 0xce, 0x40, 0xe2, 0x0a,
		0x12, 0x57, 0x56, 0x6f, 0xc4, 0x94, 0x99, 0xb6, 0x40, 0xbe, 0x6c, 0xe2, 0x98, 0x91, 0xe1, 0xe1,
		0x70, 0x80, 0xc3, 0x01, 0x0e, 0x07, 0x5e, 0x01, 0x12, 0x6d, 0x68, 0x37, 0x9b, 0x81, 0xd5, 0xeb,
		0x7a, 0x01, 0x3f, 0x5d, 0x45, 0xb9, 0x70, 0xd1, 0x23, 0x98, 0xaf, 0xfd, 0xbd, 0x78, 0xb2, 0xfb,
		0xed, 0xf0, 0xd6, 0x8b, 0x6f, 0x8b, 0xc7, 0xdc, 0xdb, 0x9b, 0x31, 0x02, 0xd9, 0xa5, 0x98, 0x49,
		0x69, 0x66, 0x5e, 0xaa, 0x99, 0x96, 0x6e, 0xb1, 0x49, 0xb9, 0xd8, 0xa4, 0x5d, 0x2c, 0x52, 0xcf,
		0x90, 0x89, 0xcf, 0x4c, 0xf1, 0xec, 0xee, 0xd7, 0x05, 0x7a, 0x1f, 0x8a, 0x2d, 0xcb, 0xed, 0x77,
		0x3e, 0x93, 0xeb, 0x10, 0x65, 0x44, 0x4c, 0xd5, 0xc0, 0xd6, 0x66, 0x7c, 0xb3, 0x93, 0x3f, 0x66,
		0x98, 0x34, 0x67, 0xda, 0x57, 0x1b, 0x93, 0x83, 0x6f, 0xc1, 0xd1, 0x67, 0xfa, 0x39, 0x31, 0x38,
		0xfb, 0x0c, 0xf1, 0xf0, 0xfc, 0xd5, 0x1b, 0xf4, 0xe9, 0x26, 0x75, 0xf5, 0x06, 0x7d, 0xbc, 0x89,
		0x5c, 0xff, 0x5e, 0x36, 0x76, 0x4d, 0x6b, 0xae, 0x19, 0x23, 0xfb, 0x84, 0x13, 0xf2, 0x4c, 0x63,
		0xf7, 0xe8, 0x11, 0x46, 0xb1, 0x7b, 0x09, 0xd8, 0x1d, 0xd8, 0x1d, 0xd8, 0x1d, 0xd8, 0x1d, 0xd8,
		0x1d, 0xd8, 0x1d, 0xd8, 0x1d, 0xd8, 0x1d, 0xd8, 0x1d, 0xd8, 0x7d, 0xab, 0xb1, 0xbb, 0x27, 0x02,
		0xcf, 0x76, 0xfd, 0x8e, 0x13, 0x58, 0x76, 0x10, 0x88, 0x4e, 0x2f, 0xf0, 0xcd, 0xa1, 0xf8, 0x65,
		0x0f, 0x03, 0xe0, 0x06, 0xe0, 0x06, 0xe0, 0x06, 0xe0, 0x66, 0xa4, 0xf7, 0xbe, 0xe3, 0x06, 0x6f,
		0x0d, 0x42, 0xed, 0x0a, 0xa0, 0x36, 0xa0, 0x36, 0xa0, 0xf6, 0x56, 0x42, 0xed, 0x52, 0x05, 0x40,
		0x1b, 0x40, 0xdb, 0x00, 0xd0, 0xf6, 0x45, 0xd3, 0x13, 0x81, 0xf5, 0x97, 0x78, 0x31, 0x87, 0xaf,
		0x67, 0x9e, 0x01, 0x58, 0x0d, 0x58, 0x0d, 0x58, 0x0d, 0x58, 0xcd, 0x69, 0xbd, 0x77, 0xfb, 0x81,
		0xe3, 0x3e, 0x5b, 0x3d, 0xdb, 0xf7, 0x43, 0xf2, 0x31, 0xd9, 0x25, 0x66, 0x17, 0x34, 0x42, 0xc8,
		0xe5, 0x16, 0x77, 0xef, 0xbf, 0x45, 0xad, 0x30, 0xff, 0x1c, 0x68, 0x06, 0x68, 0x06, 0x68, 0x06,
		0x68, 0x06, 0x46, 0x7a, 0x37, 0xd2, 0x6a, 0x70, 0x41, 0x27, 0x9c, 0x1a, 0xd8, 0xdb, 0x48, 0xeb,
		0xc1, 0x18, 0xbc, 0x2e, 0x31, 0xb5, 0x22, 0x5c, 0xd4, 0xcb, 0x06, 0x9f, 0x61, 0xba, 0x8b, 0x5b,
		0xf4, 0xa0, 0xac, 0xb7, 0x28, 0x34, 0x63, 0x36, 0x1b, 0xf6, 0x18, 0xc5, 0xc3, 0x0c, 0x55, 0x30,
		0x03, 0x8d, 0x19, 0xd0, 0xda, 0x70, 0x2b, 0x5a, 0x1b, 0x1a, 0x16, 0x0d, 0xbb, 0xe3, 0xf9, 0x4b,
		0x55, 0xb5, 0x1d, 0x73, 0x0b, 0x85, 0xa9, 0x05, 0x6a, 0xa4, 0x95, 0xc2, 0xa8, 0x48, 0xff, 0x88,
		0xb5, 0x84, 0x37, 0x67, 0xa6, 0xb3, 0xc2, 0x6d, 0xf8, 0x55, 0x59, 0x1a, 0x2c, 0xf0, 0x51, 0xce,
		0x80, 0xa5, 0x09, 0x85, 0x1d, 0x18, 0xe8, 0xbf, 0x39, 0xda, 0x36, 0xe5, 0x55, 0xd9, 0x25, 0x54,
		0x65, 0x67, 0xc8, 0x23, 0x80, 0xaa, 0x6c, 0x54, 0x65, 0xa3, 0x2a, 0x1b, 0x7e, 0x4f, 0xf8, 0x3d,
		0xe1, 0xf7, 0x44, 0x65, 0xc7, 0x32, 0x11, 0x83, 0xca, 0x8e, 0x99, 0x2f, 0x8e, 0x74, 0x33, 0xf5,
		0xe7, 0x20, 0xdd, 0x2c, 0xb5, 0x57, 0x8f, 0xca, 0x0e, 0xb8, 0x9d, 0xcc, 0xb0, 0x0f, 0xaa, 0xb2,
		0x81, 0xdd, 0x81, 0xdd, 0x81, 0xdd, 0x81, 0xdd, 0x81, 0xdd, 0x81, 0xdd, 0x81, 0xdd, 0x81, 0xdd,
		0x81, 0xdd, 0x81, 0xdd, 0x33, 0x82, 0xdd, 0x9b, 0xdd, 0xbe, 0x1b, 0x08, 0xcf, 0x60, 0x52, 0x70,
		0xf4, 0x04, 0x33, 0xd0, 0xba, 0x08, 0x68, 0x0d, 0x68, 0x0d, 0x68, 0x9d, 0x46, 0x68, 0xcd, 0x1d,
		0x24, 0x9c, 0x3a, 0x1c, 0x9a, 0x4d, 0xe1, 0xfb, 0xd6, 0xf0, 0x2f, 0x13, 0x5d, 0x24, 0x16, 0xbd,
		0x0f, 0xf3, 0xcf, 0x3b, 0xcc, 0xe4, 0x08, 0x1e, 0x53, 0x82, 0x2d, 0x0e, 0x01, 0x17, 0x9f, 0xa0,
		0x8b, 0x4b, 0xe0, 0xc5, 0x2e, 0xf8, 0x62, 0x17, 0x80, 0xb1, 0x0a, 0x42, 0xc3, 0xd0, 0xd2, 0x10,
		0xc7, 0x18, 0xf3, 0x3d, 0xac, 0x02, 0x61, 0xd5, 0x72, 0x0c, 0xd9, 0xca, 0x26, 0x93, 0x95, 0xcd,
		0x7a, 0x24, 0xcc, 0x7b, 0x26, 0x62, 0xf5, 0x50, 0xc4, 0x6c, 0xae, 0xc6, 0xed, 0xb1, 0x48, 0xc2,
		0x74, 0x8d, 0xc1, 0x83, 0x11, 0xab, 0x27, 0x23, 0x69, 0x12, 0x29, 0xbe, 0x2d, 0x97, 0xab, 0x27,
		0xe5, 0x72, 0xe1, 0xe4, 0xf8, 0xa4, 0x70, 0x5a, 0xa9, 0x14, 0xab, 0xc5, 0xca, 0x16, 0x53, 0xcd,
		0x5e, 0x36, 0x77, 0xcf, 0x4a, 0x8e, 0xbf, 0x89, 0xa9, 0x9b, 0x63, 0xec, 0xef, 0x89, 0xff, 0x5f,
		0x34, 0x63, 0xb4, 0x35, 0x26, 0xcf, 0x83, 0xad, 0x01, 0x5b, 0x03, 0xb6, 0x06, 0x6c, 0x0d, 0xd8,
		0x1a, 0xb0, 0x35, 0x60, 0x6b, 0xc0, 0xd6, 0x80, 0xad, 0x01, 0x5b, 0x03, 0xb6, 0xc6, 0x96, 0xda,
		0x1a, 0x9e, 0x08, 0x3c, 0x47, 0xb4, 0xac, 0xc8, 0x06, 0xf8, 0xbf, 0xbe, 0xf0, 0xe3, 0x30, 0x3a,
		0x56, 0x3d, 0x18, 0xd6, 0x07, 0xac, 0x0f, 0x58, 0x1f, 0xb0, 0x3e, 0x60, 0x7d, 0xc0, 0xfa, 0x80,
		0xf5, 0x01, 0xeb, 0x03, 0xd6, 0x07, 0xac, 0x0f, 0x58, 0x1f, 0x5b, 0x6a, 0x7d, 0x04, 0x4e, 0x47,
		0x74, 0xfb, 0x41, 0xfc, 0xd6, 0xc7, 0xaa, 0x07, 0xc3, 0xfa, 0x80, 0xf5, 0x01, 0xeb, 0x03, 0xd6,
		0x07, 0xac, 0x0f, 0x58, 0x1f, 0xb0, 0x3e, 0x60, 0x7d, 0xc0, 0xfa, 0x80, 0xf5, 0x01, 0xeb, 0x23,
		0x0d, 0xd6, 0x47, 0xaa, 0xcb, 0x4e, 0x0c, 0xf5, 0x30, 0x8d, 0xf6, 0x37, 0xda, 0xcb, 0x34, 0xec,
		0x7b, 0x79, 0x64, 0xa8, 0x66, 0x2e, 0x67, 0xb4, 0xb7, 0xe9, 0xdd, 0xf0, 0xab, 0x3f, 0x9e, 0x4d,
		0xbe, 0x3a, 0x46, 0xda, 0xf2, 0x42, 0x4b, 0x8c, 0xb4, 0x8d, 0xd3, 0x12, 0x46, 0x49, 0x65, 0xfa,
		0x2c, 0x5d, 0x94, 0x54, 0x62, 0xa4, 0x6d, 0x02, 0xd6, 0x2a, 0xfa, 0x94, 0xa4, 0xc9, 0x1a, 0x45,
		0x9f, 0x92, 0xf4, 0x5e, 0x3d, 0x46, 0xda, 0x26, 0xb0, 0x2b, 0x46, 0xda, 0xf2, 0x28, 0x3e, 0x8c,
		0xb4, 0x05, 0xac, 0x06, 0xac, 0x06, 0xac, 0x36, 0x43, 0xef, 0x18, 0x69, 0x8b, 0x91, 0xb6, 0xd0,
		0x0c, 0xd0, 0x0c, 0xd0, 0x0c, 0xd0, 0x0c, 0xf3, 0xf4, 0x8e, 0x91, 0xb6, 0x71, 0x7b, 0x5d, 0x30,
		0xd2, 0x56, 0xe3, 0x41, 0x18, 0x69, 0x9b, 0x80, 0xc7, 0x08, 0x23, 0x6d, 0x53, 0xcd, 0x0c, 0x18,
		0x69, 0x8b, 0x91, 0xb6, 0xf0, 0xfc, 0x31, 0xef, 0xb4, 0xd3, 0x23, 0x6d, 0x39, 0xc7, 0x9f, 0xe6,
		0xcc, 0x67, 0x7d, 0xa4, 0x66, 0xa0, 0xed, 0x5e, 0x82, 0x14, 0xc7, 0x4d, 0x69, 0x46, 0x29, 0x2c,
		0xcf, 0x32, 0xfa, 0xd7, 0x0c, 0x4d, 0xe9, 0x51, 0x13, 0x9d, 0x06, 0x34, 0xee, 0x9f, 0x69, 0x0c,
		0x32, 0xeb, 0xf8, 0x63, 0xa6, 0x0e, 0xe9, 0x6c, 0xe3, 0x8e, 0x39, 0xbd, 0x47, 0xfc, 0xde, 0x22,
		0x6e, 0xef, 0x90, 0x31, 0x6f, 0x90, 0x31, 0xef, 0x8f, 0x11, 0x6f, 0x4f, 0xb2, 0x12, 0x99, 0xab,
		0x03, 0x79, 0x9e, 0xdb, 0xcf, 0x3c, 0x6d, 0xf7, 0xc7, 0x6a, 0x71, 0x31, 0x3b, 0x94, 0xd9, 0x1d,
		0xc9, 0x98, 0x74, 0x9e, 0xc3, 0xa4, 0xf3, 0x6c, 0x99, 0x0f, 0xec, 0x0e, 0x60, 0xb3, 0x8e, 0x5f,
		0x13, 0x0e, 0x5f, 0x33, 0x8e, 0x5e, 0xa3, 0x2e, 0x75, 0xa3, 0x8e, 0x5d, 0x93, 0x3e, 0x2c, 0xe3,
		0xbe, 0xab, 0xcc, 0x3b, 0x70, 0x1b, 0x69, 0x8e, 0x17, 0x99, 0x25, 0xea, 0x2a, 0x88, 0x1a, 0x8e,
		0xd8, 0x1d, 0x70, 0xc4, 0xa6, 0xd5, 0xb1, 0xd9, 0x48, 0x8b, 0x9b, 0x8b, 0xc1, 0xdc, 0x6d, 0x76,
		0x5d, 0x57, 0x84, 0xb9, 0xb4, 0x96, 0xfd, 0xb9, 0xeb, 0x05, 0x06, 0x6c, 0x9b, 0xc5, 0x47, 0xc0,
		0xca, 0x81, 0x95, 0x03, 0x2b, 0x67, 0xa7, 0xac, 0x1c, 0x13, 0x1d, 0x31, 0x0c, 0x74, 0xc0, 0x30,
		0x54, 0x43, 0x64, 0x00, 0x0f, 0x9a, 0xac, 0x19, 0x32, 0xdd, 0x1b, 0xc9, 0x70, 0x8d, 0x50, 0x1c,
		0xe5, 0x21, 0x26, 0x3a, 0x6f, 0x99, 0xac, 0x05, 0x8a, 0xeb, 0x4a, 0xe3, 0xeb, 0x30, 0x11, 0xcb,
		0x2d, 0x03, 0x81, 0xc6, 0x89, 0x40, 0x9b, 0xed, 0xae, 0x2f, 0xcc, 0x22, 0xd0, 0xf1, 0x23, 0x80,
		0x40, 0x81, 0x40, 0x81, 0x40, 0x81, 0x40, 0x81, 0x40, 0x81, 0x40, 0x81, 0x40, 0x81, 0x40, 0x81,
		0x40, 0x81, 0x40, 0x87, 0xf0, 0xf0, 0xc9, 0x76, 0xda, 0x7d, 0xcf, 0x30, 0x06, 0x8d, 0x1e, 0x02,
		0x14, 0x0a, 0x14, 0x0a, 0x14, 0x0a, 0x14, 0x0a, 0x14, 0x0a, 0x14, 0x0a, 0x14, 0x0a, 0x14, 0x0a,
		0x14, 0x0a, 0x14, 0x3a, 0x04, 0x88, 0xdd, 0x9e, 0x70, 0xcd, 0x42, 0xd0, 0xd1, 0x13, 0x80, 0x3f,
		0x81, 0x3f, 0x81, 0x3f, 0x81, 0x3f, 0x81, 0x3f, 0x81, 0x3f, 0x81, 0x3f, 0x81, 0x3f, 0x81, 0x3f,
		0x81, 0x3f, 0x87, 0xe8, 0x70, 0x3c, 0x89, 0xcd, 0x2c, 0x04, 0x8d, 0x1e, 0x02, 0x14, 0x0a, 0x14,
		0x0a, 0x14, 0x0a, 0x14, 0x0a, 0x14, 0x0a, 0x14, 0x0a, 0x14, 0x0a, 0x14, 0x0a, 0x14, 0xba, 0xc3,
		0x28, 0x54, 0x78, 0x5e, 0xd7, 0xf3, 0x2d, 0x4f, 0x34, 0x85, 0xf3, 0x55, 0xb4, 0xf8, 0x11, 0xe8,
		0xeb, 0x07, 0x00, 0x7d, 0x02, 0x7d, 0x02, 0x7d, 0x02, 0x7d, 0x02, 0x7d, 0x02, 0x7d, 0x02, 0x7d,
		0x02, 0x7d, 0x02, 0x7d, 0xee, 0x30, 0xfa, 0xec, 0x08, 0xdf, 0xb7, 0x9f, 0x85, 0x49, 0xfc, 0xb9,
		0xf8, 0x08, 0x20, 0x50, 0x20, 0x50, 0x20, 0x50, 0x20, 0x50, 0x20, 0x50, 0x20, 0x50, 0x20, 0x50,
		0x20, 0x50, 0x20, 0x50, 0x20, 0x50, 0xdf, 0xf2, 0x47, 0x2a, 0xd6, 0x14, 0xfa, 0x0c, 0xb7, 0x07,
		0xf2, 0x04, 0xf2, 0x04, 0xf2, 0x04, 0xf2, 0x04, 0xf2, 0x04, 0xf2, 0x04, 0xf2, 0x04, 0xf2, 0x04,
		0xf2, 0xdc, 0x61, 0xe4, 0x39, 0x1e, 0xe0, 0xc2, 0x0c, 0x38, 0xc3, 0x5d, 0x81, 0x33, 0x81, 0x33,
		0x81, 0x33, 0x77, 0x0a, 0x67, 0xfa, 0x81, 0xe7, 0xb8, 0xcf, 0x26, 0x26, 0x1a, 0xbc, 0xdd, 0x22,
		0x99, 0x3b, 0xce, 0x81, 0xe7, 0x17, 0xbb, 0x93, 0x8d, 0x21, 0x79, 0x21, 0x79, 0x21, 0x79, 0x77,
		0x4a, 0xf2, 0xf6, 0x1d, 0x37, 0x28, 0x56, 0x0d, 0x48, 0xde, 0x2a, 0xcc, 0x7b, 0x98, 0xf7, 0x30,
		0xef, 0x53, 0x71, 0xa5, 0xd5, 0x4a, 0xe5, 0x18, 0xf6, 0xfc, 0xf6, 0xda, 0xf3, 0x18, 0x60, 0xbb,
		0x71, 0x80, 0x2d, 0xd7, 0x6c, 0x64, 0x03, 0xf3, 0x6b, 0x19, 0x86, 0x21, 0x27, 0x33, 0xbe, 0x36,
		0xb0, 0x9b, 0x76, 0xd3, 0xe7, 0x9b, 0x5f, 0x3b, 0xde, 0x2f, 0x65, 0x03, 0x6c, 0x0b, 0x18, 0x60,
		0x9b, 0x02, 0xab, 0x02, 0x03, 0x6c, 0xe5, 0xdf, 0x88, 0x6d, 0x80, 0x6d, 0x73, 0xc2, 0x03, 0xfc,
		0x75, 0xfd, 0xc3, 0x7d, 0x79, 0xdd, 0x0d, 0x45, 0xb8, 0x1b, 0xe0, 0x6e, 0x80, 0xbb, 0x81, 0xe3,
		0x4d, 0xb9, 0x04, 0x48, 0xb4, 0x61, 0xaf, 0xeb, 0x05, 0xfc, 0x24, 0x35, 0x61, 0x82, 0x70, 0x77,
		0xe6, 0xcb, 0x7e, 0x2f, 0x9e, 0xec, 0x7e, 0x3b, 0xbc, 0xeb, 0xf2, 0x29, 0xf7, 0xe6, 0x66, 0xcc,
		0x3e, 0x76, 0xc9, 0x65, 0x52, 0x82, 0x99, 0x97, 0x64, 0xa6, 0x25, 0x5a, 0x6c, 0x92, 0x2d, 0x36,
		0x09, 0x17, 0x8b, 0xa4, 0x33, 0x64, 0xd4, 0x33, 0x53, 0x3c, 0xbb, 0xc3, 0x75, 0xa9, 0xd0, 0xb2,
		0xdc, 0x7e, 0xe7, 0xb3, 0xf0, 0x0c, 0x0e, 0xe6, 0xad, 0x1a, 0xd8, 0xda, 0x8c, 0x37, 0x76, 0xf2,
		0xc7, 0x0c, 0x93, 0xe6, 0x4c, 0x7b, 0x67, 0x63, 0x72, 0xe9, 0x2d, 0xb8, 0xf6, 0x4c, 0x3f, 0x27,
		0x06, 0xf7, 0x9e, 0x21, 0x1e, 0x9e, 0xbf, 0x7a, 0x83, 0x5e, 0xdc, 0xa4, 0xae, 0xde, 0xa0, 0x57,
		0x37, 0x91, 0xeb, 0xdf, 0xcb, 0xc6, 0xae, 0x69, 0x9d, 0x33, 0xcd, 0xc8, 0x3e, 0x79, 0x5f, 0x34,
		0x3d, 0x11, 0x58, 0x7f, 0x89, 0x17, 0x73, 0xa8, 0x7d, 0xe6, 0x19, 0x80, 0xd7, 0x80, 0xd7, 0x80,
		0xd7, 0x80, 0xd7, 0x8c, 0xf4, 0xee, 0x75, 0xfb, 0x81, 0xe3, 0x3e, 0x5b, 0x3d, 0xdb, 0xf7, 0x43,
		0xf2, 0x31, 0x87, 0xb1, 0x99, 0x72, 0xcc, 0x52, 0xae, 0x11, 0x42, 0x2e, 0xb7, 0xec, 0x56, 0xcb,
		0x13, 0xbe, 0x6f, 0x50, 0x2b, 0xcc, 0x3f, 0x07, 0x9a, 0x01, 0x9a, 0x01, 0x9a, 0x01, 0x9a, 0x81,
		0x91, 0xde, 0x9d, 0x9e, 0x21, 0xe9, 0x32, 0xa7, 0x13, 0x4e, 0x0d, 0xec, 0x3d, 0x3e, 0x9b, 0xcc,
		0xf9, 0x5d, 0xa6, 0x27, 0xff, 0xb5, 0x6c, 0xf0, 0xec, 0x17, 0xf5, 0xb2, 0xc1, 0x67, 0xdc, 0xd8,
		0x41, 0x20, 0x3c, 0xd7, 0xd8, 0x75, 0x44, 0x0f, 0xfa, 0xef, 0xfe, 0xfe, 0xa7, 0x82, 0x75, 0xda,
		0xf8, 0xf1, 0xa9, 0x68, 0x9d, 0x36, 0x46, 0x3f, 0x16, 0xc3, 0xbf, 0x46, 0x3f, 0x97, 0x3e, 0x15,
		0xac, 0xf2, 0xe4, 0xe7, 0xca, 0xa7, 0x82, 0x55, 0x69, 0x1c, 0x3c, 0x3c, 0xbc, 0x39, 0xf8, 0x7e,
		0x3c, 0x50, 0x5f, 0xf8, 0xaf, 0xbc, 0xb1, 0x97, 0x69, 0xec, 0x65, 0xc8, 0x67, 0x14, 0x0f, 0x33,
		0x54, 0xc1, 0x0c, 0x34, 0x66, 0xb0, 0xad, 0xa7, 0x9a, 0xf5, 0xa1, 0xf1, 0xbd, 0x78, 0x58, 0x1e,
		0xbc, 0x3b, 0xf8, 0x7e, 0x32, 0x78, 0xfd, 0xcb, 0x1f, 0xcb, 0x3e, 0x56, 0x3c, 0x3c, 0x19, 0xbc,
		0x5b, 0xf1, 0x5f, 0xaa, 0x83, 0x77, 0x92, 0x7b, 0x54, 0x06, 0xfb, 0x0b, 0x1f, 0x1d, 0xfe, 0xbe,
		0xb4, 0x6a, 0x41, 0x79, 0xc5, 0x82, 0xe3, 0x55, 0x0b, 0x8e, 0x57, 0x2c, 0x58, 0xf9, 0x95, 0x4a,
		0x2b, 0x16, 0x54, 0x06, 0x3f, 0x16, 0x3e, 0xbf, 0xbf, 0xfc, 0xa3, 0xd5, 0xc1, 0xc1, 0x8f, 0x55,
		0xff, 0xed, 0x64, 0xf0, 0xe3, 0xdd, 0x41, 0x06, 0x45, 0xc3, 0xee, 0x78, 0xfe, 0x52, 0x95, 0x3c,
		0xc0, 0x9c, 0x0f, 0x3a, 0xb5, 0x40, 0x8d, 0xe4, 0x85, 0x8e, 0x72, 0x0e, 0x8f, 0x58, 0x33, 0x92,
		0x72, 0x66, 0xf2, 0x44, 0xef, 0xc3, 0xaf, 0xfa, 0x38, 0x36, 0x36, 0xb7, 0xa8, 0xae, 0x6d, 0x94,
		0x9b, 0xcb, 0x9e, 0x65, 0xc6, 0x95, 0xf2, 0x9b, 0x33, 0x99, 0x64, 0x56, 0x42, 0x92, 0x59, 0x86,
		0x3c, 0x02, 0x48, 0x32, 0x43, 0x92, 0x19, 0xe3, 0xde, 0x48, 0x32, 0x83, 0xaf, 0x13, 0xbe, 0x4e,
		0xf8, 0x3a, 0x8d, 0xd1, 0x3b, 0x92, 0xcc, 0x62, 0xf7, 0xef, 0x20, 0xc9, 0x4c, 0xfd, 0x39, 0x48,
		0x32, 0x4b, 0xed, 0xd5, 0x23, 0xc9, 0x0c, 0xae, 0x26, 0x33, 0xec, 0x83, 0x24, 0x33, 0xc0, 0x6b,
		0xc0, 0x6b, 0xc0, 0xeb, 0x0c, 0xc3, 0x6b, 0x24, 0x99, 0x21, 0xc9, 0x0c, 0x9a, 0x01, 0x9a, 0x01,
		0x9a, 0x01, 0x9a, 0x61, 0x9e, 0xde, 0x91, 0x64, 0x16, 0xb7, 0xdf, 0x05, 0x49, 0x66, 0x1a, 0x0f,
		0x42, 0x92, 0x59, 0x02, 0x3e, 0x23, 0x24, 0x99, 0xa5, 0x9a, 0x19, 0x90, 0x64, 0x86, 0x24, 0x33,
		0x78, 0xfe, 0x98, 0x77, 0xda, 0xe9, 0x24, 0x33, 0xce, 0x84, 0xa4, 0x9c, 0xd1, 0x1c, 0x33, 0x86,
		0x96, 0x84, 0x7c, 0x74, 0x83, 0xf6, 0x96, 0xb2, 0x14, 0x96, 0xce, 0xfe, 0x96, 0x23, 0x9a, 0x4a,
		0xac, 0xc1, 0xe5, 0x5e, 0x8c, 0x54, 0x93, 0xff, 0x2d, 0x0c, 0x66, 0xe4, 0xf5, 0x20, 0x57, 0xfe,
		0xc2, 0xf1, 0x83, 0x5a, 0x10, 0xe8, 0xe5, 0x47, 0xe5, 0x2f, 0x1d, 0xb7, 0xde, 0x16, 0x43, 0x4b,
		0xdf, 0xcf, 0xbf, 0xcb, 0xb9, 0xfd, 0x76, 0x5b, 0xa3, 0xd7, 0xe7, 0xa5, 0xfd, 0x8d, 0x6f, 0xb3,
		0x6b, 0xaf, 0x25, 0x3c, 0xd1, 0xfa, 0xf9, 0x65, 0xbc, 0x55, 0xac, 0x57, 0xc4, 0xc4, 0xd0, 0x66,
		0x18, 0x59, 0x83, 0x83, 0xf9, 0x39, 0x97, 0xc6, 0xb2, 0xea, 0x0c, 0xa7, 0xb6, 0x42, 0xf1, 0xde,
		0x75, 0xef, 0x9b, 0xf9, 0x9e, 0x09, 0x17, 0xcc, 0x78, 0xb1, 0x6a, 0x37, 0x2a, 0x7f, 0x2f, 0x0a,
		0x77, 0x42, 0xcc, 0xf6, 0xd6, 0xca, 0xea, 0x26, 0x66, 0x6f, 0x93, 0xb3, 0xb4, 0x75, 0x5c, 0xea,
		0xfa, 0x2e, 0x73, 0x5d, 0x97, 0x38, 0x9b, 0xcb, 0x9b, 0xcd, 0xa5, 0xcd, 0xe2, 0xb2, 0x36, 0x2b,
		0x65, 0xa8, 0xd9, 0xcc, 0x7a, 0x83, 0xd4, 0x38, 0x06, 0xa7, 0x69, 0xc6, 0xab, 0xb4, 0xe3, 0x52,
		0x1c, 0xf1, 0x27, 0xbe, 0x38, 0x13, 0x57, 0x3c, 0x89, 0x3d, 0x6e, 0xc4, 0x1e, 0x1f, 0x62, 0x8d,
		0x03, 0xc5, 0x8b, 0xb2, 0xb5, 0xe3, 0x37, 0x7c, 0x83, 0xc7, 0x34, 0xe3, 0xf3, 0x04, 0xb0, 0x44,
		0x50, 0x08, 0x81, 0xce, 0x79, 0x4d, 0xdb, 0xf3, 0x0f, 0x77, 0x81, 0x8c, 0x81, 0x8c, 0x81, 0x8c,
		0x51, 0xa2, 0x17, 0xa7, 0x25, 0xdc, 0xc0, 0x09, 0x5e, 0x3c, 0xf1, 0xc4, 0x21, 0x68, 0x34, 0xb2,
		0x71, 0xf3, 0xe7, 0xe3, 0xaf, 0xf2, 0xb3, 0xed, 0x0b, 0xbe, 0xb9, 0x1d, 0xb5, 0x5a, 0xed, 0xf1,
		0xae, 0x7e, 0xfb, 0x7b, 0xfd, 0xf6, 0xf1, 0xfe, 0x8f, 0x9b, 0xba, 0x2e, 0x11, 0x86, 0xa9, 0xc7,
		0x3e, 0x4b, 0x9c, 0x87, 0xb9, 0xa2, 0xf4, 0xb6, 0xf6, 0xfe, 0xfc, 0xe3, 0x5d, 0x3e, 0x0d, 0x45,
		0xb3, 0xcc, 0x6f, 0x76, 0x5f, 0x3b, 0xab, 0x9d, 0xdd, 0x25, 0x3d, 0xf8, 0xa2, 0x11, 0xb7, 0x6c,
		0x80, 0xab, 0x62, 0xa9, 0xab, 0x82, 0x18, 0xa7, 0x60, 0x71, 0x54, 0xa8, 0x47, 0x1e, 0x14, 0xdc,
		0x14, 0x7b, 0x8c, 0xb7, 0x36, 0xf1, 0xf5, 0x2a, 0x98, 0x5e, 0x34, 0xc7, 0xae, 0x96, 0x23, 0x57,
		0xcb, 0x71, 0x4b, 0x73, 0xd4, 0xca, 0x9e, 0x1f, 0x91, 0xda, 0x99, 0xa8, 0x3c, 0xaf, 0xe4, 0xb2,
		0xd2, 0xa5, 0x6b, 0x39, 0x8a, 0xde, 0x4c, 0x9f, 0xeb, 0x3f, 0xb1, 0xe1, 0xe4, 0x55, 0x4f, 0x9c,
		0x7e, 0xd2, 0x12, 0x87, 0x4b, 0x3c, 0xd4, 0xf5, 0x07, 0xb9, 0xfa, 0x78, 0xd6, 0x1c, 0x8d, 0xa4,
		0x47, 0x52, 0xc9, 0x03, 0x29, 0xe9, 0x71, 0x94, 0xf6, 0x30, 0xaa, 0x18, 0x30, 0xea, 0x86, 0x8a,
		0xaa, 0x41, 0x42, 0x36, 0x3c, 0xc8, 0x06, 0x06, 0xc9, 0x90, 0x48, 0x31, 0xb3, 0x48, 0x6a, 0x58,
		0x15, 0x26, 0xd9, 0xac, 0x38, 0xd7, 0x70, 0xc7, 0x9e, 0xc2, 0x09, 0xc9, 0x9e, 0x8c, 0xca, 0x89,
		0xe4, 0xd7, 0xb2, 0xa7, 0xe4, 0x19, 0x2c, 0x7f, 0xfb, 0xc5, 0x77, 0x5b, 0xf2, 0x5e, 0x79, 0xbb,
		0x6d, 0x7b, 0x9d, 0xd5, 0x25, 0x07, 0x11, 0x4f, 0x8d, 0x3f, 0xb7, 0xe2, 0x64, 0xd6, 0x73, 0xfd,
		0x46, 0x6e, 0x97, 0xe1, 0xf2, 0x39, 0xee, 0x5e, 0xf7, 0x65, 0x54, 0x18, 0x5b, 0x99, 0xa1, 0x95,
		0x19, 0x79, 0x81, 0x81, 0x47, 0x5f, 0x9d, 0x89, 0x22, 0x37, 0x79, 0xdf, 0x47, 0xd7, 0x26, 0x2f,
		0xe2, 0x47, 0x1f, 0x67, 0x16, 0xf1, 0x05, 0x43, 0x22, 0x7e, 0x13, 0x11, 0x64, 0x58, 0xca, 0x6f,
		0x20, 0x12, 0x1e, 0x41, 0x2f, 0x1b, 0xba, 0x51, 0x1d, 0x87, 0x48, 0x1b, 0x77, 0xa8, 0x18, 0xab,
		0x54, 0x76, 0x8d, 0x52, 0x5c, 0xa1, 0x24, 0x72, 0xd3, 0xf5, 0x76, 0x6a, 0x7b, 0x37, 0xb5, 0xbd,
		0x99, 0x54, 0x72, 0x34, 0x63, 0x6e, 0x1a, 0x37, 0x97, 0xc2, 0xb7, 0x1b, 0xfd, 0xa5, 0xde, 0x0f,
		0x4f, 0x56, 0x4b, 0x87, 0x0f, 0x19, 0xfd, 0xa5, 0xd4, 0xc9, 0x4e, 0xc2, 0x34, 0x92, 0x90, 0x80,
		0x4e, 0x4b, 0x9d, 0x7b, 0x9d, 0x96, 0x22, 0xe7, 0x16, 0xc0, 0xb9, 0xe0, 0x5c, 0xad, 0x50, 0x42,
		0x74, 0x6b, 0x6d, 0x61, 0x3f, 0xa9, 0x85, 0x0d, 0x22, 0xf5, 0x71, 0xa2, 0xb0, 0xe6, 0x66, 0x2c,
		0x1c, 0xde, 0xbc, 0x19, 0x59, 0x26, 0x47, 0x4e, 0x2b, 0x4e, 0xae, 0x54, 0xcb, 0x08, 0x22, 0x65,
		0x02, 0x91, 0xb5, 0x6a, 0x09, 0xbc, 0xb9, 0xd5, 0xbc, 0xa9, 0x9a, 0xb7, 0xa3, 0xa2, 0x42, 0xe8,
		0xaa, 0x84, 0xa8, 0x52, 0xc8, 0xaa, 0x45, 0x87, 0x8c, 0x59, 0xc8, 0x59, 0x97, 0xac, 0xd9, 0xc8,
		0x9b, 0x8d, 0xcc, 0xb9, 0xc8, 0x5d, 0x3d, 0xca, 0x91, 0x23, 0x44, 0x9e, 0xc8, 0xd1, 0x6e, 0xfd,
		0x4c, 0x1a, 0x62, 0x06, 0x8d, 0x99, 0xe4, 0x54, 0x4f, 0xf8, 0x44, 0xb9, 0x1a, 0xf5, 0x04, 0x99,
		0xec, 0x00, 0x4e, 0x07, 0xa7, 0x83, 0xd3, 0x53, 0xcb, 0xe9, 0xbe, 0xf8, 0x2a, 0x3c, 0x27, 0x78,
		0xd1, 0xc8, 0x44, 0x9f, 0xec, 0x00, 0x4e, 0x07, 0xa7, 0x6f, 0x25, 0xa7, 0xeb, 0x65, 0xae, 0xe9,
		0x64, 0xac, 0xf1, 0x64, 0xaa, 0x45, 0x2f, 0x72, 0x7d, 0x53, 0xbf, 0x3a, 0xbb, 0xbe, 0xfa, 0x70,
		0xfe, 0xcb, 0x63, 0xed, 0xa2, 0x76, 0x7b, 0xf9, 0x78, 0x57, 0xff, 0xbd, 0x7e, 0x7b, 0x7e, 0xff,
		0x07, 0x95, 0x92, 0x18, 0x72, 0xd4, 0x98, 0x92, 0xef, 0xfe, 0x53, 0xbb, 0xbd, 0x3a, 0xbf, 0xfa,
		0x45, 0x23, 0xad, 0xf2, 0x30, 0xe9, 0x57, 0xb8, 0x3c, 0xbf, 0xba, 0xbe, 0xcd, 0xf4, 0x0b, 0xd4,
		0xfe, 0x37, 0xdb, 0x2f, 0xf0, 0xf1, 0xea, 0xb7, 0xab, 0xeb, 0xff, 0x5c, 0x65, 0xf9, 0x15, 0xce,
		0x6e, 0xcf, 0xef, 0xcf, 0xcf, 0x6a, 0x17, 0x71, 0xe7, 0x17, 0x37, 0x4c, 0x4b, 0x7d, 0x23, 0xe8,
		0x27, 0x10, 0xdf, 0x02, 0x3a, 0xf2, 0x09, 0x57, 0x03, 0xf5, 0x00, 0xf5, 0xc0, 0xbe, 0x49, 0xad,
		0x7d, 0x13, 0x38, 0x1d, 0x61, 0x35, 0x3d, 0x61, 0x07, 0x42, 0xc3, 0x63, 0x39, 0xb7, 0x0b, 0x38,
		0x1e, 0x1c, 0xbf, 0x95, 0x1c, 0x3f, 0xa4, 0xf2, 0xc0, 0x69, 0xfe, 0xe5, 0x57, 0xcb, 0x1a, 0x6c,
		0x4f, 0x68, 0x7e, 0xa6, 0x39, 0xe6, 0x42, 0xaf, 0x39, 0x08, 0x43, 0xfd, 0x19, 0x4b, 0xa7, 0x5b,
		0xae, 0x31, 0x13, 0x9c, 0x73, 0x04, 0x06, 0x7a, 0xad, 0x52, 0x52, 0x77, 0xb4, 0xc5, 0xb7, 0xe5,
		0x72, 0xf5, 0xa4, 0x5c, 0x2e, 0x9c, 0x1c, 0x9f, 0x14, 0x4e, 0x2b, 0x95, 0x62, 0xb5, 0x58, 0x49,
		0xd1, 0x69, 0xc7, 0x54, 0xbd, 0xd3, 0x48, 0x83, 0x5e, 0x7e, 0xe9, 0x09, 0x4b, 0x27, 0x88, 0x38,
		0xd9, 0x00, 0xda, 0x18, 0xda, 0x78, 0x2b, 0xb5, 0x71, 0xdf, 0x75, 0xba, 0xae, 0x0e, 0xfc, 0x26,
		0xb4, 0x45, 0xd6, 0x6b, 0x7b, 0xbc, 0x0d, 0x8d, 0x08, 0x0e, 0x93, 0x7a, 0xf3, 0xad, 0x2f, 0x8f,
		0x5e, 0x70, 0x3e, 0xdf, 0xff, 0x71, 0x53, 0x7f, 0x3c, 0x7f, 0xbf, 0xbd, 0x75, 0xd2, 0x17, 0xd7,
		0x5b, 0x59, 0x24, 0x7d, 0x7d, 0xbf, 0x95, 0xaf, 0x55, 0x3b, 0xdf, 0xca, 0xd7, 0xaa, 0xff, 0x7f,
		0x37, 0xf7, 0x28, 0x68, 0x4f, 0x0c, 0x12, 0x67, 0x37, 0xf7, 0x5d, 0xb5, 0xfc, 0x9d, 0x92, 0xfa,
		0xae, 0x50, 0xe6, 0x6e, 0xba, 0x28, 0x78, 0x5c, 0xc6, 0xbe, 0xd1, 0xa2, 0x50, 0x2b, 0x5e, 0x27,
		0x15, 0xad, 0x93, 0x8a, 0xd5, 0xd5, 0x8a, 0xd4, 0x13, 0xab, 0xfa, 0x9c, 0xa1, 0x30, 0xc6, 0xc2,
		0xcf, 0x19, 0x9a, 0xca, 0x68, 0xed, 0xe7, 0xc6, 0x12, 0x46, 0x95, 0x93, 0xd0, 0xa9, 0x00, 0x6d,
		0xb6, 0xbb, 0xcd, 0xbf, 0x36, 0x17, 0x80, 0x8e, 0x3e, 0xa6, 0x59, 0xff, 0x59, 0xe0, 0xa9, 0xff,
		0xf4, 0x5f, 0xb2, 0x59, 0xfc, 0x39, 0xfc, 0xde, 0x71, 0x55, 0x7e, 0x4a, 0x16, 0xed, 0xa9, 0x15,
		0xeb, 0xa5, 0xa5, 0xf6, 0x73, 0x3d, 0x01, 0x50, 0x5d, 0x21, 0xc9, 0x17, 0x7e, 0xae, 0x25, 0x10,
		0x1e, 0xb5, 0x27, 0x5d, 0xf5, 0x19, 0x38, 0x1d, 0xf1, 0x4f, 0xd7, 0x15, 0x96, 0x52, 0xa7, 0xce,
		0xb9, 0xd8, 0xc2, 0x74, 0xf9, 0x76, 0x54, 0x92, 0xc9, 0x91, 0x9d, 0xae, 0x27, 0x2e, 0x7d, 0xa5,
		0x2a, 0x52, 0x64, 0x69, 0x06, 0x01, 0xd3, 0x6b, 0xc8, 0xe6, 0x08, 0xd0, 0x52, 0x6c, 0xe2, 0xa8,
		0xe8, 0x55, 0xca, 0x6a, 0x03, 0x9b, 0x50, 0xa9, 0xcb, 0x17, 0xbd, 0x4a, 0x62, 0x92, 0xb3, 0xe1,
		0xae, 0x52, 0x55, 0xae, 0xe8, 0x5b, 0x03, 0xc5, 0x06, 0xc5, 0x06, 0xc5, 0x06, 0xc5, 0x06, 0xc5,
		0x66, 0x40, 0xb1, 0x31, 0xb7, 0x9b, 0x1a, 0xe9, 0xb5, 0x0c, 0x37, 0x9c, 0x5a, 0x67, 0xc3, 0xab,
		0x9e, 0x83, 0x96, 0xcb, 0x61, 0xbd, 0x6d, 0x2a, 0x67, 0x93, 0xc2, 0xe9, 0x90, 0x3e, 0xa7, 0x43,
		0xab, 0xdb, 0xb1, 0x1d, 0x57, 0x4e, 0xb1, 0x46, 0x67, 0x3b, 0xbb, 0x48, 0x0e, 0xa5, 0x15, 0xe0,
		0x7e, 0xc8, 0x2a, 0x4a, 0x93, 0x56, 0x7b, 0x04, 0xf2, 0xc8, 0x29, 0x8e, 0x64, 0xcd, 0x5f, 0x08,
		0xf7, 0x39, 0x94, 0x99, 0x72, 0x91, 0x64, 0xb5, 0xd6, 0xb5, 0x04, 0x78, 0x44, 0x4b, 0x55, 0x8a,
		0x72, 0xdd, 0x14, 0xd7, 0x69, 0x24, 0xb2, 0x0d, 0xd4, 0x1a, 0xf1, 0xc6, 0x7e, 0x14, 0xa5, 0xca,
		0x71, 0x8c, 0x87, 0xc1, 0x84, 0xa4, 0x1a, 0x12, 0x14, 0xab, 0x3a, 0x0c, 0x38, 0xbf, 0xbf, 0xbf,
		0xff, 0xc9, 0xb6, 0xfe, 0xa9, 0x59, 0x7f, 0x16, 0xac, 0xd3, 0xc7, 0xc6, 0xcc, 0x3f, 0x1e, 0x1e,
		0xac, 0xc7, 0xc6, 0xc1, 0xf7, 0xc2, 0x61, 0xb5, 0x38, 0x38, 0xf8, 0x69, 0xfa, 0xfb, 0xc6, 0xc3,
		0xc3, 0x9b, 0x83, 0x7f, 0x53, 0x56, 0xfd, 0x74, 0xf0, 0xe3, 0xe1, 0xe1, 0xcd, 0x66, 0x09, 0xd2,
		0x30, 0xe0, 0x13, 0xf8, 0xd2, 0xf5, 0x03, 0x35, 0xb5, 0x13, 0xad, 0x80, 0xce, 0x81, 0xce, 0x81,
		0xce, 0x81, 0xce, 0x81, 0xce, 0x81, 0xce, 0x51, 0xd2, 0x39, 0xed, 0xee, 0xb3, 0xe3, 0x5a, 0x9f,
		0x6d, 0xd7, 0x15, 0x9e, 0xbc, 0xde, 0x99, 0x5b, 0x05, 0xdd, 0x03, 0xdd, 0xb3, 0x10, 0xae, 0x90,
		0xcc, 0x88, 0x96, 0x74, 0xe5, 0xd1, 0x68, 0xbb, 0xd3, 0x0d, 0x5a, 0xca, 0xa4, 0x3d, 0xbb, 0x08,
		0x94, 0x0d, 0xca, 0x4e, 0x8e, 0xb2, 0x93, 0x75, 0xb3, 0x6e, 0x8a, 0xa7, 0xca, 0xfa, 0x59, 0xd7,
		0x44, 0x50, 0x25, 0x1d, 0xad, 0xbd, 0xbe, 0x44, 0x6f, 0xff, 0xf0, 0x53, 0xe9, 0xe8, 0xec, 0x0f,
		0x27, 0xab, 0x44, 0x66, 0x57, 0xaf, 0xaf, 0x90, 0xd6, 0xd5, 0xeb, 0x23, 0xa7, 0x0b, 0xa1, 0xef,
		0xf1, 0x07, 0x1d, 0xb7, 0x25, 0xbe, 0x11, 0x5a, 0x81, 0x87, 0xcb, 0x10, 0xea, 0x56, 0x31, 0x26,
		0x11, 0xea, 0x56, 0x47, 0x0a, 0x8b, 0xb6, 0x52, 0x52, 0x7d, 0xc0, 0x43, 0x82, 0x47, 0x2b, 0x70,
		0x30, 0xe6, 0x56, 0x33, 0xa6, 0x72, 0x13, 0xf0, 0x2f, 0xb6, 0xd7, 0xfa, 0xdb, 0xf6, 0x84, 0xe5,
		0xb8, 0x81, 0xf0, 0xbc, 0x7e, 0x4f, 0xa3, 0x99, 0xd6, 0x92, 0xbd, 0x68, 0xa5, 0xfd, 0xc5, 0x8c,
		0x95, 0xf6, 0xab, 0x11, 0xba, 0x2e, 0xc1, 0xb3, 0x11, 0x3e, 0x1b, 0x03, 0xb0, 0x30, 0x82, 0x1a,
		0x43, 0x10, 0x7c, 0xc8, 0x24, 0x06, 0x89, 0x16, 0xda, 0x5f, 0x9f, 0xf5, 0xbb, 0x77, 0x0e, 0x37,
		0xc1, 0xdc, 0xf9, 0x21, 0x69, 0x04, 0x2f, 0x3d, 0xe1, 0x63, 0xf2, 0x3c, 0x81, 0xa9, 0x46, 0x27,
		0xb7, 0x73, 0xb3, 0xe7, 0x7b, 0xc2, 0x6b, 0x0a, 0x37, 0xb0, 0x9f, 0x05, 0x43, 0x6f, 0x05, 0x9d,
		0xd6, 0x0a, 0x7a, 0x8d, 0xae, 0x26, 0x7f, 0xf4, 0x4b, 0xc4, 0x59, 0x1a, 0x5f, 0x31, 0x89, 0x97,
		0x85, 0xed, 0x98, 0x1a, 0x61, 0x45, 0xfb, 0x31, 0xb6, 0x68, 0xd2, 0x24, 0xe9, 0xf9, 0x2b, 0x60,
		0x68, 0x90, 0x65, 0xfa, 0x0a, 0x8a, 0x85, 0x34, 0x5f, 0xc2, 0x5e, 0x32, 0xab, 0x1b, 0x71, 0x4d,
		0xd9, 0x27, 0xc0, 0x42, 0xc7, 0xf5, 0x03, 0xdb, 0x0d, 0xf4, 0xd1, 0xc6, 0x64, 0x23, 0x20, 0x0e,
		0x20, 0x0e, 0x20, 0x0e, 0x20, 0x0e, 0x20, 0x0e, 0x20, 0x0e, 0x20, 0x0e, 0x20, 0x8e, 0x25, 0x88,
		0x23, 0x10, 0xde, 0x57, 0xbb, 0xcd, 0x01, 0x39, 0xc6, 0x3b, 0x01, 0x73, 0x00, 0x73, 0x00, 0x73,
		0x28, 0xd3, 0x8c, 0x1f, 0xd8, 0x81, 0xa5, 0xc9, 0x44, 0x39, 0xbd, 0x4e, 0xde, 0xd1, 0x16, 0x1f,
		0xdd, 0x91, 0xcc, 0xcd, 0xbb, 0xb6, 0xdb, 0xf5, 0x45, 0xb3, 0xeb, 0xb6, 0xb4, 0x68, 0x19, 0x30,
		0x06, 0x30, 0x26, 0x53, 0x30, 0x86, 0xbd, 0xd3, 0x38, 0x70, 0x4d, 0xbc, 0xb8, 0xa6, 0xa3, 0x41,
		0x65, 0xd3, 0x14, 0x58, 0xfb, 0x1b, 0xd0, 0x0c, 0xd0, 0x0c, 0xd0, 0x0c, 0x3c, 0x28, 0x80, 0x1e,
		0x80, 0x1e, 0xf0, 0xa0, 0x00, 0x69, 0x2c, 0x45, 0x1a, 0x56, 0xe0, 0x74, 0x04, 0x0b, 0xdc, 0x18,
		0xed, 0x04, 0xcc, 0x01, 0xcc, 0x01, 0xcc, 0xa1, 0x4c, 0x33, 0x7a, 0x13, 0xd0, 0x38, 0xfd, 0x27,
		0x00, 0x1d, 0x00, 0x1d, 0xf0, 0x77, 0x00, 0x85, 0xc4, 0x88, 0x42, 0x34, 0x18, 0x7d, 0x0a, 0x40,
		0x1c, 0x17, 0xd8, 0x03, 0xd8, 0x03, 0xd8, 0x03, 0xfe, 0x0e, 0x40, 0x0f, 0x40, 0x0f, 0xf8, 0x3b,
		0x80, 0x34, 0x96, 0x22, 0x0d, 0x2e, 0x7f, 0xc7, 0x64, 0x27, 0x60, 0x0e, 0x60, 0x0e, 0x60, 0x0e,
		0xf8, 0x3b, 0x00, 0x3a, 0x00, 0x3a, 0xe0, 0xef, 0xd8, 0x3d, 0x14, 0x62, 0xb4, 0xec, 0x97, 0x38,
		0x76, 0x33, 0x5a, 0x2f, 0xdd, 0x28, 0xaa, 0xd7, 0xf7, 0x87, 0xff, 0x37, 0xee, 0x3a, 0xa1, 0x5d,
		0x11, 0x9f, 0x53, 0xe8, 0x2d, 0xd5, 0xeb, 0xfb, 0xc3, 0xff, 0x1b, 0x8d, 0x33, 0x78, 0xfc, 0x75,
		0xfc, 0xe8, 0xf3, 0xe8, 0xc9, 0xa6, 0xe6, 0xa3, 0x2a, 0xb4, 0x78, 0x70, 0x5a, 0x6d, 0x41, 0xef,
		0x2f, 0x10, 0xae, 0x46, 0x47, 0x01, 0x73, 0xe0, 0x0f, 0x1d, 0x05, 0xd0, 0x51, 0x00, 0x96, 0x13,
		0x2c, 0xa7, 0xdd, 0xb0, 0x9c, 0xe0, 0xad, 0x85, 0xe1, 0x04, 0xc3, 0x89, 0x62, 0x38, 0xc1, 0x5b,
		0x9b, 0xa0, 0x9d, 0x84, 0x8e, 0x02, 0x40, 0x1c, 0x40, 0x1c, 0x40, 0x1c, 0x40, 0x1c, 0x40, 0x1c,
		0x40, 0x1c, 0x40, 0x1c, 0x29, 0x45, 0x1c, 0xe8, 0x28, 0x00, 0xcc, 0x01, 0xcc, 0x81, 0x8e, 0x02,
		0xb3, 0x5b, 0xa0, 0xa3, 0x00, 0x60, 0xcc, 0x4e, 0xc3, 0x18, 0x44, 0x9c, 0x33, 0x8e, 0x6b, 0xd0,
		0x51, 0x00, 0x68, 0x06, 0x68, 0x06, 0x1e, 0x14, 0x40, 0x0f, 0x40, 0x0f, 0x78, 0x50, 0x80, 0x34,
		0x8c, 0x22, 0x0d, 0x74, 0x14, 0x00, 0xe6, 0x00, 0xe6, 0x40, 0x86, 0x3d, 0x40, 0x07, 0x40, 0x07,
		0xfc, 0x1d, 0x40, 0x21, 0x49, 0xa0, 0x10, 0x74, 0x14, 0x00, 0xf6, 0x00, 0xf6, 0x80, 0xbf, 0x03,
		0xd0, 0x03, 0xd0, 0x03, 0xfe, 0x0e, 0x20, 0x0d, 0x93, 0x48, 0x03, 0x1d, 0x05, 0x80, 0x39, 0x80,
		0x39, 0xe0, 0xef, 0x00, 0xe8, 0x00, 0xe8, 0x80, 0xbf, 0x03, 0x28, 0x44, 0x17, 0x85, 0x6c, 0x63,
		0x47, 0x01, 0x42, 0x0d, 0x7c, 0x8e, 0xdc, 0x43, 0xe0, 0x7c, 0xf8, 0xb0, 0x34, 0xb4, 0x0d, 0x70,
		0x5b, 0xe2, 0x9b, 0x46, 0xdf, 0x80, 0x70, 0x39, 0xad, 0x71, 0x40, 0x01, 0x8d, 0x03, 0xe2, 0xc4,
		0x76, 0xbb, 0xd4, 0x38, 0x80, 0x8c, 0xd8, 0xa2, 0xfb, 0xee, 0xbb, 0x43, 0xf1, 0x43, 0xb8, 0xee,
		0x49, 0x57, 0x8c, 0x53, 0xc2, 0xda, 0xf1, 0xd7, 0xa6, 0x61, 0x32, 0x06, 0x78, 0x2a, 0xdc, 0x7e,
		0x47, 0x78, 0x23, 0xc9, 0xab, 0x0f, 0x4f, 0x8b, 0x65, 0x8d, 0x3d, 0xea, 0x6e, 0xbf, 0x33, 0xbc,
		0xc1, 0x58, 0x91, 0x3e, 0xc3, 0x11, 0xf6, 0x1d, 0x37, 0x38, 0x2e, 0x31, 0x9c, 0xde, 0x09, 0xc0,
		0x3d, 0xc0, 0xfd, 0x8e, 0x80, 0xfb, 0x72, 0xe9, 0xb4, 0x7c, 0x5a, 0x3d, 0x29, 0x9d, 0x02, 0xd2,
		0x27, 0x06, 0xe9, 0x1b, 0x29, 0x00, 0xa3, 0x7f, 0x09, 0xcf, 0x15, 0x6d, 0x3a, 0x1a, 0x1d, 0xaf,
		0x47, 0x1f, 0x2b, 0xc0, 0xd1, 0x54, 0xc1, 0x51, 0xf4, 0xb1, 0x82, 0xbf, 0xde, 0x08, 0x13, 0xb1,
		0x33, 0xd3, 0x2a, 0xa6, 0x42, 0x8e, 0x00, 0x72, 0x04, 0x80, 0xe8, 0x81, 0xe8, 0x65, 0xaf, 0x00,
		0x39, 0x02, 0x09, 0x42, 0x79, 0xf4, 0xb1, 0x02, 0xe2, 0x00, 0xe2, 0x00, 0xe2, 0x00, 0xe2, 0x00,
		0xe2, 0x00, 0xe2, 0x00, 0xe2, 0x48, 0x2b, 0xe2, 0x40, 0x1f, 0x2b, 0x60, 0x0e, 0x60, 0x0e, 0xf4,
		0xb1, 0x9a, 0xdd, 0x02, 0x7d, 0xac, 0x00, 0x63, 0x76, 0x1a, 0xc6, 0x20, 0xcf, 0x31, 0xe3, 0xb8,
		0x06, 0x7d, 0xac, 0x80, 0x66, 0x80, 0x66, 0xe0, 0x41, 0x01, 0xf4, 0x00, 0xf4, 0x80, 0x07, 0x05,
		0x48, 0xc3, 0x28, 0xd2, 0x40, 0x1f, 0x2b, 0x60, 0x0e, 0x60, 0x0e, 0xd4, 0x75, 0x02, 0x74, 0x00,
		0x74, 0xc0, 0xdf, 0x01, 0x14, 0x92, 0x04, 0x0a, 0x41, 0x1f, 0x2b, 0x60, 0x0f, 0x60, 0x0f, 0xf8,
		0x3b, 0x00, 0x3d, 0x00, 0x3d, 0xe0, 0xef, 0x00, 0xd2, 0x30, 0x89, 0x34, 0xd0, 0xc7, 0x0a, 0x98,
		0x03, 0x98, 0x03, 0xfe, 0x0e, 0x80, 0x0e, 0x80, 0x0e, 0xf8, 0x3b, 0x80, 0x42, 0x74, 0x51, 0xc8,
		0x36, 0xf6, 0xb1, 0x22, 0x55, 0xc1, 0xe7, 0xc8, 0x9d, 0xac, 0x7e, 0x1b, 0x3d, 0x2e, 0x05, 0xed,
		0x03, 0x5c, 0x87, 0x80, 0x41, 0x22, 0x9d, 0x16, 0xae, 0x46, 0xeb, 0x00, 0x73, 0x28, 0x0f, 0xad,
		0x03, 0xd0, 0x3a, 0x00, 0x26, 0x12, 0x4c, 0xa4, 0xdd, 0x30, 0x91, 0xe0, 0x96, 0x85, 0x85, 0x04,
		0x0b, 0x89, 0x62, 0x21, 0xc1, 0x2d, 0x9b, 0xa0, 0x41, 0x84, 0xd6, 0x01, 0x40, 0x1c, 0x40, 0x1c,
		0x40, 0x1c, 0x40, 0x1c, 0x40, 0x1c, 0x40, 0x1c, 0x40, 0x1c, 0x29, 0x45, 0x1c, 0x68, 0x1d, 0x00,
		0xcc, 0x01, 0xcc, 0x81, 0xd6, 0x01, 0xb3, 0x5b, 0xa0, 0x75, 0x00, 0x60, 0xcc, 0x4e, 0xc3, 0x18,
		0x84, 0x96, 0x33, 0x8e, 0x6b, 0xd0, 0x3a, 0x00, 0x68, 0x06, 0x68, 0x06, 0x1e, 0x14, 0x40, 0x0f,
		0x40, 0x0f, 0x78, 0x50, 0x80, 0x34, 0x8c, 0x22, 0x0d, 0xb4, 0x0e, 0x00, 0xe6, 0x00, 0xe6, 0x40,
		0x2a, 0x3d, 0x40, 0x07, 0x40, 0x07, 0xfc, 0x1d, 0x40, 0x21, 0x49, 0xa0, 0x10, 0xb4, 0x0e, 0x00,
		0xf6, 0x00, 0xf6, 0x80, 0xbf, 0x03, 0xd0, 0x03, 0xd0, 0x03, 0xfe, 0x0e, 0x20, 0x0d, 0x93, 0x48,
		0x03, 0xad, 0x03, 0x80, 0x39, 0x80, 0x39, 0xe0, 0xef, 0x00, 0xe8, 0x00, 0xe8, 0x80, 0xbf, 0x03,
		0x28, 0x44, 0x17, 0x85, 0x6c, 0x63, 0xeb, 0x00, 0x42, 0x0d, 0x7c, 0x8e, 0xdc, 0x38, 0xe0, 0x6a,
		0xf8, 0xb0, 0x14, 0xb4, 0x0d, 0xf0, 0xbb, 0x4f, 0xc1, 0xdf, 0xb6, 0x27, 0x46, 0x79, 0x8c, 0x5e,
		0xbf, 0x17, 0xd0, 0x9b, 0x08, 0x2c, 0xd9, 0x0b, 0x2d, 0x05, 0xcc, 0xa1, 0x3f, 0xb4, 0x14, 0x40,
		0x4b, 0x01, 0x98, 0x4e, 0x30, 0x9d, 0x76, 0xc3, 0x74, 0x82, 0xbb, 0x16, 0x96, 0x13, 0x2c, 0x27,
		0x8a, 0xe5, 0x04, 0x77, 0x6d, 0x82, 0x86, 0x12, 0x5a, 0x0a, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71,
		0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0x00, 0x71, 0xa4, 0x14, 0x71, 0xa0, 0xa5, 0x00, 0x30, 0x07,
		0x30, 0x07, 0x5a, 0x0a, 0xcc, 0x6e, 0x81, 0x96, 0x02, 0x80, 0x31, 0x3b, 0x0d, 0x63, 0x10, 0x72,
		0xce, 0x38, 0xae, 0x41, 0x4b, 0x01, 0xa0, 0x19, 0xa0, 0x19, 0x78, 0x50, 0x00, 0x3d, 0x00, 0x3d,
		0xe0, 0x41, 0x01, 0xd2, 0x30, 0x8a, 0x34, 0xd0, 0x52, 0x00, 0x98, 0x03, 0x98, 0x03, 0x29, 0xf6,
		0x00, 0x1d, 0x00, 0x1d, 0xf0, 0x77, 0x00, 0x85, 0x24, 0x81, 0x42, 0xd0, 0x52, 0x00, 0xd8, 0x03,
		0xd8, 0x03, 0xfe, 0x0e, 0x40, 0x0f, 0x40, 0x0f, 0xf8, 0x3b, 0x80, 0x34, 0x4c, 0x22, 0x0d, 0xb4,
		0x14, 0x00, 0xe6, 0x00, 0xe6, 0x80, 0xbf, 0x03, 0xa0, 0x03, 0xa0, 0x03, 0xfe, 0x0e, 0xa0, 0x10,
		0x5d, 0x14, 0xb2, 0x8d, 0x2d, 0x05, 0xb4, 0x2b, 0xe2, 0x73, 0xe4, 0x06, 0x03, 0x77, 0xe3, 0x47,
		0x9f, 0x47, 0x4f, 0x4e, 0x41, 0xb7, 0x81, 0xa0, 0x1b, 0x10, 0xb2, 0x8c, 0xa7, 0xba, 0x2e, 0x5c,
		0x8e, 0x9e, 0x02, 0xe6, 0xe0, 0x1f, 0x7a, 0x0a, 0xa0, 0xa7, 0x00, 0x6c, 0x27, 0xd8, 0x4e, 0xbb,
		0x61, 0x3b, 0xc1, 0x5f, 0x0b, 0xd3, 0x09, 0xa6, 0x13, 0xc5, 0x74, 0x82, 0xbf, 0x36, 0x41, 0x4b,
		0x09, 0x3d, 0x05, 0x80, 0x38, 0x80, 0x38, 0x80, 0x38, 0x80, 0x38, 0x80, 0x38, 0x80, 0x38, 0x80,
		0x38, 0x52, 0x8a, 0x38, 0xd0, 0x53, 0x00, 0x98, 0x03, 0x98, 0x03, 0x3d, 0x05, 0x66, 0xb7, 0x40,
		0x4f, 0x01, 0xc0, 0x98, 0x9d, 0x86, 0x31, 0x88, 0x39, 0x67, 0x1c, 0xd7, 0xa0, 0xa7, 0x00, 0xd0,
		0x0c, 0xd0, 0x0c, 0x3c, 0x28, 0x80, 0x1e, 0x80, 0x1e, 0xf0, 0xa0, 0x00, 0x69, 0x18, 0x45, 0x1a,
		0xe8, 0x29, 0x00, 0xcc, 0x01, 0xcc, 0x81, 0x1c, 0x7b, 0x80, 0x0e, 0x80, 0x0e, 0xf8, 0x3b, 0x80,
		0x42, 0x92, 0x40, 0x21, 0xe8, 0x29, 0x00, 0xec, 0x01, 0xec, 0x01, 0x7f, 0x07, 0xa0, 0x07, 0xa0,
		0x07, 0xfc, 0x1d, 0x40, 0x1a, 0x26, 0x91, 0x06, 0x7a, 0x0a, 0x00, 0x73, 0x00, 0x73, 0xc0, 0xdf,
		0x01, 0xd0, 0x01, 0xd0, 0x01, 0x7f, 0x07, 0x50, 0x88, 0x2e, 0x0a, 0xd9, 0xc6, 0x9e, 0x02, 0x94,
		0x22, 0xf8, 0x1c, 0xb9, 0x8d, 0xc0, 0x7d, 0xf8, 0xb4, 0x14, 0xb4, 0x0e, 0xe8, 0xfb, 0xc2, 0xa3,
		0x77, 0x0e, 0x08, 0x57, 0xa3, 0x71, 0x80, 0x39, 0x8c, 0x87, 0xc6, 0x01, 0x68, 0x1c, 0x00, 0x03,
		0x09, 0x06, 0xd2, 0x6e, 0x18, 0x48, 0x70, 0xca, 0xc2, 0x3e, 0x82, 0x7d, 0x44, 0xb1, 0x8f, 0xe0,
		0x94, 0x4d, 0xd0, 0x1c, 0x42, 0xe3, 0x00, 0x20, 0x0e, 0x20, 0x0e, 0x20, 0x0e, 0x20, 0x0e, 0x20,
		0x0e, 0x20, 0x0e, 0x20, 0x8e, 0x94, 0x22, 0x0e, 0x34, 0x0e, 0x00, 0xe6, 0x00, 0xe6, 0x40, 0xe3,
		0x80, 0xd9, 0x2d, 0xd0, 0x38, 0x00, 0x30, 0x66, 0xa7, 0x61, 0x0c, 0x02, 0xcb, 0x19, 0xc7, 0x35,
		0x68, 0x1c, 0x00, 0x34, 0x03, 0x34, 0x03, 0x0f, 0x0a, 0xa0, 0x07, 0xa0, 0x07, 0x3c, 0x28, 0x40,
		0x1a, 0x46, 0x91, 0x06, 0x1a, 0x07, 0x00, 0x73, 0x00, 0x73, 0x20, 0x91, 0x1e, 0xa0, 0x03, 0xa0,
		0x03, 0xfe, 0x0e, 0xa0, 0x90, 0x24, 0x50, 0x08, 0x1a, 0x07, 0x00, 0x7b, 0x00, 0x7b, 0xc0, 0xdf,
		0x01, 0xe8, 0x01, 0xe8, 0x01, 0x7f, 0x07, 0x90, 0x86, 0x49, 0xa4, 0x81, 0xc6, 0x01, 0xc0, 0x1c,
		0xc0, 0x1c, 0xf0, 0x77, 0x00, 0x74, 0x00, 0x74, 0xc0, 0xdf, 0x01, 0x14, 0xa2, 0x8b, 0x42, 0xb6,
		0xb1, 0x71, 0x00, 0xa1, 0x06, 0x3e, 0x47, 0xee, 0x1b, 0xf0, 0x71, 0xf8, 0xb0, 0x14, 0xb4, 0x0d,
		0xf8, 0xdb, 0x76, 0x02, 0x7a, 0xdb, 0x80, 0x70, 0x35, 0xda, 0x06, 0x98, 0x43, 0x78, 0x68, 0x1b,
		0x80, 0xb6, 0x01, 0x30, 0x8f, 0x60, 0x1e, 0xed, 0x86, 0x79, 0x04, 0x97, 0x2c, 0xac, 0x23, 0x58,
		0x47, 0x14, 0xeb, 0x08, 0x2e, 0xd9, 0x04, 0x8d, 0x21, 0xb4, 0x0d, 0x00, 0xe2, 0x00, 0xe2, 0x00,
		0xe2, 0x00, 0xe2, 0x00, 0xe2, 0x00, 0xe2, 0x00, 0xe2, 0x48, 0x29, 0xe2, 0x40, 0xdb, 0x00, 0x60,
		0x0e, 0x60, 0x0e, 0xb4, 0x0d, 0x98, 0xdd, 0x02, 0x6d, 0x03, 0x00, 0x63, 0x76, 0x1a, 0xc6, 0x20,
		0xac, 0x9c, 0x71, 0x5c, 0x83, 0xb6, 0x01, 0x40, 0x33, 0x40, 0x33, 0xf0, 0xa0, 0x00, 0x7a, 0x00,
		0x7a, 0xc0, 0x83, 0x02, 0xa4, 0x61, 0x14, 0x69, 0xa0, 0x6d, 0x00, 0x30, 0x07, 0x30, 0x07, 0xd2,
		0xe8, 0x01, 0x3a, 0x00, 0x3a, 0xe0, 0xef, 0x00, 0x0a, 0x49, 0x02, 0x85, 0xa0, 0x6d, 0x00, 0xb0,
		0x07, 0xb0, 0x07, 0xfc, 0x1d, 0x80, 0x1e, 0x80, 0x1e, 0xf0, 0x77, 0x00, 0x69, 0x98, 0x44, 0x1a,
		0x68, 0x1b, 0x00, 0xcc, 0x01, 0xcc, 0x01, 0x7f, 0x07, 0x40, 0x07, 0x40, 0x07, 0xfc, 0x1d, 0x40,
		0x21, 0xba, 0x28, 0x64, 0x1b, 0xdb, 0x06, 0x10, 0x6a, 0xe0, 0x73, 0xe4, 0xb6, 0x01, 0xff, 0x19,
		0x3e, 0xcc, 0x54, 0xdb, 0x80, 0x3d, 0xc6, 0x5b, 0xa1, 0xde, 0x06, 0xf1, 0x16, 0x14, 0x2e, 0x80,
		0x74, 0xf0, 0x72, 0x67, 0xbe, 0xf9, 0x04, 0xd7, 0x7f, 0x62, 0xc3, 0xd9, 0x0e, 0xf1, 0xda, 0x28,
		0x01, 0xbb, 0x25, 0x36, 0x41, 0xb5, 0xfc, 0x85, 0xe3, 0x07, 0xb5, 0x20, 0x90, 0xab, 0x84, 0x1f,
		0xaa, 0xd3, 0x7a, 0x5b, 0x0c, 0x91, 0xd6, 0x50, 0x92, 0xb9, 0xfd, 0x76, 0xfb, 0x70, 0x4f, 0x46,
		0x01, 0xa8, 0x2f, 0xba, 0xf6, 0x5a, 0xc2, 0x13, 0xad, 0x9f, 0x5f, 0xc6, 0x4b, 0xb4, 0x0e, 0x44,
		0x91, 0xc8, 0x94, 0x89, 0x4b, 0x82, 0xac, 0x14, 0xc9, 0x69, 0x3d, 0x21, 0xad, 0x26, 0x8f, 0xe5,
		0xff, 0x65, 0xc5, 0xf9, 0xc8, 0x9e, 0x8b, 0xd2, 0x79, 0xac, 0x39, 0x0b, 0x85, 0x33, 0x58, 0xfe,
		0xfe, 0x8b, 0x6f, 0xb7, 0xe4, 0xcd, 0xf2, 0x2d, 0xd7, 0x5f, 0xf9, 0x3a, 0x11, 0x56, 0x1e, 0x7e,
		0x68, 0xc5, 0xa9, 0xac, 0xef, 0x3c, 0xb2, 0xd1, 0x4c, 0x94, 0x31, 0x03, 0xe5, 0x3b, 0x86, 0xc8,
		0x1a, 0x71, 0xca, 0x46, 0x9a, 0xb2, 0x11, 0xa6, 0xd4, 0xd1, 0x43, 0x8d, 0x0e, 0x37, 0x75, 0xe2,
		0xc8, 0x37, 0x27, 0x67, 0xbe, 0xe1, 0x10, 0x26, 0xc7, 0x3a, 0xfe, 0xfc, 0x26, 0x39, 0x29, 0xd5,
		0x62, 0x46, 0xda, 0x2f, 0xa0, 0x62, 0xff, 0xab, 0xb7, 0x8c, 0x51, 0xb5, 0xe6, 0xc9, 0x56, 0x3b,
		0xd9, 0x3a, 0x27, 0xb5, 0x7c, 0xd1, 0xd3, 0x74, 0xb2, 0x2d, 0x5c, 0xf2, 0xbe, 0xb0, 0xbd, 0xe6,
		0x17, 0xf9, 0xc3, 0x8b, 0x8a, 0x30, 0x46, 0xeb, 0x24, 0x0f, 0x40, 0xcd, 0x3a, 0x51, 0x76, 0x38,
		0x51, 0x1c, 0x4c, 0xf4, 0xde, 0x44, 0x54, 0xf7, 0x91, 0xb6, 0xbb, 0x48, 0xdb, 0x3d, 0xa4, 0xd5,
		0x7b, 0x88, 0x17, 0xde, 0x2a, 0x3b, 0x77, 0xa6, 0x0a, 0xaa, 0xdb, 0xb1, 0x1d, 0xd7, 0x0a, 0x95,
		0xa5, 0xc2, 0xa5, 0x4d, 0x64, 0x9a, 0x82, 0xf7, 0x26, 0x7f, 0x21, 0xdc, 0xe7, 0x50, 0xb5, 0xab,
		0xb9, 0x6b, 0x08, 0xb6, 0x93, 0x8e, 0x3b, 0x46, 0xd7, 0xbd, 0x1b, 0xd9, 0xfa, 0xc4, 0xf5, 0x0c,
		0x86, 0x3c, 0xc5, 0xbd, 0xae, 0xe3, 0x3e, 0xe1, 0x3a, 0xb2, 0x52, 0xe5, 0x38, 0xc1, 0x43, 0x33,
		0x64, 0xc7, 0x36, 0x14, 0x38, 0xe4, 0xc6, 0x0e, 0x02, 0xe1, 0xb9, 0xca, 0x2c, 0x92, 0xdf, 0xdf,
		0xdf, 0xff, 0x64, 0x5b, 0xff, 0xd4, 0xac, 0x3f, 0x0b, 0xd6, 0xe9, 0x63, 0x63, 0xe6, 0x1f, 0x0f,
		0x0f, 0xd6, 0x63, 0xe3, 0xe0, 0x7b, 0xe1, 0xb0, 0x5a, 0x1c, 0x1c, 0xfc, 0x34, 0xfd, 0x7d, 0xe3,
		0xe1, 0xe1, 0xcd, 0xc1, 0xbf, 0x29, 0xab, 0x7e, 0x3a, 0xf8, 0xf1, 0xf0, 0xf0, 0x46, 0x5e, 0xd2,
		0x35, 0x58, 0x25, 0x9d, 0x92, 0x21, 0xa9, 0x65, 0x50, 0x6a, 0x19, 0x96, 0x4b, 0x0d, 0x4c, 0x62,
		0x5b, 0x43, 0x42, 0x27, 0x48, 0x9d, 0x98, 0xcc, 0xac, 0x62, 0xed, 0x8e, 0xbe, 0xbd, 0xf5, 0xf9,
		0x85, 0xe2, 0x53, 0xe2, 0x88, 0xbf, 0xcc, 0x29, 0xd9, 0xbe, 0xc9, 0x36, 0x95, 0xa9, 0xf0, 0xa9,
		0x98, 0x72, 0x21, 0xb4, 0x5c, 0xff, 0x48, 0xca, 0x5a, 0x51, 0x30, 0xa0, 0xdf, 0xbb, 0xfe, 0xe3,
		0x18, 0x5b, 0x52, 0xdd, 0x08, 0x6b, 0x0c, 0xd2, 0x2f, 0x5d, 0x3f, 0xb0, 0x84, 0x1b, 0x78, 0x8e,
		0xf0, 0xe5, 0x2d, 0xb2, 0xb9, 0x55, 0xb0, 0xcb, 0x60, 0x97, 0xbd, 0x22, 0xa6, 0x17, 0x75, 0xdb,
		0x6c, 0x66, 0xad, 0x9a, 0x7d, 0x56, 0x84, 0x7d, 0x06, 0xfb, 0x4c, 0x8d, 0x50, 0x55, 0x3d, 0x51,
		0x7a, 0x9e, 0x29, 0x4d, 0xc2, 0x25, 0x13, 0xb0, 0x0e, 0x21, 0xeb, 0x13, 0x34, 0x07, 0x46, 0xca,
		0xa1, 0x19, 0x32, 0xc9, 0xd4, 0xd4, 0x68, 0x86, 0xdc, 0x76, 0x6c, 0x9f, 0xa1, 0x1d, 0x72, 0xb8,
		0x0d, 0x12, 0xbf, 0xe8, 0x6c, 0xc3, 0xc5, 0x3e, 0xec, 0x6c, 0xc4, 0xce, 0x4e, 0xac, 0x6c, 0x45,
		0x63, 0x2f, 0x0d, 0x8f, 0x4e, 0x8e, 0xbb, 0x4d, 0x90, 0xe7, 0xb8, 0xcf, 0x0c, 0xf9, 0x5e, 0xc5,
		0xb7, 0xb1, 0x9e, 0x00, 0xc9, 0x5f, 0xc0, 0xea, 0x3f, 0x60, 0xf5, 0x27, 0xac, 0xf5, 0x2f, 0x6c,
		0x0c, 0x60, 0xf3, 0x11, 0x25, 0xc5, 0xc5, 0x38, 0x04, 0xd2, 0x63, 0x9b, 0x52, 0x53, 0x8a, 0x47,
		0x3b, 0x41, 0x90, 0x43, 0x90, 0x43, 0x90, 0x67, 0x4b, 0x90, 0xc7, 0xd3, 0x5f, 0xb2, 0xf7, 0xb5,
		0x6c, 0xd9, 0xad, 0x96, 0x27, 0x7c, 0x06, 0xd4, 0x38, 0xb7, 0x1b, 0x64, 0x0e, 0x64, 0x0e, 0x64,
		0x4e, 0xdc, 0xfc, 0x93, 0x23, 0x46, 0x9d, 0x17, 0xf9, 0x80, 0x18, 0x63, 0x5b, 0xd8, 0xe8, 0xbf,
		0xfb, 0xfb, 0x9f, 0x0a, 0xd6, 0x69, 0xe3, 0xc7, 0xa7, 0xa2, 0x75, 0xda, 0x18, 0xfd, 0x58, 0x0c,
		0xff, 0x1a, 0xfd, 0x5c, 0xfa, 0x54, 0xb0, 0xca, 0x93, 0x9f, 0x2b, 0x9f, 0x0a, 0x56, 0xa5, 0x71,
		0xf0, 0xf0, 0xf0, 0xe6, 0xe0, 0xfb, 0xf1, 0x40, 0x7d, 0xe1, 0xbf, 0xf2, 0x71, 0xa7, 0x53, 0x03,
		0x6f, 0x67, 0x1d, 0x6f, 0x3b, 0xbd, 0xaf, 0x55, 0x56, 0x1d, 0x58, 0x85, 0x0e, 0x84, 0x0e, 0x84,
		0x0e, 0x4c, 0x8c, 0x7f, 0x52, 0xab, 0x03, 0x6d, 0xeb, 0xa9, 0x66, 0x7d, 0x68, 0x7c, 0x2f, 0x1e,
		0x96, 0x07, 0xef, 0x0e, 0xbe, 0x9f, 0x0c, 0x5e, 0xff, 0xf2, 0xc7, 0xb2, 0x8f, 0x15, 0x0f, 0x4f,
		0x06, 0xef, 0x56, 0xfc, 0x97, 0xea, 0xe0, 0x9d, 0xe4, 0x1e, 0x95, 0xc1, 0xfe, 0xc2, 0x47, 0x87,
		0xbf, 0x2f, 0xad, 0x5a, 0x50, 0x5e, 0xb1, 0xe0, 0x78, 0xd5, 0x82, 0xe3, 0x15, 0x0b, 0x56, 0x7e,
		0xa5, 0xd2, 0x8a, 0x05, 0x95, 0xc1, 0x8f, 0x85, 0xcf, 0xef, 0x2f, 0xff, 0x68, 0x75, 0x70, 0xf0,
		0x63, 0xd5, 0x7f, 0x3b, 0x19, 0xfc, 0x78, 0x77, 0x00, 0x44, 0xb0, 0xeb, 0x88, 0x60, 0x2b, 0xaa,
		0xd7, 0x5a, 0xae, 0x7f, 0x34, 0x9b, 0xb3, 0x31, 0xfd, 0xc7, 0xcb, 0x11, 0x29, 0x86, 0x99, 0x53,
		0xcb, 0x5f, 0xf9, 0xb5, 0xeb, 0x07, 0xf5, 0xd1, 0xa3, 0xa3, 0x9f, 0x5f, 0xa4, 0xb2, 0x5a, 0xe8,
		0xf7, 0xa1, 0x32, 0x10, 0x97, 0xec, 0x33, 0xd5, 0xf5, 0x95, 0x12, 0xb1, 0x1a, 0x62, 0xc1, 0x88,
		0x05, 0x1b, 0xc7, 0x56, 0xd1, 0x7d, 0xb7, 0x85, 0xfd, 0xe4, 0x89, 0x27, 0xca, 0x85, 0x4f, 0x60,
		0xd4, 0x09, 0x61, 0xed, 0xcd, 0x58, 0xac, 0xbd, 0x79, 0x33, 0x96, 0x51, 0x47, 0x11, 0x93, 0xa5,
		0x40, 0x64, 0x8c, 0x2a, 0x50, 0xc9, 0xf2, 0x42, 0xb5, 0x80, 0x35, 0xc7, 0x91, 0x38, 0x52, 0x82,
		0xb0, 0x80, 0xb0, 0x58, 0xfb, 0x0d, 0x91, 0x38, 0x02, 0xbf, 0x07, 0xfc, 0x1e, 0x19, 0xf4, 0x7b,
		0x20, 0x71, 0x04, 0x66, 0xab, 0xa6, 0x23, 0x1b, 0x89, 0x23, 0x10, 0xe4, 0x10, 0xe4, 0x48, 0x1c,
		0x89, 0x43, 0xd6, 0x20, 0x71, 0x04, 0x32, 0x07, 0x32, 0x27, 0x2d, 0x32, 0x07, 0x89, 0x23, 0x48,
		0x1c, 0x01, 0xde, 0x4e, 0x40, 0x07, 0x22, 0x71, 0x04, 0x3a, 0x10, 0x3a, 0x10, 0x89, 0x23, 0x86,
		0x75, 0x20, 0x12, 0x47, 0x90, 0x38, 0x02, 0x44, 0x80, 0xc4, 0x91, 0xe9, 0x7a, 0x8e, 0xc4, 0x11,
		0x4a, 0x08, 0x33, 0xc7, 0x91, 0x37, 0xa2, 0xd0, 0x9c, 0x57, 0xfd, 0x36, 0x78, 0x3b, 0x12, 0x8c,
		0x9b, 0xf7, 0x2a, 0x3a, 0x44, 0x33, 0xdd, 0x7e, 0x49, 0x9a, 0xc7, 0xd2, 0xd2, 0x54, 0x7a, 0x0d,
		0x8d, 0xf3, 0x77, 0x98, 0x5e, 0x49, 0xd5, 0xf9, 0xad, 0x6f, 0x8c, 0xa4, 0xd0, 0x34, 0x88, 0x7e,
		0xa0, 0x26, 0x7a, 0x24, 0xf9, 0xc2, 0xfb, 0x2a, 0x3c, 0x85, 0xf6, 0x48, 0x93, 0x05, 0xe8, 0x8c,
		0x84, 0xce, 0x48, 0xb3, 0x24, 0x44, 0xe9, 0x58, 0x1b, 0xae, 0x43, 0x47, 0xa4, 0x18, 0xed, 0xed,
		0x9d, 0xee, 0x88, 0x44, 0xf5, 0x47, 0x4d, 0x33, 0x78, 0x48, 0x26, 0x34, 0xf2, 0x60, 0x13, 0x71,
		0x29, 0x21, 0x0f, 0x56, 0xe5, 0xbe, 0x53, 0x93, 0x07, 0x3b, 0xe1, 0xb1, 0x14, 0xa4, 0xc1, 0xa2,
		0x83, 0x1a, 0xa4, 0xc5, 0x36, 0x4a, 0x0b, 0x7a, 0x22, 0x2c, 0x57, 0x40, 0x07, 0xb1, 0x1c, 0xc4,
		0x72, 0x12, 0x62, 0x2d, 0xba, 0xd7, 0x33, 0x97, 0x92, 0x58, 0x0e, 0x67, 0x24, 0xe7, 0x54, 0x63,
		0x8f, 0xf1, 0x3b, 0x25, 0x3e, 0x39, 0x93, 0x39, 0xd3, 0x63, 0xe1, 0x8c, 0xde, 0x32, 0xec, 0xc5,
		0x15, 0xf5, 0x8a, 0x36, 0xcc, 0x4a, 0x06, 0xc8, 0xe4, 0x4f, 0x43, 0x6f, 0x12, 0xe4, 0x61, 0x8a,
		0x88, 0xac, 0xba, 0x6b, 0x44, 0x86, 0x10, 0x6b, 0xa6, 0x42, 0xac, 0x4c, 0x2c, 0xb7, 0x95, 0x23,
		0xe0, 0x7b, 0x5d, 0x2f, 0xd0, 0x87, 0xaf, 0xe1, 0x2e, 0x44, 0x24, 0xf0, 0x5e, 0x3c, 0xd9, 0xfd,
		0x76, 0x08, 0x61, 0x2a, 0xc7, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0, 0xea, 0xcc, 0x67, 0xb9, 0xfd,
		0xce, 0x67, 0xe5, 0x91, 0x36, 0xcb, 0x58, 0xa8, 0x8a, 0xd9, 0xf1, 0xac, 0xb2, 0x65, 0x61, 0x3b,
		0xcc, 0x8e, 0x4f, 0xcd, 0x15, 0x54, 0x2b, 0x95, 0x63, 0x0c, 0x8b, 0x4f, 0x0e, 0xaf, 0x6c, 0x4d,
		0xd6, 0xd4, 0x38, 0x07, 0x60, 0xfc, 0x77, 0x2c, 0x5d, 0x76, 0xee, 0x46, 0x8f, 0x1c, 0xff, 0x9d,
		0xa2, 0xf6, 0x3a, 0xe8, 0x95, 0x61, 0x18, 0xe6, 0x21, 0x44, 0x90, 0x80, 0x34, 0x41, 0x88, 0x00,
		0x16, 0x12, 0x2c, 0x24, 0x84, 0x08, 0x10, 0x22, 0xc8, 0xbc, 0xf7, 0x16, 0x21, 0x82, 0xf8, 0x89,
		0x0c, 0x21, 0x02, 0x84, 0x08, 0x10, 0x22, 0x48, 0x81, 0xc9, 0x8d, 0x10, 0x01, 0x00, 0x30, 0x00,
		0xf0, 0xae, 0x01, 0x60, 0x84, 0x08, 0x16, 0xfd, 0xd3, 0x08, 0x11, 0x24, 0x88, 0x2e, 0x73, 0x08,
		0x11, 0x20, 0x44, 0x90, 0xb8, 0x53, 0x2f, 0xc1, 0x10, 0x41, 0x0c, 0xf5, 0xd4, 0xaf, 0x22, 0x04,
		0xd9, 0x2b, 0xa4, 0x56, 0x33, 0x19, 0x33, 0x5d, 0x47, 0x4d, 0x0c, 0x96, 0xf4, 0x7d, 0x65, 0x85,
		0xae, 0x83, 0xfc, 0x66, 0xd1, 0x5e, 0x77, 0xf4, 0xed, 0xad, 0xcf, 0x2f, 0x14, 0x2a, 0xe6, 0x40,
		0x79, 0x73, 0xc8, 0x2e, 0x3c, 0x89, 0x4c, 0x10, 0x77, 0x1c, 0x15, 0xee, 0xf3, 0xc2, 0xc6, 0x4c,
		0x61, 0xfb, 0xbc, 0x78, 0xd9, 0xfe, 0x8a, 0x76, 0xb9, 0x3a, 0x6f, 0xda, 0x21, 0x1a, 0x29, 0x64,
		0x97, 0x8a, 0xc3, 0x2a, 0xc5, 0x5d, 0x95, 0x8b, 0xd8, 0x4b, 0x28, 0x62, 0x67, 0xb7, 0x4d, 0x63,
		0x2b, 0x62, 0xb7, 0xbd, 0xe6, 0x17, 0x4a, 0x11, 0x7b, 0xb8, 0x4e, 0xad, 0x88, 0xbd, 0x80, 0x22,
		0x76, 0x14, 0xb1, 0x13, 0x9d, 0x1e, 0xd1, 0x7d, 0xb5, 0xba, 0x1d, 0xdb, 0x71, 0x2d, 0xc5, 0x5e,
		0xe4, 0x94, 0x68, 0x42, 0xfe, 0x42, 0xb8, 0xcf, 0xa1, 0xce, 0x50, 0x73, 0x63, 0x10, 0x10, 0x97,
		0x8e, 0x9b, 0x42, 0xd7, 0xe5, 0x39, 0xb1, 0x81, 0x8b, 0xc4, 0xf5, 0x0c, 0xf6, 0x2e, 0xc5, 0x5f,
		0xad, 0xe3, 0x56, 0xe0, 0x3a, 0xb2, 0x52, 0xe5, 0x38, 0xc1, 0x43, 0x33, 0x84, 0x83, 0x1b, 0x0a,
		0x1c, 0x42, 0x8d, 0xab, 0xe5, 0xf7, 0xf7, 0xf7, 0x3f, 0xd9, 0xd6, 0x3f, 0x35, 0xeb, 0xcf, 0x82,
		0x75, 0xfa, 0xd8, 0x98, 0xf9, 0xc7, 0xc3, 0x83, 0xf5, 0xd8, 0x38, 0xf8, 0x5e, 0x38, 0xac, 0x16,
		0x07, 0x07, 0x3f, 0x4d, 0x7f, 0xdf, 0x78, 0x78, 0x78, 0x73, 0xf0, 0x6f, 0xca, 0xaa, 0x9f, 0x0e,
		0x7e, 0x3c, 0x3c, 0xbc, 0x91, 0x97, 0x74, 0x0d, 0x56, 0x49, 0x07, 0x7b, 0x15, 0xf6, 0x6a, 0x92,
		0xf6, 0x6a, 0x96, 0x6d, 0x31, 0x49, 0xef, 0x99, 0x8a, 0x25, 0xb6, 0xd9, 0x3d, 0xb6, 0xc6, 0x0e,
		0xdb, 0x53, 0x38, 0x21, 0xd9, 0x93, 0x51, 0x39, 0x91, 0xfc, 0x5a, 0x43, 0x50, 0xf2, 0x0c, 0x96,
		0xbf, 0xfd, 0xe2, 0xbb, 0x2d, 0x79, 0xaf, 0xfc, 0xb3, 0xd7, 0x6b, 0x5a, 0x1b, 0x1a, 0x5f, 0x45,
		0x62, 0x60, 0xf6, 0xc3, 0x2b, 0xce, 0x68, 0xbd, 0xa5, 0xb9, 0xd1, 0x10, 0x90, 0x01, 0xfe, 0xaf,
		0x80, 0xbe, 0xd5, 0x79, 0xee, 0xac, 0x8b, 0x50, 0xcb, 0x0a, 0x22, 0x65, 0x34, 0xaf, 0x2c, 0x5c,
		0x96, 0xa0, 0xf5, 0xd1, 0x97, 0x67, 0xa2, 0xcf, 0x4d, 0x36, 0xa2, 0x6c, 0x1f, 0x18, 0xb5, 0xbe,
		0x2f, 0x29, 0xea, 0x90, 0xb7, 0x89, 0x14, 0x32, 0xed, 0x61, 0xd8, 0x40, 0x2a, 0x31, 0xbb, 0x19,
		0x9a, 0xc2, 0x0b, 0x9c, 0x27, 0xa7, 0x69, 0x07, 0xc2, 0x72, 0x5a, 0xea, 0xee, 0x86, 0x57, 0xeb,
		0xb7, 0xc6, 0xed, 0x20, 0x4b, 0x82, 0x5b, 0xe9, 0x7b, 0x90, 0x24, 0xd1, 0xb4, 0x39, 0x20, 0x94,
		0xa7, 0x39, 0x29, 0x4e, 0x6f, 0x92, 0x40, 0x6c, 0x12, 0x32, 0x4b, 0xb8, 0xf6, 0xe7, 0xb6, 0x50,
		0xe7, 0xb4, 0xf1, 0x3a, 0xd9, 0x5e, 0x84, 0xd3, 0x94, 0xad, 0x21, 0x49, 0x80, 0x31, 0xc1, 0x98,
		0xc9, 0x31, 0xe6, 0xe7, 0x6e, 0xb7, 0x2d, 0x6c, 0x97, 0xc2, 0x99, 0xc5, 0x18, 0x39, 0xb3, 0xed,
		0xf8, 0x81, 0x70, 0x27, 0x99, 0xd2, 0xc2, 0x57, 0xe7, 0xd1, 0x85, 0x1d, 0xc0, 0x76, 0x60, 0xbb,
		0xc4, 0xd8, 0xae, 0xef, 0x0e, 0x4d, 0x5c, 0x02, 0xd3, 0x29, 0x54, 0xd8, 0xd0, 0x2a, 0x6a, 0x34,
		0xca, 0x36, 0xb5, 0x6a, 0x89, 0x74, 0x6a, 0x88, 0xf4, 0x6a, 0x87, 0x30, 0x38, 0x6e, 0xf9, 0x46,
		0x18, 0x1c, 0x67, 0x8c, 0x58, 0x30, 0x61, 0x09, 0xb5, 0x3d, 0x19, 0x9e, 0xb0, 0xb4, 0x67, 0xf6,
		0x39, 0x8a, 0xac, 0xa9, 0xa1, 0xb1, 0x84, 0xdb, 0xef, 0x08, 0x6f, 0xe4, 0x6f, 0xd6, 0x50, 0x59,
		0x65, 0xc2, 0xda, 0xba, 0xdb, 0xef, 0x0c, 0xb1, 0x83, 0xb1, 0x88, 0x24, 0x02, 0x72, 0xca, 0x83,
		0x78, 0x58, 0x4c, 0x15, 0xa5, 0x9a, 0x30, 0x4a, 0x0d, 0x18, 0x4c, 0x12, 0x98, 0x24, 0x06, 0x4c,
		0x12, 0x5a, 0x21, 0x14, 0xa1, 0xf0, 0x89, 0x58, 0xe8, 0x94, 0xd1, 0x0c, 0xa1, 0x02, 0x32, 0x84,
		0x54, 0x8f, 0x4c, 0xa3, 0xb0, 0x28, 0xd5, 0x39, 0x42, 0x31, 0x2a, 0xa1, 0xc0, 0xb3, 0x5d, 0x3f,
		0xe4, 0x68, 0x5f, 0x34, 0xfb, 0x9e, 0x13, 0xbc, 0xa8, 0xab, 0xa4, 0x25, 0x7b, 0x40, 0x41, 0x41,
		0x41, 0xed, 0xb4, 0xab, 0x3a, 0x95, 0x69, 0x3f, 0x33, 0x39, 0x23, 0xf2, 0xfd, 0xf5, 0x24, 0x73,
		0x5f, 0x7e, 0xf1, 0x7a, 0x4d, 0x85, 0x3e, 0x7a, 0xa8, 0xc7, 0x40, 0xca, 0x04, 0x3f, 0xe3, 0x20,
		0x65, 0x02, 0xea, 0x6e, 0xe7, 0xd4, 0x1d, 0x52, 0x26, 0x66, 0x04, 0x00, 0x52, 0x26, 0xc0, 0x98,
		0xc0, 0xa1, 0x4a, 0x9c, 0x89, 0x94, 0x09, 0xb0, 0x1d, 0x52, 0x26, 0x90, 0x32, 0xc1, 0xf9, 0xa6,
		0xf4, 0x37, 0x5e, 0xf2, 0xe6, 0x48, 0x99, 0x40, 0xca, 0x84, 0x3c, 0xb1, 0x20, 0x65, 0x02, 0x29,
		0x13, 0x48, 0x99, 0x60, 0x62, 0x4d, 0xa4, 0x4c, 0xd0, 0x8f, 0x1c, 0x29, 0x13, 0xec, 0xa6, 0x0a,
		0x52, 0x26, 0x60, 0x92, 0x20, 0x65, 0x62, 0xdd, 0x12, 0xa4, 0x4c, 0x48, 0xac, 0x47, 0xca, 0x44,
		0x62, 0xc7, 0x86, 0x94, 0x09, 0xa4, 0x4c, 0x40, 0x41, 0xc1, 0x55, 0xad, 0xfa, 0x89, 0x34, 0xa4,
		0x4c, 0x30, 0x77, 0x4c, 0x99, 0xc9, 0x98, 0xc8, 0x70, 0xe3, 0x94, 0xcd, 0x7d, 0x48, 0x48, 0x47,
		0xa2, 0xd3, 0x47, 0xa5, 0xdd, 0x7d, 0x7e, 0x76, 0xdc, 0xe7, 0xcd, 0x3d, 0x54, 0x26, 0x1f, 0x4c,
		0x47, 0xff, 0x94, 0x76, 0xf7, 0x39, 0x93, 0xad, 0x53, 0x86, 0xdf, 0x3b, 0xc6, 0xae, 0x29, 0x7e,
		0xb7, 0x2d, 0x94, 0xda, 0xa6, 0x84, 0x0b, 0xb2, 0xd1, 0x37, 0x65, 0x3d, 0x09, 0x50, 0x15, 0x66,
		0xf2, 0xf9, 0x3f, 0x6b, 0x49, 0x84, 0x47, 0x01, 0xc8, 0xa7, 0xfe, 0xc8, 0x35, 0xde, 0x59, 0x46,
		0x49, 0xf2, 0x03, 0x69, 0x15, 0xa7, 0xa9, 0xc6, 0x0e, 0xd3, 0xe4, 0x08, 0x6d, 0xfb, 0x10, 0x9a,
		0x14, 0x21, 0x9a, 0x01, 0x67, 0xa6, 0x7b, 0x96, 0x8f, 0x95, 0xd9, 0xd1, 0x58, 0xe2, 0xa9, 0x0f,
		0x50, 0x96, 0xd4, 0xd1, 0x17, 0xa3, 0xe7, 0x3c, 0x9e, 0x8d, 0x9e, 0xa3, 0x34, 0x35, 0x99, 0xc7,
		0x00, 0xf3, 0x45, 0x5b, 0x34, 0x83, 0xae, 0xe7, 0x53, 0x3a, 0x2b, 0x4f, 0x96, 0x82, 0x8f, 0xc1,
		0xc7, 0x24, 0x3e, 0x56, 0x9d, 0x62, 0x1c, 0xd1, 0x9c, 0xc6, 0x3c, 0xef, 0xc9, 0x0e, 0x31, 0x8f,
		0xf4, 0x2e, 0x24, 0x33, 0xd2, 0x5b, 0x8d, 0xa8, 0x75, 0x89, 0x9b, 0x8d, 0xc8, 0xd9, 0x88, 0x9d,
		0x85, 0xe8, 0x89, 0x1e, 0xb7, 0xb8, 0x46, 0x7a, 0x2b, 0xa2, 0x30, 0x1e, 0x54, 0xc6, 0xc4, 0x20,
		0xda, 0x8c, 0xc2, 0xc1, 0x30, 0x7c, 0x8c, 0xc3, 0xc5, 0x40, 0xec, 0x8c, 0xc4, 0xce, 0x50, 0xac,
		0x8c, 0x45, 0x63, 0x30, 0x8d, 0xf8, 0x81, 0x16, 0xc3, 0x45, 0x1b, 0x3c, 0xd9, 0x4d, 0xa7, 0xad,
		0xe2, 0xb3, 0xde, 0x48, 0x78, 0xd1, 0x8e, 0x9a, 0x97, 0xc2, 0x33, 0x7d, 0x4e, 0x9b, 0x29, 0x39,
		0x99, 0x93, 0x9f, 0x49, 0xb9, 0x99, 0xd5, 0x18, 0xd3, 0x1a, 0x63, 0x5e, 0x23, 0x4c, 0xac, 0xc7,
		0xcc, 0x9a, 0x4c, 0x4d, 0xf7, 0xdf, 0x6f, 0xa4, 0x37, 0xa7, 0x25, 0xdc, 0xc0, 0x09, 0x5e, 0x3c,
		0xf1, 0xc4, 0x39, 0x35, 0x9c, 0x61, 0x9a, 0x63, 0xfe, 0x7c, 0xfc, 0xd5, 0x7e, 0xb6, 0x7d, 0x46,
		0x32, 0x9e, 0xbc, 0xf8, 0xdd, 0x1f, 0x77, 0x17, 0xd7, 0xbf, 0x3c, 0x7e, 0xa8, 0x9d, 0x9d, 0x5f,
		0x9c, 0xdf, 0xff, 0x91, 0xe7, 0x1c, 0x69, 0xe9, 0xb3, 0x4d, 0x3a, 0xcf, 0xb1, 0xcc, 0x61, 0x5d,
		0x7a, 0x00, 0x67, 0xd7, 0x57, 0x77, 0xd7, 0x17, 0xf5, 0x3c, 0xdb, 0xee, 0x83, 0xc3, 0xb4, 0xbf,
		0xf2, 0xc7, 0xbb, 0xfa, 0xed, 0x2e, 0xbd, 0xef, 0xd5, 0xfd, 0xcd, 0x2e, 0xbd, 0xee, 0x65, 0xed,
		0xfc, 0x62, 0x97, 0xde, 0xb7, 0xf6, 0xf1, 0xfd, 0xf9, 0xfd, 0x2e, 0xbd, 0xf0, 0xc5, 0xf5, 0x59,
		0xed, 0xa2, 0xb8, 0x73, 0x6f, 0x5c, 0xdd, 0x29, 0xa2, 0xbe, 0xd8, 0x29, 0x1e, 0xfe, 0xad, 0x7e,
		0x7b, 0x55, 0xdf, 0xa9, 0x37, 0xbe, 0xfb, 0xe3, 0xee, 0xbe, 0x7e, 0xf9, 0xf8, 0xbe, 0x56, 0xbf,
		0xbc, 0xbe, 0xda, 0x39, 0x5e, 0x2e, 0xef, 0xdc, 0x1b, 0x9f, 0xec, 0x18, 0x71, 0x5f, 0x5c, 0xff,
		0xb2, 0x73, 0x77, 0x5c, 0xda, 0x2d, 0xd8, 0x75, 0xff, 0xeb, 0xcd, 0xed, 0xf9, 0xef, 0x3b, 0x77,
		0xcb, 0x95, 0x5d, 0xbb, 0xe5, 0x9d, 0xbb, 0xe1, 0xc2, 0xce, 0xbd, 0xf1, 0x31, 0xe3, 0x1b, 0xb3,
		0xec, 0xd4, 0x48, 0xda, 0x45, 0xb9, 0x97, 0xc0, 0x8d, 0xe7, 0x7d, 0xf1, 0x55, 0x78, 0xac, 0x41,
		0x87, 0x68, 0x47, 0x04, 0x1d, 0x36, 0x9e, 0x15, 0x82, 0x0e, 0x08, 0x3a, 0xac, 0x7e, 0x23, 0xfe,
		0xa0, 0x83, 0xff, 0xe2, 0xb7, 0xbb, 0xcf, 0x16, 0x13, 0x8b, 0xe6, 0x34, 0xab, 0x81, 0x17, 0xf6,
		0xa2, 0x55, 0x07, 0x33, 0x0a, 0xd2, 0x58, 0x03, 0xc6, 0xc4, 0xb4, 0xc3, 0x45, 0x11, 0x4e, 0x4c,
		0x43, 0x8c, 0x32, 0xee, 0xa2, 0x9f, 0x8e, 0xb4, 0x72, 0x36, 0x72, 0xf4, 0x4c, 0xc5, 0xbb, 0xc9,
		0x57, 0x89, 0x7e, 0x52, 0x4a, 0x5e, 0xd4, 0xbf, 0x47, 0x4a, 0xd1, 0xa0, 0x76, 0xbc, 0x9e, 0x2b,
		0x4e, 0xaf, 0x5b, 0x81, 0x88, 0x64, 0x99, 0x58, 0x54, 0x20, 0x92, 0x65, 0x18, 0x55, 0xdb, 0xb4,
		0x52, 0x48, 0xd8, 0x4f, 0x7a, 0x31, 0xf4, 0x48, 0x85, 0x9d, 0xe8, 0xb5, 0x94, 0x09, 0xc5, 0xef,
		0x9b, 0x37, 0x63, 0x21, 0x7a, 0x14, 0x31, 0x75, 0x8a, 0x45, 0x98, 0x36, 0xfa, 0xe7, 0x42, 0xfd,
		0x10, 0x61, 0x10, 0x61, 0x10, 0x61, 0x69, 0x13, 0x61, 0x11, 0x53, 0xa7, 0x59, 0x84, 0x49, 0x35,
		0x1e, 0xdf, 0x2c, 0xbf, 0x24, 0x2b, 0x88, 0xd7, 0x9e, 0xbe, 0xae, 0xf0, 0x2a, 0x41, 0x78, 0x41,
		0x78, 0xc5, 0x22, 0xbc, 0x90, 0xac, 0x0c, 0xbf, 0x21, 0xfc, 0x86, 0xf0, 0x1b, 0x4a, 0xd2, 0x1b,
		0x92, 0x95, 0x91, 0xac, 0xcc, 0xf4, 0x07, 0xc9, 0xca, 0x69, 0x7b, 0x5f, 0x24, 0x2b, 0x6f, 0xf5,
		0xfb, 0x22, 0x59, 0x79, 0x37, 0xde, 0x18, 0xc9, 0xca, 0xdb, 0xfb, 0xba, 0x48, 0x56, 0xde, 0x2d,
		0x5e, 0x46, 0xb2, 0xf2, 0xb6, 0x13, 0x37, 0x92, 0x95, 0xb7, 0x1e, 0x76, 0x21, 0x59, 0x79, 0x37,
		0x6e, 0x19, 0xc9, 0xca, 0x5b, 0xff, 0xc6, 0x48, 0x56, 0x66, 0x5b, 0x8d, 0x64, 0xe5, 0x35, 0xdb,
		0x20, 0xe8, 0x40, 0x3b, 0x7d, 0x04, 0x1d, 0x90, 0xac, 0xac, 0xc0, 0xa6, 0x48, 0x56, 0x56, 0x27,
		0xd8, 0xf4, 0x25, 0x2b, 0xeb, 0xa4, 0x6c, 0xe4, 0x58, 0x73, 0x95, 0x25, 0x9a, 0xc4, 0xf3, 0xdd,
		0xa2, 0xd9, 0xb6, 0x81, 0xbf, 0x89, 0x97, 0xd9, 0x60, 0x7c, 0x8e, 0xc8, 0x7d, 0xb4, 0xd1, 0x59,
		0xd1, 0x6a, 0x9d, 0x11, 0x5a, 0xd3, 0x4d, 0x34, 0x46, 0x69, 0x45, 0x9b, 0x90, 0x46, 0x6a, 0x51,
		0x0f, 0x5f, 0x93, 0xc9, 0x18, 0x99, 0x2b, 0x4f, 0xca, 0xc4, 0xe2, 0x61, 0xa7, 0xbc, 0xa1, 0x49,
		0x34, 0xd9, 0x6e, 0x1a, 0xad, 0xda, 0x1f, 0x99, 0xe3, 0x4a, 0x62, 0x6d, 0x1d, 0xad, 0x94, 0xc7,
		0x47, 0xca, 0xdb, 0x23, 0xb7, 0x8c, 0x2e, 0xa1, 0x65, 0x34, 0x27, 0x2a, 0xde, 0xe1, 0xd6, 0xef,
		0xaa, 0x98, 0x85, 0xca, 0xc1, 0xf2, 0x80, 0x24, 0xab, 0xe3, 0x7f, 0x5e, 0x9d, 0x2c, 0xdf, 0xf0,
		0x9f, 0x57, 0x67, 0x49, 0x9e, 0xfd, 0xb3, 0x66, 0x60, 0x8c, 0x27, 0x3a, 0xdd, 0x40, 0x8c, 0x67,
		0xf3, 0xf8, 0xf2, 0x23, 0x53, 0x5e, 0xad, 0xc3, 0xe4, 0x14, 0x4c, 0x4e, 0x59, 0x42, 0x50, 0xea,
		0x4a, 0x74, 0x7e, 0x39, 0xe6, 0x2f, 0x40, 0x99, 0x92, 0x94, 0xa9, 0xf2, 0xfc, 0x05, 0x62, 0xab,
		0x79, 0xbd, 0x16, 0xf3, 0x98, 0xbd, 0x90, 0x88, 0x6f, 0x15, 0xb3, 0x17, 0x24, 0x16, 0x7e, 0xe9,
		0xfa, 0x81, 0x7e, 0x2d, 0x53, 0xb8, 0x0b, 0xea, 0x30, 0x51, 0xca, 0x14, 0x33, 0x53, 0x25, 0xe3,
		0x99, 0xe6, 0xab, 0xc3, 0xd4, 0xe0, 0x9b, 0x39, 0xc5, 0x72, 0xaa, 0xb1, 0xc7, 0xf8, 0x6d, 0xf4,
		0xea, 0x02, 0x38, 0x2b, 0x3f, 0x7a, 0x96, 0xdd, 0x6a, 0x79, 0xc2, 0xf7, 0x39, 0xe3, 0x2f, 0xa7,
		0x0c, 0x7b, 0xb1, 0x9c, 0x14, 0xdf, 0x89, 0x2d, 0x39, 0xb9, 0xaf, 0x65, 0xc6, 0xb3, 0x5b, 0x38,
		0xc3, 0xb7, 0x8c, 0x7b, 0xde, 0xd8, 0x41, 0x20, 0x3c, 0x97, 0xb5, 0x20, 0x25, 0xdc, 0xf8, 0xbf,
		0xfb, 0xfb, 0x9f, 0x0a, 0xd6, 0x69, 0xe3, 0xc7, 0xa7, 0xa2, 0x75, 0xda, 0x18, 0xfd, 0x58, 0x0c,
		0xff, 0x1a, 0xfd, 0x5c, 0xfa, 0x54, 0xb0, 0xca, 0x93, 0x9f, 0x2b, 0x9f, 0x0a, 0x56, 0xa5, 0x71,
		0xf0, 0xf0, 0xf0, 0xe6, 0xe0, 0xfb, 0xf1, 0x40, 0x7d, 0xe1, 0xbf, 0xf8, 0xb2, 0x34, 0x1a, 0x2c,
		0x3b, 0x31, 0x65, 0xb7, 0x98, 0x21, 0xce, 0x2a, 0x88, 0x73, 0x44, 0x9c, 0xb6, 0xf5, 0x54, 0xb3,
		0x3e, 0x34, 0xbe, 0x17, 0x0f, 0xcb, 0x83, 0x77, 0x07, 0xdf, 0x4f, 0x06, 0xaf, 0x7f, 0xf9, 0x63,
		0xd9, 0xc7, 0x8a, 0x87, 0x27, 0x83, 0x77, 0x2b, 0xfe, 0x4b, 0x75, 0xf0, 0x4e, 0x72, 0x8f, 0xca,
		0x60, 0x7f, 0xe1, 0xa3, 0xc3, 0xdf, 0x97, 0x56, 0x2d, 0x28, 0xaf, 0x58, 0x70, 0xbc, 0x6a, 0xc1,
		0xf1, 0x8a, 0x05, 0x2b, 0xbf, 0x52, 0x69, 0xc5, 0x82, 0xca, 0xe0, 0xc7, 0xc2, 0xe7, 0xf7, 0x97,
		0x7f, 0xb4, 0x3a, 0x38, 0xf8, 0xb1, 0xea, 0xbf, 0x9d, 0x0c, 0x7e, 0xbc, 0x3b, 0x48, 0x21, 0xab,
		0xee, 0x25, 0xfb, 0x3d, 0x34, 0x45, 0x05, 0xa3, 0xc6, 0x6f, 0x75, 0x3b, 0xb6, 0xe3, 0x5a, 0xa1,
		0x9b, 0x94, 0x51, 0xe5, 0x33, 0x48, 0x84, 0xfc, 0x85, 0x70, 0x9f, 0x43, 0xbf, 0x70, 0xea, 0x94,
		0xfe, 0xa5, 0xe3, 0xb2, 0xa5, 0x33, 0x31, 0xd9, 0x62, 0x2b, 0xb7, 0x0d, 0x8b, 0x4f, 0xe9, 0xed,
		0x2a, 0x56, 0xee, 0xfb, 0xc1, 0xb3, 0x9b, 0x81, 0xd3, 0x75, 0xdf, 0x3b, 0xcf, 0x4e, 0x18, 0x72,
		0x2f, 0xa4, 0x31, 0x4d, 0x34, 0x7f, 0x69, 0x7f, 0xcb, 0xdc, 0x55, 0x95, 0x2a, 0xc7, 0x19, 0xba,
		0xac, 0xb4, 0x08, 0x64, 0x06, 0x89, 0xc3, 0x8d, 0x3d, 0xf2, 0xfb, 0xfb, 0xfb, 0x9f, 0x6c, 0xeb,
		0x9f, 0x9a, 0xf5, 0x67, 0xc1, 0x3a, 0x7d, 0x6c, 0xcc, 0xfc, 0xe3, 0xe1, 0xc1, 0x7a, 0x6c, 0x1c,
		0x7c, 0x2f, 0x1c, 0x56, 0x8b, 0x83, 0x83, 0x9f, 0xa6, 0xbf, 0x6f, 0x0c, 0xf1, 0xf0, 0xbf, 0x29,
		0xab, 0x7e, 0x3a, 0xf8, 0xf1, 0xf0, 0xf0, 0x26, 0x9f, 0xb4, 0x66, 0xdb, 0x8b, 0xf7, 0xb9, 0xf1,
		0xb4, 0x1d, 0x1a, 0x87, 0x4c, 0x7a, 0x5d, 0x8f, 0xc1, 0x61, 0x37, 0xbb, 0x19, 0xb5, 0xa1, 0x8b,
		0x78, 0xb2, 0xfb, 0xed, 0xd0, 0x7d, 0x53, 0x29, 0x96, 0xe1, 0xfd, 0x83, 0xf7, 0x0f, 0xde, 0x3f,
		0x35, 0x7a, 0x19, 0x72, 0x9f, 0xe5, 0xf6, 0x3b, 0x9f, 0x85, 0xc7, 0xe0, 0x04, 0xac, 0x6a, 0x6c,
		0x71, 0x6b, 0xbb, 0xcf, 0xa9, 0x70, 0x02, 0x72, 0xa2, 0x5a, 0x66, 0x88, 0x14, 0x41, 0x23, 0xae,
		0xfd, 0x0c, 0x00, 0x22, 0x06, 0xd4, 0xca, 0x8a, 0x56, 0x4d, 0x5d, 0x41, 0xb5, 0x52, 0x39, 0xae,
		0xa4, 0xf8, 0x1a, 0x00, 0x5f, 0x16, 0x8e, 0xd9, 0x0f, 0x55, 0x5b, 0xe4, 0x01, 0xd4, 0x6f, 0x9f,
		0x38, 0xbf, 0x1f, 0xe0, 0x07, 0xe0, 0x07, 0xe0, 0x87, 0x12, 0xbd, 0xb0, 0x04, 0xda, 0xb6, 0x34,
		0x04, 0xc9, 0x1a, 0x48, 0x63, 0xf5, 0x48, 0xb2, 0xfb, 0x07, 0xb2, 0x16, 0x30, 0xdb, 0x16, 0xaf,
		0x37, 0x73, 0x40, 0x2c, 0x13, 0x44, 0x86, 0xc0, 0x57, 0x26, 0x03, 0x5f, 0x5b, 0xef, 0x8e, 0xdb,
		0xaa, 0x1a, 0xbb, 0xf9, 0x9c, 0xfd, 0xf9, 0x7f, 0xd2, 0xe7, 0xed, 0x28, 0xd6, 0x32, 0xdc, 0x86,
		0x4f, 0xbd, 0x1b, 0x7d, 0x87, 0xb9, 0x7f, 0x91, 0xe6, 0xec, 0x28, 0xd4, 0xdc, 0x29, 0xa4, 0x60,
		0x93, 0x92, 0x1f, 0x75, 0x92, 0xb7, 0x88, 0xf6, 0x06, 0x32, 0x81, 0x91, 0x09, 0x6c, 0xdc, 0x3e,
		0x60, 0x18, 0x0e, 0xa1, 0x33, 0x14, 0x62, 0xc9, 0x30, 0x88, 0x90, 0xc1, 0x52, 0x20, 0x26, 0xa6,
		0x85, 0xb0, 0x64, 0x59, 0x41, 0xa9, 0xa5, 0xcd, 0xa1, 0x74, 0x00, 0x02, 0x23, 0x97, 0xde, 0xd2,
		0x81, 0xa8, 0x72, 0x9f, 0x61, 0x94, 0x13, 0xb9, 0x07, 0x40, 0x8e, 0x73, 0x1a, 0x0a, 0xbc, 0x78,
		0xf0, 0xe2, 0xc5, 0xe3, 0xc5, 0xd3, 0x9e, 0x86, 0x42, 0x2c, 0x64, 0x5b, 0x49, 0x76, 0xda, 0x73,
		0x38, 0x19, 0x18, 0x91, 0x8d, 0x21, 0x39, 0x19, 0x93, 0x9f, 0x41, 0xb9, 0x19, 0xd5, 0x18, 0xc3,
		0x1a, 0x63, 0x5c, 0x23, 0x0c, 0xac, 0xef, 0x6e, 0x60, 0xf0, 0x0f, 0x6a, 0x33, 0x76, 0xb4, 0x11,
		0xdb, 0xb8, 0xa3, 0x05, 0x02, 0x66, 0x1a, 0x7b, 0xa4, 0x69, 0xd3, 0x1a, 0x67, 0x7e, 0x13, 0x42,
		0xc0, 0x9c, 0x30, 0x30, 0x25, 0x14, 0x8c, 0x0b, 0x07, 0xe3, 0x42, 0xc2, 0xa8, 0xb0, 0xe0, 0x11,
		0x1a, 0x4c, 0xc2, 0x43, 0xdf, 0x86, 0xdf, 0x48, 0xaf, 0xbc, 0x63, 0x95, 0x16, 0xf4, 0x7e, 0x85,
		0x71, 0x4f, 0x23, 0x63, 0x96, 0x16, 0x0e, 0xc4, 0xcc, 0xb8, 0xa5, 0xe8, 0x31, 0x06, 0xc6, 0x2e,
		0x4d, 0xfe, 0x7c, 0x67, 0xdf, 0x31, 0x67, 0x74, 0x0c, 0x13, 0x33, 0x93, 0xc4, 0x78, 0x14, 0xbc,
		0xe3, 0x99, 0xb2, 0x7b, 0x0e, 0xac, 0x63, 0x9b, 0xb2, 0x7b, 0x0c, 0xbc, 0xe3, 0x9c, 0xb2, 0x7b,
		0x0e, 0xcc, 0x63, 0x9e, 0xb2, 0x7b, 0x10, 0xdc, 0xe3, 0x9f, 0x32, 0x7e, 0x12, 0x55, 0x9c, 0x04,
		0xf3, 0xb8, 0xa8, 0xec, 0x1e, 0x03, 0xf7, 0x18, 0xa9, 0xec, 0x9e, 0x84, 0xa1, 0xf1, 0x52, 0x19,
		0x97, 0x15, 0x65, 0x9c, 0x04, 0xff, 0x38, 0xaa, 0x4c, 0x33, 0x09, 0xeb, 0x98, 0xaa, 0x8c, 0xd3,
		0x44, 0x09, 0x27, 0x61, 0x62, 0xac, 0x55, 0xc6, 0xa9, 0xa2, 0x82, 0x93, 0xe0, 0x1e, 0x83, 0x95,
		0x71, 0x8a, 0x28, 0xe0, 0x24, 0xf8, 0xc7, 0x66, 0x45, 0x27, 0xc1, 0xba, 0x63, 0x63, 0xeb, 0x9a,
		0x1e, 0x70, 0xd4, 0x1c, 0xb2, 0x8d, 0xd9, 0x5a, 0xa0, 0x0a, 0xc6, 0x59, 0x3e, 0x39, 0x04, 0xbb,
		0x10, 0xec, 0x1a, 0x3f, 0x00, 0xc1, 0xae, 0x0c, 0x04, 0xbb, 0xf8, 0xc7, 0x79, 0xbd, 0x16, 0x03,
		0x1c, 0x63, 0xbd, 0xa2, 0x3d, 0x79, 0xc6, 0x7b, 0x31, 0x0a, 0xf6, 0x44, 0x13, 0x29, 0x98, 0xc6,
		0x7f, 0x4d, 0x55, 0x0c, 0x67, 0x15, 0xc5, 0x92, 0xd9, 0x60, 0x2c, 0x09, 0x54, 0x39, 0xd6, 0x42,
		0x8b, 0x25, 0x73, 0xc3, 0x28, 0xb5, 0x17, 0x7c, 0x74, 0xa1, 0x33, 0x89, 0x93, 0x2d, 0x1f, 0x86,
		0x3b, 0x0f, 0x06, 0x93, 0x38, 0x93, 0x54, 0xf9, 0x48, 0x7a, 0x4b, 0x81, 0xac, 0xe6, 0x9f, 0xc4,
		0x49, 0xaf, 0x41, 0x59, 0xa9, 0xaa, 0x4f, 0x78, 0xea, 0x62, 0x5f, 0xd5, 0xa8, 0x44, 0x42, 0x04,
		0xc3, 0x8d, 0x31, 0xdc, 0x18, 0x22, 0x15, 0x22, 0x15, 0x22, 0x55, 0x57, 0xa4, 0x46, 0x42, 0x24,
		0x8b, 0x22, 0x55, 0x69, 0xa6, 0xe4, 0x66, 0x79, 0xaa, 0x39, 0x70, 0x38, 0x67, 0xa2, 0x28, 0xa3,
		0x04, 0x61, 0x0a, 0x61, 0x9a, 0x29, 0x61, 0x8a, 0xa2, 0x0c, 0xdd, 0xed, 0xe0, 0xa7, 0x86, 0x9f,
		0x3a, 0x36, 0x61, 0xc1, 0xe7, 0xc2, 0xcc, 0xa1, 0x28, 0x03, 0x45, 0x19, 0x0b, 0x8f, 0x41, 0x51,
		0x86, 0x29, 0x26, 0x89, 0xf1, 0x28, 0x50, 0x94, 0x81, 0xa2, 0x0c, 0x14, 0x65, 0x2c, 0x9c, 0x03,
		0x8a, 0x32, 0x50, 0x94, 0xb1, 0xec, 0x24, 0x50, 0x94, 0x81, 0xa2, 0x0c, 0x14, 0x65, 0x2c, 0x01,
		0x9a, 0x28, 0xca, 0x40, 0x51, 0xc6, 0xca, 0x93, 0x40, 0x51, 0x06, 0x8a, 0x32, 0x50, 0x94, 0xb1,
		0x14, 0x66, 0xa2, 0x28, 0x03, 0x45, 0x19, 0xcb, 0xa8, 0x02, 0xe7, 0x80, 0xa2, 0x0c, 0x14, 0x65,
		0x24, 0xbd, 0x0b, 0x8a, 0x32, 0x34, 0xb6, 0x43, 0xb0, 0x0b, 0xc1, 0xae, 0xa5, 0x0f, 0x40, 0xb0,
		0x8b, 0x81, 0xf7, 0x51, 0x94, 0x91, 0xdc, 0x0e, 0xbb, 0x56, 0x94, 0xc1, 0x91, 0x3f, 0x95, 0x33,
		0x5d, 0x93, 0x71, 0x17, 0x7e, 0xc9, 0xa4, 0x92, 0xdd, 0x62, 0x6d, 0x7b, 0xfc, 0x9b, 0x78, 0x99,
		0x4d, 0x76, 0xc9, 0x69, 0x4a, 0x81, 0xfc, 0x85, 0xe3, 0x07, 0xb5, 0x20, 0xd0, 0xec, 0xa5, 0x7c,
		0xe9, 0xb8, 0xf5, 0xb6, 0x18, 0x0a, 0x76, 0x3f, 0xff, 0x2e, 0xe7, 0xf6, 0xdb, 0x6d, 0x8d, 0x0c,
		0xc0, 0x4b, 0xfb, 0x1b, 0xdf, 0x66, 0xd7, 0x5e, 0x4b, 0x78, 0xa2, 0xf5, 0xf3, 0xcb, 0x78, 0xab,
		0x58, 0x2f, 0x8b, 0x89, 0xd9, 0x4d, 0x33, 0x79, 0x5e, 0x2b, 0x5d, 0xd3, 0x18, 0x5b, 0xe7, 0x31,
		0xbb, 0xc8, 0xd8, 0xdd, 0x27, 0x3a, 0xbe, 0x28, 0xba, 0xea, 0x54, 0x8c, 0x26, 0x21, 0xe5, 0x1b,
		0x6b, 0xe5, 0x17, 0x6b, 0x8f, 0x24, 0x29, 0x61, 0x24, 0x49, 0x92, 0xd6, 0xcd, 0x36, 0x8f, 0x24,
		0x21, 0x0d, 0xf4, 0x5a, 0x20, 0x16, 0xc2, 0x60, 0x2f, 0x26, 0x57, 0x04, 0x46, 0x91, 0xc4, 0xe3,
		0x3a, 0xc0, 0x28, 0x12, 0x46, 0x53, 0x9f, 0x83, 0x6f, 0x72, 0xdb, 0x3b, 0x4a, 0xd8, 0xc4, 0x8c,
		0xd7, 0x53, 0x86, 0xbd, 0x58, 0x4e, 0x8a, 0xef, 0xc4, 0x96, 0x9c, 0x1c, 0xeb, 0x10, 0xe6, 0x85,
		0x33, 0x7c, 0xcb, 0xb8, 0x27, 0xf7, 0xbc, 0xdc, 0x68, 0xe3, 0xac, 0x0d, 0x67, 0x9e, 0xfc, 0x69,
		0xa4, 0xc9, 0x9b, 0x69, 0x86, 0x38, 0xab, 0x20, 0x4e, 0x0c, 0x75, 0xce, 0xf0, 0x50, 0x67, 0x66,
		0x56, 0xc5, 0x5c, 0xf7, 0xb1, 0x68, 0x68, 0x75, 0x3b, 0xb6, 0xe3, 0x5a, 0xa1, 0xa7, 0x21, 0x65,
		0x63, 0xdd, 0x2f, 0x84, 0xfb, 0x1c, 0x7a, 0x62, 0x52, 0xa7, 0xf4, 0x2f, 0x1d, 0xd7, 0x40, 0xc0,
		0x91, 0x35, 0x2c, 0x1c, 0x6d, 0x1b, 0x96, 0x0f, 0xe9, 0x17, 0x54, 0x2f, 0xec, 0xfb, 0xc1, 0xb3,
		0x9b, 0x81, 0xd3, 0x75, 0xdf, 0x3b, 0xcf, 0x4e, 0xe8, 0x3c, 0x2e, 0xf0, 0x05, 0x17, 0x19, 0xd5,
		0xc9, 0xa5, 0xfd, 0x2d, 0x73, 0x57, 0x55, 0xaa, 0x1c, 0x67, 0xe8, 0xb2, 0xd2, 0x22, 0x90, 0x79,
		0xba, 0x3b, 0xb0, 0x62, 0x8f, 0xfc, 0xfe, 0xfe, 0xfe, 0x27, 0xdb, 0xfa, 0xa7, 0x66, 0xfd, 0x59,
		0xb0, 0x4e, 0x1f, 0x1b, 0x33, 0xff, 0x78, 0x78, 0xb0, 0x1e, 0x1b, 0x07, 0xdf, 0x0b, 0x87, 0xd5,
		0xe2, 0xe0, 0xe0, 0xa7, 0xe9, 0xef, 0x1b, 0x43, 0x3c, 0xfc, 0x6f, 0xca, 0xaa, 0x9f, 0x0e, 0x7e,
		0x3c, 0x3c, 0xbc, 0xc9, 0x27, 0xad, 0xd9, 0xf6, 0xe2, 0x7d, 0x2e, 0x21, 0x04, 0x41, 0x70, 0xab,
		0x8e, 0x3d, 0xfb, 0xbd, 0xae, 0xc7, 0xe0, 0xb0, 0x9b, 0xdd, 0x8c, 0x3a, 0x90, 0x55, 0x3c, 0xd9,
		0xfd, 0x76, 0xe8, 0xbe, 0xa9, 0x14, 0xcb, 0xf0, 0xfe, 0xc1, 0xfb, 0x07, 0xef, 0x9f, 0x1a, 0xbd,
		0x0c, 0xb9, 0xcf, 0x72, 0xfb, 0x9d, 0xcf, 0xc2, 0x63, 0x70, 0x02, 0x56, 0x35, 0xb6, 0xb8, 0xb5,
		0xdd, 0xe7, 0x54, 0x38, 0x01, 0x39, 0x51, 0x2d, 0x77, 0x92, 0xe3, 0x04, 0x1a, 0x71, 0xed, 0x67,
		0x00, 0x10, 0x71, 0x24, 0xb1, 0x72, 0xa2, 0x55, 0x53, 0x57, 0x50, 0xad, 0x54, 0x8e, 0x2b, 0x29,
		0xbe, 0x06, 0xc0, 0x97, 0x85, 0x63, 0xf6, 0x43, 0xd5, 0x16, 0x79, 0x00, 0xb5, 0x11, 0xcc, 0xab,
		0xfd, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x94, 0xe8, 0x85, 0x25, 0xd0, 0xb6, 0xa5, 0x21, 0x48,
		0xd6, 0x40, 0x1a, 0xab, 0x47, 0x92, 0xdd, 0x3f, 0x90, 0xb5, 0x80, 0xd9, 0xb6, 0x78, 0xbd, 0x99,
		0x03, 0x62, 0x99, 0x20, 0x32, 0x04, 0xbe, 0x32, 0x19, 0xf8, 0xda, 0x7a, 0x77, 0xdc, 0x0e, 0x65,
		0x04, 0x13, 0xeb, 0x3b, 0x18, 0xb3, 0x81, 0xd5, 0x8b, 0x37, 0x14, 0x32, 0x81, 0xf7, 0x18, 0x6f,
		0x70, 0x52, 0x7c, 0xa1, 0x90, 0xa5, 0x45, 0xab, 0xaf, 0xd0, 0xaa, 0xa7, 0xd0, 0xaa, 0x9f, 0xa0,
		0xd5, 0x4b, 0xc8, 0x9e, 0x1f, 0x91, 0xf2, 0x59, 0x29, 0x3e, 0xaf, 0x94, 0x1b, 0xce, 0x43, 0xe3,
		0x72, 0xd4, 0xbd, 0x99, 0x56, 0xd7, 0x7f, 0x62, 0xc3, 0x2d, 0xa8, 0x9e, 0xbe, 0xe6, 0xa9, 0x4b,
		0x9c, 0xb3, 0xce, 0xf9, 0xae, 0x3f, 0xd2, 0xd5, 0x07, 0xb5, 0xfc, 0xbf, 0xac, 0x38, 0x3a, 0xd9,
		0x23, 0x53, 0x3d, 0xaa, 0x35, 0x67, 0xa3, 0x76, 0x26, 0xcb, 0x4f, 0x61, 0xf1, 0x1d, 0x97, 0xbc,
		0x5f, 0xbe, 0x23, 0x3a, 0x5d, 0x6f, 0x75, 0x69, 0x7a, 0x84, 0x4b, 0xc7, 0x9f, 0x5b, 0x71, 0x42,
		0xeb, 0x4b, 0x19, 0x36, 0x3a, 0x44, 0x64, 0x1c, 0x1e, 0xb3, 0x0e, 0x0d, 0xff, 0x65, 0x1d, 0x61,
		0xc9, 0x3a, 0x2c, 0x94, 0x1d, 0x12, 0xca, 0x0e, 0x87, 0xd7, 0x0e, 0x85, 0xe1, 0xf7, 0x66, 0xa2,
		0xc9, 0x4d, 0xa9, 0xfd, 0xf9, 0xe6, 0xe4, 0xcc, 0x37, 0x1c, 0xc2, 0xe4, 0x58, 0xa5, 0xe6, 0x6e,
		0x49, 0xd6, 0xac, 0x48, 0x7b, 0xc0, 0x54, 0x3c, 0x5d, 0xf2, 0x04, 0x40, 0xf5, 0x5c, 0x91, 0x3d,
		0x54, 0x64, 0x4f, 0x94, 0x12, 0x81, 0xa4, 0x5b, 0xfe, 0x8f, 0x04, 0x84, 0xfc, 0xf8, 0x36, 0x49,
		0x11, 0x77, 0x19, 0x6e, 0x2b, 0x35, 0x6f, 0x6d, 0x8d, 0xb8, 0x5f, 0x2b, 0x69, 0x65, 0x2a, 0xbf,
		0x94, 0x2a, 0xbd, 0x94, 0xb9, 0xa4, 0x04, 0x2e, 0x49, 0x19, 0x97, 0xc8, 0x56, 0x4e, 0xe5, 0x7b,
		0x5f, 0x5e, 0x7c, 0xa7, 0x69, 0xb7, 0xe5, 0x8f, 0x2f, 0x8a, 0xf3, 0x4e, 0x56, 0xca, 0x9a, 0x1d,
		0x4a, 0x41, 0x09, 0xe5, 0x20, 0x04, 0x25, 0xe8, 0xa0, 0x4e, 0x6c, 0xba, 0x41, 0x05, 0xed, 0x20,
		0x82, 0x76, 0xd0, 0x80, 0x44, 0x8c, 0x66, 0x0c, 0x51, 0x65, 0xa7, 0x7f, 0x74, 0x5f, 0x7d, 0xc7,
		0x0d, 0xaa, 0x2a, 0xd9, 0x39, 0x13, 0xea, 0x53, 0x70, 0x23, 0x12, 0xd3, 0x07, 0x08, 0xae, 0x10,
		0x9d, 0xf4, 0x00, 0xdd, 0x58, 0x9f, 0x66, 0xf8, 0x9f, 0x23, 0xce, 0x4c, 0x89, 0xbb, 0xea, 0x84,
		0xf3, 0xb9, 0x8e, 0xac, 0xf8, 0xb6, 0x5c, 0xae, 0x9e, 0x94, 0xcb, 0x85, 0x93, 0xe3, 0x93, 0xc2,
		0x69, 0xa5, 0x52, 0xac, 0x52, 0x47, 0x2c, 0xb0, 0x9c, 0xa2, 0x21, 0xdf, 0x53, 0x83, 0xcb, 0xea,
		0x97, 0xd0, 0xe4, 0x9e, 0x08, 0xcd, 0xee, 0x96, 0xba, 0x32, 0x8a, 0x56, 0x42, 0x19, 0x41, 0x19,
		0x41, 0x19, 0x41, 0x19, 0x41, 0x19, 0x41, 0x19, 0x65, 0xd4, 0x05, 0x21, 0x1b, 0xcc, 0x52, 0xf3,
		0x40, 0x48, 0x04, 0xa8, 0xd2, 0xea, 0x6f, 0x5e, 0xeb, 0xbb, 0x55, 0x3e, 0x09, 0x1d, 0x6f, 0xb3,
		0x1b, 0xf4, 0x36, 0xbb, 0x9a, 0x87, 0x1f, 0x82, 0x9f, 0x19, 0x7e, 0x66, 0xf8, 0x99, 0x77, 0xc2,
		0x83, 0x26, 0x5c, 0xfb, 0x73, 0x5b, 0x58, 0x6e, 0xd0, 0xb3, 0xec, 0x7e, 0x28, 0xca, 0x14, 0x6d,
		0x97, 0xd7, 0x1b, 0x48, 0x1e, 0xc9, 0x4c, 0xa5, 0xd2, 0x93, 0xdd, 0xf6, 0x05, 0x4c, 0x1f, 0x98,
		0x3e, 0x71, 0x9b, 0x3e, 0x9f, 0xbb, 0xdd, 0xb6, 0xb0, 0x5d, 0x82, 0xed, 0x53, 0x2c, 0xc6, 0xe8,
		0x57, 0x18, 0x71, 0x58, 0x8b, 0xca, 0x9a, 0x2d, 0xb0, 0x24, 0x58, 0x12, 0x2c, 0xc9, 0xca, 0x92,
		0x43, 0x6d, 0x47, 0x2c, 0x9e, 0x99, 0x05, 0xda, 0x16, 0xa9, 0x60, 0x06, 0x0c, 0x07, 0x86, 0x63,
		0x63, 0x38, 0x52, 0xc1, 0x09, 0xa5, 0xc0, 0x84, 0x56, 0x50, 0xa2, 0xd1, 0x2c, 0x55, 0xb3, 0x60,
		0x44, 0x27, 0x77, 0x5f, 0x3b, 0x57, 0x3f, 0xf5, 0x05, 0x20, 0x0d, 0x93, 0xd9, 0xd9, 0x7a, 0x97,
		0x5e, 0xcd, 0xfa, 0xa5, 0xa3, 0x20, 0x23, 0x13, 0x05, 0x19, 0x0d, 0x78, 0x89, 0x09, 0xde, 0x50,
		0x37, 0xe8, 0xb1, 0x67, 0xa9, 0x5d, 0x05, 0x3d, 0x83, 0x29, 0x6a, 0x43, 0x9c, 0xf6, 0x97, 0x78,
		0xf1, 0xe5, 0x9d, 0x6c, 0xd1, 0x0a, 0xb8, 0xd9, 0xe0, 0x66, 0x9b, 0x23, 0x22, 0x9a, 0x95, 0x30,
		0x5c, 0xa8, 0x66, 0x1a, 0x14, 0x61, 0x1a, 0xc0, 0x34, 0x50, 0x23, 0x51, 0xd5, 0x90, 0x82, 0x5e,
		0x88, 0x41, 0x93, 0x70, 0xc9, 0x04, 0xac, 0x43, 0xc8, 0xfa, 0x04, 0xad, 0x4b, 0xd8, 0x6c, 0x04,
		0xce, 0x46, 0xe8, 0x2c, 0x04, 0xaf, 0x8e, 0x91, 0x72, 0x71, 0x8e, 0x63, 0xf8, 0x4b, 0xbc, 0x58,
		0x4e, 0x4b, 0xbf, 0x3b, 0xca, 0x78, 0x1f, 0x74, 0x45, 0xa1, 0x33, 0x0e, 0x17, 0x03, 0xb1, 0x33,
		0x12, 0x3b, 0x43, 0xb1, 0x32, 0x16, 0x8d, 0xc1, 0x88, 0x8c, 0x46, 0x77, 0x4a, 0xad, 0xa4, 0x97,
		0xbe, 0xe3, 0x06, 0xc5, 0x2a, 0xfa, 0xb1, 0x8d, 0xbe, 0x08, 0xfa, 0xb1, 0x69, 0xfd, 0x41, 0x3f,
		0xb6, 0x74, 0x5c, 0x03, 0xfa, 0xb1, 0x2d, 0x45, 0x1a, 0x81, 0x8e, 0xd4, 0x9c, 0xc3, 0x1a, 0xe1,
		0x4e, 0x40, 0x1b, 0x40, 0x1b, 0x40, 0x1b, 0x4a, 0xf4, 0xe2, 0xb4, 0x84, 0x1b, 0x38, 0xc1, 0x8b,
		0x27, 0x9e, 0x38, 0x9a, 0xb0, 0x69, 0xc8, 0xe0, 0xfc, 0xf9, 0xf8, 0xab, 0xfc, 0x6c, 0xfb, 0x0c,
		0xe4, 0x37, 0x79, 0xc1, 0xab, 0xfb, 0x9b, 0xc7, 0xda, 0xc7, 0xfb, 0x5f, 0x1f, 0xef, 0xff, 0xb8,
		0xa9, 0xeb, 0x92, 0x60, 0xa8, 0x6e, 0x7c, 0x96, 0xae, 0x54, 0xcc, 0xf3, 0xf9, 0xa3, 0xd7, 0xbc,
		0x7c, 0x5f, 0xc9, 0x27, 0xac, 0xaf, 0x1a, 0x71, 0x73, 0x51, 0x6c, 0xfa, 0xea, 0xeb, 0x18, 0x6e,
		0x30, 0x28, 0xac, 0xd1, 0x56, 0xd0, 0x58, 0xd0, 0x58, 0xd0, 0x58, 0x4a, 0xf4, 0xe2, 0x07, 0xde,
		0xfa, 0x8e, 0x36, 0xd2, 0xca, 0xea, 0x2d, 0xba, 0xbb, 0x29, 0x06, 0x33, 0x27, 0xc1, 0xbe, 0xc9,
		0x0f, 0x47, 0x24, 0xff, 0x77, 0x4e, 0x2d, 0xda, 0x79, 0x15, 0xf4, 0x7e, 0x13, 0x2f, 0xfe, 0xf8,
		0x6f, 0xa9, 0xe0, 0x27, 0xfd, 0x06, 0x54, 0x26, 0x39, 0x13, 0x7d, 0xa5, 0x7a, 0x3e, 0x52, 0xa2,
		0xec, 0x47, 0xf0, 0x00, 0xc1, 0x03, 0xe3, 0xb2, 0x3a, 0xba, 0xef, 0xb6, 0xb0, 0x9f, 0x68, 0x16,
		0x45, 0x24, 0x9c, 0x4f, 0x68, 0x49, 0x49, 0xa1, 0x10, 0x7b, 0xf3, 0x66, 0x2c, 0x98, 0x8e, 0xc6,
		0x2c, 0x86, 0xb1, 0xef, 0x24, 0x51, 0x51, 0x82, 0xa8, 0x80, 0xa8, 0x58, 0xfb, 0x0d, 0x11, 0x67,
		0x84, 0x1d, 0x05, 0x3b, 0x2a, 0x93, 0x76, 0x14, 0xe2, 0x8c, 0xb3, 0x5f, 0x04, 0x71, 0x46, 0x3d,
		0x87, 0x21, 0xe2, 0x8c, 0xa9, 0xb8, 0x06, 0xc4, 0x19, 0x97, 0x22, 0x0d, 0xc4, 0x19, 0x81, 0x36,
		0x80, 0x36, 0x92, 0x44, 0x1b, 0x88, 0x33, 0x2a, 0xab, 0x1b, 0xc4, 0x19, 0x8d, 0x68, 0x9d, 0x1c,
		0xe2, 0x8c, 0xd0, 0x58, 0xd0, 0x58, 0xd0, 0x58, 0x1b, 0xe8, 0x05, 0x71, 0xc6, 0x57, 0x34, 0x91,
		0x64, 0x9c, 0xd1, 0xf0, 0xd4, 0xa8, 0x25, 0x61, 0xc6, 0xec, 0x4d, 0x89, 0x52, 0x72, 0x85, 0x62,
		0x4e, 0x14, 0x03, 0x6d, 0x6b, 0xd1, 0x34, 0xff, 0x5c, 0xa8, 0x45, 0x2a, 0xce, 0x6f, 0x7d, 0x79,
		0xb5, 0x64, 0xf9, 0x31, 0xed, 0x14, 0x8d, 0x0c, 0x01, 0x19, 0x8f, 0x93, 0x92, 0x1f, 0x03, 0x22,
		0x35, 0xde, 0x0a, 0xf5, 0xd5, 0xbc, 0xd0, 0x28, 0xcd, 0xf5, 0xd5, 0xe3, 0xb9, 0x72, 0xca, 0xe5,
		0xd5, 0x4a, 0xf3, 0xe8, 0x50, 0x5d, 0x9d, 0x43, 0x75, 0x35, 0x8d, 0x40, 0xa3, 0x05, 0xd4, 0x59,
		0xfb, 0xd1, 0x3d, 0xd3, 0x9a, 0xdb, 0x20, 0x45, 0x2a, 0x11, 0x73, 0x14, 0x29, 0x52, 0x2a, 0xf7,
		0x9d, 0x9a, 0x14, 0xa9, 0x09, 0x8f, 0xa5, 0x20, 0x47, 0x0a, 0xdd, 0x18, 0x20, 0x2d, 0xb6, 0x51,
		0x5a, 0x90, 0xb3, 0xa4, 0xa8, 0x0a, 0x94, 0x49, 0x91, 0xc2, 0x0f, 0x0c, 0x3f, 0xf0, 0xce, 0xfb,
		0x81, 0x15, 0x86, 0xaf, 0xaf, 0x55, 0x2f, 0xa7, 0x1a, 0x7b, 0x90, 0xda, 0x89, 0xbe, 0xfe, 0xc3,
		0x90, 0x25, 0xa5, 0xd5, 0x48, 0xd5, 0xe4, 0x09, 0xf1, 0x9e, 0x14, 0xdf, 0x89, 0x2d, 0x39, 0x39,
		0xad, 0x46, 0xad, 0x1b, 0xcf, 0xf0, 0x2d, 0xe3, 0x9e, 0xba, 0x3d, 0x3e, 0x57, 0x6e, 0x9c, 0xf6,
		0x86, 0xaf, 0xab, 0xfe, 0x34, 0x58, 0x76, 0x1a, 0x1c, 0xa6, 0x98, 0x38, 0xab, 0x20, 0x4e, 0x34,
		0xa6, 0xcd, 0x50, 0x63, 0x5a, 0xc3, 0xac, 0xba, 0x97, 0xec, 0xf7, 0xd0, 0x14, 0x15, 0x8c, 0x1a,
		0xbf, 0xd5, 0xed, 0xd8, 0x8e, 0x6b, 0x85, 0xc1, 0x13, 0x46, 0x95, 0xcf, 0x20, 0x11, 0xf2, 0x17,
		0xc2, 0x7d, 0x0e, 0x9d, 0x1a, 0xa9, 0x53, 0xfa, 0x9c, 0x49, 0xe5, 0x4c, 0xb6, 0xd8, 0xca, 0x6d,
		0xa3, 0xe9, 0x84, 0xcc, 0xfb, 0x1a, 0xc8, 0x72, 0x66, 0x56, 0xa4, 0x39, 0xee, 0xe4, 0xf3, 0xb8,
		0xae, 0xaa, 0x54, 0x39, 0xce, 0xd0, 0x65, 0xa5, 0x45, 0x20, 0x33, 0x48, 0x1c, 0x6e, 0xec, 0x91,
		0xdf, 0xdf, 0xdf, 0xff, 0x64, 0x5b, 0xff, 0xd4, 0xac, 0x3f, 0x0b, 0xd6, 0xe9, 0x63, 0x63, 0xe6,
		0x1f, 0x0f, 0x0f, 0xd6, 0x63, 0xe3, 0xe0, 0x7b, 0xe1, 0xb0, 0x5a, 0x1c, 0x1c, 0xfc, 0x34, 0xfd,
		0x7d, 0x63, 0x88, 0x87, 0xff, 0x4d, 0x59, 0xf5, 0xd3, 0xc1, 0x8f, 0x87, 0x87, 0x37, 0xf9, 0xa4,
		0x35, 0xdb, 0x56, 0xd6, 0x1a, 0xd8, 0xbe, 0xdf, 0x6d, 0x3a, 0x61, 0xaa, 0x03, 0x53, 0xcd, 0xc1,
		0xc2, 0x8e, 0x44, 0x7f, 0xc8, 0xcc, 0xbc, 0xab, 0xbb, 0xfa, 0xed, 0xef, 0xf5, 0x5b, 0xb8, 0x02,
		0xe1, 0x0a, 0x84, 0x2b, 0x50, 0x8d, 0x5e, 0x84, 0xdb, 0xef, 0x08, 0x6f, 0x94, 0xc9, 0xc4, 0xe0,
		0x11, 0x2c, 0x6b, 0xec, 0x51, 0x77, 0xfb, 0x9d, 0xe1, 0x4b, 0xa5, 0x39, 0x93, 0xdd, 0xf9, 0xdc,
		0xf7, 0xfc, 0x40, 0x5f, 0x06, 0x8e, 0xf7, 0xd1, 0x97, 0x7c, 0x2a, 0x93, 0xfe, 0x20, 0xf8, 0x20,
		0xf8, 0x20, 0xf8, 0xc8, 0x93, 0x0a, 0x57, 0x0a, 0xbd, 0x62, 0x8a, 0x05, 0x56, 0xaf, 0xeb, 0x31,
		0x88, 0xab, 0x70, 0x17, 0x7d, 0x61, 0x55, 0x2c, 0x1d, 0x43, 0x54, 0x41, 0x54, 0x41, 0x54, 0xa9,
		0x73, 0x9f, 0xe5, 0xf6, 0x3b, 0x9f, 0xa5, 0x33, 0x5d, 0xd7, 0xb1, 0x10, 0x7a, 0x5b, 0x98, 0xf5,
		0x69, 0xa1, 0xb7, 0x45, 0x7a, 0xae, 0x00, 0xbd, 0x2d, 0x32, 0xe7, 0x6f, 0x1a, 0xea, 0x21, 0xe1,
		0x31, 0x40, 0x96, 0xd1, 0x3e, 0xb0, 0xb0, 0x00, 0x5b, 0x00, 0x5b, 0x60, 0x61, 0x99, 0x13, 0x58,
		0x5f, 0x85, 0xe7, 0x53, 0x2b, 0x88, 0xe7, 0xce, 0x6b, 0xb2, 0x91, 0xbe, 0xc8, 0x2a, 0x43, 0x5c,
		0x41, 0x5c, 0x41, 0x5c, 0xa9, 0xd1, 0x4b, 0xdf, 0x71, 0x83, 0xb7, 0x0c, 0xc2, 0xaa, 0x02, 0xfb,
		0x2a, 0x1e, 0x70, 0x5f, 0x84, 0x7d, 0x95, 0xf4, 0x15, 0x94, 0x61, 0x5b, 0x25, 0x66, 0x5b, 0x6d,
		0x4d, 0x67, 0x94, 0x71, 0x37, 0x80, 0xf1, 0xdf, 0xb1, 0xcc, 0x5f, 0xb8, 0x1b, 0x3d, 0x72, 0xfc,
		0x77, 0x8a, 0xe6, 0x2f, 0xa0, 0xa5, 0xba, 0x61, 0x70, 0x87, 0x62, 0xc1, 0x04, 0xa4, 0x09, 0x8a,
		0x05, 0x61, 0x17, 0xc1, 0x2e, 0x42, 0xb1, 0x20, 0x79, 0x0f, 0x14, 0x0b, 0xc6, 0x7a, 0x52, 0x7c,
		0x27, 0xb6, 0xe4, 0xe4, 0x50, 0x2c, 0x88, 0x62, 0xc1, 0xf4, 0x12, 0x27, 0x8a, 0x05, 0x51, 0x2c,
		0x88, 0x62, 0x41, 0x1e, 0x27, 0x4a, 0x0e, 0xc5, 0x82, 0x31, 0x48, 0x04, 0x14, 0x0b, 0xb2, 0xba,
		0x34, 0x51, 0x2c, 0x98, 0x99, 0xab, 0x42, 0xb1, 0x20, 0x45, 0x20, 0xa3, 0x58, 0x10, 0xc5, 0x82,
		0x86, 0xa4, 0x0b, 0x8a, 0x05, 0xe1, 0x0a, 0x84, 0x2b, 0x70, 0x7b, 0x5d, 0x81, 0x28, 0x16, 0x54,
		0xfa, 0x8e, 0x28, 0x16, 0x84, 0xe0, 0x83, 0xe0, 0xdb, 0x06, 0xc1, 0xb7, 0x23, 0xa9, 0xac, 0xdd,
		0xa7, 0x27, 0x5f, 0x30, 0x08, 0xac, 0xf1, 0x3e, 0x10, 0x34, 0x10, 0x34, 0x10, 0x34, 0x4a, 0xf4,
		0xd2, 0x77, 0xdc, 0xa0, 0x5a, 0x66, 0x90, 0x33, 0x6f, 0x91, 0x85, 0x6a, 0xd4, 0x19, 0x85, 0x2a,
		0xbf, 0xf4, 0x5c, 0x41, 0xf1, 0x6d, 0xb9, 0x5c, 0x3d, 0x29, 0x97, 0x0b, 0x27, 0xc7, 0x27, 0x85,
		0xd3, 0x4a, 0xa5, 0x58, 0x2d, 0xa2, 0xe8, 0x2f, 0x53, 0x7e, 0xa3, 0x5e, 0xb7, 0xdd, 0xb6, 0x1c,
		0x37, 0x10, 0xde, 0x57, 0xbb, 0xcd, 0xd1, 0xae, 0x60, 0x76, 0x3b, 0xc0, 0x10, 0xc0, 0x10, 0xc0,
		0x10, 0x65, 0x18, 0x72, 0x5c, 0x62, 0x80, 0x21, 0x27, 0x80, 0x21, 0x80, 0x21, 0xbb, 0x52, 0x0c,
		0x53, 0x3a, 0x2d, 0x9f, 0x56, 0x4f, 0x4a, 0xa7, 0x00, 0x1f, 0x19, 0x03, 0x1f, 0x68, 0x91, 0x04,
		0xc0, 0x02, 0xc0, 0x92, 0x43, 0x8b, 0x24, 0xb4, 0x48, 0x02, 0x6a, 0xd9, 0x31, 0xd4, 0x82, 0x16,
		0x49, 0xd9, 0x03, 0x2c, 0x68, 0x91, 0x04, 0xd8, 0x02, 0xd8, 0xb2, 0x05, 0xb0, 0x65, 0x47, 0xe2,
		0xca, 0x5e, 0xb7, 0x1b, 0x58, 0x2d, 0xd1, 0xb6, 0x5f, 0xf4, 0x85, 0xd6, 0xcc, 0x5e, 0x10, 0x38,
		0x10, 0x38, 0x10, 0x38, 0x4a, 0xf4, 0x02, 0xc7, 0x2e, 0x4c, 0x24, 0x98, 0x48, 0x8a, 0x57, 0x00,
		0xc7, 0x6e, 0x36, 0xed, 0xa4, 0x11, 0x54, 0x70, 0xfc, 0x1e, 0x57, 0x87, 0xc6, 0xd7, 0x1b, 0x02,
		0x80, 0x00, 0x80, 0x00, 0x80, 0x28, 0x03, 0x10, 0x24, 0xb8, 0x01, 0x80, 0x00, 0x80, 0x28, 0x5c,
		0x01, 0x12, 0xdc, 0xb2, 0x0e, 0x45, 0xfc, 0xc0, 0xb3, 0x83, 0x51, 0xc5, 0x92, 0x1e, 0x04, 0x99,
		0x6c, 0x04, 0xe8, 0x01, 0xe8, 0x01, 0xe8, 0xa1, 0x0c, 0x3d, 0xd0, 0xe0, 0x19, 0xc8, 0x03, 0xc8,
		0x43, 0xfe, 0x0a, 0x4a, 0x15, 0x00, 0x8d, 0x4c, 0x01, 0x0d, 0x4c, 0xa3, 0x00, 0x58, 0x01, 0x58,
		0x01, 0x58, 0x01, 0x58, 0x89, 0xdb, 0x46, 0x07, 0x58, 0x49, 0xfa, 0x0a, 0x30, 0x8d, 0x22, 0x39,
		0xa8, 0xb2, 0xad, 0xd3, 0x28, 0x28, 0x13, 0x15, 0x72, 0x5a, 0xc3, 0x28, 0xee, 0xc2, 0x27, 0x9a,
		0x9a, 0x45, 0xb1, 0xc7, 0x78, 0x3f, 0x43, 0x28, 0xa1, 0xde, 0x5c, 0x3f, 0x7f, 0xe1, 0xf8, 0x41,
		0x2d, 0x08, 0xd4, 0x12, 0x18, 0x87, 0x3a, 0xa0, 0xde, 0x16, 0x43, 0x58, 0x30, 0xe4, 0x48, 0xb7,
		0xdf, 0x6e, 0x2b, 0x8c, 0xd5, 0xb8, 0xb4, 0xbf, 0xd1, 0x17, 0x5f, 0x7b, 0x2d, 0xe1, 0x89, 0xd6,
		0xcf, 0x2f, 0xe3, 0xa5, 0xac, 0x47, 0x48, 0x24, 0x6d, 0x0d, 0x92, 0xce, 0x2b, 0x8d, 0x23, 0xa1,
		0x11, 0xb1, 0x1c, 0xf9, 0x6e, 0x26, 0xc6, 0xf5, 0x9f, 0xd8, 0x70, 0xc6, 0xaa, 0x67, 0x4b, 0x39,
		0x53, 0x89, 0xc3, 0x54, 0x3f, 0xc4, 0xf5, 0xa7, 0xb7, 0xfa, 0x4c, 0xd6, 0x9c, 0x87, 0xe4, 0x60,
		0x19, 0xa5, 0x41, 0x32, 0x92, 0x83, 0x63, 0xa4, 0x07, 0xc5, 0xa8, 0xd8, 0x5b, 0xea, 0x76, 0x95,
		0xaa, 0xfd, 0x44, 0xb6, 0x93, 0xc8, 0xf6, 0x10, 0xc9, 0xee, 0xd1, 0xe3, 0x10, 0xd9, 0xc1, 0x2c,
		0x79, 0xbb, 0x1f, 0x7c, 0xb1, 0x3a, 0x8e, 0xdf, 0xb1, 0x83, 0xe6, 0x17, 0xf9, 0x33, 0x8c, 0xba,
		0x38, 0xce, 0x2d, 0x97, 0xd5, 0x2e, 0x4a, 0x28, 0x51, 0xd9, 0xdc, 0xa7, 0x98, 0xf7, 0x74, 0x73,
		0x9e, 0x6a, 0xbe, 0x6b, 0x9b, 0xeb, 0xda, 0xe6, 0xb9, 0x96, 0x39, 0xce, 0x8b, 0x37, 0x94, 0xcd,
		0xeb, 0xe8, 0xbe, 0x9a, 0xdd, 0xbe, 0x1b, 0x08, 0x4f, 0x29, 0xf3, 0x80, 0x90, 0x69, 0x40, 0x34,
		0x99, 0x09, 0x90, 0x56, 0xc7, 0x24, 0xd6, 0x75, 0xac, 0x69, 0xfa, 0xe7, 0x39, 0xec, 0x2b, 0x8a,
		0x6b, 0x54, 0xc7, 0x84, 0xe5, 0x3a, 0x32, 0xbe, 0x48, 0x3e, 0xcb, 0x29, 0x1a, 0xb2, 0x32, 0x1a,
		0x5c, 0xf0, 0x4f, 0x42, 0xad, 0x0b, 0xd7, 0xfe, 0xdc, 0x16, 0x96, 0x1b, 0xf4, 0xac, 0xa1, 0x96,
		0x51, 0xd7, 0x4d, 0xaf, 0x37, 0x90, 0x94, 0x45, 0xc4, 0xf2, 0x27, 0x68, 0x35, 0x68, 0x35, 0x36,
		0xad, 0xa6, 0x5e, 0x3e, 0xa4, 0x58, 0x2e, 0xc4, 0xc9, 0xa2, 0x2d, 0x2a, 0x6b, 0xb6, 0xc0, 0x92,
		0x60, 0x49, 0xb0, 0x24, 0x2b, 0x4b, 0x0e, 0xb5, 0x9d, 0x1f, 0x12, 0x8a, 0xa5, 0x3a, 0x63, 0x33,
		0x7a, 0xd5, 0x25, 0x7b, 0x80, 0xe1, 0xc0, 0x70, 0x31, 0x33, 0x1c, 0x69, 0x14, 0x23, 0x65, 0xe4,
		0x22, 0x6d, 0xb4, 0xa2, 0xc6, 0x8c, 0x63, 0xcd, 0x51, 0x89, 0x3a, 0x33, 0xa6, 0xb4, 0x27, 0xbc,
		0xa4, 0x7e, 0xc4, 0x61, 0xc3, 0x64, 0xc0, 0x4a, 0xef, 0xd2, 0xab, 0x59, 0xbf, 0x74, 0x8c, 0x0e,
		0xcc, 0xc4, 0xe8, 0xc0, 0x46, 0xda, 0xad, 0xff, 0xf4, 0x06, 0x7f, 0x24, 0x83, 0xc2, 0x2a, 0xa1,
		0x9f, 0xcd, 0x51, 0xdf, 0x35, 0x81, 0x9f, 0x3d, 0x85, 0x13, 0x92, 0x3d, 0x19, 0x95, 0x13, 0xc9,
		0xaf, 0x8d, 0x3c, 0x49, 0x9e, 0xc1, 0xf2, 0xb7, 0x5f, 0x7c, 0xb7, 0x25, 0xef, 0x95, 0xef, 0x79,
		0xdd, 0xa6, 0xf0, 0x7d, 0xb1, 0x1a, 0xc6, 0xce, 0x74, 0xbd, 0x99, 0x7c, 0x74, 0xc5, 0xf9, 0xac,
		0x0f, 0x6b, 0x6d, 0x44, 0xa3, 0x32, 0xe8, 0x73, 0x16, 0x6d, 0x0e, 0xbf, 0xcf, 0xba, 0xf3, 0x93,
		0x84, 0x97, 0xca, 0x70, 0x52, 0x19, 0x3e, 0xbe, 0x86, 0x8b, 0xe1, 0x17, 0x67, 0xa2, 0xc9, 0x4d,
		0x81, 0xa8, 0xc9, 0xad, 0xc9, 0x47, 0x30, 0x27, 0x0b, 0xb2, 0x11, 0xc3, 0xdc, 0x40, 0x04, 0x54,
		0x5b, 0x23, 0xf9, 0x20, 0xe6, 0x7a, 0x22, 0xe1, 0x11, 0xf5, 0xd2, 0x51, 0xcc, 0x9e, 0x43, 0x70,
		0x42, 0x0d, 0x17, 0x6d, 0x87, 0x5d, 0x2b, 0x49, 0x64, 0xdb, 0x67, 0xd8, 0xca, 0x11, 0x61, 0xda,
		0x2c, 0xdb, 0xb6, 0xb0, 0x9f, 0x3c, 0xf1, 0x44, 0x31, 0x6b, 0x15, 0xba, 0xb3, 0x0c, 0x51, 0x7f,
		0xa8, 0xe0, 0xdf, 0xbc, 0x19, 0xe1, 0x9a, 0xa3, 0x21, 0xc1, 0xc7, 0xe8, 0x8a, 0x92, 0xcb, 0x4c,
		0x59, 0x38, 0x1d, 0x95, 0xc4, 0x3c, 0x49, 0x29, 0xaf, 0x2c, 0xed, 0xc1, 0x98, 0x19, 0x66, 0x4c,
		0x59, 0xad, 0x11, 0x2d, 0xb0, 0xbd, 0x67, 0x5f, 0xfd, 0xcc, 0xa3, 0x14, 0x98, 0xe1, 0x6a, 0xc5,
		0xd3, 0xa2, 0x05, 0x9d, 0xc9, 0x85, 0x2f, 0x3a, 0x05, 0x2f, 0x1a, 0xe4, 0xac, 0x4b, 0xd6, 0x6c,
		0xe4, 0xcd, 0x46, 0xe6, 0x3c, 0xe4, 0xae, 0x6e, 0x79, 0x13, 0x5c, 0x55, 0xf4, 0x92, 0x95, 0xd9,
		0x92, 0x74, 0xc7, 0x7d, 0xd6, 0x72, 0x56, 0x19, 0x7d, 0x43, 0x52, 0xbe, 0x71, 0xb4, 0x5a, 0x27,
		0xef, 0x78, 0xba, 0x89, 0x46, 0xfe, 0x71, 0xb4, 0x09, 0x29, 0x0f, 0x59, 0x9d, 0x88, 0x14, 0x8e,
		0x37, 0xdf, 0xec, 0xf5, 0xad, 0xbe, 0x6f, 0x3f, 0x8b, 0xb1, 0x4b, 0x80, 0x2e, 0x1e, 0x17, 0x76,
		0x82, 0xa8, 0x84, 0xa8, 0xdc, 0x3a, 0x51, 0x19, 0x38, 0x1d, 0x11, 0x38, 0xcd, 0xbf, 0x7c, 0x52,
		0x0b, 0x24, 0x8d, 0xd6, 0x47, 0x9a, 0xb5, 0x7c, 0x1a, 0x05, 0x8d, 0x1c, 0xb5, 0x7b, 0x4c, 0x05,
		0x63, 0x5c, 0x8d, 0x05, 0x38, 0x0b, 0xc4, 0x34, 0x6a, 0xf3, 0x58, 0x6a, 0xf2, 0xb8, 0x8f, 0x96,
		0xbf, 0x55, 0x11, 0xeb, 0x69, 0xc7, 0x54, 0x0e, 0xd7, 0x48, 0x95, 0x6e, 0xee, 0xfb, 0x84, 0x6e,
		0xf1, 0x4b, 0x34, 0x73, 0xb8, 0x0f, 0xf4, 0x32, 0xf4, 0x32, 0xf4, 0x32, 0xf4, 0x32, 0xf4, 0x32,
		0xf4, 0x32, 0xf4, 0x32, 0x55, 0x2f, 0x07, 0x4e, 0xdb, 0xf9, 0x87, 0x56, 0xd1, 0x3e, 0xaf, 0x98,
		0x67, 0x36, 0x82, 0x66, 0x86, 0x66, 0xde, 0x3a, 0xcd, 0xdc, 0x13, 0x5e, 0x53, 0xb8, 0x81, 0xfd,
		0x2c, 0x34, 0x14, 0x73, 0x05, 0x8a, 0x19, 0x8a, 0x39, 0xad, 0x8a, 0xb9, 0x50, 0x80, 0x1e, 0x4e,
		0x42, 0x0f, 0x77, 0x44, 0xa7, 0xeb, 0xbd, 0x8c, 0x4c, 0x5b, 0xba, 0x12, 0x9e, 0xdb, 0x05, 0x1a,
		0x18, 0x1a, 0x78, 0xeb, 0x34, 0x30, 0xb9, 0x63, 0x3f, 0xcc, 0x62, 0x68, 0x5f, 0x98, 0xc5, 0x50,
		0xc7, 0x6a, 0xea, 0x98, 0xc3, 0x32, 0x5e, 0xb2, 0x17, 0x54, 0x33, 0x54, 0x33, 0x8c, 0x63, 0x18,
		0xc7, 0x50, 0xcf, 0x30, 0x8e, 0xa1, 0x8d, 0x37, 0x1e, 0xdb, 0xb8, 0x5c, 0x8b, 0xa8, 0x7f, 0xc3,
		0xd5, 0xd0, 0xb8, 0xd0, 0xb8, 0xc8, 0x75, 0x7d, 0x4d, 0xdf, 0xaa, 0xb9, 0xae, 0x46, 0xb8, 0x5b,
		0xa5, 0x0e, 0x6a, 0x11, 0x74, 0x48, 0xd7, 0x43, 0x81, 0xb7, 0xc1, 0xdb, 0x70, 0x74, 0x01, 0x49,
		0x03, 0x49, 0xc3, 0xd1, 0x05, 0x68, 0x3d, 0x39, 0x36, 0x3f, 0xb0, 0xbd, 0xc0, 0x0a, 0x1c, 0x1d,
		0x80, 0x3d, 0xb3, 0x07, 0x54, 0x31, 0x54, 0x31, 0x54, 0x31, 0x54, 0x31, 0x54, 0x31, 0x54, 0x31,
		0x54, 0xb1, 0x9a, 0x2a, 0xee, 0xf7, 0xf4, 0xd4, 0xf0, 0x78, 0x3d, 0x54, 0x30, 0x54, 0x30, 0x4a,
		0x22, 0xa0, 0x87, 0xa1, 0x87, 0xa1, 0x87, 0xa1, 0x87, 0x95, 0x3e, 0x99, 0x96, 0x31, 0x69, 0x51,
		0x53, 0xc0, 0xc9, 0x4f, 0xca, 0x83, 0xff, 0x24, 0xfb, 0x1c, 0xde, 0x4c, 0x1e, 0x34, 0xf9, 0x49,
		0x65, 0xde, 0x9f, 0xe9, 0x9e, 0x99, 0xe3, 0x79, 0x7e, 0x9b, 0x3d, 0xfc, 0x6a, 0x3d, 0x35, 0x48,
		0x3d, 0x34, 0x48, 0x3d, 0x33, 0xd4, 0x7a, 0x64, 0x24, 0xd5, 0x42, 0x74, 0x81, 0xd8, 0xf8, 0x5a,
		0x89, 0x2e, 0x90, 0x57, 0x36, 0x5b, 0x8a, 0x6e, 0xea, 0xd1, 0x49, 0x39, 0x11, 0x9d, 0xf6, 0xa2,
		0xbe, 0xff, 0xc5, 0x1a, 0x4f, 0x4f, 0xdc, 0xd8, 0x5f, 0x74, 0xe6, 0xb3, 0xe9, 0x68, 0x30, 0xea,
		0xbf, 0xf8, 0x56, 0x20, 0xbc, 0x4e, 0x26, 0x9b, 0x8c, 0x46, 0x5f, 0x3e, 0xae, 0x46, 0xa3, 0xcd,
		0xc9, 0xe9, 0x4b, 0xf6, 0x19, 0x1d, 0x7f, 0x9e, 0xb9, 0xcd, 0x68, 0xc1, 0xd8, 0xa8, 0xc4, 0x4d,
		0xa4, 0x40, 0xb5, 0xdb, 0x52, 0x31, 0x2f, 0x71, 0x03, 0xa9, 0xf0, 0x68, 0x49, 0xe9, 0x76, 0xa3,
		0xa3, 0xf1, 0x35, 0xd4, 0xb1, 0x37, 0x84, 0xa9, 0x37, 0xc3, 0xb3, 0xdb, 0x9e, 0x19, 0x1c, 0xb2,
		0x94, 0xaa, 0xeb, 0x69, 0x48, 0xe5, 0x20, 0x0e, 0x49, 0x4a, 0x36, 0x83, 0xb6, 0xb7, 0x7e, 0xfc,
		0x4d, 0xcf, 0xeb, 0x06, 0xdd, 0x66, 0xb7, 0x6d, 0x7d, 0x15, 0x9e, 0xaf, 0x62, 0x54, 0xcc, 0xb6,
		0x97, 0x9e, 0xdf, 0x41, 0x9d, 0x5b, 0x7f, 0x2f, 0x81, 0x57, 0xc1, 0xab, 0xc9, 0xf1, 0xaa, 0x70,
		0xfb, 0x1d, 0xe1, 0xa9, 0x96, 0x47, 0x44, 0xfc, 0x5a, 0x56, 0x58, 0x53, 0x77, 0xfb, 0x61, 0x6f,
		0xc0, 0x41, 0x8c, 0x3c, 0xee, 0xd9, 0x81, 0xb0, 0xda, 0x4e, 0xc7, 0x09, 0xd4, 0xb9, 0x7b, 0x66,
		0x2d, 0x58, 0x14, 0x2c, 0x9a, 0x18, 0x8b, 0xf6, 0x1d, 0x37, 0x28, 0x56, 0x09, 0xdc, 0x59, 0xc5,
		0xcc, 0x62, 0x56, 0x7f, 0xfa, 0x2e, 0xcf, 0x2c, 0xae, 0x56, 0x2a, 0xc7, 0x18, 0x52, 0xac, 0xa5,
		0x8b, 0x7c, 0xe1, 0x0f, 0x41, 0x22, 0x55, 0x1d, 0xcd, 0x2f, 0x87, 0x46, 0x82, 0x46, 0x82, 0x46,
		0x82, 0x46, 0x82, 0x46, 0x82, 0x46, 0x22, 0x6b, 0xa4, 0xc0, 0xe9, 0x88, 0x6e, 0x9f, 0xa0, 0x8b,
		0x26, 0x0b, 0xa1, 0x85, 0xa0, 0x85, 0xa0, 0x85, 0xa0, 0x85, 0xa0, 0x85, 0xa0, 0x85, 0x08, 0x9f,
		0x48, 0x2a, 0xf7, 0x62, 0x1a, 0x9d, 0x3f, 0x92, 0x8a, 0xdc, 0xe6, 0xe4, 0x33, 0x0d, 0xee, 0xfc,
		0x2f, 0x77, 0xe1, 0xce, 0x8f, 0x63, 0x2d, 0x46, 0x4d, 0xbd, 0x58, 0x9b, 0xf3, 0x20, 0x33, 0x2c,
		0x4d, 0x69, 0x48, 0x5a, 0x5a, 0x46, 0x60, 0x22, 0x36, 0xcd, 0xc0, 0x36, 0x88, 0x4d, 0x03, 0x34,
		0x02, 0x34, 0x2e, 0xbf, 0x39, 0xc4, 0xa6, 0xe5, 0xb9, 0x15, 0xb1, 0x69, 0xf0, 0x6a, 0x92, 0xbc,
		0x8a, 0xd8, 0xf4, 0xca, 0xa3, 0x41, 0x6c, 0x1a, 0x2c, 0x0a, 0x1f, 0x0c, 0x7c, 0x30, 0xf0, 0xc1,
		0xc0, 0x07, 0xc3, 0xa1, 0x8b, 0x10, 0x9b, 0x86, 0x46, 0x82, 0x46, 0x82, 0x46, 0x82, 0x46, 0x82,
		0x46, 0x4a, 0x87, 0x46, 0x42, 0x6c, 0x1a, 0x5a, 0x08, 0x5a, 0x08, 0x5a, 0x08, 0x5a, 0x08, 0x5a,
		0xc8, 0x90, 0x16, 0x4a, 0x7b, 0x6c, 0x5a, 0xb6, 0xfb, 0x84, 0x72, 0x68, 0x5a, 0xa2, 0xdb, 0x44,
		0x5a, 0x9b, 0x02, 0x6c, 0x2c, 0xac, 0xa7, 0x1c, 0x88, 0x56, 0x57, 0x80, 0xb5, 0xc1, 0x78, 0xa9,
		0x20, 0xbc, 0x74, 0x2f, 0x80, 0x12, 0x5b, 0x2f, 0x80, 0xac, 0xb6, 0x01, 0x88, 0xad, 0x03, 0xc0,
		0xe7, 0x6e, 0x57, 0xb2, 0x3f, 0xeb, 0x6c, 0x68, 0x51, 0xaa, 0x1d, 0xab, 0xa4, 0x78, 0x8f, 0xa3,
		0x0f, 0xc0, 0xb6, 0xa6, 0x59, 0x98, 0xce, 0xb0, 0x90, 0x06, 0x86, 0xc4, 0x4e, 0x6a, 0x0a, 0x9d,
		0xd3, 0x14, 0x51, 0xa0, 0x02, 0x96, 0xa5, 0xa0, 0x3e, 0x6a, 0x5f, 0x43, 0x22, 0xca, 0xd3, 0x81,
		0x29, 0x2a, 0x3d, 0x22, 0x29, 0x68, 0x4e, 0xf7, 0x28, 0xf4, 0x3b, 0x93, 0x69, 0x9d, 0x0e, 0x13,
		0xc8, 0x6a, 0x18, 0xc8, 0x7f, 0x6b, 0xf6, 0x3d, 0x4f, 0xb8, 0x81, 0xd5, 0xb2, 0x03, 0xa1, 0x26,
		0xa2, 0x17, 0x56, 0x42, 0x52, 0x43, 0x52, 0xbf, 0x3a, 0xef, 0x21, 0x6d, 0x58, 0xb6, 0xdb, 0x92,
		0xed, 0xac, 0x3e, 0x1d, 0xea, 0x22, 0xf1, 0xd9, 0x1b, 0x3b, 0x08, 0x84, 0xe7, 0x4a, 0x8b, 0xeb,
		0xfc, 0x7f, 0x3f, 0x15, 0xac, 0xd3, 0xc6, 0xf7, 0xf2, 0xe0, 0xe1, 0xc1, 0x1a, 0xfd, 0x58, 0x9a,
		0xfd, 0xf1, 0x7e, 0xf2, 0xc3, 0xbb, 0x85, 0x1f, 0xf6, 0x1f, 0x1e, 0xde, 0x84, 0x3f, 0xff, 0xcf,
		0xc1, 0x4f, 0x7f, 0x7e, 0xfa, 0x1f, 0xab, 0xb1, 0xf0, 0x89, 0x7f, 0xe5, 0x13, 0x61, 0xdf, 0x56,
		0xb7, 0x63, 0x3b, 0xae, 0x25, 0x35, 0x5d, 0x6a, 0x7a, 0x2b, 0x33, 0x8b, 0xc0, 0xb4, 0x60, 0x5a,
		0x32, 0x79, 0x28, 0xb3, 0xec, 0x85, 0x70, 0x9f, 0x43, 0xab, 0x74, 0x2b, 0x00, 0x56, 0x11, 0x00,
		0x6b, 0x72, 0x14, 0xa5, 0xca, 0x71, 0x06, 0xf1, 0x94, 0x09, 0x25, 0xb3, 0xbf, 0xbf, 0xff, 0xc9,
		0xb6, 0xfe, 0xa9, 0x59, 0x7f, 0x16, 0xac, 0xd3, 0xc7, 0xc6, 0xcc, 0x3f, 0x1e, 0x1e, 0xac, 0xc7,
		0xc6, 0xc1, 0xf7, 0xc2, 0x61, 0xb5, 0x38, 0x38, 0xf8, 0x69, 0xfa, 0xfb, 0xc6, 0xc3, 0xc3, 0x9b,
		0x83, 0x7f, 0x53, 0x56, 0xfd, 0x74, 0xf0, 0xe3, 0xe1, 0xe1, 0x4d, 0x32, 0x9a, 0xe7, 0x4b, 0xd7,
		0x0f, 0xd4, 0xd4, 0x4e, 0xb4, 0x02, 0x3a, 0x07, 0x3a, 0x07, 0x3a, 0x07, 0x3a, 0x07, 0x3a, 0x07,
		0x3a, 0x47, 0x49, 0xe7, 0xb4, 0xbb, 0xcf, 0x8e, 0x6b, 0x7d, 0xb6, 0x5d, 0x57, 0x78, 0xf2, 0x7a,
		0x67, 0x6e, 0x15, 0x74, 0x0f, 0x74, 0xcf, 0xab, 0xf3, 0x96, 0x1e, 0x41, 0x2b, 0x39, 0x72, 0x96,
		0x46, 0xdb, 0x9d, 0x6e, 0xd0, 0x52, 0x26, 0xed, 0xd9, 0x45, 0xa0, 0x6c, 0x50, 0x76, 0x72, 0x94,
		0x9d, 0x6c, 0x20, 0x7b, 0x43, 0x70, 0x5f, 0x36, 0x86, 0xbd, 0x3a, 0x94, 0x2f, 0x17, 0xbf, 0x0e,
		0x44, 0xdb, 0x15, 0x81, 0x74, 0x63, 0xfb, 0xf9, 0x8f, 0xa3, 0xb7, 0x3d, 0x7a, 0xdb, 0xcb, 0x5c,
		0x79, 0x9c, 0xa2, 0x1a, 0xfd, 0x03, 0xb6, 0xb7, 0x7f, 0xc0, 0x93, 0xdd, 0xf6, 0xd1, 0x40, 0x00,
		0x99, 0xbd, 0xba, 0xf6, 0xff, 0xf6, 0x37, 0x10, 0x40, 0x71, 0x31, 0x58, 0x0d, 0x49, 0xf4, 0x12,
		0x4b, 0x90, 0x44, 0x6f, 0xd6, 0x09, 0x49, 0xf0, 0xcc, 0x6a, 0x79, 0x68, 0xb9, 0x8f, 0x0c, 0x49,
		0xf4, 0xda, 0xba, 0x08, 0xc5, 0xc5, 0xd0, 0x48, 0xd0, 0x48, 0xd0, 0x48, 0xd0, 0x48, 0xd0, 0x48,
		0xe9, 0xd0, 0x48, 0x28, 0x2e, 0x86, 0x16, 0x82, 0x16, 0x82, 0x16, 0x82, 0x16, 0x82, 0x16, 0x32,
		0xa4, 0x85, 0x52, 0x59, 0x5c, 0x3c, 0x17, 0xbd, 0x63, 0xef, 0x7d, 0x7d, 0x1f, 0xee, 0x8e, 0xf6,
		0xd7, 0x08, 0x5f, 0x69, 0x2a, 0x5c, 0x84, 0xaf, 0x80, 0x1d, 0x81, 0x1d, 0x8d, 0x60, 0x47, 0x84,
		0xaf, 0xc0, 0x6a, 0x60, 0x35, 0x98, 0x69, 0x30, 0xd3, 0x60, 0xa6, 0xc1, 0x4c, 0x43, 0xf8, 0x0a,
		0x1a, 0x09, 0x1a, 0x09, 0x1a, 0x09, 0x1a, 0x09, 0x1a, 0x29, 0x43, 0x1a, 0x09, 0xe1, 0x2b, 0x68,
		0x21, 0x68, 0x21, 0x68, 0x21, 0x68, 0x21, 0x68, 0x21, 0x43, 0x5a, 0x28, 0x03, 0xe1, 0x2b, 0xe6,
		0xf6, 0xb8, 0x73, 0xd1, 0xab, 0x0c, 0x77, 0xc8, 0x95, 0xa9, 0xd0, 0x23, 0x1e, 0x8b, 0x74, 0x9d,
		0xe1, 0xde, 0x9a, 0x17, 0xdf, 0xf4, 0xc2, 0xb2, 0x2f, 0x9a, 0x5f, 0xda, 0x8c, 0x57, 0xe2, 0x95,
		0xe6, 0xdf, 0x62, 0xfa, 0x5d, 0x47, 0x3f, 0x8d, 0xbf, 0xed, 0xaa, 0x6f, 0x99, 0x77, 0xfc, 0x0f,
		0xf6, 0x5f, 0xe2, 0xb6, 0xdb, 0x5d, 0x54, 0xe3, 0xaf, 0xbf, 0x79, 0x7e, 0xf6, 0x3f, 0xcd, 0x7d,
		0xb3, 0xf7, 0xe2, 0xab, 0xd3, 0x1c, 0xd3, 0xd7, 0x60, 0x6f, 0xf0, 0xff, 0x00, 0x00, 0x00, 0xff,
		0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x02, 0x91, 0x97, 0x47, 0xa9, 0x0b, 0x00,
	}
)

// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/components/component/state/oper-status": {
		reflect.TypeOf((E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS)(0)),
	},
	"/components/component/state/temperature/alarm-severity": {
		reflect.TypeOf((E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY)(0)),
	},
	"/components/component/state/type": {
		reflect.TypeOf((E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT)(0)),
		reflect.TypeOf((E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT)(0)),
	},
	"/system/aaa/accounting/config/accounting-method": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/system/aaa/accounting/events/event/config/event-type": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE)(0)),
	},
	"/system/aaa/accounting/events/event/config/record": {
		reflect.TypeOf((E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record)(0)),
	},
	"/system/aaa/accounting/events/event/event-type": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE)(0)),
	},
	"/system/aaa/accounting/events/event/state/event-type": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE)(0)),
	},
	"/system/aaa/accounting/events/event/state/record": {
		reflect.TypeOf((E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record)(0)),
	},
	"/system/aaa/accounting/state/accounting-method": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/system/aaa/authentication/config/authentication-method": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/system/aaa/authentication/state/authentication-method": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/system/aaa/authentication/users/user/config/role": {
		reflect.TypeOf((E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES)(0)),
	},
	"/system/aaa/authentication/users/user/state/role": {
		reflect.TypeOf((E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES)(0)),
	},
	"/system/aaa/authorization/config/authorization-method": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/system/aaa/authorization/events/event/config/event-type": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE)(0)),
	},
	"/system/aaa/authorization/events/event/event-type": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE)(0)),
	},
	"/system/aaa/authorization/events/event/state/event-type": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE)(0)),
	},
	"/system/aaa/authorization/state/authorization-method": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/system/aaa/server-groups/server-group/config/type": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_SERVER_TYPE)(0)),
	},
	"/system/aaa/server-groups/server-group/state/type": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_SERVER_TYPE)(0)),
	},
	"/system/alarms/alarm/state/severity": {
		reflect.TypeOf((E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY)(0)),
	},
	"/system/alarms/alarm/state/type-id": {
		reflect.TypeOf((E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID)(0)),
	},
	"/system/cpus/cpu/index": {
		reflect.TypeOf((E_OpenconfigSystem_System_Cpus_Cpu_State_Index)(0)),
	},
	"/system/cpus/cpu/state/index": {
		reflect.TypeOf((E_OpenconfigSystem_System_Cpus_Cpu_State_Index)(0)),
	},
	"/system/grpc-server/config/listen-addresses": {
		reflect.TypeOf((E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses)(0)),
	},
	"/system/grpc-server/state/listen-addresses": {
		reflect.TypeOf((E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses)(0)),
	},
	"/system/logging/console/selectors/selector/config/facility": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/system/logging/console/selectors/selector/config/severity": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/system/logging/console/selectors/selector/facility": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/system/logging/console/selectors/selector/severity": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/system/logging/console/selectors/selector/state/facility": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/system/logging/console/selectors/selector/state/severity": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/system/logging/remote-servers/remote-server/selectors/selector/config/facility": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/system/logging/remote-servers/remote-server/selectors/selector/config/severity": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/system/logging/remote-servers/remote-server/selectors/selector/facility": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/system/logging/remote-servers/remote-server/selectors/selector/severity": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/system/logging/remote-servers/remote-server/selectors/selector/state/facility": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/system/logging/remote-servers/remote-server/selectors/selector/state/severity": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/system/ntp/ntp-keys/ntp-key/config/key-type": {
		reflect.TypeOf((E_OpenconfigSystem_NTP_AUTH_TYPE)(0)),
	},
	"/system/ntp/ntp-keys/ntp-key/state/key-type": {
		reflect.TypeOf((E_OpenconfigSystem_NTP_AUTH_TYPE)(0)),
	},
	"/system/ntp/servers/server/config/association-type": {
		reflect.TypeOf((E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType)(0)),
	},
	"/system/ntp/servers/server/state/association-type": {
		reflect.TypeOf((E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType)(0)),
	},
	"/system/ssh-server/config/protocol-version": {
		reflect.TypeOf((E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion)(0)),
	},
	"/system/ssh-server/state/protocol-version": {
		reflect.TypeOf((E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion)(0)),
	},
}
