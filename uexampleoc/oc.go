/*
Package uexampleoc is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

NOTE WELL: This is an example code file that is distributed with ygot.
It should not be used within your application, as it WILL change,
without warning. Rather, you should generate structs directly from
OpenConfig models using the ygot package.

This package was generated by github.com/openconfig/ygot
using the following YANG input files:
	- public/release/models/system/openconfig-system.yang
	- public/release/models/platform/openconfig-platform.yang
	- public/release/models/optical-transport/openconfig-terminal-device.yang
Imported modules were sourced from:
	- public/...
	- deps/...
*/
package uexampleoc

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &Device{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	ΛMetadata       []ygot.Annotation                        `path:"@" ygotAnnotation:"true"`
	Components      *OpenconfigPlatform_Components           `path:"components" module:"openconfig-platform"`
	ΛComponents     []ygot.Annotation                        `path:"@components" ygotAnnotation:"true"`
	Interfaces      *OpenconfigInterfaces_Interfaces         `path:"interfaces" module:"openconfig-interfaces"`
	ΛInterfaces     []ygot.Annotation                        `path:"@interfaces" ygotAnnotation:"true"`
	Lldp            *OpenconfigLldp_Lldp                     `path:"lldp" module:"openconfig-lldp"`
	ΛLldp           []ygot.Annotation                        `path:"@lldp" ygotAnnotation:"true"`
	System          *OpenconfigSystem_System                 `path:"system" module:"openconfig-system"`
	ΛSystem         []ygot.Annotation                        `path:"@system" ygotAnnotation:"true"`
	TerminalDevice  *OpenconfigTerminalDevice_TerminalDevice `path:"terminal-device" module:"openconfig-terminal-device"`
	ΛTerminalDevice []ygot.Annotation                        `path:"@terminal-device" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// GetOrCreateComponents retrieves the value of the Components field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateComponents() *OpenconfigPlatform_Components {
	if t.Components != nil {
		return t.Components
	}
	t.Components = &OpenconfigPlatform_Components{}
	return t.Components
}

// GetOrCreateInterfaces retrieves the value of the Interfaces field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateInterfaces() *OpenconfigInterfaces_Interfaces {
	if t.Interfaces != nil {
		return t.Interfaces
	}
	t.Interfaces = &OpenconfigInterfaces_Interfaces{}
	return t.Interfaces
}

// GetOrCreateLldp retrieves the value of the Lldp field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateLldp() *OpenconfigLldp_Lldp {
	if t.Lldp != nil {
		return t.Lldp
	}
	t.Lldp = &OpenconfigLldp_Lldp{}
	return t.Lldp
}

// GetOrCreateSystem retrieves the value of the System field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateSystem() *OpenconfigSystem_System {
	if t.System != nil {
		return t.System
	}
	t.System = &OpenconfigSystem_System{}
	return t.System
}

// GetOrCreateTerminalDevice retrieves the value of the TerminalDevice field
// or returns the existing field if it already exists.
func (t *Device) GetOrCreateTerminalDevice() *OpenconfigTerminalDevice_TerminalDevice {
	if t.TerminalDevice != nil {
		return t.TerminalDevice
	}
	t.TerminalDevice = &OpenconfigTerminalDevice_TerminalDevice{}
	return t.TerminalDevice
}

// GetComponents returns the value of the Components struct pointer
// from Device. If the receiver or the field Components is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetComponents() *OpenconfigPlatform_Components {
	if t != nil && t.Components != nil {
		return t.Components
	}
	return nil
}

// GetInterfaces returns the value of the Interfaces struct pointer
// from Device. If the receiver or the field Interfaces is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetInterfaces() *OpenconfigInterfaces_Interfaces {
	if t != nil && t.Interfaces != nil {
		return t.Interfaces
	}
	return nil
}

// GetLldp returns the value of the Lldp struct pointer
// from Device. If the receiver or the field Lldp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetLldp() *OpenconfigLldp_Lldp {
	if t != nil && t.Lldp != nil {
		return t.Lldp
	}
	return nil
}

// GetSystem returns the value of the System struct pointer
// from Device. If the receiver or the field System is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetSystem() *OpenconfigSystem_System {
	if t != nil && t.System != nil {
		return t.System
	}
	return nil
}

// GetTerminalDevice returns the value of the TerminalDevice struct pointer
// from Device. If the receiver or the field TerminalDevice is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Device) GetTerminalDevice() *OpenconfigTerminalDevice_TerminalDevice {
	if t != nil && t.TerminalDevice != nil {
		return t.TerminalDevice
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigInterfaces_Interfaces represents the /openconfig-interfaces/interfaces YANG schema element.
type OpenconfigInterfaces_Interfaces struct {
	ΛMetadata  []ygot.Annotation                                     `path:"@" ygotAnnotation:"true"`
	Interface  map[string]*OpenconfigInterfaces_Interfaces_Interface `path:"interface" module:"openconfig-interfaces"`
	ΛInterface []ygot.Annotation                                     `path:"@interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// OpenconfigInterfaces_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigInterfaces_Interfaces) NewInterface(Name string) (*OpenconfigInterfaces_Interfaces_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigInterfaces_Interfaces_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &OpenconfigInterfaces_Interfaces_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the OpenconfigInterfaces_Interfaces struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigInterfaces_Interfaces) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver OpenconfigInterfaces_Interfaces. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigInterfaces_Interfaces) GetOrCreateInterface(Name string) *OpenconfigInterfaces_Interfaces_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of OpenconfigInterfaces_Interfaces. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigInterfaces_Interfaces) GetInterface(Name string) *OpenconfigInterfaces_Interfaces_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// AppendInterface appends the supplied OpenconfigInterfaces_Interfaces_Interface struct to the
// list Interface of OpenconfigInterfaces_Interfaces. If the key value(s) specified in
// the supplied OpenconfigInterfaces_Interfaces_Interface already exist in the list, an error is
// returned.
func (t *OpenconfigInterfaces_Interfaces) AppendInterface(v *OpenconfigInterfaces_Interfaces_Interface) error {
	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigInterfaces_Interfaces_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigInterfaces_Interfaces_Interface represents the /openconfig-interfaces/interfaces/interface YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface struct {
	ΛMetadata      []ygot.Annotation                                        `path:"@" ygotAnnotation:"true"`
	Config         *OpenconfigInterfaces_Interfaces_Interface_Config        `path:"config" module:"openconfig-interfaces"`
	ΛConfig        []ygot.Annotation                                        `path:"@config" ygotAnnotation:"true"`
	Ethernet       *OpenconfigInterfaces_Interfaces_Interface_Ethernet      `path:"ethernet" module:"openconfig-if-ethernet"`
	ΛEthernet      []ygot.Annotation                                        `path:"@ethernet" ygotAnnotation:"true"`
	HoldTime       *OpenconfigInterfaces_Interfaces_Interface_HoldTime      `path:"hold-time" module:"openconfig-interfaces"`
	ΛHoldTime      []ygot.Annotation                                        `path:"@hold-time" ygotAnnotation:"true"`
	Name           *string                                                  `path:"name" module:"openconfig-interfaces"`
	ΛName          []ygot.Annotation                                        `path:"@name" ygotAnnotation:"true"`
	State          *OpenconfigInterfaces_Interfaces_Interface_State         `path:"state" module:"openconfig-interfaces"`
	ΛState         []ygot.Annotation                                        `path:"@state" ygotAnnotation:"true"`
	Subinterfaces  *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces `path:"subinterfaces" module:"openconfig-interfaces"`
	ΛSubinterfaces []ygot.Annotation                                        `path:"@subinterfaces" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_Config{}
	return t.Config
}

// GetOrCreateEthernet retrieves the value of the Ethernet field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetOrCreateEthernet() *OpenconfigInterfaces_Interfaces_Interface_Ethernet {
	if t.Ethernet != nil {
		return t.Ethernet
	}
	t.Ethernet = &OpenconfigInterfaces_Interfaces_Interface_Ethernet{}
	return t.Ethernet
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetOrCreateHoldTime() *OpenconfigInterfaces_Interfaces_Interface_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &OpenconfigInterfaces_Interfaces_Interface_HoldTime{}
	return t.HoldTime
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_State{}
	return t.State
}

// GetOrCreateSubinterfaces retrieves the value of the Subinterfaces field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetOrCreateSubinterfaces() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces {
	if t.Subinterfaces != nil {
		return t.Subinterfaces
	}
	t.Subinterfaces = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces{}
	return t.Subinterfaces
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetEthernet returns the value of the Ethernet struct pointer
// from OpenconfigInterfaces_Interfaces_Interface. If the receiver or the field Ethernet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetEthernet() *OpenconfigInterfaces_Interfaces_Interface_Ethernet {
	if t != nil && t.Ethernet != nil {
		return t.Ethernet
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from OpenconfigInterfaces_Interfaces_Interface. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetHoldTime() *OpenconfigInterfaces_Interfaces_Interface_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetState() *OpenconfigInterfaces_Interfaces_Interface_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetSubinterfaces returns the value of the Subinterfaces struct pointer
// from OpenconfigInterfaces_Interfaces_Interface. If the receiver or the field Subinterfaces is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetSubinterfaces() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces {
	if t != nil && t.Subinterfaces != nil {
		return t.Subinterfaces
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the OpenconfigInterfaces_Interfaces_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// ΛListKeyMap returns the keys of the OpenconfigInterfaces_Interfaces_Interface struct, which is a YANG list entry.
func (t *OpenconfigInterfaces_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigInterfaces_Interfaces_Interface_Config represents the /openconfig-interfaces/interfaces/interface/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Config struct {
	ΛMetadata     []ygot.Annotation              `path:"@" ygotAnnotation:"true"`
	Description   *string                        `path:"description" module:"openconfig-interfaces"`
	ΛDescription  []ygot.Annotation              `path:"@description" ygotAnnotation:"true"`
	Enabled       *bool                          `path:"enabled" module:"openconfig-interfaces"`
	ΛEnabled      []ygot.Annotation              `path:"@enabled" ygotAnnotation:"true"`
	LoopbackMode  *bool                          `path:"loopback-mode" module:"openconfig-interfaces"`
	ΛLoopbackMode []ygot.Annotation              `path:"@loopback-mode" ygotAnnotation:"true"`
	Mtu           *uint16                        `path:"mtu" module:"openconfig-interfaces"`
	ΛMtu          []ygot.Annotation              `path:"@mtu" ygotAnnotation:"true"`
	Name          *string                        `path:"name" module:"openconfig-interfaces"`
	ΛName         []ygot.Annotation              `path:"@name" ygotAnnotation:"true"`
	Type          E_IETFInterfaces_InterfaceType `path:"type" module:"openconfig-interfaces"`
	ΛType         []ygot.Annotation              `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Config) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the OpenconfigInterfaces_Interfaces_Interface_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Description is set, it can safely use t.GetDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Description == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Config) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEnabled retrieves the value of the leaf Enabled from the OpenconfigInterfaces_Interfaces_Interface_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Config) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetLoopbackMode retrieves the value of the leaf LoopbackMode from the OpenconfigInterfaces_Interfaces_Interface_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LoopbackMode is set, it can safely use t.GetLoopbackMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LoopbackMode == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Config) GetLoopbackMode() bool {
	if t == nil || t.LoopbackMode == nil {
		return false
	}
	return *t.LoopbackMode
}

// GetMtu retrieves the value of the leaf Mtu from the OpenconfigInterfaces_Interfaces_Interface_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Mtu is set, it can safely use t.GetMtu()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Mtu == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Config) GetMtu() uint16 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetName retrieves the value of the leaf Name from the OpenconfigInterfaces_Interfaces_Interface_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Config) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the OpenconfigInterfaces_Interfaces_Interface_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Type is set, it can safely use t.GetType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Type == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Config) GetType() E_IETFInterfaces_InterfaceType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigInterfaces_Interfaces_Interface_Ethernet represents the /openconfig-interfaces/interfaces/interface/ethernet YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Ethernet struct {
	ΛMetadata []ygot.Annotation                                          `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config `path:"config" module:"openconfig-if-ethernet"`
	ΛConfig   []ygot.Annotation                                          `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State  `path:"state" module:"openconfig-if-ethernet"`
	ΛState    []ygot.Annotation                                          `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Ethernet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Ethernet) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_Ethernet_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Ethernet. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Ethernet. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet) GetState() *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Ethernet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config represents the /openconfig-interfaces/interfaces/interface/ethernet/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config struct {
	ΛMetadata          []ygot.Annotation                                                      `path:"@" ygotAnnotation:"true"`
	AlsDelay           *uint32                                                                `path:"als-delay" module:"openconfig-terminal-device"`
	ΛAlsDelay          []ygot.Annotation                                                      `path:"@als-delay" ygotAnnotation:"true"`
	AutoNegotiate      *bool                                                                  `path:"auto-negotiate" module:"openconfig-if-ethernet"`
	ΛAutoNegotiate     []ygot.Annotation                                                      `path:"@auto-negotiate" ygotAnnotation:"true"`
	ClientAls          E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls  `path:"client-als" module:"openconfig-terminal-device"`
	ΛClientAls         []ygot.Annotation                                                      `path:"@client-als" ygotAnnotation:"true"`
	ClientFec          E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec  `path:"client-fec" module:"openconfig-terminal-device"`
	ΛClientFec         []ygot.Annotation                                                      `path:"@client-fec" ygotAnnotation:"true"`
	DuplexMode         E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode `path:"duplex-mode" module:"openconfig-if-ethernet"`
	ΛDuplexMode        []ygot.Annotation                                                      `path:"@duplex-mode" ygotAnnotation:"true"`
	EnableFlowControl  *bool                                                                  `path:"enable-flow-control" module:"openconfig-if-ethernet"`
	ΛEnableFlowControl []ygot.Annotation                                                      `path:"@enable-flow-control" ygotAnnotation:"true"`
	MacAddress         *string                                                                `path:"mac-address" module:"openconfig-if-ethernet"`
	ΛMacAddress        []ygot.Annotation                                                      `path:"@mac-address" ygotAnnotation:"true"`
	PortSpeed          E_OpenconfigIfEthernet_ETHERNET_SPEED                                  `path:"port-speed" module:"openconfig-if-ethernet"`
	ΛPortSpeed         []ygot.Annotation                                                      `path:"@port-speed" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config) IsYANGGoStruct() {}

// GetAlsDelay retrieves the value of the leaf AlsDelay from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AlsDelay is set, it can safely use t.GetAlsDelay()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AlsDelay == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config) GetAlsDelay() uint32 {
	if t == nil || t.AlsDelay == nil {
		return 0
	}
	return *t.AlsDelay
}

// GetAutoNegotiate retrieves the value of the leaf AutoNegotiate from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AutoNegotiate is set, it can safely use t.GetAutoNegotiate()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AutoNegotiate == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config) GetAutoNegotiate() bool {
	if t == nil || t.AutoNegotiate == nil {
		return true
	}
	return *t.AutoNegotiate
}

// GetClientAls retrieves the value of the leaf ClientAls from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ClientAls is set, it can safely use t.GetClientAls()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ClientAls == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config) GetClientAls() E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls {
	if t == nil || t.ClientAls == 0 {
		return OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls_ETHERNET
	}
	return t.ClientAls
}

// GetClientFec retrieves the value of the leaf ClientFec from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ClientFec is set, it can safely use t.GetClientFec()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ClientFec == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config) GetClientFec() E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec {
	if t == nil || t.ClientFec == 0 {
		return OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec_AUTO
	}
	return t.ClientFec
}

// GetDuplexMode retrieves the value of the leaf DuplexMode from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DuplexMode is set, it can safely use t.GetDuplexMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DuplexMode == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config) GetDuplexMode() E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode {
	if t == nil || t.DuplexMode == 0 {
		return 0
	}
	return t.DuplexMode
}

// GetEnableFlowControl retrieves the value of the leaf EnableFlowControl from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EnableFlowControl is set, it can safely use t.GetEnableFlowControl()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EnableFlowControl == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config) GetEnableFlowControl() bool {
	if t == nil || t.EnableFlowControl == nil {
		return false
	}
	return *t.EnableFlowControl
}

// GetMacAddress retrieves the value of the leaf MacAddress from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MacAddress is set, it can safely use t.GetMacAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MacAddress == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetPortSpeed retrieves the value of the leaf PortSpeed from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PortSpeed is set, it can safely use t.GetPortSpeed()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PortSpeed == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config) GetPortSpeed() E_OpenconfigIfEthernet_ETHERNET_SPEED {
	if t == nil || t.PortSpeed == 0 {
		return 0
	}
	return t.PortSpeed
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigInterfaces_Interfaces_Interface_Ethernet_State represents the /openconfig-interfaces/interfaces/interface/ethernet/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Ethernet_State struct {
	ΛMetadata             []ygot.Annotation                                                               `path:"@" ygotAnnotation:"true"`
	AutoNegotiate         *bool                                                                           `path:"auto-negotiate" module:"openconfig-if-ethernet"`
	ΛAutoNegotiate        []ygot.Annotation                                                               `path:"@auto-negotiate" ygotAnnotation:"true"`
	Counters              *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters              `path:"counters" module:"openconfig-if-ethernet"`
	ΛCounters             []ygot.Annotation                                                               `path:"@counters" ygotAnnotation:"true"`
	DuplexMode            E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode          `path:"duplex-mode" module:"openconfig-if-ethernet"`
	ΛDuplexMode           []ygot.Annotation                                                               `path:"@duplex-mode" ygotAnnotation:"true"`
	EnableFlowControl     *bool                                                                           `path:"enable-flow-control" module:"openconfig-if-ethernet"`
	ΛEnableFlowControl    []ygot.Annotation                                                               `path:"@enable-flow-control" ygotAnnotation:"true"`
	HwMacAddress          *string                                                                         `path:"hw-mac-address" module:"openconfig-if-ethernet"`
	ΛHwMacAddress         []ygot.Annotation                                                               `path:"@hw-mac-address" ygotAnnotation:"true"`
	MacAddress            *string                                                                         `path:"mac-address" module:"openconfig-if-ethernet"`
	ΛMacAddress           []ygot.Annotation                                                               `path:"@mac-address" ygotAnnotation:"true"`
	NegotiatedDuplexMode  E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode `path:"negotiated-duplex-mode" module:"openconfig-if-ethernet"`
	ΛNegotiatedDuplexMode []ygot.Annotation                                                               `path:"@negotiated-duplex-mode" ygotAnnotation:"true"`
	NegotiatedPortSpeed   E_OpenconfigIfEthernet_ETHERNET_SPEED                                           `path:"negotiated-port-speed" module:"openconfig-if-ethernet"`
	ΛNegotiatedPortSpeed  []ygot.Annotation                                                               `path:"@negotiated-port-speed" ygotAnnotation:"true"`
	PortSpeed             E_OpenconfigIfEthernet_ETHERNET_SPEED                                           `path:"port-speed" module:"openconfig-if-ethernet"`
	ΛPortSpeed            []ygot.Annotation                                                               `path:"@port-speed" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Ethernet_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) GetOrCreateCounters() *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Ethernet_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) GetCounters() *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetAutoNegotiate retrieves the value of the leaf AutoNegotiate from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AutoNegotiate is set, it can safely use t.GetAutoNegotiate()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AutoNegotiate == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) GetAutoNegotiate() bool {
	if t == nil || t.AutoNegotiate == nil {
		return true
	}
	return *t.AutoNegotiate
}

// GetDuplexMode retrieves the value of the leaf DuplexMode from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DuplexMode is set, it can safely use t.GetDuplexMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DuplexMode == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) GetDuplexMode() E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode {
	if t == nil || t.DuplexMode == 0 {
		return 0
	}
	return t.DuplexMode
}

// GetEnableFlowControl retrieves the value of the leaf EnableFlowControl from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EnableFlowControl is set, it can safely use t.GetEnableFlowControl()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EnableFlowControl == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) GetEnableFlowControl() bool {
	if t == nil || t.EnableFlowControl == nil {
		return false
	}
	return *t.EnableFlowControl
}

// GetHwMacAddress retrieves the value of the leaf HwMacAddress from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HwMacAddress is set, it can safely use t.GetHwMacAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HwMacAddress == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) GetHwMacAddress() string {
	if t == nil || t.HwMacAddress == nil {
		return ""
	}
	return *t.HwMacAddress
}

// GetMacAddress retrieves the value of the leaf MacAddress from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MacAddress is set, it can safely use t.GetMacAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MacAddress == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetNegotiatedDuplexMode retrieves the value of the leaf NegotiatedDuplexMode from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NegotiatedDuplexMode is set, it can safely use t.GetNegotiatedDuplexMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NegotiatedDuplexMode == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) GetNegotiatedDuplexMode() E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode {
	if t == nil || t.NegotiatedDuplexMode == 0 {
		return 0
	}
	return t.NegotiatedDuplexMode
}

// GetNegotiatedPortSpeed retrieves the value of the leaf NegotiatedPortSpeed from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NegotiatedPortSpeed is set, it can safely use t.GetNegotiatedPortSpeed()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NegotiatedPortSpeed == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) GetNegotiatedPortSpeed() E_OpenconfigIfEthernet_ETHERNET_SPEED {
	if t == nil || t.NegotiatedPortSpeed == 0 {
		return 0
	}
	return t.NegotiatedPortSpeed
}

// GetPortSpeed retrieves the value of the leaf PortSpeed from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PortSpeed is set, it can safely use t.GetPortSpeed()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PortSpeed == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) GetPortSpeed() E_OpenconfigIfEthernet_ETHERNET_SPEED {
	if t == nil || t.PortSpeed == 0 {
		return 0
	}
	return t.PortSpeed
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Ethernet_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters struct {
	ΛMetadata            []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	In_8021QFrames       *uint64           `path:"in-8021q-frames" module:"openconfig-if-ethernet"`
	ΛIn_8021QFrames      []ygot.Annotation `path:"@in-8021q-frames" ygotAnnotation:"true"`
	InBlockErrors        *uint64           `path:"in-block-errors" module:"openconfig-if-ethernet"`
	ΛInBlockErrors       []ygot.Annotation `path:"@in-block-errors" ygotAnnotation:"true"`
	InCrcErrors          *uint64           `path:"in-crc-errors" module:"openconfig-if-ethernet"`
	ΛInCrcErrors         []ygot.Annotation `path:"@in-crc-errors" ygotAnnotation:"true"`
	InFragmentFrames     *uint64           `path:"in-fragment-frames" module:"openconfig-if-ethernet"`
	ΛInFragmentFrames    []ygot.Annotation `path:"@in-fragment-frames" ygotAnnotation:"true"`
	InJabberFrames       *uint64           `path:"in-jabber-frames" module:"openconfig-if-ethernet"`
	ΛInJabberFrames      []ygot.Annotation `path:"@in-jabber-frames" ygotAnnotation:"true"`
	InMacControlFrames   *uint64           `path:"in-mac-control-frames" module:"openconfig-if-ethernet"`
	ΛInMacControlFrames  []ygot.Annotation `path:"@in-mac-control-frames" ygotAnnotation:"true"`
	InMacPauseFrames     *uint64           `path:"in-mac-pause-frames" module:"openconfig-if-ethernet"`
	ΛInMacPauseFrames    []ygot.Annotation `path:"@in-mac-pause-frames" ygotAnnotation:"true"`
	InOversizeFrames     *uint64           `path:"in-oversize-frames" module:"openconfig-if-ethernet"`
	ΛInOversizeFrames    []ygot.Annotation `path:"@in-oversize-frames" ygotAnnotation:"true"`
	InUndersizeFrames    *uint64           `path:"in-undersize-frames" module:"openconfig-if-ethernet"`
	ΛInUndersizeFrames   []ygot.Annotation `path:"@in-undersize-frames" ygotAnnotation:"true"`
	Out_8021QFrames      *uint64           `path:"out-8021q-frames" module:"openconfig-if-ethernet"`
	ΛOut_8021QFrames     []ygot.Annotation `path:"@out-8021q-frames" ygotAnnotation:"true"`
	OutMacControlFrames  *uint64           `path:"out-mac-control-frames" module:"openconfig-if-ethernet"`
	ΛOutMacControlFrames []ygot.Annotation `path:"@out-mac-control-frames" ygotAnnotation:"true"`
	OutMacPauseFrames    *uint64           `path:"out-mac-pause-frames" module:"openconfig-if-ethernet"`
	ΛOutMacPauseFrames   []ygot.Annotation `path:"@out-mac-pause-frames" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters) IsYANGGoStruct() {}

// GetIn_8021QFrames retrieves the value of the leaf In_8021QFrames from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if In_8021QFrames is set, it can safely use t.GetIn_8021QFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.In_8021QFrames == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters) GetIn_8021QFrames() uint64 {
	if t == nil || t.In_8021QFrames == nil {
		return 0
	}
	return *t.In_8021QFrames
}

// GetInBlockErrors retrieves the value of the leaf InBlockErrors from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InBlockErrors is set, it can safely use t.GetInBlockErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InBlockErrors == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters) GetInBlockErrors() uint64 {
	if t == nil || t.InBlockErrors == nil {
		return 0
	}
	return *t.InBlockErrors
}

// GetInCrcErrors retrieves the value of the leaf InCrcErrors from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InCrcErrors is set, it can safely use t.GetInCrcErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InCrcErrors == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters) GetInCrcErrors() uint64 {
	if t == nil || t.InCrcErrors == nil {
		return 0
	}
	return *t.InCrcErrors
}

// GetInFragmentFrames retrieves the value of the leaf InFragmentFrames from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InFragmentFrames is set, it can safely use t.GetInFragmentFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InFragmentFrames == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters) GetInFragmentFrames() uint64 {
	if t == nil || t.InFragmentFrames == nil {
		return 0
	}
	return *t.InFragmentFrames
}

// GetInJabberFrames retrieves the value of the leaf InJabberFrames from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InJabberFrames is set, it can safely use t.GetInJabberFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InJabberFrames == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters) GetInJabberFrames() uint64 {
	if t == nil || t.InJabberFrames == nil {
		return 0
	}
	return *t.InJabberFrames
}

// GetInMacControlFrames retrieves the value of the leaf InMacControlFrames from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InMacControlFrames is set, it can safely use t.GetInMacControlFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InMacControlFrames == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters) GetInMacControlFrames() uint64 {
	if t == nil || t.InMacControlFrames == nil {
		return 0
	}
	return *t.InMacControlFrames
}

// GetInMacPauseFrames retrieves the value of the leaf InMacPauseFrames from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InMacPauseFrames is set, it can safely use t.GetInMacPauseFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InMacPauseFrames == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters) GetInMacPauseFrames() uint64 {
	if t == nil || t.InMacPauseFrames == nil {
		return 0
	}
	return *t.InMacPauseFrames
}

// GetInOversizeFrames retrieves the value of the leaf InOversizeFrames from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InOversizeFrames is set, it can safely use t.GetInOversizeFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InOversizeFrames == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters) GetInOversizeFrames() uint64 {
	if t == nil || t.InOversizeFrames == nil {
		return 0
	}
	return *t.InOversizeFrames
}

// GetInUndersizeFrames retrieves the value of the leaf InUndersizeFrames from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InUndersizeFrames is set, it can safely use t.GetInUndersizeFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InUndersizeFrames == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters) GetInUndersizeFrames() uint64 {
	if t == nil || t.InUndersizeFrames == nil {
		return 0
	}
	return *t.InUndersizeFrames
}

// GetOut_8021QFrames retrieves the value of the leaf Out_8021QFrames from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Out_8021QFrames is set, it can safely use t.GetOut_8021QFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Out_8021QFrames == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters) GetOut_8021QFrames() uint64 {
	if t == nil || t.Out_8021QFrames == nil {
		return 0
	}
	return *t.Out_8021QFrames
}

// GetOutMacControlFrames retrieves the value of the leaf OutMacControlFrames from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutMacControlFrames is set, it can safely use t.GetOutMacControlFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutMacControlFrames == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters) GetOutMacControlFrames() uint64 {
	if t == nil || t.OutMacControlFrames == nil {
		return 0
	}
	return *t.OutMacControlFrames
}

// GetOutMacPauseFrames retrieves the value of the leaf OutMacPauseFrames from the OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutMacPauseFrames is set, it can safely use t.GetOutMacPauseFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutMacPauseFrames == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters) GetOutMacPauseFrames() uint64 {
	if t == nil || t.OutMacPauseFrames == nil {
		return 0
	}
	return *t.OutMacPauseFrames
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigInterfaces_Interfaces_Interface_HoldTime represents the /openconfig-interfaces/interfaces/interface/hold-time YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_HoldTime struct {
	ΛMetadata []ygot.Annotation                                          `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config `path:"config" module:"openconfig-interfaces"`
	ΛConfig   []ygot.Annotation                                          `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigInterfaces_Interfaces_Interface_HoldTime_State  `path:"state" module:"openconfig-interfaces"`
	ΛState    []ygot.Annotation                                          `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_HoldTime) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_HoldTime_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_HoldTime_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_HoldTime. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_HoldTime. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime) GetState() *OpenconfigInterfaces_Interfaces_Interface_HoldTime_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config represents the /openconfig-interfaces/interfaces/interface/hold-time/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Down      *uint32           `path:"down" module:"openconfig-interfaces"`
	ΛDown     []ygot.Annotation `path:"@down" ygotAnnotation:"true"`
	Up        *uint32           `path:"up" module:"openconfig-interfaces"`
	ΛUp       []ygot.Annotation `path:"@up" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config) IsYANGGoStruct() {}

// GetDown retrieves the value of the leaf Down from the OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Down is set, it can safely use t.GetDown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Down == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config) GetDown() uint32 {
	if t == nil || t.Down == nil {
		return 0
	}
	return *t.Down
}

// GetUp retrieves the value of the leaf Up from the OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Up is set, it can safely use t.GetUp()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Up == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config) GetUp() uint32 {
	if t == nil || t.Up == nil {
		return 0
	}
	return *t.Up
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigInterfaces_Interfaces_Interface_HoldTime_State represents the /openconfig-interfaces/interfaces/interface/hold-time/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_HoldTime_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Down      *uint32           `path:"down" module:"openconfig-interfaces"`
	ΛDown     []ygot.Annotation `path:"@down" ygotAnnotation:"true"`
	Up        *uint32           `path:"up" module:"openconfig-interfaces"`
	ΛUp       []ygot.Annotation `path:"@up" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_HoldTime_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_HoldTime_State) IsYANGGoStruct() {}

// GetDown retrieves the value of the leaf Down from the OpenconfigInterfaces_Interfaces_Interface_HoldTime_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Down is set, it can safely use t.GetDown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Down == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_State) GetDown() uint32 {
	if t == nil || t.Down == nil {
		return 0
	}
	return *t.Down
}

// GetUp retrieves the value of the leaf Up from the OpenconfigInterfaces_Interfaces_Interface_HoldTime_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Up is set, it can safely use t.GetUp()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Up == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_State) GetUp() uint32 {
	if t == nil || t.Up == nil {
		return 0
	}
	return *t.Up
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_HoldTime_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_HoldTime_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigInterfaces_Interfaces_Interface_State represents the /openconfig-interfaces/interfaces/interface/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_State struct {
	ΛMetadata        []ygot.Annotation                                             `path:"@" ygotAnnotation:"true"`
	AdminStatus      E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus `path:"admin-status" module:"openconfig-interfaces"`
	ΛAdminStatus     []ygot.Annotation                                             `path:"@admin-status" ygotAnnotation:"true"`
	Counters         *OpenconfigInterfaces_Interfaces_Interface_State_Counters     `path:"counters" module:"openconfig-interfaces"`
	ΛCounters        []ygot.Annotation                                             `path:"@counters" ygotAnnotation:"true"`
	Description      *string                                                       `path:"description" module:"openconfig-interfaces"`
	ΛDescription     []ygot.Annotation                                             `path:"@description" ygotAnnotation:"true"`
	Enabled          *bool                                                         `path:"enabled" module:"openconfig-interfaces"`
	ΛEnabled         []ygot.Annotation                                             `path:"@enabled" ygotAnnotation:"true"`
	HardwarePort     *string                                                       `path:"hardware-port" module:"openconfig-platform-port"`
	ΛHardwarePort    []ygot.Annotation                                             `path:"@hardware-port" ygotAnnotation:"true"`
	Ifindex          *uint32                                                       `path:"ifindex" module:"openconfig-interfaces"`
	ΛIfindex         []ygot.Annotation                                             `path:"@ifindex" ygotAnnotation:"true"`
	LastChange       *uint64                                                       `path:"last-change" module:"openconfig-interfaces"`
	ΛLastChange      []ygot.Annotation                                             `path:"@last-change" ygotAnnotation:"true"`
	Logical          *bool                                                         `path:"logical" module:"openconfig-interfaces"`
	ΛLogical         []ygot.Annotation                                             `path:"@logical" ygotAnnotation:"true"`
	LoopbackMode     *bool                                                         `path:"loopback-mode" module:"openconfig-interfaces"`
	ΛLoopbackMode    []ygot.Annotation                                             `path:"@loopback-mode" ygotAnnotation:"true"`
	Mtu              *uint16                                                       `path:"mtu" module:"openconfig-interfaces"`
	ΛMtu             []ygot.Annotation                                             `path:"@mtu" ygotAnnotation:"true"`
	Name             *string                                                       `path:"name" module:"openconfig-interfaces"`
	ΛName            []ygot.Annotation                                             `path:"@name" ygotAnnotation:"true"`
	OperStatus       E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus  `path:"oper-status" module:"openconfig-interfaces"`
	ΛOperStatus      []ygot.Annotation                                             `path:"@oper-status" ygotAnnotation:"true"`
	PhysicalChannel  []uint16                                                      `path:"physical-channel" module:"openconfig-platform-transceiver"`
	ΛPhysicalChannel []ygot.Annotation                                             `path:"@physical-channel" ygotAnnotation:"true"`
	Transceiver      *string                                                       `path:"transceiver" module:"openconfig-platform-transceiver"`
	ΛTransceiver     []ygot.Annotation                                             `path:"@transceiver" ygotAnnotation:"true"`
	Type             E_IETFInterfaces_InterfaceType                                `path:"type" module:"openconfig-interfaces"`
	ΛType            []ygot.Annotation                                             `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_State) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) GetOrCreateCounters() *OpenconfigInterfaces_Interfaces_Interface_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigInterfaces_Interfaces_Interface_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) GetCounters() *OpenconfigInterfaces_Interfaces_Interface_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetAdminStatus retrieves the value of the leaf AdminStatus from the OpenconfigInterfaces_Interfaces_Interface_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdminStatus is set, it can safely use t.GetAdminStatus()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdminStatus == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) GetAdminStatus() E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus {
	if t == nil || t.AdminStatus == 0 {
		return 0
	}
	return t.AdminStatus
}

// GetDescription retrieves the value of the leaf Description from the OpenconfigInterfaces_Interfaces_Interface_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Description is set, it can safely use t.GetDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Description == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEnabled retrieves the value of the leaf Enabled from the OpenconfigInterfaces_Interfaces_Interface_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetHardwarePort retrieves the value of the leaf HardwarePort from the OpenconfigInterfaces_Interfaces_Interface_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HardwarePort is set, it can safely use t.GetHardwarePort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HardwarePort == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) GetHardwarePort() string {
	if t == nil || t.HardwarePort == nil {
		return ""
	}
	return *t.HardwarePort
}

// GetIfindex retrieves the value of the leaf Ifindex from the OpenconfigInterfaces_Interfaces_Interface_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ifindex is set, it can safely use t.GetIfindex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ifindex == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) GetIfindex() uint32 {
	if t == nil || t.Ifindex == nil {
		return 0
	}
	return *t.Ifindex
}

// GetLastChange retrieves the value of the leaf LastChange from the OpenconfigInterfaces_Interfaces_Interface_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastChange is set, it can safely use t.GetLastChange()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastChange == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) GetLastChange() uint64 {
	if t == nil || t.LastChange == nil {
		return 0
	}
	return *t.LastChange
}

// GetLogical retrieves the value of the leaf Logical from the OpenconfigInterfaces_Interfaces_Interface_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Logical is set, it can safely use t.GetLogical()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Logical == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) GetLogical() bool {
	if t == nil || t.Logical == nil {
		return false
	}
	return *t.Logical
}

// GetLoopbackMode retrieves the value of the leaf LoopbackMode from the OpenconfigInterfaces_Interfaces_Interface_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LoopbackMode is set, it can safely use t.GetLoopbackMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LoopbackMode == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) GetLoopbackMode() bool {
	if t == nil || t.LoopbackMode == nil {
		return false
	}
	return *t.LoopbackMode
}

// GetMtu retrieves the value of the leaf Mtu from the OpenconfigInterfaces_Interfaces_Interface_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Mtu is set, it can safely use t.GetMtu()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Mtu == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) GetMtu() uint16 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetName retrieves the value of the leaf Name from the OpenconfigInterfaces_Interfaces_Interface_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOperStatus retrieves the value of the leaf OperStatus from the OpenconfigInterfaces_Interfaces_Interface_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OperStatus is set, it can safely use t.GetOperStatus()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OperStatus == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) GetOperStatus() E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus {
	if t == nil || t.OperStatus == 0 {
		return 0
	}
	return t.OperStatus
}

// GetPhysicalChannel retrieves the value of the leaf PhysicalChannel from the OpenconfigInterfaces_Interfaces_Interface_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PhysicalChannel is set, it can safely use t.GetPhysicalChannel()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PhysicalChannel == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) GetPhysicalChannel() []uint16 {
	if t == nil || t.PhysicalChannel == nil {
		return nil
	}
	return t.PhysicalChannel
}

// GetTransceiver retrieves the value of the leaf Transceiver from the OpenconfigInterfaces_Interfaces_Interface_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Transceiver is set, it can safely use t.GetTransceiver()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Transceiver == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) GetTransceiver() string {
	if t == nil || t.Transceiver == nil {
		return ""
	}
	return *t.Transceiver
}

// GetType retrieves the value of the leaf Type from the OpenconfigInterfaces_Interfaces_Interface_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Type is set, it can safely use t.GetType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Type == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) GetType() E_IETFInterfaces_InterfaceType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigInterfaces_Interfaces_Interface_State_Counters represents the /openconfig-interfaces/interfaces/interface/state/counters YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_State_Counters struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	CarrierTransitions  *uint64           `path:"carrier-transitions" module:"openconfig-interfaces"`
	ΛCarrierTransitions []ygot.Annotation `path:"@carrier-transitions" ygotAnnotation:"true"`
	InBroadcastPkts     *uint64           `path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	ΛInBroadcastPkts    []ygot.Annotation `path:"@in-broadcast-pkts" ygotAnnotation:"true"`
	InDiscards          *uint64           `path:"in-discards" module:"openconfig-interfaces"`
	ΛInDiscards         []ygot.Annotation `path:"@in-discards" ygotAnnotation:"true"`
	InErrors            *uint64           `path:"in-errors" module:"openconfig-interfaces"`
	ΛInErrors           []ygot.Annotation `path:"@in-errors" ygotAnnotation:"true"`
	InFcsErrors         *uint64           `path:"in-fcs-errors" module:"openconfig-interfaces"`
	ΛInFcsErrors        []ygot.Annotation `path:"@in-fcs-errors" ygotAnnotation:"true"`
	InMulticastPkts     *uint64           `path:"in-multicast-pkts" module:"openconfig-interfaces"`
	ΛInMulticastPkts    []ygot.Annotation `path:"@in-multicast-pkts" ygotAnnotation:"true"`
	InOctets            *uint64           `path:"in-octets" module:"openconfig-interfaces"`
	ΛInOctets           []ygot.Annotation `path:"@in-octets" ygotAnnotation:"true"`
	InPkts              *uint64           `path:"in-pkts" module:"openconfig-interfaces"`
	ΛInPkts             []ygot.Annotation `path:"@in-pkts" ygotAnnotation:"true"`
	InUnicastPkts       *uint64           `path:"in-unicast-pkts" module:"openconfig-interfaces"`
	ΛInUnicastPkts      []ygot.Annotation `path:"@in-unicast-pkts" ygotAnnotation:"true"`
	InUnknownProtos     *uint64           `path:"in-unknown-protos" module:"openconfig-interfaces"`
	ΛInUnknownProtos    []ygot.Annotation `path:"@in-unknown-protos" ygotAnnotation:"true"`
	LastClear           *uint64           `path:"last-clear" module:"openconfig-interfaces"`
	ΛLastClear          []ygot.Annotation `path:"@last-clear" ygotAnnotation:"true"`
	OutBroadcastPkts    *uint64           `path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	ΛOutBroadcastPkts   []ygot.Annotation `path:"@out-broadcast-pkts" ygotAnnotation:"true"`
	OutDiscards         *uint64           `path:"out-discards" module:"openconfig-interfaces"`
	ΛOutDiscards        []ygot.Annotation `path:"@out-discards" ygotAnnotation:"true"`
	OutErrors           *uint64           `path:"out-errors" module:"openconfig-interfaces"`
	ΛOutErrors          []ygot.Annotation `path:"@out-errors" ygotAnnotation:"true"`
	OutMulticastPkts    *uint64           `path:"out-multicast-pkts" module:"openconfig-interfaces"`
	ΛOutMulticastPkts   []ygot.Annotation `path:"@out-multicast-pkts" ygotAnnotation:"true"`
	OutOctets           *uint64           `path:"out-octets" module:"openconfig-interfaces"`
	ΛOutOctets          []ygot.Annotation `path:"@out-octets" ygotAnnotation:"true"`
	OutPkts             *uint64           `path:"out-pkts" module:"openconfig-interfaces"`
	ΛOutPkts            []ygot.Annotation `path:"@out-pkts" ygotAnnotation:"true"`
	OutUnicastPkts      *uint64           `path:"out-unicast-pkts" module:"openconfig-interfaces"`
	ΛOutUnicastPkts     []ygot.Annotation `path:"@out-unicast-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_State_Counters) IsYANGGoStruct() {}

// GetCarrierTransitions retrieves the value of the leaf CarrierTransitions from the OpenconfigInterfaces_Interfaces_Interface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CarrierTransitions is set, it can safely use t.GetCarrierTransitions()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CarrierTransitions == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) GetCarrierTransitions() uint64 {
	if t == nil || t.CarrierTransitions == nil {
		return 0
	}
	return *t.CarrierTransitions
}

// GetInBroadcastPkts retrieves the value of the leaf InBroadcastPkts from the OpenconfigInterfaces_Interfaces_Interface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InBroadcastPkts is set, it can safely use t.GetInBroadcastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InBroadcastPkts == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) GetInBroadcastPkts() uint64 {
	if t == nil || t.InBroadcastPkts == nil {
		return 0
	}
	return *t.InBroadcastPkts
}

// GetInDiscards retrieves the value of the leaf InDiscards from the OpenconfigInterfaces_Interfaces_Interface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InDiscards is set, it can safely use t.GetInDiscards()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InDiscards == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) GetInDiscards() uint64 {
	if t == nil || t.InDiscards == nil {
		return 0
	}
	return *t.InDiscards
}

// GetInErrors retrieves the value of the leaf InErrors from the OpenconfigInterfaces_Interfaces_Interface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InErrors is set, it can safely use t.GetInErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InErrors == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) GetInErrors() uint64 {
	if t == nil || t.InErrors == nil {
		return 0
	}
	return *t.InErrors
}

// GetInFcsErrors retrieves the value of the leaf InFcsErrors from the OpenconfigInterfaces_Interfaces_Interface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InFcsErrors is set, it can safely use t.GetInFcsErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InFcsErrors == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) GetInFcsErrors() uint64 {
	if t == nil || t.InFcsErrors == nil {
		return 0
	}
	return *t.InFcsErrors
}

// GetInMulticastPkts retrieves the value of the leaf InMulticastPkts from the OpenconfigInterfaces_Interfaces_Interface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InMulticastPkts is set, it can safely use t.GetInMulticastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InMulticastPkts == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) GetInMulticastPkts() uint64 {
	if t == nil || t.InMulticastPkts == nil {
		return 0
	}
	return *t.InMulticastPkts
}

// GetInOctets retrieves the value of the leaf InOctets from the OpenconfigInterfaces_Interfaces_Interface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InOctets is set, it can safely use t.GetInOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InOctets == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the OpenconfigInterfaces_Interfaces_Interface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InPkts is set, it can safely use t.GetInPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InPkts == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetInUnicastPkts retrieves the value of the leaf InUnicastPkts from the OpenconfigInterfaces_Interfaces_Interface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InUnicastPkts is set, it can safely use t.GetInUnicastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InUnicastPkts == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) GetInUnicastPkts() uint64 {
	if t == nil || t.InUnicastPkts == nil {
		return 0
	}
	return *t.InUnicastPkts
}

// GetInUnknownProtos retrieves the value of the leaf InUnknownProtos from the OpenconfigInterfaces_Interfaces_Interface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InUnknownProtos is set, it can safely use t.GetInUnknownProtos()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InUnknownProtos == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) GetInUnknownProtos() uint64 {
	if t == nil || t.InUnknownProtos == nil {
		return 0
	}
	return *t.InUnknownProtos
}

// GetLastClear retrieves the value of the leaf LastClear from the OpenconfigInterfaces_Interfaces_Interface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastClear is set, it can safely use t.GetLastClear()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastClear == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) GetLastClear() uint64 {
	if t == nil || t.LastClear == nil {
		return 0
	}
	return *t.LastClear
}

// GetOutBroadcastPkts retrieves the value of the leaf OutBroadcastPkts from the OpenconfigInterfaces_Interfaces_Interface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutBroadcastPkts is set, it can safely use t.GetOutBroadcastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutBroadcastPkts == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) GetOutBroadcastPkts() uint64 {
	if t == nil || t.OutBroadcastPkts == nil {
		return 0
	}
	return *t.OutBroadcastPkts
}

// GetOutDiscards retrieves the value of the leaf OutDiscards from the OpenconfigInterfaces_Interfaces_Interface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutDiscards is set, it can safely use t.GetOutDiscards()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutDiscards == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) GetOutDiscards() uint64 {
	if t == nil || t.OutDiscards == nil {
		return 0
	}
	return *t.OutDiscards
}

// GetOutErrors retrieves the value of the leaf OutErrors from the OpenconfigInterfaces_Interfaces_Interface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutErrors is set, it can safely use t.GetOutErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutErrors == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) GetOutErrors() uint64 {
	if t == nil || t.OutErrors == nil {
		return 0
	}
	return *t.OutErrors
}

// GetOutMulticastPkts retrieves the value of the leaf OutMulticastPkts from the OpenconfigInterfaces_Interfaces_Interface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutMulticastPkts is set, it can safely use t.GetOutMulticastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutMulticastPkts == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) GetOutMulticastPkts() uint64 {
	if t == nil || t.OutMulticastPkts == nil {
		return 0
	}
	return *t.OutMulticastPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the OpenconfigInterfaces_Interfaces_Interface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutOctets is set, it can safely use t.GetOutOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutOctets == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the OpenconfigInterfaces_Interfaces_Interface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutPkts is set, it can safely use t.GetOutPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutPkts == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// GetOutUnicastPkts retrieves the value of the leaf OutUnicastPkts from the OpenconfigInterfaces_Interfaces_Interface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutUnicastPkts is set, it can safely use t.GetOutUnicastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutUnicastPkts == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) GetOutUnicastPkts() uint64 {
	if t == nil || t.OutUnicastPkts == nil {
		return 0
	}
	return *t.OutUnicastPkts
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces represents the /openconfig-interfaces/interfaces/interface/subinterfaces YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces struct {
	ΛMetadata     []ygot.Annotation                                                                `path:"@" ygotAnnotation:"true"`
	Subinterface  map[uint32]*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface `path:"subinterface" module:"openconfig-interfaces"`
	ΛSubinterface []ygot.Annotation                                                                `path:"@subinterface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) IsYANGGoStruct() {}

// NewSubinterface creates a new entry in the Subinterface list of the
// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) NewSubinterface(Index uint32) (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subinterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subinterface", key)
	}

	t.Subinterface[key] = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface{
		Index: &Index,
	}

	return t.Subinterface[key], nil
}

// RenameSubinterface renames an entry in the list Subinterface within
// the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) RenameSubinterface(oldK, newK uint32) error {
	if _, ok := t.Subinterface[newK]; ok {
		return fmt.Errorf("key %v already exists in Subinterface", newK)
	}

	e, ok := t.Subinterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Subinterface", oldK)
	}
	e.Index = &newK

	t.Subinterface[newK] = e
	delete(t.Subinterface, oldK)
	return nil
}

// GetOrCreateSubinterface retrieves the value with the specified keys from
// the receiver OpenconfigInterfaces_Interfaces_Interface_Subinterfaces. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) GetOrCreateSubinterface(Index uint32) *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface {

	key := Index

	if v, ok := t.Subinterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubinterface(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubinterface got unexpected error: %v", err))
	}
	return v
}

// GetSubinterface retrieves the value with the specified key from
// the Subinterface map field of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) GetSubinterface(Index uint32) *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Subinterface[key]; ok {
		return lm
	}
	return nil
}

// AppendSubinterface appends the supplied OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface struct to the
// list Subinterface of OpenconfigInterfaces_Interfaces_Interface_Subinterfaces. If the key value(s) specified in
// the supplied OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface already exist in the list, an error is
// returned.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) AppendSubinterface(v *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) error {
	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subinterface == nil {
		t.Subinterface = make(map[uint32]*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface)
	}

	if _, ok := t.Subinterface[key]; ok {
		return fmt.Errorf("duplicate key for list Subinterface %v", key)
	}

	t.Subinterface[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface struct {
	ΛMetadata []ygot.Annotation                                                            `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config `path:"config" module:"openconfig-interfaces"`
	ΛConfig   []ygot.Annotation                                                            `path:"@config" ygotAnnotation:"true"`
	Index     *uint32                                                                      `path:"index" module:"openconfig-interfaces"`
	ΛIndex    []ygot.Annotation                                                            `path:"@index" ygotAnnotation:"true"`
	State     *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State  `path:"state" module:"openconfig-interfaces"`
	ΛState    []ygot.Annotation                                                            `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) GetOrCreateConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) GetOrCreateState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) GetConfig() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) GetState() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetIndex retrieves the value of the leaf Index from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Index is set, it can safely use t.GetIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Index == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// ΛListKeyMap returns the keys of the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface struct, which is a YANG list entry.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/config YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Description  *string           `path:"description" module:"openconfig-interfaces"`
	ΛDescription []ygot.Annotation `path:"@description" ygotAnnotation:"true"`
	Enabled      *bool             `path:"enabled" module:"openconfig-interfaces"`
	ΛEnabled     []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	Index        *uint32           `path:"index" module:"openconfig-interfaces"`
	ΛIndex       []ygot.Annotation `path:"@index" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Description is set, it can safely use t.GetDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Description == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEnabled retrieves the value of the leaf Enabled from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetIndex retrieves the value of the leaf Index from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Index is set, it can safely use t.GetIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Index == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State struct {
	ΛMetadata    []ygot.Annotation                                                                    `path:"@" ygotAnnotation:"true"`
	AdminStatus  E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus                        `path:"admin-status" module:"openconfig-interfaces"`
	ΛAdminStatus []ygot.Annotation                                                                    `path:"@admin-status" ygotAnnotation:"true"`
	Counters     *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters `path:"counters" module:"openconfig-interfaces"`
	ΛCounters    []ygot.Annotation                                                                    `path:"@counters" ygotAnnotation:"true"`
	Description  *string                                                                              `path:"description" module:"openconfig-interfaces"`
	ΛDescription []ygot.Annotation                                                                    `path:"@description" ygotAnnotation:"true"`
	Enabled      *bool                                                                                `path:"enabled" module:"openconfig-interfaces"`
	ΛEnabled     []ygot.Annotation                                                                    `path:"@enabled" ygotAnnotation:"true"`
	Ifindex      *uint32                                                                              `path:"ifindex" module:"openconfig-interfaces"`
	ΛIfindex     []ygot.Annotation                                                                    `path:"@ifindex" ygotAnnotation:"true"`
	Index        *uint32                                                                              `path:"index" module:"openconfig-interfaces"`
	ΛIndex       []ygot.Annotation                                                                    `path:"@index" ygotAnnotation:"true"`
	LastChange   *uint64                                                                              `path:"last-change" module:"openconfig-interfaces"`
	ΛLastChange  []ygot.Annotation                                                                    `path:"@last-change" ygotAnnotation:"true"`
	Logical      *bool                                                                                `path:"logical" module:"openconfig-interfaces"`
	ΛLogical     []ygot.Annotation                                                                    `path:"@logical" ygotAnnotation:"true"`
	Name         *string                                                                              `path:"name" module:"openconfig-interfaces"`
	ΛName        []ygot.Annotation                                                                    `path:"@name" ygotAnnotation:"true"`
	OperStatus   E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus                         `path:"oper-status" module:"openconfig-interfaces"`
	ΛOperStatus  []ygot.Annotation                                                                    `path:"@oper-status" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) GetOrCreateCounters() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) GetCounters() *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetAdminStatus retrieves the value of the leaf AdminStatus from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdminStatus is set, it can safely use t.GetAdminStatus()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdminStatus == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) GetAdminStatus() E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus {
	if t == nil || t.AdminStatus == 0 {
		return 0
	}
	return t.AdminStatus
}

// GetDescription retrieves the value of the leaf Description from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Description is set, it can safely use t.GetDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Description == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEnabled retrieves the value of the leaf Enabled from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetIfindex retrieves the value of the leaf Ifindex from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ifindex is set, it can safely use t.GetIfindex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ifindex == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) GetIfindex() uint32 {
	if t == nil || t.Ifindex == nil {
		return 0
	}
	return *t.Ifindex
}

// GetIndex retrieves the value of the leaf Index from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Index is set, it can safely use t.GetIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Index == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLastChange retrieves the value of the leaf LastChange from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastChange is set, it can safely use t.GetLastChange()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastChange == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) GetLastChange() uint64 {
	if t == nil || t.LastChange == nil {
		return 0
	}
	return *t.LastChange
}

// GetLogical retrieves the value of the leaf Logical from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Logical is set, it can safely use t.GetLogical()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Logical == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) GetLogical() bool {
	if t == nil || t.Logical == nil {
		return false
	}
	return *t.Logical
}

// GetName retrieves the value of the leaf Name from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOperStatus retrieves the value of the leaf OperStatus from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OperStatus is set, it can safely use t.GetOperStatus()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OperStatus == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) GetOperStatus() E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus {
	if t == nil || t.OperStatus == 0 {
		return 0
	}
	return t.OperStatus
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters YANG schema element.
type OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	CarrierTransitions  *uint64           `path:"carrier-transitions" module:"openconfig-interfaces"`
	ΛCarrierTransitions []ygot.Annotation `path:"@carrier-transitions" ygotAnnotation:"true"`
	InBroadcastPkts     *uint64           `path:"in-broadcast-pkts" module:"openconfig-interfaces"`
	ΛInBroadcastPkts    []ygot.Annotation `path:"@in-broadcast-pkts" ygotAnnotation:"true"`
	InDiscards          *uint64           `path:"in-discards" module:"openconfig-interfaces"`
	ΛInDiscards         []ygot.Annotation `path:"@in-discards" ygotAnnotation:"true"`
	InErrors            *uint64           `path:"in-errors" module:"openconfig-interfaces"`
	ΛInErrors           []ygot.Annotation `path:"@in-errors" ygotAnnotation:"true"`
	InFcsErrors         *uint64           `path:"in-fcs-errors" module:"openconfig-interfaces"`
	ΛInFcsErrors        []ygot.Annotation `path:"@in-fcs-errors" ygotAnnotation:"true"`
	InMulticastPkts     *uint64           `path:"in-multicast-pkts" module:"openconfig-interfaces"`
	ΛInMulticastPkts    []ygot.Annotation `path:"@in-multicast-pkts" ygotAnnotation:"true"`
	InOctets            *uint64           `path:"in-octets" module:"openconfig-interfaces"`
	ΛInOctets           []ygot.Annotation `path:"@in-octets" ygotAnnotation:"true"`
	InPkts              *uint64           `path:"in-pkts" module:"openconfig-interfaces"`
	ΛInPkts             []ygot.Annotation `path:"@in-pkts" ygotAnnotation:"true"`
	InUnicastPkts       *uint64           `path:"in-unicast-pkts" module:"openconfig-interfaces"`
	ΛInUnicastPkts      []ygot.Annotation `path:"@in-unicast-pkts" ygotAnnotation:"true"`
	InUnknownProtos     *uint64           `path:"in-unknown-protos" module:"openconfig-interfaces"`
	ΛInUnknownProtos    []ygot.Annotation `path:"@in-unknown-protos" ygotAnnotation:"true"`
	LastClear           *uint64           `path:"last-clear" module:"openconfig-interfaces"`
	ΛLastClear          []ygot.Annotation `path:"@last-clear" ygotAnnotation:"true"`
	OutBroadcastPkts    *uint64           `path:"out-broadcast-pkts" module:"openconfig-interfaces"`
	ΛOutBroadcastPkts   []ygot.Annotation `path:"@out-broadcast-pkts" ygotAnnotation:"true"`
	OutDiscards         *uint64           `path:"out-discards" module:"openconfig-interfaces"`
	ΛOutDiscards        []ygot.Annotation `path:"@out-discards" ygotAnnotation:"true"`
	OutErrors           *uint64           `path:"out-errors" module:"openconfig-interfaces"`
	ΛOutErrors          []ygot.Annotation `path:"@out-errors" ygotAnnotation:"true"`
	OutMulticastPkts    *uint64           `path:"out-multicast-pkts" module:"openconfig-interfaces"`
	ΛOutMulticastPkts   []ygot.Annotation `path:"@out-multicast-pkts" ygotAnnotation:"true"`
	OutOctets           *uint64           `path:"out-octets" module:"openconfig-interfaces"`
	ΛOutOctets          []ygot.Annotation `path:"@out-octets" ygotAnnotation:"true"`
	OutPkts             *uint64           `path:"out-pkts" module:"openconfig-interfaces"`
	ΛOutPkts            []ygot.Annotation `path:"@out-pkts" ygotAnnotation:"true"`
	OutUnicastPkts      *uint64           `path:"out-unicast-pkts" module:"openconfig-interfaces"`
	ΛOutUnicastPkts     []ygot.Annotation `path:"@out-unicast-pkts" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) IsYANGGoStruct() {
}

// GetCarrierTransitions retrieves the value of the leaf CarrierTransitions from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CarrierTransitions is set, it can safely use t.GetCarrierTransitions()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CarrierTransitions == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetCarrierTransitions() uint64 {
	if t == nil || t.CarrierTransitions == nil {
		return 0
	}
	return *t.CarrierTransitions
}

// GetInBroadcastPkts retrieves the value of the leaf InBroadcastPkts from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InBroadcastPkts is set, it can safely use t.GetInBroadcastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InBroadcastPkts == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInBroadcastPkts() uint64 {
	if t == nil || t.InBroadcastPkts == nil {
		return 0
	}
	return *t.InBroadcastPkts
}

// GetInDiscards retrieves the value of the leaf InDiscards from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InDiscards is set, it can safely use t.GetInDiscards()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InDiscards == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInDiscards() uint64 {
	if t == nil || t.InDiscards == nil {
		return 0
	}
	return *t.InDiscards
}

// GetInErrors retrieves the value of the leaf InErrors from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InErrors is set, it can safely use t.GetInErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InErrors == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInErrors() uint64 {
	if t == nil || t.InErrors == nil {
		return 0
	}
	return *t.InErrors
}

// GetInFcsErrors retrieves the value of the leaf InFcsErrors from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InFcsErrors is set, it can safely use t.GetInFcsErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InFcsErrors == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInFcsErrors() uint64 {
	if t == nil || t.InFcsErrors == nil {
		return 0
	}
	return *t.InFcsErrors
}

// GetInMulticastPkts retrieves the value of the leaf InMulticastPkts from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InMulticastPkts is set, it can safely use t.GetInMulticastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InMulticastPkts == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInMulticastPkts() uint64 {
	if t == nil || t.InMulticastPkts == nil {
		return 0
	}
	return *t.InMulticastPkts
}

// GetInOctets retrieves the value of the leaf InOctets from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InOctets is set, it can safely use t.GetInOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InOctets == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InPkts is set, it can safely use t.GetInPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InPkts == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetInUnicastPkts retrieves the value of the leaf InUnicastPkts from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InUnicastPkts is set, it can safely use t.GetInUnicastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InUnicastPkts == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInUnicastPkts() uint64 {
	if t == nil || t.InUnicastPkts == nil {
		return 0
	}
	return *t.InUnicastPkts
}

// GetInUnknownProtos retrieves the value of the leaf InUnknownProtos from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InUnknownProtos is set, it can safely use t.GetInUnknownProtos()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InUnknownProtos == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetInUnknownProtos() uint64 {
	if t == nil || t.InUnknownProtos == nil {
		return 0
	}
	return *t.InUnknownProtos
}

// GetLastClear retrieves the value of the leaf LastClear from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastClear is set, it can safely use t.GetLastClear()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastClear == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetLastClear() uint64 {
	if t == nil || t.LastClear == nil {
		return 0
	}
	return *t.LastClear
}

// GetOutBroadcastPkts retrieves the value of the leaf OutBroadcastPkts from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutBroadcastPkts is set, it can safely use t.GetOutBroadcastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutBroadcastPkts == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetOutBroadcastPkts() uint64 {
	if t == nil || t.OutBroadcastPkts == nil {
		return 0
	}
	return *t.OutBroadcastPkts
}

// GetOutDiscards retrieves the value of the leaf OutDiscards from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutDiscards is set, it can safely use t.GetOutDiscards()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutDiscards == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetOutDiscards() uint64 {
	if t == nil || t.OutDiscards == nil {
		return 0
	}
	return *t.OutDiscards
}

// GetOutErrors retrieves the value of the leaf OutErrors from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutErrors is set, it can safely use t.GetOutErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutErrors == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetOutErrors() uint64 {
	if t == nil || t.OutErrors == nil {
		return 0
	}
	return *t.OutErrors
}

// GetOutMulticastPkts retrieves the value of the leaf OutMulticastPkts from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutMulticastPkts is set, it can safely use t.GetOutMulticastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutMulticastPkts == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetOutMulticastPkts() uint64 {
	if t == nil || t.OutMulticastPkts == nil {
		return 0
	}
	return *t.OutMulticastPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutOctets is set, it can safely use t.GetOutOctets()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutOctets == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutPkts is set, it can safely use t.GetOutPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutPkts == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// GetOutUnicastPkts retrieves the value of the leaf OutUnicastPkts from the OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutUnicastPkts is set, it can safely use t.GetOutUnicastPkts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutUnicastPkts == nil'
// before retrieving the leaf's value.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) GetOutUnicastPkts() uint64 {
	if t == nil || t.OutUnicastPkts == nil {
		return 0
	}
	return *t.OutUnicastPkts
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigInterfaces_Interfaces_Interface_Subinterfaces_Subinterface_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigLldp_Lldp represents the /openconfig-lldp/lldp YANG schema element.
type OpenconfigLldp_Lldp struct {
	ΛMetadata   []ygot.Annotation               `path:"@" ygotAnnotation:"true"`
	Config      *OpenconfigLldp_Lldp_Config     `path:"config" module:"openconfig-lldp"`
	ΛConfig     []ygot.Annotation               `path:"@config" ygotAnnotation:"true"`
	Interfaces  *OpenconfigLldp_Lldp_Interfaces `path:"interfaces" module:"openconfig-lldp"`
	ΛInterfaces []ygot.Annotation               `path:"@interfaces" ygotAnnotation:"true"`
	State       *OpenconfigLldp_Lldp_State      `path:"state" module:"openconfig-lldp"`
	ΛState      []ygot.Annotation               `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigLldp_Lldp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLldp_Lldp) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigLldp_Lldp) GetOrCreateConfig() *OpenconfigLldp_Lldp_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigLldp_Lldp_Config{}
	return t.Config
}

// GetOrCreateInterfaces retrieves the value of the Interfaces field
// or returns the existing field if it already exists.
func (t *OpenconfigLldp_Lldp) GetOrCreateInterfaces() *OpenconfigLldp_Lldp_Interfaces {
	if t.Interfaces != nil {
		return t.Interfaces
	}
	t.Interfaces = &OpenconfigLldp_Lldp_Interfaces{}
	return t.Interfaces
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigLldp_Lldp) GetOrCreateState() *OpenconfigLldp_Lldp_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigLldp_Lldp_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigLldp_Lldp. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigLldp_Lldp) GetConfig() *OpenconfigLldp_Lldp_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetInterfaces returns the value of the Interfaces struct pointer
// from OpenconfigLldp_Lldp. If the receiver or the field Interfaces is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigLldp_Lldp) GetInterfaces() *OpenconfigLldp_Lldp_Interfaces {
	if t != nil && t.Interfaces != nil {
		return t.Interfaces
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigLldp_Lldp. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigLldp_Lldp) GetState() *OpenconfigLldp_Lldp_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLldp_Lldp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLldp_Lldp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLldp_Lldp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigLldp_Lldp_Config represents the /openconfig-lldp/lldp/config YANG schema element.
type OpenconfigLldp_Lldp_Config struct {
	ΛMetadata                 []ygot.Annotation                `path:"@" ygotAnnotation:"true"`
	ChassisId                 *string                          `path:"chassis-id" module:"openconfig-lldp"`
	ΛChassisId                []ygot.Annotation                `path:"@chassis-id" ygotAnnotation:"true"`
	ChassisIdType             E_OpenconfigLldp_ChassisIdType   `path:"chassis-id-type" module:"openconfig-lldp"`
	ΛChassisIdType            []ygot.Annotation                `path:"@chassis-id-type" ygotAnnotation:"true"`
	Enabled                   *bool                            `path:"enabled" module:"openconfig-lldp"`
	ΛEnabled                  []ygot.Annotation                `path:"@enabled" ygotAnnotation:"true"`
	HelloTimer                *uint64                          `path:"hello-timer" module:"openconfig-lldp"`
	ΛHelloTimer               []ygot.Annotation                `path:"@hello-timer" ygotAnnotation:"true"`
	SuppressTlvAdvertisement  []E_OpenconfigLldpTypes_LLDP_TLV `path:"suppress-tlv-advertisement" module:"openconfig-lldp"`
	ΛSuppressTlvAdvertisement []ygot.Annotation                `path:"@suppress-tlv-advertisement" ygotAnnotation:"true"`
	SystemDescription         *string                          `path:"system-description" module:"openconfig-lldp"`
	ΛSystemDescription        []ygot.Annotation                `path:"@system-description" ygotAnnotation:"true"`
	SystemName                *string                          `path:"system-name" module:"openconfig-lldp"`
	ΛSystemName               []ygot.Annotation                `path:"@system-name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigLldp_Lldp_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLldp_Lldp_Config) IsYANGGoStruct() {}

// GetChassisId retrieves the value of the leaf ChassisId from the OpenconfigLldp_Lldp_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ChassisId is set, it can safely use t.GetChassisId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ChassisId == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Config) GetChassisId() string {
	if t == nil || t.ChassisId == nil {
		return ""
	}
	return *t.ChassisId
}

// GetChassisIdType retrieves the value of the leaf ChassisIdType from the OpenconfigLldp_Lldp_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ChassisIdType is set, it can safely use t.GetChassisIdType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ChassisIdType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Config) GetChassisIdType() E_OpenconfigLldp_ChassisIdType {
	if t == nil || t.ChassisIdType == 0 {
		return 0
	}
	return t.ChassisIdType
}

// GetEnabled retrieves the value of the leaf Enabled from the OpenconfigLldp_Lldp_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Config) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetHelloTimer retrieves the value of the leaf HelloTimer from the OpenconfigLldp_Lldp_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HelloTimer is set, it can safely use t.GetHelloTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HelloTimer == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Config) GetHelloTimer() uint64 {
	if t == nil || t.HelloTimer == nil {
		return 0
	}
	return *t.HelloTimer
}

// GetSuppressTlvAdvertisement retrieves the value of the leaf SuppressTlvAdvertisement from the OpenconfigLldp_Lldp_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SuppressTlvAdvertisement is set, it can safely use t.GetSuppressTlvAdvertisement()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SuppressTlvAdvertisement == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Config) GetSuppressTlvAdvertisement() []E_OpenconfigLldpTypes_LLDP_TLV {
	if t == nil || t.SuppressTlvAdvertisement == nil {
		return nil
	}
	return t.SuppressTlvAdvertisement
}

// GetSystemDescription retrieves the value of the leaf SystemDescription from the OpenconfigLldp_Lldp_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SystemDescription is set, it can safely use t.GetSystemDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SystemDescription == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Config) GetSystemDescription() string {
	if t == nil || t.SystemDescription == nil {
		return ""
	}
	return *t.SystemDescription
}

// GetSystemName retrieves the value of the leaf SystemName from the OpenconfigLldp_Lldp_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SystemName is set, it can safely use t.GetSystemName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SystemName == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Config) GetSystemName() string {
	if t == nil || t.SystemName == nil {
		return ""
	}
	return *t.SystemName
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLldp_Lldp_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLldp_Lldp_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLldp_Lldp_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigLldp_Lldp_Interfaces represents the /openconfig-lldp/lldp/interfaces YANG schema element.
type OpenconfigLldp_Lldp_Interfaces struct {
	ΛMetadata  []ygot.Annotation                                    `path:"@" ygotAnnotation:"true"`
	Interface  map[string]*OpenconfigLldp_Lldp_Interfaces_Interface `path:"interface" module:"openconfig-lldp"`
	ΛInterface []ygot.Annotation                                    `path:"@interface" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigLldp_Lldp_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLldp_Lldp_Interfaces) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// OpenconfigLldp_Lldp_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigLldp_Lldp_Interfaces) NewInterface(Name string) (*OpenconfigLldp_Lldp_Interfaces_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigLldp_Lldp_Interfaces_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &OpenconfigLldp_Lldp_Interfaces_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the OpenconfigLldp_Lldp_Interfaces struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigLldp_Lldp_Interfaces) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver OpenconfigLldp_Lldp_Interfaces. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigLldp_Lldp_Interfaces) GetOrCreateInterface(Name string) *OpenconfigLldp_Lldp_Interfaces_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of OpenconfigLldp_Lldp_Interfaces. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigLldp_Lldp_Interfaces) GetInterface(Name string) *OpenconfigLldp_Lldp_Interfaces_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// AppendInterface appends the supplied OpenconfigLldp_Lldp_Interfaces_Interface struct to the
// list Interface of OpenconfigLldp_Lldp_Interfaces. If the key value(s) specified in
// the supplied OpenconfigLldp_Lldp_Interfaces_Interface already exist in the list, an error is
// returned.
func (t *OpenconfigLldp_Lldp_Interfaces) AppendInterface(v *OpenconfigLldp_Lldp_Interfaces_Interface) error {
	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigLldp_Lldp_Interfaces_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLldp_Lldp_Interfaces) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLldp_Lldp_Interfaces"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLldp_Lldp_Interfaces) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigLldp_Lldp_Interfaces_Interface represents the /openconfig-lldp/lldp/interfaces/interface YANG schema element.
type OpenconfigLldp_Lldp_Interfaces_Interface struct {
	ΛMetadata  []ygot.Annotation                                   `path:"@" ygotAnnotation:"true"`
	Config     *OpenconfigLldp_Lldp_Interfaces_Interface_Config    `path:"config" module:"openconfig-lldp"`
	ΛConfig    []ygot.Annotation                                   `path:"@config" ygotAnnotation:"true"`
	Name       *string                                             `path:"name" module:"openconfig-lldp"`
	ΛName      []ygot.Annotation                                   `path:"@name" ygotAnnotation:"true"`
	Neighbors  *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors `path:"neighbors" module:"openconfig-lldp"`
	ΛNeighbors []ygot.Annotation                                   `path:"@neighbors" ygotAnnotation:"true"`
	State      *OpenconfigLldp_Lldp_Interfaces_Interface_State     `path:"state" module:"openconfig-lldp"`
	ΛState     []ygot.Annotation                                   `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigLldp_Lldp_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLldp_Lldp_Interfaces_Interface) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface) GetOrCreateConfig() *OpenconfigLldp_Lldp_Interfaces_Interface_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigLldp_Lldp_Interfaces_Interface_Config{}
	return t.Config
}

// GetOrCreateNeighbors retrieves the value of the Neighbors field
// or returns the existing field if it already exists.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface) GetOrCreateNeighbors() *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors {
	if t.Neighbors != nil {
		return t.Neighbors
	}
	t.Neighbors = &OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors{}
	return t.Neighbors
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface) GetOrCreateState() *OpenconfigLldp_Lldp_Interfaces_Interface_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigLldp_Lldp_Interfaces_Interface_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigLldp_Lldp_Interfaces_Interface. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface) GetConfig() *OpenconfigLldp_Lldp_Interfaces_Interface_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetNeighbors returns the value of the Neighbors struct pointer
// from OpenconfigLldp_Lldp_Interfaces_Interface. If the receiver or the field Neighbors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface) GetNeighbors() *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors {
	if t != nil && t.Neighbors != nil {
		return t.Neighbors
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigLldp_Lldp_Interfaces_Interface. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface) GetState() *OpenconfigLldp_Lldp_Interfaces_Interface_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the OpenconfigLldp_Lldp_Interfaces_Interface
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// ΛListKeyMap returns the keys of the OpenconfigLldp_Lldp_Interfaces_Interface struct, which is a YANG list entry.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLldp_Lldp_Interfaces_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigLldp_Lldp_Interfaces_Interface_Config represents the /openconfig-lldp/lldp/interfaces/interface/config YANG schema element.
type OpenconfigLldp_Lldp_Interfaces_Interface_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enabled   *bool             `path:"enabled" module:"openconfig-lldp"`
	ΛEnabled  []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-lldp"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
	Snooping  *bool             `path:"snooping" module:"openconfig-terminal-device"`
	ΛSnooping []ygot.Annotation `path:"@snooping" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigLldp_Lldp_Interfaces_Interface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLldp_Lldp_Interfaces_Interface_Config) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the OpenconfigLldp_Lldp_Interfaces_Interface_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Config) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetName retrieves the value of the leaf Name from the OpenconfigLldp_Lldp_Interfaces_Interface_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Config) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetSnooping retrieves the value of the leaf Snooping from the OpenconfigLldp_Lldp_Interfaces_Interface_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Snooping is set, it can safely use t.GetSnooping()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Snooping == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Config) GetSnooping() bool {
	if t == nil || t.Snooping == nil {
		return false
	}
	return *t.Snooping
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLldp_Lldp_Interfaces_Interface_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors represents the /openconfig-lldp/lldp/interfaces/interface/neighbors YANG schema element.
type OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors struct {
	ΛMetadata []ygot.Annotation                                                       `path:"@" ygotAnnotation:"true"`
	Neighbor  map[string]*OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor `path:"neighbor" module:"openconfig-lldp"`
	ΛNeighbor []ygot.Annotation                                                       `path:"@neighbor" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors) NewNeighbor(Id string) (*OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor{
		Id: &Id,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.Id = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors) GetOrCreateNeighbor(Id string) *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor {

	key := Id

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors) GetNeighbor(Id string) *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// AppendNeighbor appends the supplied OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor struct to the
// list Neighbor of OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors. If the key value(s) specified in
// the supplied OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor already exist in the list, an error is
// returned.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors) AppendNeighbor(v *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor) error {
	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor YANG schema element.
type OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor struct {
	ΛMetadata     []ygot.Annotation                                                         `path:"@" ygotAnnotation:"true"`
	Capabilities  *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities `path:"capabilities" module:"openconfig-lldp"`
	ΛCapabilities []ygot.Annotation                                                         `path:"@capabilities" ygotAnnotation:"true"`
	Config        *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Config       `path:"config" module:"openconfig-lldp"`
	ΛConfig       []ygot.Annotation                                                         `path:"@config" ygotAnnotation:"true"`
	CustomTlvs    *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs   `path:"custom-tlvs" module:"openconfig-lldp"`
	ΛCustomTlvs   []ygot.Annotation                                                         `path:"@custom-tlvs" ygotAnnotation:"true"`
	Id            *string                                                                   `path:"id" module:"openconfig-lldp"`
	ΛId           []ygot.Annotation                                                         `path:"@id" ygotAnnotation:"true"`
	State         *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State        `path:"state" module:"openconfig-lldp"`
	ΛState        []ygot.Annotation                                                         `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor) IsYANGGoStruct() {}

// GetOrCreateCapabilities retrieves the value of the Capabilities field
// or returns the existing field if it already exists.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor) GetOrCreateCapabilities() *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities {
	if t.Capabilities != nil {
		return t.Capabilities
	}
	t.Capabilities = &OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities{}
	return t.Capabilities
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor) GetOrCreateConfig() *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Config{}
	return t.Config
}

// GetOrCreateCustomTlvs retrieves the value of the CustomTlvs field
// or returns the existing field if it already exists.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor) GetOrCreateCustomTlvs() *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs {
	if t.CustomTlvs != nil {
		return t.CustomTlvs
	}
	t.CustomTlvs = &OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs{}
	return t.CustomTlvs
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor) GetOrCreateState() *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State{}
	return t.State
}

// GetCapabilities returns the value of the Capabilities struct pointer
// from OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor. If the receiver or the field Capabilities is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor) GetCapabilities() *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities {
	if t != nil && t.Capabilities != nil {
		return t.Capabilities
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor) GetConfig() *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetCustomTlvs returns the value of the CustomTlvs struct pointer
// from OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor. If the receiver or the field CustomTlvs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor) GetCustomTlvs() *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs {
	if t != nil && t.CustomTlvs != nil {
		return t.CustomTlvs
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor) GetState() *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetId retrieves the value of the leaf Id from the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Id is set, it can safely use t.GetId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Id == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// ΛListKeyMap returns the keys of the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor struct, which is a YANG list entry.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities YANG schema element.
type OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities struct {
	ΛMetadata   []ygot.Annotation                                                                                                                     `path:"@" ygotAnnotation:"true"`
	Capability  map[E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY]*OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability `path:"capability" module:"openconfig-lldp"`
	ΛCapability []ygot.Annotation                                                                                                                     `path:"@capability" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities) IsYANGGoStruct() {}

// NewCapability creates a new entry in the Capability list of the
// OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities) NewCapability(Name E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY) (*OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Capability == nil {
		t.Capability = make(map[E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY]*OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Capability[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Capability", key)
	}

	t.Capability[key] = &OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability{
		Name: Name,
	}

	return t.Capability[key], nil
}

// RenameCapability renames an entry in the list Capability within
// the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities) RenameCapability(oldK, newK E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY) error {
	if _, ok := t.Capability[newK]; ok {
		return fmt.Errorf("key %v already exists in Capability", newK)
	}

	e, ok := t.Capability[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Capability", oldK)
	}
	e.Name = newK

	t.Capability[newK] = e
	delete(t.Capability, oldK)
	return nil
}

// GetOrCreateCapability retrieves the value with the specified keys from
// the receiver OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities) GetOrCreateCapability(Name E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY) *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability {

	key := Name

	if v, ok := t.Capability[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCapability(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCapability got unexpected error: %v", err))
	}
	return v
}

// GetCapability retrieves the value with the specified key from
// the Capability map field of OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities) GetCapability(Name E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY) *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Capability[key]; ok {
		return lm
	}
	return nil
}

// AppendCapability appends the supplied OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability struct to the
// list Capability of OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities. If the key value(s) specified in
// the supplied OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability already exist in the list, an error is
// returned.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities) AppendCapability(v *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability) error {
	key := v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Capability == nil {
		t.Capability = make(map[E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY]*OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability)
	}

	if _, ok := t.Capability[key]; ok {
		return fmt.Errorf("duplicate key for list Capability %v", key)
	}

	t.Capability[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability YANG schema element.
type OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability struct {
	ΛMetadata []ygot.Annotation                                                                           `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_Config `path:"config" module:"openconfig-lldp"`
	ΛConfig   []ygot.Annotation                                                                           `path:"@config" ygotAnnotation:"true"`
	Name      E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY                                                `path:"name" module:"openconfig-lldp"`
	ΛName     []ygot.Annotation                                                                           `path:"@name" ygotAnnotation:"true"`
	State     *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State  `path:"state" module:"openconfig-lldp"`
	ΛState    []ygot.Annotation                                                                           `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability) GetOrCreateConfig() *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability) GetOrCreateState() *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability) GetConfig() *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability) GetState() *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability) GetName() E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// ΛListKeyMap returns the keys of the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability struct, which is a YANG list entry.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_Config represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/config YANG schema element.
type OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state YANG schema element.
type OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State struct {
	ΛMetadata []ygot.Annotation                            `path:"@" ygotAnnotation:"true"`
	Enabled   *bool                                        `path:"enabled" module:"openconfig-lldp"`
	ΛEnabled  []ygot.Annotation                            `path:"@enabled" ygotAnnotation:"true"`
	Name      E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY `path:"name" module:"openconfig-lldp"`
	ΛName     []ygot.Annotation                            `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State) IsYANGGoStruct() {
}

// GetEnabled retrieves the value of the leaf Enabled from the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetName retrieves the value of the leaf Name from the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State) GetName() E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Capabilities_Capability_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Config represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/config YANG schema element.
type OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs YANG schema element.
type OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs struct {
	ΛMetadata []ygot.Annotation                                                                                                                                              `path:"@" ygotAnnotation:"true"`
	Tlv       map[OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Key]*OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv `path:"tlv" module:"openconfig-lldp"`
	ΛTlv      []ygot.Annotation                                                                                                                                              `path:"@tlv" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs) IsYANGGoStruct() {}

// OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Key represents the key for list Tlv of element /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs.
type OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Key struct {
	Type       int32  `path:"type"`
	Oui        string `path:"oui"`
	OuiSubtype string `path:"oui-subtype"`
}

// NewTlv creates a new entry in the Tlv list of the
// OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs) NewTlv(Type int32, Oui string, OuiSubtype string) (*OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tlv == nil {
		t.Tlv = make(map[OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Key]*OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv)
	}

	key := OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Key{
		Type:       Type,
		Oui:        Oui,
		OuiSubtype: OuiSubtype,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Tlv[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Tlv", key)
	}

	t.Tlv[key] = &OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv{
		Type:       &Type,
		Oui:        &Oui,
		OuiSubtype: &OuiSubtype,
	}

	return t.Tlv[key], nil
}

// RenameTlv renames an entry in the list Tlv within
// the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs) RenameTlv(oldK, newK OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Key) error {
	if _, ok := t.Tlv[newK]; ok {
		return fmt.Errorf("key %v already exists in Tlv", newK)
	}

	e, ok := t.Tlv[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Tlv", oldK)
	}
	e.Type = &newK.Type
	e.Oui = &newK.Oui
	e.OuiSubtype = &newK.OuiSubtype

	t.Tlv[newK] = e
	delete(t.Tlv, oldK)
	return nil
}

// GetOrCreateTlv retrieves the value with the specified keys from
// the receiver OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs) GetOrCreateTlv(Type int32, Oui string, OuiSubtype string) *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv {

	key := OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Key{
		Type:       Type,
		Oui:        Oui,
		OuiSubtype: OuiSubtype,
	}

	if v, ok := t.Tlv[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTlv(Type, Oui, OuiSubtype)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTlv got unexpected error: %v", err))
	}
	return v
}

// GetTlv retrieves the value with the specified key from
// the Tlv map field of OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs) GetTlv(Type int32, Oui string, OuiSubtype string) *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv {

	if t == nil {
		return nil
	}

	key := OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Key{
		Type:       Type,
		Oui:        Oui,
		OuiSubtype: OuiSubtype,
	}

	if lm, ok := t.Tlv[key]; ok {
		return lm
	}
	return nil
}

// AppendTlv appends the supplied OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv struct to the
// list Tlv of OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs. If the key value(s) specified in
// the supplied OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv already exist in the list, an error is
// returned.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs) AppendTlv(v *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv) error {
	key := OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Key{Type: *v.Type, Oui: *v.Oui, OuiSubtype: *v.OuiSubtype}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tlv == nil {
		t.Tlv = make(map[OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Key]*OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv)
	}

	if _, ok := t.Tlv[key]; ok {
		return fmt.Errorf("duplicate key for list Tlv %v", key)
	}

	t.Tlv[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv YANG schema element.
type OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv struct {
	ΛMetadata   []ygot.Annotation                                                                  `path:"@" ygotAnnotation:"true"`
	Config      *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Config `path:"config" module:"openconfig-lldp"`
	ΛConfig     []ygot.Annotation                                                                  `path:"@config" ygotAnnotation:"true"`
	Oui         *string                                                                            `path:"oui" module:"openconfig-lldp"`
	ΛOui        []ygot.Annotation                                                                  `path:"@oui" ygotAnnotation:"true"`
	OuiSubtype  *string                                                                            `path:"oui-subtype" module:"openconfig-lldp"`
	ΛOuiSubtype []ygot.Annotation                                                                  `path:"@oui-subtype" ygotAnnotation:"true"`
	State       *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State  `path:"state" module:"openconfig-lldp"`
	ΛState      []ygot.Annotation                                                                  `path:"@state" ygotAnnotation:"true"`
	Type        *int32                                                                             `path:"type" module:"openconfig-lldp"`
	ΛType       []ygot.Annotation                                                                  `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv) GetOrCreateConfig() *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv) GetOrCreateState() *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv) GetConfig() *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv) GetState() *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetOui retrieves the value of the leaf Oui from the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Oui is set, it can safely use t.GetOui()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Oui == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv) GetOui() string {
	if t == nil || t.Oui == nil {
		return ""
	}
	return *t.Oui
}

// GetOuiSubtype retrieves the value of the leaf OuiSubtype from the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OuiSubtype is set, it can safely use t.GetOuiSubtype()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OuiSubtype == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv) GetOuiSubtype() string {
	if t == nil || t.OuiSubtype == nil {
		return ""
	}
	return *t.OuiSubtype
}

// GetType retrieves the value of the leaf Type from the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Type is set, it can safely use t.GetType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Type == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv) GetType() int32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// ΛListKeyMap returns the keys of the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv struct, which is a YANG list entry.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Oui == nil {
		return nil, fmt.Errorf("nil value for key Oui")
	}

	if t.OuiSubtype == nil {
		return nil, fmt.Errorf("nil value for key OuiSubtype")
	}

	if t.Type == nil {
		return nil, fmt.Errorf("nil value for key Type")
	}

	return map[string]interface{}{
		"oui":         *t.Oui,
		"oui-subtype": *t.OuiSubtype,
		"type":        *t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Config represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/config YANG schema element.
type OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state YANG schema element.
type OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State struct {
	ΛMetadata   []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Oui         *string           `path:"oui" module:"openconfig-lldp"`
	ΛOui        []ygot.Annotation `path:"@oui" ygotAnnotation:"true"`
	OuiSubtype  *string           `path:"oui-subtype" module:"openconfig-lldp"`
	ΛOuiSubtype []ygot.Annotation `path:"@oui-subtype" ygotAnnotation:"true"`
	Type        *int32            `path:"type" module:"openconfig-lldp"`
	ΛType       []ygot.Annotation `path:"@type" ygotAnnotation:"true"`
	Value       Binary            `path:"value" module:"openconfig-lldp"`
	ΛValue      []ygot.Annotation `path:"@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State) IsYANGGoStruct() {
}

// GetOui retrieves the value of the leaf Oui from the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Oui is set, it can safely use t.GetOui()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Oui == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State) GetOui() string {
	if t == nil || t.Oui == nil {
		return ""
	}
	return *t.Oui
}

// GetOuiSubtype retrieves the value of the leaf OuiSubtype from the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OuiSubtype is set, it can safely use t.GetOuiSubtype()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OuiSubtype == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State) GetOuiSubtype() string {
	if t == nil || t.OuiSubtype == nil {
		return ""
	}
	return *t.OuiSubtype
}

// GetType retrieves the value of the leaf Type from the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Type is set, it can safely use t.GetType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Type == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State) GetType() int32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetValue retrieves the value of the leaf Value from the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Value is set, it can safely use t.GetValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Value == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State) GetValue() Binary {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_CustomTlvs_Tlv_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state YANG schema element.
type OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State struct {
	ΛMetadata              []ygot.Annotation              `path:"@" ygotAnnotation:"true"`
	Age                    *uint64                        `path:"age" module:"openconfig-lldp"`
	ΛAge                   []ygot.Annotation              `path:"@age" ygotAnnotation:"true"`
	ChassisId              *string                        `path:"chassis-id" module:"openconfig-lldp"`
	ΛChassisId             []ygot.Annotation              `path:"@chassis-id" ygotAnnotation:"true"`
	ChassisIdType          E_OpenconfigLldp_ChassisIdType `path:"chassis-id-type" module:"openconfig-lldp"`
	ΛChassisIdType         []ygot.Annotation              `path:"@chassis-id-type" ygotAnnotation:"true"`
	Id                     *string                        `path:"id" module:"openconfig-lldp"`
	ΛId                    []ygot.Annotation              `path:"@id" ygotAnnotation:"true"`
	LastUpdate             *int64                         `path:"last-update" module:"openconfig-lldp"`
	ΛLastUpdate            []ygot.Annotation              `path:"@last-update" ygotAnnotation:"true"`
	ManagementAddress      *string                        `path:"management-address" module:"openconfig-lldp"`
	ΛManagementAddress     []ygot.Annotation              `path:"@management-address" ygotAnnotation:"true"`
	ManagementAddressType  *string                        `path:"management-address-type" module:"openconfig-lldp"`
	ΛManagementAddressType []ygot.Annotation              `path:"@management-address-type" ygotAnnotation:"true"`
	PortDescription        *string                        `path:"port-description" module:"openconfig-lldp"`
	ΛPortDescription       []ygot.Annotation              `path:"@port-description" ygotAnnotation:"true"`
	PortId                 *string                        `path:"port-id" module:"openconfig-lldp"`
	ΛPortId                []ygot.Annotation              `path:"@port-id" ygotAnnotation:"true"`
	PortIdType             E_OpenconfigLldp_PortIdType    `path:"port-id-type" module:"openconfig-lldp"`
	ΛPortIdType            []ygot.Annotation              `path:"@port-id-type" ygotAnnotation:"true"`
	SystemDescription      *string                        `path:"system-description" module:"openconfig-lldp"`
	ΛSystemDescription     []ygot.Annotation              `path:"@system-description" ygotAnnotation:"true"`
	SystemName             *string                        `path:"system-name" module:"openconfig-lldp"`
	ΛSystemName            []ygot.Annotation              `path:"@system-name" ygotAnnotation:"true"`
	Ttl                    *uint16                        `path:"ttl" module:"openconfig-lldp"`
	ΛTtl                   []ygot.Annotation              `path:"@ttl" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State) IsYANGGoStruct() {}

// GetAge retrieves the value of the leaf Age from the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Age is set, it can safely use t.GetAge()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Age == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State) GetAge() uint64 {
	if t == nil || t.Age == nil {
		return 0
	}
	return *t.Age
}

// GetChassisId retrieves the value of the leaf ChassisId from the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ChassisId is set, it can safely use t.GetChassisId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ChassisId == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State) GetChassisId() string {
	if t == nil || t.ChassisId == nil {
		return ""
	}
	return *t.ChassisId
}

// GetChassisIdType retrieves the value of the leaf ChassisIdType from the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ChassisIdType is set, it can safely use t.GetChassisIdType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ChassisIdType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State) GetChassisIdType() E_OpenconfigLldp_ChassisIdType {
	if t == nil || t.ChassisIdType == 0 {
		return 0
	}
	return t.ChassisIdType
}

// GetId retrieves the value of the leaf Id from the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Id is set, it can safely use t.GetId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Id == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetLastUpdate retrieves the value of the leaf LastUpdate from the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastUpdate is set, it can safely use t.GetLastUpdate()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastUpdate == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State) GetLastUpdate() int64 {
	if t == nil || t.LastUpdate == nil {
		return 0
	}
	return *t.LastUpdate
}

// GetManagementAddress retrieves the value of the leaf ManagementAddress from the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ManagementAddress is set, it can safely use t.GetManagementAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ManagementAddress == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State) GetManagementAddress() string {
	if t == nil || t.ManagementAddress == nil {
		return ""
	}
	return *t.ManagementAddress
}

// GetManagementAddressType retrieves the value of the leaf ManagementAddressType from the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ManagementAddressType is set, it can safely use t.GetManagementAddressType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ManagementAddressType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State) GetManagementAddressType() string {
	if t == nil || t.ManagementAddressType == nil {
		return ""
	}
	return *t.ManagementAddressType
}

// GetPortDescription retrieves the value of the leaf PortDescription from the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PortDescription is set, it can safely use t.GetPortDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PortDescription == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State) GetPortDescription() string {
	if t == nil || t.PortDescription == nil {
		return ""
	}
	return *t.PortDescription
}

// GetPortId retrieves the value of the leaf PortId from the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PortId is set, it can safely use t.GetPortId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PortId == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State) GetPortId() string {
	if t == nil || t.PortId == nil {
		return ""
	}
	return *t.PortId
}

// GetPortIdType retrieves the value of the leaf PortIdType from the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PortIdType is set, it can safely use t.GetPortIdType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PortIdType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State) GetPortIdType() E_OpenconfigLldp_PortIdType {
	if t == nil || t.PortIdType == 0 {
		return 0
	}
	return t.PortIdType
}

// GetSystemDescription retrieves the value of the leaf SystemDescription from the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SystemDescription is set, it can safely use t.GetSystemDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SystemDescription == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State) GetSystemDescription() string {
	if t == nil || t.SystemDescription == nil {
		return ""
	}
	return *t.SystemDescription
}

// GetSystemName retrieves the value of the leaf SystemName from the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SystemName is set, it can safely use t.GetSystemName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SystemName == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State) GetSystemName() string {
	if t == nil || t.SystemName == nil {
		return ""
	}
	return *t.SystemName
}

// GetTtl retrieves the value of the leaf Ttl from the OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ttl is set, it can safely use t.GetTtl()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ttl == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State) GetTtl() uint16 {
	if t == nil || t.Ttl == nil {
		return 0
	}
	return *t.Ttl
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_Neighbors_Neighbor_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigLldp_Lldp_Interfaces_Interface_State represents the /openconfig-lldp/lldp/interfaces/interface/state YANG schema element.
type OpenconfigLldp_Lldp_Interfaces_Interface_State struct {
	ΛMetadata []ygot.Annotation                                        `path:"@" ygotAnnotation:"true"`
	Counters  *OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters `path:"counters" module:"openconfig-lldp"`
	ΛCounters []ygot.Annotation                                        `path:"@counters" ygotAnnotation:"true"`
	Enabled   *bool                                                    `path:"enabled" module:"openconfig-lldp"`
	ΛEnabled  []ygot.Annotation                                        `path:"@enabled" ygotAnnotation:"true"`
	Name      *string                                                  `path:"name" module:"openconfig-lldp"`
	ΛName     []ygot.Annotation                                        `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigLldp_Lldp_Interfaces_Interface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLldp_Lldp_Interfaces_Interface_State) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_State) GetOrCreateCounters() *OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigLldp_Lldp_Interfaces_Interface_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_State) GetCounters() *OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the OpenconfigLldp_Lldp_Interfaces_Interface_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_State) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetName retrieves the value of the leaf Name from the OpenconfigLldp_Lldp_Interfaces_Interface_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_State) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLldp_Lldp_Interfaces_Interface_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters represents the /openconfig-lldp/lldp/interfaces/interface/state/counters YANG schema element.
type OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	FrameDiscard   *uint64           `path:"frame-discard" module:"openconfig-lldp"`
	ΛFrameDiscard  []ygot.Annotation `path:"@frame-discard" ygotAnnotation:"true"`
	FrameErrorIn   *uint64           `path:"frame-error-in" module:"openconfig-lldp"`
	ΛFrameErrorIn  []ygot.Annotation `path:"@frame-error-in" ygotAnnotation:"true"`
	FrameErrorOut  *uint64           `path:"frame-error-out" module:"openconfig-lldp"`
	ΛFrameErrorOut []ygot.Annotation `path:"@frame-error-out" ygotAnnotation:"true"`
	FrameIn        *uint64           `path:"frame-in" module:"openconfig-lldp"`
	ΛFrameIn       []ygot.Annotation `path:"@frame-in" ygotAnnotation:"true"`
	FrameOut       *uint64           `path:"frame-out" module:"openconfig-lldp"`
	ΛFrameOut      []ygot.Annotation `path:"@frame-out" ygotAnnotation:"true"`
	LastClear      *string           `path:"last-clear" module:"openconfig-lldp"`
	ΛLastClear     []ygot.Annotation `path:"@last-clear" ygotAnnotation:"true"`
	TlvDiscard     *uint64           `path:"tlv-discard" module:"openconfig-lldp"`
	ΛTlvDiscard    []ygot.Annotation `path:"@tlv-discard" ygotAnnotation:"true"`
	TlvUnknown     *uint64           `path:"tlv-unknown" module:"openconfig-lldp"`
	ΛTlvUnknown    []ygot.Annotation `path:"@tlv-unknown" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters) IsYANGGoStruct() {}

// GetFrameDiscard retrieves the value of the leaf FrameDiscard from the OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FrameDiscard is set, it can safely use t.GetFrameDiscard()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FrameDiscard == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters) GetFrameDiscard() uint64 {
	if t == nil || t.FrameDiscard == nil {
		return 0
	}
	return *t.FrameDiscard
}

// GetFrameErrorIn retrieves the value of the leaf FrameErrorIn from the OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FrameErrorIn is set, it can safely use t.GetFrameErrorIn()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FrameErrorIn == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters) GetFrameErrorIn() uint64 {
	if t == nil || t.FrameErrorIn == nil {
		return 0
	}
	return *t.FrameErrorIn
}

// GetFrameErrorOut retrieves the value of the leaf FrameErrorOut from the OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FrameErrorOut is set, it can safely use t.GetFrameErrorOut()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FrameErrorOut == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters) GetFrameErrorOut() uint64 {
	if t == nil || t.FrameErrorOut == nil {
		return 0
	}
	return *t.FrameErrorOut
}

// GetFrameIn retrieves the value of the leaf FrameIn from the OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FrameIn is set, it can safely use t.GetFrameIn()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FrameIn == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters) GetFrameIn() uint64 {
	if t == nil || t.FrameIn == nil {
		return 0
	}
	return *t.FrameIn
}

// GetFrameOut retrieves the value of the leaf FrameOut from the OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FrameOut is set, it can safely use t.GetFrameOut()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FrameOut == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters) GetFrameOut() uint64 {
	if t == nil || t.FrameOut == nil {
		return 0
	}
	return *t.FrameOut
}

// GetLastClear retrieves the value of the leaf LastClear from the OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastClear is set, it can safely use t.GetLastClear()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastClear == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters) GetLastClear() string {
	if t == nil || t.LastClear == nil {
		return ""
	}
	return *t.LastClear
}

// GetTlvDiscard retrieves the value of the leaf TlvDiscard from the OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TlvDiscard is set, it can safely use t.GetTlvDiscard()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TlvDiscard == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters) GetTlvDiscard() uint64 {
	if t == nil || t.TlvDiscard == nil {
		return 0
	}
	return *t.TlvDiscard
}

// GetTlvUnknown retrieves the value of the leaf TlvUnknown from the OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TlvUnknown is set, it can safely use t.GetTlvUnknown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TlvUnknown == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters) GetTlvUnknown() uint64 {
	if t == nil || t.TlvUnknown == nil {
		return 0
	}
	return *t.TlvUnknown
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLldp_Lldp_Interfaces_Interface_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigLldp_Lldp_State represents the /openconfig-lldp/lldp/state YANG schema element.
type OpenconfigLldp_Lldp_State struct {
	ΛMetadata                 []ygot.Annotation                   `path:"@" ygotAnnotation:"true"`
	ChassisId                 *string                             `path:"chassis-id" module:"openconfig-lldp"`
	ΛChassisId                []ygot.Annotation                   `path:"@chassis-id" ygotAnnotation:"true"`
	ChassisIdType             E_OpenconfigLldp_ChassisIdType      `path:"chassis-id-type" module:"openconfig-lldp"`
	ΛChassisIdType            []ygot.Annotation                   `path:"@chassis-id-type" ygotAnnotation:"true"`
	Counters                  *OpenconfigLldp_Lldp_State_Counters `path:"counters" module:"openconfig-lldp"`
	ΛCounters                 []ygot.Annotation                   `path:"@counters" ygotAnnotation:"true"`
	Enabled                   *bool                               `path:"enabled" module:"openconfig-lldp"`
	ΛEnabled                  []ygot.Annotation                   `path:"@enabled" ygotAnnotation:"true"`
	HelloTimer                *uint64                             `path:"hello-timer" module:"openconfig-lldp"`
	ΛHelloTimer               []ygot.Annotation                   `path:"@hello-timer" ygotAnnotation:"true"`
	SuppressTlvAdvertisement  []E_OpenconfigLldpTypes_LLDP_TLV    `path:"suppress-tlv-advertisement" module:"openconfig-lldp"`
	ΛSuppressTlvAdvertisement []ygot.Annotation                   `path:"@suppress-tlv-advertisement" ygotAnnotation:"true"`
	SystemDescription         *string                             `path:"system-description" module:"openconfig-lldp"`
	ΛSystemDescription        []ygot.Annotation                   `path:"@system-description" ygotAnnotation:"true"`
	SystemName                *string                             `path:"system-name" module:"openconfig-lldp"`
	ΛSystemName               []ygot.Annotation                   `path:"@system-name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigLldp_Lldp_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLldp_Lldp_State) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigLldp_Lldp_State) GetOrCreateCounters() *OpenconfigLldp_Lldp_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigLldp_Lldp_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigLldp_Lldp_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigLldp_Lldp_State) GetCounters() *OpenconfigLldp_Lldp_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetChassisId retrieves the value of the leaf ChassisId from the OpenconfigLldp_Lldp_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ChassisId is set, it can safely use t.GetChassisId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ChassisId == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_State) GetChassisId() string {
	if t == nil || t.ChassisId == nil {
		return ""
	}
	return *t.ChassisId
}

// GetChassisIdType retrieves the value of the leaf ChassisIdType from the OpenconfigLldp_Lldp_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ChassisIdType is set, it can safely use t.GetChassisIdType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ChassisIdType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_State) GetChassisIdType() E_OpenconfigLldp_ChassisIdType {
	if t == nil || t.ChassisIdType == 0 {
		return 0
	}
	return t.ChassisIdType
}

// GetEnabled retrieves the value of the leaf Enabled from the OpenconfigLldp_Lldp_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_State) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return true
	}
	return *t.Enabled
}

// GetHelloTimer retrieves the value of the leaf HelloTimer from the OpenconfigLldp_Lldp_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HelloTimer is set, it can safely use t.GetHelloTimer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HelloTimer == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_State) GetHelloTimer() uint64 {
	if t == nil || t.HelloTimer == nil {
		return 0
	}
	return *t.HelloTimer
}

// GetSuppressTlvAdvertisement retrieves the value of the leaf SuppressTlvAdvertisement from the OpenconfigLldp_Lldp_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SuppressTlvAdvertisement is set, it can safely use t.GetSuppressTlvAdvertisement()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SuppressTlvAdvertisement == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_State) GetSuppressTlvAdvertisement() []E_OpenconfigLldpTypes_LLDP_TLV {
	if t == nil || t.SuppressTlvAdvertisement == nil {
		return nil
	}
	return t.SuppressTlvAdvertisement
}

// GetSystemDescription retrieves the value of the leaf SystemDescription from the OpenconfigLldp_Lldp_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SystemDescription is set, it can safely use t.GetSystemDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SystemDescription == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_State) GetSystemDescription() string {
	if t == nil || t.SystemDescription == nil {
		return ""
	}
	return *t.SystemDescription
}

// GetSystemName retrieves the value of the leaf SystemName from the OpenconfigLldp_Lldp_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SystemName is set, it can safely use t.GetSystemName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SystemName == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_State) GetSystemName() string {
	if t == nil || t.SystemName == nil {
		return ""
	}
	return *t.SystemName
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLldp_Lldp_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLldp_Lldp_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLldp_Lldp_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigLldp_Lldp_State_Counters represents the /openconfig-lldp/lldp/state/counters YANG schema element.
type OpenconfigLldp_Lldp_State_Counters struct {
	ΛMetadata       []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	EntriesAgedOut  *uint64           `path:"entries-aged-out" module:"openconfig-lldp"`
	ΛEntriesAgedOut []ygot.Annotation `path:"@entries-aged-out" ygotAnnotation:"true"`
	FrameDiscard    *uint64           `path:"frame-discard" module:"openconfig-lldp"`
	ΛFrameDiscard   []ygot.Annotation `path:"@frame-discard" ygotAnnotation:"true"`
	FrameErrorIn    *uint64           `path:"frame-error-in" module:"openconfig-lldp"`
	ΛFrameErrorIn   []ygot.Annotation `path:"@frame-error-in" ygotAnnotation:"true"`
	FrameIn         *uint64           `path:"frame-in" module:"openconfig-lldp"`
	ΛFrameIn        []ygot.Annotation `path:"@frame-in" ygotAnnotation:"true"`
	FrameOut        *uint64           `path:"frame-out" module:"openconfig-lldp"`
	ΛFrameOut       []ygot.Annotation `path:"@frame-out" ygotAnnotation:"true"`
	LastClear       *string           `path:"last-clear" module:"openconfig-lldp"`
	ΛLastClear      []ygot.Annotation `path:"@last-clear" ygotAnnotation:"true"`
	TlvAccepted     *uint64           `path:"tlv-accepted" module:"openconfig-lldp"`
	ΛTlvAccepted    []ygot.Annotation `path:"@tlv-accepted" ygotAnnotation:"true"`
	TlvDiscard      *uint64           `path:"tlv-discard" module:"openconfig-lldp"`
	ΛTlvDiscard     []ygot.Annotation `path:"@tlv-discard" ygotAnnotation:"true"`
	TlvUnknown      *uint64           `path:"tlv-unknown" module:"openconfig-lldp"`
	ΛTlvUnknown     []ygot.Annotation `path:"@tlv-unknown" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigLldp_Lldp_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigLldp_Lldp_State_Counters) IsYANGGoStruct() {}

// GetEntriesAgedOut retrieves the value of the leaf EntriesAgedOut from the OpenconfigLldp_Lldp_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EntriesAgedOut is set, it can safely use t.GetEntriesAgedOut()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EntriesAgedOut == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_State_Counters) GetEntriesAgedOut() uint64 {
	if t == nil || t.EntriesAgedOut == nil {
		return 0
	}
	return *t.EntriesAgedOut
}

// GetFrameDiscard retrieves the value of the leaf FrameDiscard from the OpenconfigLldp_Lldp_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FrameDiscard is set, it can safely use t.GetFrameDiscard()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FrameDiscard == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_State_Counters) GetFrameDiscard() uint64 {
	if t == nil || t.FrameDiscard == nil {
		return 0
	}
	return *t.FrameDiscard
}

// GetFrameErrorIn retrieves the value of the leaf FrameErrorIn from the OpenconfigLldp_Lldp_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FrameErrorIn is set, it can safely use t.GetFrameErrorIn()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FrameErrorIn == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_State_Counters) GetFrameErrorIn() uint64 {
	if t == nil || t.FrameErrorIn == nil {
		return 0
	}
	return *t.FrameErrorIn
}

// GetFrameIn retrieves the value of the leaf FrameIn from the OpenconfigLldp_Lldp_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FrameIn is set, it can safely use t.GetFrameIn()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FrameIn == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_State_Counters) GetFrameIn() uint64 {
	if t == nil || t.FrameIn == nil {
		return 0
	}
	return *t.FrameIn
}

// GetFrameOut retrieves the value of the leaf FrameOut from the OpenconfigLldp_Lldp_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FrameOut is set, it can safely use t.GetFrameOut()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FrameOut == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_State_Counters) GetFrameOut() uint64 {
	if t == nil || t.FrameOut == nil {
		return 0
	}
	return *t.FrameOut
}

// GetLastClear retrieves the value of the leaf LastClear from the OpenconfigLldp_Lldp_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LastClear is set, it can safely use t.GetLastClear()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LastClear == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_State_Counters) GetLastClear() string {
	if t == nil || t.LastClear == nil {
		return ""
	}
	return *t.LastClear
}

// GetTlvAccepted retrieves the value of the leaf TlvAccepted from the OpenconfigLldp_Lldp_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TlvAccepted is set, it can safely use t.GetTlvAccepted()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TlvAccepted == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_State_Counters) GetTlvAccepted() uint64 {
	if t == nil || t.TlvAccepted == nil {
		return 0
	}
	return *t.TlvAccepted
}

// GetTlvDiscard retrieves the value of the leaf TlvDiscard from the OpenconfigLldp_Lldp_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TlvDiscard is set, it can safely use t.GetTlvDiscard()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TlvDiscard == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_State_Counters) GetTlvDiscard() uint64 {
	if t == nil || t.TlvDiscard == nil {
		return 0
	}
	return *t.TlvDiscard
}

// GetTlvUnknown retrieves the value of the leaf TlvUnknown from the OpenconfigLldp_Lldp_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TlvUnknown is set, it can safely use t.GetTlvUnknown()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TlvUnknown == nil'
// before retrieving the leaf's value.
func (t *OpenconfigLldp_Lldp_State_Counters) GetTlvUnknown() uint64 {
	if t == nil || t.TlvUnknown == nil {
		return 0
	}
	return *t.TlvUnknown
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigLldp_Lldp_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigLldp_Lldp_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigLldp_Lldp_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components represents the /openconfig-platform/components YANG schema element.
type OpenconfigPlatform_Components struct {
	ΛMetadata  []ygot.Annotation                                   `path:"@" ygotAnnotation:"true"`
	Component  map[string]*OpenconfigPlatform_Components_Component `path:"component" module:"openconfig-platform"`
	ΛComponent []ygot.Annotation                                   `path:"@component" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components) IsYANGGoStruct() {}

// NewComponent creates a new entry in the Component list of the
// OpenconfigPlatform_Components struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigPlatform_Components) NewComponent(Name string) (*OpenconfigPlatform_Components_Component, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Component == nil {
		t.Component = make(map[string]*OpenconfigPlatform_Components_Component)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Component[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Component", key)
	}

	t.Component[key] = &OpenconfigPlatform_Components_Component{
		Name: &Name,
	}

	return t.Component[key], nil
}

// RenameComponent renames an entry in the list Component within
// the OpenconfigPlatform_Components struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigPlatform_Components) RenameComponent(oldK, newK string) error {
	if _, ok := t.Component[newK]; ok {
		return fmt.Errorf("key %v already exists in Component", newK)
	}

	e, ok := t.Component[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Component", oldK)
	}
	e.Name = &newK

	t.Component[newK] = e
	delete(t.Component, oldK)
	return nil
}

// GetOrCreateComponent retrieves the value with the specified keys from
// the receiver OpenconfigPlatform_Components. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigPlatform_Components) GetOrCreateComponent(Name string) *OpenconfigPlatform_Components_Component {

	key := Name

	if v, ok := t.Component[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewComponent(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateComponent got unexpected error: %v", err))
	}
	return v
}

// GetComponent retrieves the value with the specified key from
// the Component map field of OpenconfigPlatform_Components. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigPlatform_Components) GetComponent(Name string) *OpenconfigPlatform_Components_Component {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Component[key]; ok {
		return lm
	}
	return nil
}

// AppendComponent appends the supplied OpenconfigPlatform_Components_Component struct to the
// list Component of OpenconfigPlatform_Components. If the key value(s) specified in
// the supplied OpenconfigPlatform_Components_Component already exist in the list, an error is
// returned.
func (t *OpenconfigPlatform_Components) AppendComponent(v *OpenconfigPlatform_Components_Component) error {
	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Component == nil {
		t.Component = make(map[string]*OpenconfigPlatform_Components_Component)
	}

	if _, ok := t.Component[key]; ok {
		return fmt.Errorf("duplicate key for list Component %v", key)
	}

	t.Component[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigPlatform_Components_Component represents the /openconfig-platform/components/component YANG schema element.
type OpenconfigPlatform_Components_Component struct {
	ΛMetadata          []ygot.Annotation                                          `path:"@" ygotAnnotation:"true"`
	Backplane          *OpenconfigPlatform_Components_Component_Backplane         `path:"backplane" module:"openconfig-platform"`
	ΛBackplane         []ygot.Annotation                                          `path:"@backplane" ygotAnnotation:"true"`
	Chassis            *OpenconfigPlatform_Components_Component_Chassis           `path:"chassis" module:"openconfig-platform"`
	ΛChassis           []ygot.Annotation                                          `path:"@chassis" ygotAnnotation:"true"`
	Config             *OpenconfigPlatform_Components_Component_Config            `path:"config" module:"openconfig-platform"`
	ΛConfig            []ygot.Annotation                                          `path:"@config" ygotAnnotation:"true"`
	Cpu                *OpenconfigPlatform_Components_Component_Cpu               `path:"cpu" module:"openconfig-platform"`
	ΛCpu               []ygot.Annotation                                          `path:"@cpu" ygotAnnotation:"true"`
	Fabric             *OpenconfigPlatform_Components_Component_Fabric            `path:"fabric" module:"openconfig-platform"`
	ΛFabric            []ygot.Annotation                                          `path:"@fabric" ygotAnnotation:"true"`
	Fan                *OpenconfigPlatform_Components_Component_Fan               `path:"fan" module:"openconfig-platform"`
	ΛFan               []ygot.Annotation                                          `path:"@fan" ygotAnnotation:"true"`
	IntegratedCircuit  *OpenconfigPlatform_Components_Component_IntegratedCircuit `path:"integrated-circuit" module:"openconfig-platform"`
	ΛIntegratedCircuit []ygot.Annotation                                          `path:"@integrated-circuit" ygotAnnotation:"true"`
	Name               *string                                                    `path:"name" module:"openconfig-platform"`
	ΛName              []ygot.Annotation                                          `path:"@name" ygotAnnotation:"true"`
	OpticalChannel     *OpenconfigPlatform_Components_Component_OpticalChannel    `path:"optical-channel" module:"openconfig-terminal-device"`
	ΛOpticalChannel    []ygot.Annotation                                          `path:"@optical-channel" ygotAnnotation:"true"`
	Port               *OpenconfigPlatform_Components_Component_Port              `path:"port" module:"openconfig-platform"`
	ΛPort              []ygot.Annotation                                          `path:"@port" ygotAnnotation:"true"`
	PowerSupply        *OpenconfigPlatform_Components_Component_PowerSupply       `path:"power-supply" module:"openconfig-platform"`
	ΛPowerSupply       []ygot.Annotation                                          `path:"@power-supply" ygotAnnotation:"true"`
	Properties         *OpenconfigPlatform_Components_Component_Properties        `path:"properties" module:"openconfig-platform"`
	ΛProperties        []ygot.Annotation                                          `path:"@properties" ygotAnnotation:"true"`
	State              *OpenconfigPlatform_Components_Component_State             `path:"state" module:"openconfig-platform"`
	ΛState             []ygot.Annotation                                          `path:"@state" ygotAnnotation:"true"`
	Storage            *OpenconfigPlatform_Components_Component_Storage           `path:"storage" module:"openconfig-platform"`
	ΛStorage           []ygot.Annotation                                          `path:"@storage" ygotAnnotation:"true"`
	Subcomponents      *OpenconfigPlatform_Components_Component_Subcomponents     `path:"subcomponents" module:"openconfig-platform"`
	ΛSubcomponents     []ygot.Annotation                                          `path:"@subcomponents" ygotAnnotation:"true"`
	Transceiver        *OpenconfigPlatform_Components_Component_Transceiver       `path:"transceiver" module:"openconfig-platform-transceiver"`
	ΛTransceiver       []ygot.Annotation                                          `path:"@transceiver" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component) IsYANGGoStruct() {}

// GetOrCreateBackplane retrieves the value of the Backplane field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateBackplane() *OpenconfigPlatform_Components_Component_Backplane {
	if t.Backplane != nil {
		return t.Backplane
	}
	t.Backplane = &OpenconfigPlatform_Components_Component_Backplane{}
	return t.Backplane
}

// GetOrCreateChassis retrieves the value of the Chassis field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateChassis() *OpenconfigPlatform_Components_Component_Chassis {
	if t.Chassis != nil {
		return t.Chassis
	}
	t.Chassis = &OpenconfigPlatform_Components_Component_Chassis{}
	return t.Chassis
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Config{}
	return t.Config
}

// GetOrCreateCpu retrieves the value of the Cpu field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateCpu() *OpenconfigPlatform_Components_Component_Cpu {
	if t.Cpu != nil {
		return t.Cpu
	}
	t.Cpu = &OpenconfigPlatform_Components_Component_Cpu{}
	return t.Cpu
}

// GetOrCreateFabric retrieves the value of the Fabric field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateFabric() *OpenconfigPlatform_Components_Component_Fabric {
	if t.Fabric != nil {
		return t.Fabric
	}
	t.Fabric = &OpenconfigPlatform_Components_Component_Fabric{}
	return t.Fabric
}

// GetOrCreateFan retrieves the value of the Fan field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateFan() *OpenconfigPlatform_Components_Component_Fan {
	if t.Fan != nil {
		return t.Fan
	}
	t.Fan = &OpenconfigPlatform_Components_Component_Fan{}
	return t.Fan
}

// GetOrCreateIntegratedCircuit retrieves the value of the IntegratedCircuit field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateIntegratedCircuit() *OpenconfigPlatform_Components_Component_IntegratedCircuit {
	if t.IntegratedCircuit != nil {
		return t.IntegratedCircuit
	}
	t.IntegratedCircuit = &OpenconfigPlatform_Components_Component_IntegratedCircuit{}
	return t.IntegratedCircuit
}

// GetOrCreateOpticalChannel retrieves the value of the OpticalChannel field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateOpticalChannel() *OpenconfigPlatform_Components_Component_OpticalChannel {
	if t.OpticalChannel != nil {
		return t.OpticalChannel
	}
	t.OpticalChannel = &OpenconfigPlatform_Components_Component_OpticalChannel{}
	return t.OpticalChannel
}

// GetOrCreatePort retrieves the value of the Port field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreatePort() *OpenconfigPlatform_Components_Component_Port {
	if t.Port != nil {
		return t.Port
	}
	t.Port = &OpenconfigPlatform_Components_Component_Port{}
	return t.Port
}

// GetOrCreatePowerSupply retrieves the value of the PowerSupply field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreatePowerSupply() *OpenconfigPlatform_Components_Component_PowerSupply {
	if t.PowerSupply != nil {
		return t.PowerSupply
	}
	t.PowerSupply = &OpenconfigPlatform_Components_Component_PowerSupply{}
	return t.PowerSupply
}

// GetOrCreateProperties retrieves the value of the Properties field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateProperties() *OpenconfigPlatform_Components_Component_Properties {
	if t.Properties != nil {
		return t.Properties
	}
	t.Properties = &OpenconfigPlatform_Components_Component_Properties{}
	return t.Properties
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateState() *OpenconfigPlatform_Components_Component_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_State{}
	return t.State
}

// GetOrCreateStorage retrieves the value of the Storage field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateStorage() *OpenconfigPlatform_Components_Component_Storage {
	if t.Storage != nil {
		return t.Storage
	}
	t.Storage = &OpenconfigPlatform_Components_Component_Storage{}
	return t.Storage
}

// GetOrCreateSubcomponents retrieves the value of the Subcomponents field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateSubcomponents() *OpenconfigPlatform_Components_Component_Subcomponents {
	if t.Subcomponents != nil {
		return t.Subcomponents
	}
	t.Subcomponents = &OpenconfigPlatform_Components_Component_Subcomponents{}
	return t.Subcomponents
}

// GetOrCreateTransceiver retrieves the value of the Transceiver field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component) GetOrCreateTransceiver() *OpenconfigPlatform_Components_Component_Transceiver {
	if t.Transceiver != nil {
		return t.Transceiver
	}
	t.Transceiver = &OpenconfigPlatform_Components_Component_Transceiver{}
	return t.Transceiver
}

// GetBackplane returns the value of the Backplane struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Backplane is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetBackplane() *OpenconfigPlatform_Components_Component_Backplane {
	if t != nil && t.Backplane != nil {
		return t.Backplane
	}
	return nil
}

// GetChassis returns the value of the Chassis struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Chassis is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetChassis() *OpenconfigPlatform_Components_Component_Chassis {
	if t != nil && t.Chassis != nil {
		return t.Chassis
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetConfig() *OpenconfigPlatform_Components_Component_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetCpu returns the value of the Cpu struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Cpu is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetCpu() *OpenconfigPlatform_Components_Component_Cpu {
	if t != nil && t.Cpu != nil {
		return t.Cpu
	}
	return nil
}

// GetFabric returns the value of the Fabric struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Fabric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetFabric() *OpenconfigPlatform_Components_Component_Fabric {
	if t != nil && t.Fabric != nil {
		return t.Fabric
	}
	return nil
}

// GetFan returns the value of the Fan struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Fan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetFan() *OpenconfigPlatform_Components_Component_Fan {
	if t != nil && t.Fan != nil {
		return t.Fan
	}
	return nil
}

// GetIntegratedCircuit returns the value of the IntegratedCircuit struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field IntegratedCircuit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetIntegratedCircuit() *OpenconfigPlatform_Components_Component_IntegratedCircuit {
	if t != nil && t.IntegratedCircuit != nil {
		return t.IntegratedCircuit
	}
	return nil
}

// GetOpticalChannel returns the value of the OpticalChannel struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field OpticalChannel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetOpticalChannel() *OpenconfigPlatform_Components_Component_OpticalChannel {
	if t != nil && t.OpticalChannel != nil {
		return t.OpticalChannel
	}
	return nil
}

// GetPort returns the value of the Port struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Port is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetPort() *OpenconfigPlatform_Components_Component_Port {
	if t != nil && t.Port != nil {
		return t.Port
	}
	return nil
}

// GetPowerSupply returns the value of the PowerSupply struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field PowerSupply is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetPowerSupply() *OpenconfigPlatform_Components_Component_PowerSupply {
	if t != nil && t.PowerSupply != nil {
		return t.PowerSupply
	}
	return nil
}

// GetProperties returns the value of the Properties struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Properties is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetProperties() *OpenconfigPlatform_Components_Component_Properties {
	if t != nil && t.Properties != nil {
		return t.Properties
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetState() *OpenconfigPlatform_Components_Component_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetStorage returns the value of the Storage struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Storage is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetStorage() *OpenconfigPlatform_Components_Component_Storage {
	if t != nil && t.Storage != nil {
		return t.Storage
	}
	return nil
}

// GetSubcomponents returns the value of the Subcomponents struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Subcomponents is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetSubcomponents() *OpenconfigPlatform_Components_Component_Subcomponents {
	if t != nil && t.Subcomponents != nil {
		return t.Subcomponents
	}
	return nil
}

// GetTransceiver returns the value of the Transceiver struct pointer
// from OpenconfigPlatform_Components_Component. If the receiver or the field Transceiver is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component) GetTransceiver() *OpenconfigPlatform_Components_Component_Transceiver {
	if t != nil && t.Transceiver != nil {
		return t.Transceiver
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the OpenconfigPlatform_Components_Component
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// ΛListKeyMap returns the keys of the OpenconfigPlatform_Components_Component struct, which is a YANG list entry.
func (t *OpenconfigPlatform_Components_Component) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Backplane represents the /openconfig-platform/components/component/backplane YANG schema element.
type OpenconfigPlatform_Components_Component_Backplane struct {
	ΛMetadata []ygot.Annotation                                         `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Backplane_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                         `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Backplane_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                         `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Backplane implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Backplane) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Backplane) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Backplane_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Backplane_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Backplane) GetOrCreateState() *OpenconfigPlatform_Components_Component_Backplane_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Backplane_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Backplane. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Backplane) GetConfig() *OpenconfigPlatform_Components_Component_Backplane_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Backplane. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Backplane) GetState() *OpenconfigPlatform_Components_Component_Backplane_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Backplane) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Backplane"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Backplane) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Backplane_Config represents the /openconfig-platform/components/component/backplane/config YANG schema element.
type OpenconfigPlatform_Components_Component_Backplane_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Backplane_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Backplane_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Backplane_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Backplane_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Backplane_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Backplane_State represents the /openconfig-platform/components/component/backplane/state YANG schema element.
type OpenconfigPlatform_Components_Component_Backplane_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Backplane_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Backplane_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Backplane_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Backplane_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Backplane_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Chassis represents the /openconfig-platform/components/component/chassis YANG schema element.
type OpenconfigPlatform_Components_Component_Chassis struct {
	ΛMetadata []ygot.Annotation                                       `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Chassis_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                       `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Chassis_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                       `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Chassis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Chassis) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Chassis) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Chassis_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Chassis_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Chassis) GetOrCreateState() *OpenconfigPlatform_Components_Component_Chassis_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Chassis_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Chassis. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Chassis) GetConfig() *OpenconfigPlatform_Components_Component_Chassis_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Chassis. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Chassis) GetState() *OpenconfigPlatform_Components_Component_Chassis_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Chassis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Chassis) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Chassis_Config represents the /openconfig-platform/components/component/chassis/config YANG schema element.
type OpenconfigPlatform_Components_Component_Chassis_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Chassis_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Chassis_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Chassis_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Chassis_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Chassis_State represents the /openconfig-platform/components/component/chassis/state YANG schema element.
type OpenconfigPlatform_Components_Component_Chassis_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Chassis_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Chassis_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Chassis_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Chassis_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Chassis_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Config represents the /openconfig-platform/components/component/config YANG schema element.
type OpenconfigPlatform_Components_Component_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Config) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the OpenconfigPlatform_Components_Component_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Config) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Cpu represents the /openconfig-platform/components/component/cpu YANG schema element.
type OpenconfigPlatform_Components_Component_Cpu struct {
	ΛMetadata []ygot.Annotation                                   `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Cpu_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                   `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Cpu_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                   `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Cpu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Cpu) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Cpu) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Cpu_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Cpu_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Cpu) GetOrCreateState() *OpenconfigPlatform_Components_Component_Cpu_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Cpu_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Cpu. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Cpu) GetConfig() *OpenconfigPlatform_Components_Component_Cpu_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Cpu. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Cpu) GetState() *OpenconfigPlatform_Components_Component_Cpu_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Cpu) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Cpu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Cpu) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Cpu_Config represents the /openconfig-platform/components/component/cpu/config YANG schema element.
type OpenconfigPlatform_Components_Component_Cpu_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Cpu_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Cpu_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Cpu_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Cpu_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Cpu_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Cpu_State represents the /openconfig-platform/components/component/cpu/state YANG schema element.
type OpenconfigPlatform_Components_Component_Cpu_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Cpu_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Cpu_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Cpu_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Cpu_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Cpu_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Fabric represents the /openconfig-platform/components/component/fabric YANG schema element.
type OpenconfigPlatform_Components_Component_Fabric struct {
	ΛMetadata []ygot.Annotation                                      `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Fabric_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                      `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Fabric_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fabric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fabric) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Fabric) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Fabric_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Fabric_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Fabric) GetOrCreateState() *OpenconfigPlatform_Components_Component_Fabric_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Fabric_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Fabric. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Fabric) GetConfig() *OpenconfigPlatform_Components_Component_Fabric_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Fabric. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Fabric) GetState() *OpenconfigPlatform_Components_Component_Fabric_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fabric) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fabric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fabric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Fabric_Config represents the /openconfig-platform/components/component/fabric/config YANG schema element.
type OpenconfigPlatform_Components_Component_Fabric_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fabric_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fabric_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fabric_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fabric_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fabric_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Fabric_State represents the /openconfig-platform/components/component/fabric/state YANG schema element.
type OpenconfigPlatform_Components_Component_Fabric_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fabric_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fabric_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fabric_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fabric_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fabric_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Fan represents the /openconfig-platform/components/component/fan YANG schema element.
type OpenconfigPlatform_Components_Component_Fan struct {
	ΛMetadata []ygot.Annotation                                   `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Fan_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                   `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Fan_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                   `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fan) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Fan) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Fan_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Fan_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Fan) GetOrCreateState() *OpenconfigPlatform_Components_Component_Fan_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Fan_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Fan. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Fan) GetConfig() *OpenconfigPlatform_Components_Component_Fan_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Fan. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Fan) GetState() *OpenconfigPlatform_Components_Component_Fan_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fan) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Fan_Config represents the /openconfig-platform/components/component/fan/config YANG schema element.
type OpenconfigPlatform_Components_Component_Fan_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fan_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fan_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fan_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fan_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fan_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Fan_State represents the /openconfig-platform/components/component/fan/state YANG schema element.
type OpenconfigPlatform_Components_Component_Fan_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Fan_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Fan_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Fan_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Fan_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Fan_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit represents the /openconfig-platform/components/component/integrated-circuit YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit struct {
	ΛMetadata []ygot.Annotation                                                 `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                                 `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_IntegratedCircuit_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                                 `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_IntegratedCircuit_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) GetOrCreateState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_IntegratedCircuit_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) GetConfig() *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_IntegratedCircuit. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) GetState() *OpenconfigPlatform_Components_Component_IntegratedCircuit_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_Config represents the /openconfig-platform/components/component/integrated-circuit/config YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_IntegratedCircuit_State represents the /openconfig-platform/components/component/integrated-circuit/state YANG schema element.
type OpenconfigPlatform_Components_Component_IntegratedCircuit_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_IntegratedCircuit_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_IntegratedCircuit_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_IntegratedCircuit_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_IntegratedCircuit_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_OpticalChannel represents the /openconfig-platform/components/component/optical-channel YANG schema element.
type OpenconfigPlatform_Components_Component_OpticalChannel struct {
	ΛMetadata []ygot.Annotation                                              `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_OpticalChannel_Config `path:"config" module:"openconfig-terminal-device"`
	ΛConfig   []ygot.Annotation                                              `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_OpticalChannel_State  `path:"state" module:"openconfig-terminal-device"`
	ΛState    []ygot.Annotation                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_OpticalChannel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_OpticalChannel) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_OpticalChannel_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_OpticalChannel_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel) GetOrCreateState() *OpenconfigPlatform_Components_Component_OpticalChannel_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_OpticalChannel_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_OpticalChannel. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel) GetConfig() *OpenconfigPlatform_Components_Component_OpticalChannel_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_OpticalChannel. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel) GetState() *OpenconfigPlatform_Components_Component_OpticalChannel_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_OpticalChannel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_OpticalChannel_Config represents the /openconfig-platform/components/component/optical-channel/config YANG schema element.
type OpenconfigPlatform_Components_Component_OpticalChannel_Config struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Frequency          *uint64           `path:"frequency" module:"openconfig-terminal-device"`
	ΛFrequency         []ygot.Annotation `path:"@frequency" ygotAnnotation:"true"`
	LinePort           *string           `path:"line-port" module:"openconfig-terminal-device"`
	ΛLinePort          []ygot.Annotation `path:"@line-port" ygotAnnotation:"true"`
	OperationalMode    *uint16           `path:"operational-mode" module:"openconfig-terminal-device"`
	ΛOperationalMode   []ygot.Annotation `path:"@operational-mode" ygotAnnotation:"true"`
	TargetOutputPower  *float64          `path:"target-output-power" module:"openconfig-terminal-device"`
	ΛTargetOutputPower []ygot.Annotation `path:"@target-output-power" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_OpticalChannel_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_OpticalChannel_Config) IsYANGGoStruct() {}

// GetFrequency retrieves the value of the leaf Frequency from the OpenconfigPlatform_Components_Component_OpticalChannel_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Frequency is set, it can safely use t.GetFrequency()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Frequency == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_Config) GetFrequency() uint64 {
	if t == nil || t.Frequency == nil {
		return 0
	}
	return *t.Frequency
}

// GetLinePort retrieves the value of the leaf LinePort from the OpenconfigPlatform_Components_Component_OpticalChannel_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LinePort is set, it can safely use t.GetLinePort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LinePort == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_Config) GetLinePort() string {
	if t == nil || t.LinePort == nil {
		return ""
	}
	return *t.LinePort
}

// GetOperationalMode retrieves the value of the leaf OperationalMode from the OpenconfigPlatform_Components_Component_OpticalChannel_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OperationalMode is set, it can safely use t.GetOperationalMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OperationalMode == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_Config) GetOperationalMode() uint16 {
	if t == nil || t.OperationalMode == nil {
		return 0
	}
	return *t.OperationalMode
}

// GetTargetOutputPower retrieves the value of the leaf TargetOutputPower from the OpenconfigPlatform_Components_Component_OpticalChannel_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TargetOutputPower is set, it can safely use t.GetTargetOutputPower()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TargetOutputPower == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_Config) GetTargetOutputPower() float64 {
	if t == nil || t.TargetOutputPower == nil {
		return 0.0
	}
	return *t.TargetOutputPower
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_OpticalChannel_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_OpticalChannel_State represents the /openconfig-platform/components/component/optical-channel/state YANG schema element.
type OpenconfigPlatform_Components_Component_OpticalChannel_State struct {
	ΛMetadata                              []ygot.Annotation                                                                                   `path:"@" ygotAnnotation:"true"`
	ChromaticDispersion                    *OpenconfigPlatform_Components_Component_OpticalChannel_State_ChromaticDispersion                   `path:"chromatic-dispersion" module:"openconfig-terminal-device"`
	ΛChromaticDispersion                   []ygot.Annotation                                                                                   `path:"@chromatic-dispersion" ygotAnnotation:"true"`
	Frequency                              *uint64                                                                                             `path:"frequency" module:"openconfig-terminal-device"`
	ΛFrequency                             []ygot.Annotation                                                                                   `path:"@frequency" ygotAnnotation:"true"`
	GroupId                                *uint32                                                                                             `path:"group-id" module:"openconfig-terminal-device"`
	ΛGroupId                               []ygot.Annotation                                                                                   `path:"@group-id" ygotAnnotation:"true"`
	InputPower                             *OpenconfigPlatform_Components_Component_OpticalChannel_State_InputPower                            `path:"input-power" module:"openconfig-terminal-device"`
	ΛInputPower                            []ygot.Annotation                                                                                   `path:"@input-power" ygotAnnotation:"true"`
	LaserBiasCurrent                       *OpenconfigPlatform_Components_Component_OpticalChannel_State_LaserBiasCurrent                      `path:"laser-bias-current" module:"openconfig-terminal-device"`
	ΛLaserBiasCurrent                      []ygot.Annotation                                                                                   `path:"@laser-bias-current" ygotAnnotation:"true"`
	LinePort                               *string                                                                                             `path:"line-port" module:"openconfig-terminal-device"`
	ΛLinePort                              []ygot.Annotation                                                                                   `path:"@line-port" ygotAnnotation:"true"`
	OperationalMode                        *uint16                                                                                             `path:"operational-mode" module:"openconfig-terminal-device"`
	ΛOperationalMode                       []ygot.Annotation                                                                                   `path:"@operational-mode" ygotAnnotation:"true"`
	OutputPower                            *OpenconfigPlatform_Components_Component_OpticalChannel_State_OutputPower                           `path:"output-power" module:"openconfig-terminal-device"`
	ΛOutputPower                           []ygot.Annotation                                                                                   `path:"@output-power" ygotAnnotation:"true"`
	PolarizationDependentLoss              *OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationDependentLoss             `path:"polarization-dependent-loss" module:"openconfig-terminal-device"`
	ΛPolarizationDependentLoss             []ygot.Annotation                                                                                   `path:"@polarization-dependent-loss" ygotAnnotation:"true"`
	PolarizationModeDispersion             *OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationModeDispersion            `path:"polarization-mode-dispersion" module:"openconfig-terminal-device"`
	ΛPolarizationModeDispersion            []ygot.Annotation                                                                                   `path:"@polarization-mode-dispersion" ygotAnnotation:"true"`
	SecondOrderPolarizationModeDispersion  *OpenconfigPlatform_Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion `path:"second-order-polarization-mode-dispersion" module:"openconfig-terminal-device"`
	ΛSecondOrderPolarizationModeDispersion []ygot.Annotation                                                                                   `path:"@second-order-polarization-mode-dispersion" ygotAnnotation:"true"`
	TargetOutputPower                      *float64                                                                                            `path:"target-output-power" module:"openconfig-terminal-device"`
	ΛTargetOutputPower                     []ygot.Annotation                                                                                   `path:"@target-output-power" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_OpticalChannel_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_OpticalChannel_State) IsYANGGoStruct() {}

// GetOrCreateChromaticDispersion retrieves the value of the ChromaticDispersion field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State) GetOrCreateChromaticDispersion() *OpenconfigPlatform_Components_Component_OpticalChannel_State_ChromaticDispersion {
	if t.ChromaticDispersion != nil {
		return t.ChromaticDispersion
	}
	t.ChromaticDispersion = &OpenconfigPlatform_Components_Component_OpticalChannel_State_ChromaticDispersion{}
	return t.ChromaticDispersion
}

// GetOrCreateInputPower retrieves the value of the InputPower field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State) GetOrCreateInputPower() *OpenconfigPlatform_Components_Component_OpticalChannel_State_InputPower {
	if t.InputPower != nil {
		return t.InputPower
	}
	t.InputPower = &OpenconfigPlatform_Components_Component_OpticalChannel_State_InputPower{}
	return t.InputPower
}

// GetOrCreateLaserBiasCurrent retrieves the value of the LaserBiasCurrent field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State) GetOrCreateLaserBiasCurrent() *OpenconfigPlatform_Components_Component_OpticalChannel_State_LaserBiasCurrent {
	if t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	t.LaserBiasCurrent = &OpenconfigPlatform_Components_Component_OpticalChannel_State_LaserBiasCurrent{}
	return t.LaserBiasCurrent
}

// GetOrCreateOutputPower retrieves the value of the OutputPower field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State) GetOrCreateOutputPower() *OpenconfigPlatform_Components_Component_OpticalChannel_State_OutputPower {
	if t.OutputPower != nil {
		return t.OutputPower
	}
	t.OutputPower = &OpenconfigPlatform_Components_Component_OpticalChannel_State_OutputPower{}
	return t.OutputPower
}

// GetOrCreatePolarizationDependentLoss retrieves the value of the PolarizationDependentLoss field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State) GetOrCreatePolarizationDependentLoss() *OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationDependentLoss {
	if t.PolarizationDependentLoss != nil {
		return t.PolarizationDependentLoss
	}
	t.PolarizationDependentLoss = &OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationDependentLoss{}
	return t.PolarizationDependentLoss
}

// GetOrCreatePolarizationModeDispersion retrieves the value of the PolarizationModeDispersion field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State) GetOrCreatePolarizationModeDispersion() *OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationModeDispersion {
	if t.PolarizationModeDispersion != nil {
		return t.PolarizationModeDispersion
	}
	t.PolarizationModeDispersion = &OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationModeDispersion{}
	return t.PolarizationModeDispersion
}

// GetOrCreateSecondOrderPolarizationModeDispersion retrieves the value of the SecondOrderPolarizationModeDispersion field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State) GetOrCreateSecondOrderPolarizationModeDispersion() *OpenconfigPlatform_Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion {
	if t.SecondOrderPolarizationModeDispersion != nil {
		return t.SecondOrderPolarizationModeDispersion
	}
	t.SecondOrderPolarizationModeDispersion = &OpenconfigPlatform_Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion{}
	return t.SecondOrderPolarizationModeDispersion
}

// GetChromaticDispersion returns the value of the ChromaticDispersion struct pointer
// from OpenconfigPlatform_Components_Component_OpticalChannel_State. If the receiver or the field ChromaticDispersion is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State) GetChromaticDispersion() *OpenconfigPlatform_Components_Component_OpticalChannel_State_ChromaticDispersion {
	if t != nil && t.ChromaticDispersion != nil {
		return t.ChromaticDispersion
	}
	return nil
}

// GetInputPower returns the value of the InputPower struct pointer
// from OpenconfigPlatform_Components_Component_OpticalChannel_State. If the receiver or the field InputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State) GetInputPower() *OpenconfigPlatform_Components_Component_OpticalChannel_State_InputPower {
	if t != nil && t.InputPower != nil {
		return t.InputPower
	}
	return nil
}

// GetLaserBiasCurrent returns the value of the LaserBiasCurrent struct pointer
// from OpenconfigPlatform_Components_Component_OpticalChannel_State. If the receiver or the field LaserBiasCurrent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State) GetLaserBiasCurrent() *OpenconfigPlatform_Components_Component_OpticalChannel_State_LaserBiasCurrent {
	if t != nil && t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	return nil
}

// GetOutputPower returns the value of the OutputPower struct pointer
// from OpenconfigPlatform_Components_Component_OpticalChannel_State. If the receiver or the field OutputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State) GetOutputPower() *OpenconfigPlatform_Components_Component_OpticalChannel_State_OutputPower {
	if t != nil && t.OutputPower != nil {
		return t.OutputPower
	}
	return nil
}

// GetPolarizationDependentLoss returns the value of the PolarizationDependentLoss struct pointer
// from OpenconfigPlatform_Components_Component_OpticalChannel_State. If the receiver or the field PolarizationDependentLoss is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State) GetPolarizationDependentLoss() *OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationDependentLoss {
	if t != nil && t.PolarizationDependentLoss != nil {
		return t.PolarizationDependentLoss
	}
	return nil
}

// GetPolarizationModeDispersion returns the value of the PolarizationModeDispersion struct pointer
// from OpenconfigPlatform_Components_Component_OpticalChannel_State. If the receiver or the field PolarizationModeDispersion is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State) GetPolarizationModeDispersion() *OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationModeDispersion {
	if t != nil && t.PolarizationModeDispersion != nil {
		return t.PolarizationModeDispersion
	}
	return nil
}

// GetSecondOrderPolarizationModeDispersion returns the value of the SecondOrderPolarizationModeDispersion struct pointer
// from OpenconfigPlatform_Components_Component_OpticalChannel_State. If the receiver or the field SecondOrderPolarizationModeDispersion is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State) GetSecondOrderPolarizationModeDispersion() *OpenconfigPlatform_Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion {
	if t != nil && t.SecondOrderPolarizationModeDispersion != nil {
		return t.SecondOrderPolarizationModeDispersion
	}
	return nil
}

// GetFrequency retrieves the value of the leaf Frequency from the OpenconfigPlatform_Components_Component_OpticalChannel_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Frequency is set, it can safely use t.GetFrequency()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Frequency == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State) GetFrequency() uint64 {
	if t == nil || t.Frequency == nil {
		return 0
	}
	return *t.Frequency
}

// GetGroupId retrieves the value of the leaf GroupId from the OpenconfigPlatform_Components_Component_OpticalChannel_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if GroupId is set, it can safely use t.GetGroupId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.GroupId == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State) GetGroupId() uint32 {
	if t == nil || t.GroupId == nil {
		return 0
	}
	return *t.GroupId
}

// GetLinePort retrieves the value of the leaf LinePort from the OpenconfigPlatform_Components_Component_OpticalChannel_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LinePort is set, it can safely use t.GetLinePort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LinePort == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State) GetLinePort() string {
	if t == nil || t.LinePort == nil {
		return ""
	}
	return *t.LinePort
}

// GetOperationalMode retrieves the value of the leaf OperationalMode from the OpenconfigPlatform_Components_Component_OpticalChannel_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OperationalMode is set, it can safely use t.GetOperationalMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OperationalMode == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State) GetOperationalMode() uint16 {
	if t == nil || t.OperationalMode == nil {
		return 0
	}
	return *t.OperationalMode
}

// GetTargetOutputPower retrieves the value of the leaf TargetOutputPower from the OpenconfigPlatform_Components_Component_OpticalChannel_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TargetOutputPower is set, it can safely use t.GetTargetOutputPower()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TargetOutputPower == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State) GetTargetOutputPower() float64 {
	if t == nil || t.TargetOutputPower == nil {
		return 0.0
	}
	return *t.TargetOutputPower
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_OpticalChannel_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_OpticalChannel_State_ChromaticDispersion represents the /openconfig-platform/components/component/optical-channel/state/chromatic-dispersion YANG schema element.
type OpenconfigPlatform_Components_Component_OpticalChannel_State_ChromaticDispersion struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_OpticalChannel_State_ChromaticDispersion implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_OpticalChannel_State_ChromaticDispersion) IsYANGGoStruct() {
}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigPlatform_Components_Component_OpticalChannel_State_ChromaticDispersion
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_ChromaticDispersion) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigPlatform_Components_Component_OpticalChannel_State_ChromaticDispersion
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_ChromaticDispersion) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigPlatform_Components_Component_OpticalChannel_State_ChromaticDispersion
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_ChromaticDispersion) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigPlatform_Components_Component_OpticalChannel_State_ChromaticDispersion
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_ChromaticDispersion) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigPlatform_Components_Component_OpticalChannel_State_ChromaticDispersion
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_ChromaticDispersion) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigPlatform_Components_Component_OpticalChannel_State_ChromaticDispersion
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_ChromaticDispersion) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigPlatform_Components_Component_OpticalChannel_State_ChromaticDispersion
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_ChromaticDispersion) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_ChromaticDispersion) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_OpticalChannel_State_ChromaticDispersion"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_ChromaticDispersion) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_OpticalChannel_State_InputPower represents the /openconfig-platform/components/component/optical-channel/state/input-power YANG schema element.
type OpenconfigPlatform_Components_Component_OpticalChannel_State_InputPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_OpticalChannel_State_InputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_OpticalChannel_State_InputPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigPlatform_Components_Component_OpticalChannel_State_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_InputPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigPlatform_Components_Component_OpticalChannel_State_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_InputPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigPlatform_Components_Component_OpticalChannel_State_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_InputPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigPlatform_Components_Component_OpticalChannel_State_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_InputPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigPlatform_Components_Component_OpticalChannel_State_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_InputPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigPlatform_Components_Component_OpticalChannel_State_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_InputPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigPlatform_Components_Component_OpticalChannel_State_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_InputPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_InputPower) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_OpticalChannel_State_InputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_InputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_OpticalChannel_State_LaserBiasCurrent represents the /openconfig-platform/components/component/optical-channel/state/laser-bias-current YANG schema element.
type OpenconfigPlatform_Components_Component_OpticalChannel_State_LaserBiasCurrent struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_OpticalChannel_State_LaserBiasCurrent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_OpticalChannel_State_LaserBiasCurrent) IsYANGGoStruct() {
}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigPlatform_Components_Component_OpticalChannel_State_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_LaserBiasCurrent) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigPlatform_Components_Component_OpticalChannel_State_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_LaserBiasCurrent) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigPlatform_Components_Component_OpticalChannel_State_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_LaserBiasCurrent) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigPlatform_Components_Component_OpticalChannel_State_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_LaserBiasCurrent) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigPlatform_Components_Component_OpticalChannel_State_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_LaserBiasCurrent) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigPlatform_Components_Component_OpticalChannel_State_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_LaserBiasCurrent) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigPlatform_Components_Component_OpticalChannel_State_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_LaserBiasCurrent) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_LaserBiasCurrent) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_OpticalChannel_State_LaserBiasCurrent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_LaserBiasCurrent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_OpticalChannel_State_OutputPower represents the /openconfig-platform/components/component/optical-channel/state/output-power YANG schema element.
type OpenconfigPlatform_Components_Component_OpticalChannel_State_OutputPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_OpticalChannel_State_OutputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_OpticalChannel_State_OutputPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigPlatform_Components_Component_OpticalChannel_State_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_OutputPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigPlatform_Components_Component_OpticalChannel_State_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_OutputPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigPlatform_Components_Component_OpticalChannel_State_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_OutputPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigPlatform_Components_Component_OpticalChannel_State_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_OutputPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigPlatform_Components_Component_OpticalChannel_State_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_OutputPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigPlatform_Components_Component_OpticalChannel_State_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_OutputPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigPlatform_Components_Component_OpticalChannel_State_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_OutputPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_OutputPower) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_OpticalChannel_State_OutputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_OutputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationDependentLoss represents the /openconfig-platform/components/component/optical-channel/state/polarization-dependent-loss YANG schema element.
type OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationDependentLoss struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationDependentLoss implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationDependentLoss) IsYANGGoStruct() {
}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationDependentLoss
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationDependentLoss) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationDependentLoss
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationDependentLoss) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationDependentLoss
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationDependentLoss) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationDependentLoss
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationDependentLoss) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationDependentLoss
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationDependentLoss) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationDependentLoss
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationDependentLoss) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationDependentLoss
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationDependentLoss) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationDependentLoss) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationDependentLoss"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationDependentLoss) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationModeDispersion represents the /openconfig-platform/components/component/optical-channel/state/polarization-mode-dispersion YANG schema element.
type OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationModeDispersion struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationModeDispersion implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationModeDispersion) IsYANGGoStruct() {
}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationModeDispersion
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationModeDispersion) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationModeDispersion
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationModeDispersion) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationModeDispersion
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationModeDispersion) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationModeDispersion
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationModeDispersion) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationModeDispersion
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationModeDispersion) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationModeDispersion
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationModeDispersion) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationModeDispersion
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationModeDispersion) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationModeDispersion) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationModeDispersion"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_PolarizationModeDispersion) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion represents the /openconfig-platform/components/component/optical-channel/state/second-order-polarization-mode-dispersion YANG schema element.
type OpenconfigPlatform_Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion) IsYANGGoStruct() {
}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigPlatform_Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigPlatform_Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigPlatform_Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigPlatform_Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigPlatform_Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigPlatform_Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigPlatform_Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_OpticalChannel_State_SecondOrderPolarizationModeDispersion) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Port represents the /openconfig-platform/components/component/port YANG schema element.
type OpenconfigPlatform_Components_Component_Port struct {
	ΛMetadata     []ygot.Annotation                                          `path:"@" ygotAnnotation:"true"`
	BreakoutMode  *OpenconfigPlatform_Components_Component_Port_BreakoutMode `path:"breakout-mode" module:"openconfig-platform-port"`
	ΛBreakoutMode []ygot.Annotation                                          `path:"@breakout-mode" ygotAnnotation:"true"`
	Config        *OpenconfigPlatform_Components_Component_Port_Config       `path:"config" module:"openconfig-platform"`
	ΛConfig       []ygot.Annotation                                          `path:"@config" ygotAnnotation:"true"`
	State         *OpenconfigPlatform_Components_Component_Port_State        `path:"state" module:"openconfig-platform"`
	ΛState        []ygot.Annotation                                          `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Port) IsYANGGoStruct() {}

// GetOrCreateBreakoutMode retrieves the value of the BreakoutMode field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Port) GetOrCreateBreakoutMode() *OpenconfigPlatform_Components_Component_Port_BreakoutMode {
	if t.BreakoutMode != nil {
		return t.BreakoutMode
	}
	t.BreakoutMode = &OpenconfigPlatform_Components_Component_Port_BreakoutMode{}
	return t.BreakoutMode
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Port) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Port_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Port_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Port) GetOrCreateState() *OpenconfigPlatform_Components_Component_Port_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Port_State{}
	return t.State
}

// GetBreakoutMode returns the value of the BreakoutMode struct pointer
// from OpenconfigPlatform_Components_Component_Port. If the receiver or the field BreakoutMode is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Port) GetBreakoutMode() *OpenconfigPlatform_Components_Component_Port_BreakoutMode {
	if t != nil && t.BreakoutMode != nil {
		return t.BreakoutMode
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Port. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Port) GetConfig() *OpenconfigPlatform_Components_Component_Port_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Port. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Port) GetState() *OpenconfigPlatform_Components_Component_Port_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Port_BreakoutMode represents the /openconfig-platform/components/component/port/breakout-mode YANG schema element.
type OpenconfigPlatform_Components_Component_Port_BreakoutMode struct {
	ΛMetadata []ygot.Annotation                                                 `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Port_BreakoutMode_Config `path:"config" module:"openconfig-platform-port"`
	ΛConfig   []ygot.Annotation                                                 `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Port_BreakoutMode_State  `path:"state" module:"openconfig-platform-port"`
	ΛState    []ygot.Annotation                                                 `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Port_BreakoutMode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Port_BreakoutMode) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Port_BreakoutMode) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Port_BreakoutMode_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Port_BreakoutMode_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Port_BreakoutMode) GetOrCreateState() *OpenconfigPlatform_Components_Component_Port_BreakoutMode_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Port_BreakoutMode_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Port_BreakoutMode. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Port_BreakoutMode) GetConfig() *OpenconfigPlatform_Components_Component_Port_BreakoutMode_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Port_BreakoutMode. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Port_BreakoutMode) GetState() *OpenconfigPlatform_Components_Component_Port_BreakoutMode_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port_BreakoutMode) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Port_BreakoutMode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Port_BreakoutMode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Port_BreakoutMode_Config represents the /openconfig-platform/components/component/port/breakout-mode/config YANG schema element.
type OpenconfigPlatform_Components_Component_Port_BreakoutMode_Config struct {
	ΛMetadata     []ygot.Annotation                     `path:"@" ygotAnnotation:"true"`
	ChannelSpeed  E_OpenconfigIfEthernet_ETHERNET_SPEED `path:"channel-speed" module:"openconfig-platform-port"`
	ΛChannelSpeed []ygot.Annotation                     `path:"@channel-speed" ygotAnnotation:"true"`
	NumChannels   *uint8                                `path:"num-channels" module:"openconfig-platform-port"`
	ΛNumChannels  []ygot.Annotation                     `path:"@num-channels" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Port_BreakoutMode_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Port_BreakoutMode_Config) IsYANGGoStruct() {}

// GetChannelSpeed retrieves the value of the leaf ChannelSpeed from the OpenconfigPlatform_Components_Component_Port_BreakoutMode_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ChannelSpeed is set, it can safely use t.GetChannelSpeed()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ChannelSpeed == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Port_BreakoutMode_Config) GetChannelSpeed() E_OpenconfigIfEthernet_ETHERNET_SPEED {
	if t == nil || t.ChannelSpeed == 0 {
		return 0
	}
	return t.ChannelSpeed
}

// GetNumChannels retrieves the value of the leaf NumChannels from the OpenconfigPlatform_Components_Component_Port_BreakoutMode_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NumChannels is set, it can safely use t.GetNumChannels()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NumChannels == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Port_BreakoutMode_Config) GetNumChannels() uint8 {
	if t == nil || t.NumChannels == nil {
		return 0
	}
	return *t.NumChannels
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port_BreakoutMode_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Port_BreakoutMode_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Port_BreakoutMode_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Port_BreakoutMode_State represents the /openconfig-platform/components/component/port/breakout-mode/state YANG schema element.
type OpenconfigPlatform_Components_Component_Port_BreakoutMode_State struct {
	ΛMetadata     []ygot.Annotation                     `path:"@" ygotAnnotation:"true"`
	ChannelSpeed  E_OpenconfigIfEthernet_ETHERNET_SPEED `path:"channel-speed" module:"openconfig-platform-port"`
	ΛChannelSpeed []ygot.Annotation                     `path:"@channel-speed" ygotAnnotation:"true"`
	NumChannels   *uint8                                `path:"num-channels" module:"openconfig-platform-port"`
	ΛNumChannels  []ygot.Annotation                     `path:"@num-channels" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Port_BreakoutMode_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Port_BreakoutMode_State) IsYANGGoStruct() {}

// GetChannelSpeed retrieves the value of the leaf ChannelSpeed from the OpenconfigPlatform_Components_Component_Port_BreakoutMode_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ChannelSpeed is set, it can safely use t.GetChannelSpeed()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ChannelSpeed == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Port_BreakoutMode_State) GetChannelSpeed() E_OpenconfigIfEthernet_ETHERNET_SPEED {
	if t == nil || t.ChannelSpeed == 0 {
		return 0
	}
	return t.ChannelSpeed
}

// GetNumChannels retrieves the value of the leaf NumChannels from the OpenconfigPlatform_Components_Component_Port_BreakoutMode_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NumChannels is set, it can safely use t.GetNumChannels()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NumChannels == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Port_BreakoutMode_State) GetNumChannels() uint8 {
	if t == nil || t.NumChannels == nil {
		return 0
	}
	return *t.NumChannels
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port_BreakoutMode_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Port_BreakoutMode_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Port_BreakoutMode_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Port_Config represents the /openconfig-platform/components/component/port/config YANG schema element.
type OpenconfigPlatform_Components_Component_Port_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Port_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Port_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Port_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Port_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Port_State represents the /openconfig-platform/components/component/port/state YANG schema element.
type OpenconfigPlatform_Components_Component_Port_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Port_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Port_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Port_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Port_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Port_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_PowerSupply represents the /openconfig-platform/components/component/power-supply YANG schema element.
type OpenconfigPlatform_Components_Component_PowerSupply struct {
	ΛMetadata []ygot.Annotation                                           `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_PowerSupply_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                           `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_PowerSupply_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                           `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_PowerSupply implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_PowerSupply) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_PowerSupply) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_PowerSupply_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_PowerSupply_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_PowerSupply) GetOrCreateState() *OpenconfigPlatform_Components_Component_PowerSupply_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_PowerSupply_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_PowerSupply. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_PowerSupply) GetConfig() *OpenconfigPlatform_Components_Component_PowerSupply_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_PowerSupply. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_PowerSupply) GetState() *OpenconfigPlatform_Components_Component_PowerSupply_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_PowerSupply) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_PowerSupply"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_PowerSupply) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_PowerSupply_Config represents the /openconfig-platform/components/component/power-supply/config YANG schema element.
type OpenconfigPlatform_Components_Component_PowerSupply_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_PowerSupply_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_PowerSupply_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_PowerSupply_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_PowerSupply_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_PowerSupply_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_PowerSupply_State represents the /openconfig-platform/components/component/power-supply/state YANG schema element.
type OpenconfigPlatform_Components_Component_PowerSupply_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_PowerSupply_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_PowerSupply_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_PowerSupply_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_PowerSupply_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_PowerSupply_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Properties represents the /openconfig-platform/components/component/properties YANG schema element.
type OpenconfigPlatform_Components_Component_Properties struct {
	ΛMetadata []ygot.Annotation                                                       `path:"@" ygotAnnotation:"true"`
	Property  map[string]*OpenconfigPlatform_Components_Component_Properties_Property `path:"property" module:"openconfig-platform"`
	ΛProperty []ygot.Annotation                                                       `path:"@property" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Properties implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Properties) IsYANGGoStruct() {}

// NewProperty creates a new entry in the Property list of the
// OpenconfigPlatform_Components_Component_Properties struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigPlatform_Components_Component_Properties) NewProperty(Name string) (*OpenconfigPlatform_Components_Component_Properties_Property, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Property == nil {
		t.Property = make(map[string]*OpenconfigPlatform_Components_Component_Properties_Property)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Property[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Property", key)
	}

	t.Property[key] = &OpenconfigPlatform_Components_Component_Properties_Property{
		Name: &Name,
	}

	return t.Property[key], nil
}

// RenameProperty renames an entry in the list Property within
// the OpenconfigPlatform_Components_Component_Properties struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigPlatform_Components_Component_Properties) RenameProperty(oldK, newK string) error {
	if _, ok := t.Property[newK]; ok {
		return fmt.Errorf("key %v already exists in Property", newK)
	}

	e, ok := t.Property[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Property", oldK)
	}
	e.Name = &newK

	t.Property[newK] = e
	delete(t.Property, oldK)
	return nil
}

// GetOrCreateProperty retrieves the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_Properties. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigPlatform_Components_Component_Properties) GetOrCreateProperty(Name string) *OpenconfigPlatform_Components_Component_Properties_Property {

	key := Name

	if v, ok := t.Property[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProperty(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProperty got unexpected error: %v", err))
	}
	return v
}

// GetProperty retrieves the value with the specified key from
// the Property map field of OpenconfigPlatform_Components_Component_Properties. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigPlatform_Components_Component_Properties) GetProperty(Name string) *OpenconfigPlatform_Components_Component_Properties_Property {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Property[key]; ok {
		return lm
	}
	return nil
}

// AppendProperty appends the supplied OpenconfigPlatform_Components_Component_Properties_Property struct to the
// list Property of OpenconfigPlatform_Components_Component_Properties. If the key value(s) specified in
// the supplied OpenconfigPlatform_Components_Component_Properties_Property already exist in the list, an error is
// returned.
func (t *OpenconfigPlatform_Components_Component_Properties) AppendProperty(v *OpenconfigPlatform_Components_Component_Properties_Property) error {
	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Property == nil {
		t.Property = make(map[string]*OpenconfigPlatform_Components_Component_Properties_Property)
	}

	if _, ok := t.Property[key]; ok {
		return fmt.Errorf("duplicate key for list Property %v", key)
	}

	t.Property[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Properties"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Properties) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Properties_Property represents the /openconfig-platform/components/component/properties/property YANG schema element.
type OpenconfigPlatform_Components_Component_Properties_Property struct {
	ΛMetadata []ygot.Annotation                                                   `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Properties_Property_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                                   `path:"@config" ygotAnnotation:"true"`
	Name      *string                                                             `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation                                                   `path:"@name" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Properties_Property_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                                   `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Properties_Property implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Properties_Property) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Properties_Property_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Properties_Property_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) GetOrCreateState() *OpenconfigPlatform_Components_Component_Properties_Property_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Properties_Property_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Properties_Property. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) GetConfig() *OpenconfigPlatform_Components_Component_Properties_Property_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Properties_Property. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) GetState() *OpenconfigPlatform_Components_Component_Properties_Property_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the OpenconfigPlatform_Components_Component_Properties_Property
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// ΛListKeyMap returns the keys of the OpenconfigPlatform_Components_Component_Properties_Property struct, which is a YANG list entry.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Properties_Property"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Properties_Property) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Properties_Property_Config represents the /openconfig-platform/components/component/properties/property/config YANG schema element.
type OpenconfigPlatform_Components_Component_Properties_Property_Config struct {
	ΛMetadata []ygot.Annotation                                                              `path:"@" ygotAnnotation:"true"`
	Name      *string                                                                        `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation                                                              `path:"@name" ygotAnnotation:"true"`
	Value     OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union `path:"value" module:"openconfig-platform"`
	ΛValue    []ygot.Annotation                                                              `path:"@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Properties_Property_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the OpenconfigPlatform_Components_Component_Properties_Property_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_Config) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetValue retrieves the value of the leaf Value from the OpenconfigPlatform_Components_Component_Properties_Property_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Value is set, it can safely use t.GetValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Value == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_Config) GetValue() OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Properties_Property_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-platform/components/component/properties/property/config/value within the YANG schema.
type OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface {
	Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union()
}

// OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Bool is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a bool value.
type OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Bool struct {
	Bool bool
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Bool
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Bool) Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {
}

// OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Float64 is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a float64 value.
type OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Float64 struct {
	Float64 float64
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Float64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Float64) Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {
}

// OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Int64 is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a int64 value.
type OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Int64 struct {
	Int64 int64
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Int64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Int64) Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {
}

// OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_String is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a string value.
type OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_String struct {
	String string
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_String
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_String) Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {
}

// OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Uint64 is used when /openconfig-platform/components/component/properties/property/config/value
// is to be set to a uint64 value.
type OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Uint64 struct {
	Uint64 uint64
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Uint64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Uint64) Is_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union() {
}

// To_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_Config) To_OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union(i interface{}) (OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union, error) {
	switch v := i.(type) {
	case bool:
		return &OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Bool{v}, nil
	case float64:
		return &OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Float64{v}, nil
	case int64:
		return &OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Int64{v}, nil
	case string:
		return &OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_String{v}, nil
	case uint64:
		return &OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union_Uint64{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigPlatform_Components_Component_Properties_Property_Config_Value_Union, unknown union type, got: %T, want any of [bool, float64, int64, string, uint64]", i, i)
	}
}

// OpenconfigPlatform_Components_Component_Properties_Property_State represents the /openconfig-platform/components/component/properties/property/state YANG schema element.
type OpenconfigPlatform_Components_Component_Properties_Property_State struct {
	ΛMetadata     []ygot.Annotation                                                             `path:"@" ygotAnnotation:"true"`
	Configurable  *bool                                                                         `path:"configurable" module:"openconfig-platform"`
	ΛConfigurable []ygot.Annotation                                                             `path:"@configurable" ygotAnnotation:"true"`
	Name          *string                                                                       `path:"name" module:"openconfig-platform"`
	ΛName         []ygot.Annotation                                                             `path:"@name" ygotAnnotation:"true"`
	Value         OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union `path:"value" module:"openconfig-platform"`
	ΛValue        []ygot.Annotation                                                             `path:"@value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Properties_Property_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State) IsYANGGoStruct() {}

// GetConfigurable retrieves the value of the leaf Configurable from the OpenconfigPlatform_Components_Component_Properties_Property_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Configurable is set, it can safely use t.GetConfigurable()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Configurable == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_State) GetConfigurable() bool {
	if t == nil || t.Configurable == nil {
		return false
	}
	return *t.Configurable
}

// GetName retrieves the value of the leaf Name from the OpenconfigPlatform_Components_Component_Properties_Property_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_State) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetValue retrieves the value of the leaf Value from the OpenconfigPlatform_Components_Component_Properties_Property_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Value is set, it can safely use t.GetValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Value == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_State) GetValue() OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Properties_Property_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-platform/components/component/properties/property/state/value within the YANG schema.
type OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface {
	Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union()
}

// OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Bool is used when /openconfig-platform/components/component/properties/property/state/value
// is to be set to a bool value.
type OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Bool struct {
	Bool bool
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Bool
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Bool) Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {
}

// OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Float64 is used when /openconfig-platform/components/component/properties/property/state/value
// is to be set to a float64 value.
type OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Float64 struct {
	Float64 float64
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Float64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Float64) Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {
}

// OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Int64 is used when /openconfig-platform/components/component/properties/property/state/value
// is to be set to a int64 value.
type OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Int64 struct {
	Int64 int64
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Int64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Int64) Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {
}

// OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_String is used when /openconfig-platform/components/component/properties/property/state/value
// is to be set to a string value.
type OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_String struct {
	String string
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_String
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_String) Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {
}

// OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Uint64 is used when /openconfig-platform/components/component/properties/property/state/value
// is to be set to a uint64 value.
type OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Uint64 struct {
	Uint64 uint64
}

// Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union ensures that OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Uint64
// implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union interface.
func (*OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Uint64) Is_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union() {
}

// To_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigPlatform_Components_Component_Properties_Property_State) To_OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union(i interface{}) (OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union, error) {
	switch v := i.(type) {
	case bool:
		return &OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Bool{v}, nil
	case float64:
		return &OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Float64{v}, nil
	case int64:
		return &OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Int64{v}, nil
	case string:
		return &OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_String{v}, nil
	case uint64:
		return &OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union_Uint64{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigPlatform_Components_Component_Properties_Property_State_Value_Union, unknown union type, got: %T, want any of [bool, float64, int64, string, uint64]", i, i)
	}
}

// OpenconfigPlatform_Components_Component_State represents the /openconfig-platform/components/component/state YANG schema element.
type OpenconfigPlatform_Components_Component_State struct {
	ΛMetadata          []ygot.Annotation                                          `path:"@" ygotAnnotation:"true"`
	AllocatedPower     *uint32                                                    `path:"allocated-power" module:"openconfig-platform"`
	ΛAllocatedPower    []ygot.Annotation                                          `path:"@allocated-power" ygotAnnotation:"true"`
	Description        *string                                                    `path:"description" module:"openconfig-platform"`
	ΛDescription       []ygot.Annotation                                          `path:"@description" ygotAnnotation:"true"`
	Empty              *bool                                                      `path:"empty" module:"openconfig-platform"`
	ΛEmpty             []ygot.Annotation                                          `path:"@empty" ygotAnnotation:"true"`
	EquipmentFailure   *bool                                                      `path:"equipment-failure" module:"openconfig-alarms"`
	ΛEquipmentFailure  []ygot.Annotation                                          `path:"@equipment-failure" ygotAnnotation:"true"`
	EquipmentMismatch  *bool                                                      `path:"equipment-mismatch" module:"openconfig-alarms"`
	ΛEquipmentMismatch []ygot.Annotation                                          `path:"@equipment-mismatch" ygotAnnotation:"true"`
	FirmwareVersion    *string                                                    `path:"firmware-version" module:"openconfig-platform"`
	ΛFirmwareVersion   []ygot.Annotation                                          `path:"@firmware-version" ygotAnnotation:"true"`
	HardwareVersion    *string                                                    `path:"hardware-version" module:"openconfig-platform"`
	ΛHardwareVersion   []ygot.Annotation                                          `path:"@hardware-version" ygotAnnotation:"true"`
	Id                 *string                                                    `path:"id" module:"openconfig-platform"`
	ΛId                []ygot.Annotation                                          `path:"@id" ygotAnnotation:"true"`
	Location           *string                                                    `path:"location" module:"openconfig-platform"`
	ΛLocation          []ygot.Annotation                                          `path:"@location" ygotAnnotation:"true"`
	Memory             *OpenconfigPlatform_Components_Component_State_Memory      `path:"memory" module:"openconfig-platform"`
	ΛMemory            []ygot.Annotation                                          `path:"@memory" ygotAnnotation:"true"`
	MfgDate            *string                                                    `path:"mfg-date" module:"openconfig-platform"`
	ΛMfgDate           []ygot.Annotation                                          `path:"@mfg-date" ygotAnnotation:"true"`
	MfgName            *string                                                    `path:"mfg-name" module:"openconfig-platform"`
	ΛMfgName           []ygot.Annotation                                          `path:"@mfg-name" ygotAnnotation:"true"`
	Name               *string                                                    `path:"name" module:"openconfig-platform"`
	ΛName              []ygot.Annotation                                          `path:"@name" ygotAnnotation:"true"`
	OperStatus         E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS            `path:"oper-status" module:"openconfig-platform"`
	ΛOperStatus        []ygot.Annotation                                          `path:"@oper-status" ygotAnnotation:"true"`
	Parent             *string                                                    `path:"parent" module:"openconfig-platform"`
	ΛParent            []ygot.Annotation                                          `path:"@parent" ygotAnnotation:"true"`
	PartNo             *string                                                    `path:"part-no" module:"openconfig-platform"`
	ΛPartNo            []ygot.Annotation                                          `path:"@part-no" ygotAnnotation:"true"`
	Removable          *bool                                                      `path:"removable" module:"openconfig-platform"`
	ΛRemovable         []ygot.Annotation                                          `path:"@removable" ygotAnnotation:"true"`
	SerialNo           *string                                                    `path:"serial-no" module:"openconfig-platform"`
	ΛSerialNo          []ygot.Annotation                                          `path:"@serial-no" ygotAnnotation:"true"`
	SoftwareVersion    *string                                                    `path:"software-version" module:"openconfig-platform"`
	ΛSoftwareVersion   []ygot.Annotation                                          `path:"@software-version" ygotAnnotation:"true"`
	Temperature        *OpenconfigPlatform_Components_Component_State_Temperature `path:"temperature" module:"openconfig-platform"`
	ΛTemperature       []ygot.Annotation                                          `path:"@temperature" ygotAnnotation:"true"`
	Type               OpenconfigPlatform_Components_Component_State_Type_Union   `path:"type" module:"openconfig-platform"`
	ΛType              []ygot.Annotation                                          `path:"@type" ygotAnnotation:"true"`
	UsedPower          *uint32                                                    `path:"used-power" module:"openconfig-platform"`
	ΛUsedPower         []ygot.Annotation                                          `path:"@used-power" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State) IsYANGGoStruct() {}

// GetOrCreateMemory retrieves the value of the Memory field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_State) GetOrCreateMemory() *OpenconfigPlatform_Components_Component_State_Memory {
	if t.Memory != nil {
		return t.Memory
	}
	t.Memory = &OpenconfigPlatform_Components_Component_State_Memory{}
	return t.Memory
}

// GetOrCreateTemperature retrieves the value of the Temperature field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_State) GetOrCreateTemperature() *OpenconfigPlatform_Components_Component_State_Temperature {
	if t.Temperature != nil {
		return t.Temperature
	}
	t.Temperature = &OpenconfigPlatform_Components_Component_State_Temperature{}
	return t.Temperature
}

// GetMemory returns the value of the Memory struct pointer
// from OpenconfigPlatform_Components_Component_State. If the receiver or the field Memory is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_State) GetMemory() *OpenconfigPlatform_Components_Component_State_Memory {
	if t != nil && t.Memory != nil {
		return t.Memory
	}
	return nil
}

// GetTemperature returns the value of the Temperature struct pointer
// from OpenconfigPlatform_Components_Component_State. If the receiver or the field Temperature is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_State) GetTemperature() *OpenconfigPlatform_Components_Component_State_Temperature {
	if t != nil && t.Temperature != nil {
		return t.Temperature
	}
	return nil
}

// GetAllocatedPower retrieves the value of the leaf AllocatedPower from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AllocatedPower is set, it can safely use t.GetAllocatedPower()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AllocatedPower == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetAllocatedPower() uint32 {
	if t == nil || t.AllocatedPower == nil {
		return 0
	}
	return *t.AllocatedPower
}

// GetDescription retrieves the value of the leaf Description from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Description is set, it can safely use t.GetDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Description == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEmpty retrieves the value of the leaf Empty from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Empty is set, it can safely use t.GetEmpty()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Empty == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetEmpty() bool {
	if t == nil || t.Empty == nil {
		return false
	}
	return *t.Empty
}

// GetEquipmentFailure retrieves the value of the leaf EquipmentFailure from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EquipmentFailure is set, it can safely use t.GetEquipmentFailure()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EquipmentFailure == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetEquipmentFailure() bool {
	if t == nil || t.EquipmentFailure == nil {
		return false
	}
	return *t.EquipmentFailure
}

// GetEquipmentMismatch retrieves the value of the leaf EquipmentMismatch from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EquipmentMismatch is set, it can safely use t.GetEquipmentMismatch()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EquipmentMismatch == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetEquipmentMismatch() bool {
	if t == nil || t.EquipmentMismatch == nil {
		return false
	}
	return *t.EquipmentMismatch
}

// GetFirmwareVersion retrieves the value of the leaf FirmwareVersion from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FirmwareVersion is set, it can safely use t.GetFirmwareVersion()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FirmwareVersion == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetFirmwareVersion() string {
	if t == nil || t.FirmwareVersion == nil {
		return ""
	}
	return *t.FirmwareVersion
}

// GetHardwareVersion retrieves the value of the leaf HardwareVersion from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if HardwareVersion is set, it can safely use t.GetHardwareVersion()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.HardwareVersion == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetHardwareVersion() string {
	if t == nil || t.HardwareVersion == nil {
		return ""
	}
	return *t.HardwareVersion
}

// GetId retrieves the value of the leaf Id from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Id is set, it can safely use t.GetId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Id == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetLocation retrieves the value of the leaf Location from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Location is set, it can safely use t.GetLocation()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Location == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetLocation() string {
	if t == nil || t.Location == nil {
		return ""
	}
	return *t.Location
}

// GetMfgDate retrieves the value of the leaf MfgDate from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MfgDate is set, it can safely use t.GetMfgDate()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MfgDate == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetMfgDate() string {
	if t == nil || t.MfgDate == nil {
		return ""
	}
	return *t.MfgDate
}

// GetMfgName retrieves the value of the leaf MfgName from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MfgName is set, it can safely use t.GetMfgName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MfgName == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetMfgName() string {
	if t == nil || t.MfgName == nil {
		return ""
	}
	return *t.MfgName
}

// GetName retrieves the value of the leaf Name from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOperStatus retrieves the value of the leaf OperStatus from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OperStatus is set, it can safely use t.GetOperStatus()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OperStatus == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetOperStatus() E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS {
	if t == nil || t.OperStatus == 0 {
		return 0
	}
	return t.OperStatus
}

// GetParent retrieves the value of the leaf Parent from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Parent is set, it can safely use t.GetParent()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Parent == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetParent() string {
	if t == nil || t.Parent == nil {
		return ""
	}
	return *t.Parent
}

// GetPartNo retrieves the value of the leaf PartNo from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PartNo is set, it can safely use t.GetPartNo()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PartNo == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetPartNo() string {
	if t == nil || t.PartNo == nil {
		return ""
	}
	return *t.PartNo
}

// GetRemovable retrieves the value of the leaf Removable from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Removable is set, it can safely use t.GetRemovable()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Removable == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetRemovable() bool {
	if t == nil || t.Removable == nil {
		return false
	}
	return *t.Removable
}

// GetSerialNo retrieves the value of the leaf SerialNo from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SerialNo is set, it can safely use t.GetSerialNo()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SerialNo == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetSerialNo() string {
	if t == nil || t.SerialNo == nil {
		return ""
	}
	return *t.SerialNo
}

// GetSoftwareVersion retrieves the value of the leaf SoftwareVersion from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SoftwareVersion is set, it can safely use t.GetSoftwareVersion()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SoftwareVersion == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetSoftwareVersion() string {
	if t == nil || t.SoftwareVersion == nil {
		return ""
	}
	return *t.SoftwareVersion
}

// GetType retrieves the value of the leaf Type from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Type is set, it can safely use t.GetType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Type == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetType() OpenconfigPlatform_Components_Component_State_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// GetUsedPower retrieves the value of the leaf UsedPower from the OpenconfigPlatform_Components_Component_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if UsedPower is set, it can safely use t.GetUsedPower()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.UsedPower == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State) GetUsedPower() uint32 {
	if t == nil || t.UsedPower == nil {
		return 0
	}
	return *t.UsedPower
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_State_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-platform/components/component/state/type within the YANG schema.
type OpenconfigPlatform_Components_Component_State_Type_Union interface {
	Is_OpenconfigPlatform_Components_Component_State_Type_Union()
}

// OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT is used when /openconfig-platform/components/component/state/type
// is to be set to a E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT value.
type OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT struct {
	E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
}

// Is_OpenconfigPlatform_Components_Component_State_Type_Union ensures that OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
// implements the OpenconfigPlatform_Components_Component_State_Type_Union interface.
func (*OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT) Is_OpenconfigPlatform_Components_Component_State_Type_Union() {
}

// OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT is used when /openconfig-platform/components/component/state/type
// is to be set to a E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT value.
type OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT struct {
	E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
}

// Is_OpenconfigPlatform_Components_Component_State_Type_Union ensures that OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
// implements the OpenconfigPlatform_Components_Component_State_Type_Union interface.
func (*OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT) Is_OpenconfigPlatform_Components_Component_State_Type_Union() {
}

// To_OpenconfigPlatform_Components_Component_State_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigPlatform_Components_Component_State_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigPlatform_Components_Component_State) To_OpenconfigPlatform_Components_Component_State_Type_Union(i interface{}) (OpenconfigPlatform_Components_Component_State_Type_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT:
		return &OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT{v}, nil
	case E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT:
		return &OpenconfigPlatform_Components_Component_State_Type_Union_E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigPlatform_Components_Component_State_Type_Union, unknown union type, got: %T, want any of [E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT, E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT]", i, i)
	}
}

// OpenconfigPlatform_Components_Component_State_Memory represents the /openconfig-platform/components/component/state/memory YANG schema element.
type OpenconfigPlatform_Components_Component_State_Memory struct {
	ΛMetadata  []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Available  *uint64           `path:"available" module:"openconfig-platform"`
	ΛAvailable []ygot.Annotation `path:"@available" ygotAnnotation:"true"`
	Utilized   *uint64           `path:"utilized" module:"openconfig-platform"`
	ΛUtilized  []ygot.Annotation `path:"@utilized" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_Memory) IsYANGGoStruct() {}

// GetAvailable retrieves the value of the leaf Available from the OpenconfigPlatform_Components_Component_State_Memory
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Available is set, it can safely use t.GetAvailable()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Available == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State_Memory) GetAvailable() uint64 {
	if t == nil || t.Available == nil {
		return 0
	}
	return *t.Available
}

// GetUtilized retrieves the value of the leaf Utilized from the OpenconfigPlatform_Components_Component_State_Memory
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Utilized is set, it can safely use t.GetUtilized()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Utilized == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State_Memory) GetUtilized() uint64 {
	if t == nil || t.Utilized == nil {
		return 0
	}
	return *t.Utilized
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Memory) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_Memory"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_Memory) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_State_Temperature represents the /openconfig-platform/components/component/state/temperature YANG schema element.
type OpenconfigPlatform_Components_Component_State_Temperature struct {
	ΛMetadata       []ygot.Annotation                                `path:"@" ygotAnnotation:"true"`
	AlarmSeverity   E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY `path:"alarm-severity" module:"openconfig-platform"`
	ΛAlarmSeverity  []ygot.Annotation                                `path:"@alarm-severity" ygotAnnotation:"true"`
	AlarmStatus     *bool                                            `path:"alarm-status" module:"openconfig-platform"`
	ΛAlarmStatus    []ygot.Annotation                                `path:"@alarm-status" ygotAnnotation:"true"`
	AlarmThreshold  *uint32                                          `path:"alarm-threshold" module:"openconfig-platform"`
	ΛAlarmThreshold []ygot.Annotation                                `path:"@alarm-threshold" ygotAnnotation:"true"`
	Avg             *float64                                         `path:"avg" module:"openconfig-platform"`
	ΛAvg            []ygot.Annotation                                `path:"@avg" ygotAnnotation:"true"`
	Instant         *float64                                         `path:"instant" module:"openconfig-platform"`
	ΛInstant        []ygot.Annotation                                `path:"@instant" ygotAnnotation:"true"`
	Interval        *uint64                                          `path:"interval" module:"openconfig-platform"`
	ΛInterval       []ygot.Annotation                                `path:"@interval" ygotAnnotation:"true"`
	Max             *float64                                         `path:"max" module:"openconfig-platform"`
	ΛMax            []ygot.Annotation                                `path:"@max" ygotAnnotation:"true"`
	MaxTime         *uint64                                          `path:"max-time" module:"openconfig-platform"`
	ΛMaxTime        []ygot.Annotation                                `path:"@max-time" ygotAnnotation:"true"`
	Min             *float64                                         `path:"min" module:"openconfig-platform"`
	ΛMin            []ygot.Annotation                                `path:"@min" ygotAnnotation:"true"`
	MinTime         *uint64                                          `path:"min-time" module:"openconfig-platform"`
	ΛMinTime        []ygot.Annotation                                `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_State_Temperature implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_State_Temperature) IsYANGGoStruct() {}

// GetAlarmSeverity retrieves the value of the leaf AlarmSeverity from the OpenconfigPlatform_Components_Component_State_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AlarmSeverity is set, it can safely use t.GetAlarmSeverity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AlarmSeverity == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) GetAlarmSeverity() E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY {
	if t == nil || t.AlarmSeverity == 0 {
		return 0
	}
	return t.AlarmSeverity
}

// GetAlarmStatus retrieves the value of the leaf AlarmStatus from the OpenconfigPlatform_Components_Component_State_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AlarmStatus is set, it can safely use t.GetAlarmStatus()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AlarmStatus == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) GetAlarmStatus() bool {
	if t == nil || t.AlarmStatus == nil {
		return false
	}
	return *t.AlarmStatus
}

// GetAlarmThreshold retrieves the value of the leaf AlarmThreshold from the OpenconfigPlatform_Components_Component_State_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AlarmThreshold is set, it can safely use t.GetAlarmThreshold()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AlarmThreshold == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) GetAlarmThreshold() uint32 {
	if t == nil || t.AlarmThreshold == nil {
		return 0
	}
	return *t.AlarmThreshold
}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigPlatform_Components_Component_State_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigPlatform_Components_Component_State_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigPlatform_Components_Component_State_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigPlatform_Components_Component_State_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigPlatform_Components_Component_State_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigPlatform_Components_Component_State_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigPlatform_Components_Component_State_Temperature
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_State_Temperature"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_State_Temperature) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Storage represents the /openconfig-platform/components/component/storage YANG schema element.
type OpenconfigPlatform_Components_Component_Storage struct {
	ΛMetadata []ygot.Annotation                                       `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Storage_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                       `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Storage_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                       `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Storage implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Storage) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Storage) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Storage_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Storage_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Storage) GetOrCreateState() *OpenconfigPlatform_Components_Component_Storage_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Storage_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Storage. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Storage) GetConfig() *OpenconfigPlatform_Components_Component_Storage_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Storage. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Storage) GetState() *OpenconfigPlatform_Components_Component_Storage_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Storage) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Storage"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Storage) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Storage_Config represents the /openconfig-platform/components/component/storage/config YANG schema element.
type OpenconfigPlatform_Components_Component_Storage_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Storage_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Storage_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Storage_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Storage_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Storage_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Storage_State represents the /openconfig-platform/components/component/storage/state YANG schema element.
type OpenconfigPlatform_Components_Component_Storage_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Storage_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Storage_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Storage_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Storage_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Storage_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Subcomponents represents the /openconfig-platform/components/component/subcomponents YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents struct {
	ΛMetadata     []ygot.Annotation                                                              `path:"@" ygotAnnotation:"true"`
	Subcomponent  map[string]*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent `path:"subcomponent" module:"openconfig-platform"`
	ΛSubcomponent []ygot.Annotation                                                              `path:"@subcomponent" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents) IsYANGGoStruct() {}

// NewSubcomponent creates a new entry in the Subcomponent list of the
// OpenconfigPlatform_Components_Component_Subcomponents struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) NewSubcomponent(Name string) (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subcomponent == nil {
		t.Subcomponent = make(map[string]*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subcomponent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subcomponent", key)
	}

	t.Subcomponent[key] = &OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent{
		Name: &Name,
	}

	return t.Subcomponent[key], nil
}

// RenameSubcomponent renames an entry in the list Subcomponent within
// the OpenconfigPlatform_Components_Component_Subcomponents struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) RenameSubcomponent(oldK, newK string) error {
	if _, ok := t.Subcomponent[newK]; ok {
		return fmt.Errorf("key %v already exists in Subcomponent", newK)
	}

	e, ok := t.Subcomponent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Subcomponent", oldK)
	}
	e.Name = &newK

	t.Subcomponent[newK] = e
	delete(t.Subcomponent, oldK)
	return nil
}

// GetOrCreateSubcomponent retrieves the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_Subcomponents. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) GetOrCreateSubcomponent(Name string) *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent {

	key := Name

	if v, ok := t.Subcomponent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubcomponent(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubcomponent got unexpected error: %v", err))
	}
	return v
}

// GetSubcomponent retrieves the value with the specified key from
// the Subcomponent map field of OpenconfigPlatform_Components_Component_Subcomponents. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) GetSubcomponent(Name string) *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Subcomponent[key]; ok {
		return lm
	}
	return nil
}

// AppendSubcomponent appends the supplied OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent struct to the
// list Subcomponent of OpenconfigPlatform_Components_Component_Subcomponents. If the key value(s) specified in
// the supplied OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent already exist in the list, an error is
// returned.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) AppendSubcomponent(v *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) error {
	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subcomponent == nil {
		t.Subcomponent = make(map[string]*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent)
	}

	if _, ok := t.Subcomponent[key]; ok {
		return fmt.Errorf("duplicate key for list Subcomponent %v", key)
	}

	t.Subcomponent[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent represents the /openconfig-platform/components/component/subcomponents/subcomponent YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent struct {
	ΛMetadata []ygot.Annotation                                                          `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config `path:"config" module:"openconfig-platform"`
	ΛConfig   []ygot.Annotation                                                          `path:"@config" ygotAnnotation:"true"`
	Name      *string                                                                    `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation                                                          `path:"@name" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State  `path:"state" module:"openconfig-platform"`
	ΛState    []ygot.Annotation                                                          `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) GetOrCreateState() *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) GetConfig() *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) GetState() *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// ΛListKeyMap returns the keys of the OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent struct, which is a YANG list entry.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config represents the /openconfig-platform/components/component/subcomponents/subcomponent/config YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State represents the /openconfig-platform/components/component/subcomponents/subcomponent/state YANG schema element.
type OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-platform"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Subcomponents_Subcomponent_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Transceiver represents the /openconfig-platform/components/component/transceiver YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver struct {
	ΛMetadata         []ygot.Annotation                                                     `path:"@" ygotAnnotation:"true"`
	Config            *OpenconfigPlatform_Components_Component_Transceiver_Config           `path:"config" module:"openconfig-platform-transceiver"`
	ΛConfig           []ygot.Annotation                                                     `path:"@config" ygotAnnotation:"true"`
	PhysicalChannels  *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels `path:"physical-channels" module:"openconfig-platform-transceiver"`
	ΛPhysicalChannels []ygot.Annotation                                                     `path:"@physical-channels" ygotAnnotation:"true"`
	State             *OpenconfigPlatform_Components_Component_Transceiver_State            `path:"state" module:"openconfig-platform-transceiver"`
	ΛState            []ygot.Annotation                                                     `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Transceiver_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Transceiver_Config{}
	return t.Config
}

// GetOrCreatePhysicalChannels retrieves the value of the PhysicalChannels field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver) GetOrCreatePhysicalChannels() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels {
	if t.PhysicalChannels != nil {
		return t.PhysicalChannels
	}
	t.PhysicalChannels = &OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels{}
	return t.PhysicalChannels
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver) GetOrCreateState() *OpenconfigPlatform_Components_Component_Transceiver_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Transceiver_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver) GetConfig() *OpenconfigPlatform_Components_Component_Transceiver_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetPhysicalChannels returns the value of the PhysicalChannels struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver. If the receiver or the field PhysicalChannels is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver) GetPhysicalChannels() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels {
	if t != nil && t.PhysicalChannels != nil {
		return t.PhysicalChannels
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver) GetState() *OpenconfigPlatform_Components_Component_Transceiver_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Transceiver_Config represents the /openconfig-platform/components/component/transceiver/config YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_Config struct {
	ΛMetadata           []ygot.Annotation                                       `path:"@" ygotAnnotation:"true"`
	Enabled             *bool                                                   `path:"enabled" module:"openconfig-platform-transceiver"`
	ΛEnabled            []ygot.Annotation                                       `path:"@enabled" ygotAnnotation:"true"`
	EthernetPmdPreconf  E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE            `path:"ethernet-pmd-preconf" module:"openconfig-platform-transceiver"`
	ΛEthernetPmdPreconf []ygot.Annotation                                       `path:"@ethernet-pmd-preconf" ygotAnnotation:"true"`
	FecMode             E_OpenconfigPlatformTypes_FEC_MODE_TYPE                 `path:"fec-mode" module:"openconfig-platform-transceiver"`
	ΛFecMode            []ygot.Annotation                                       `path:"@fec-mode" ygotAnnotation:"true"`
	FormFactorPreconf   E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE `path:"form-factor-preconf" module:"openconfig-platform-transceiver"`
	ΛFormFactorPreconf  []ygot.Annotation                                       `path:"@form-factor-preconf" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_Config) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the OpenconfigPlatform_Components_Component_Transceiver_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Config) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetEthernetPmdPreconf retrieves the value of the leaf EthernetPmdPreconf from the OpenconfigPlatform_Components_Component_Transceiver_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EthernetPmdPreconf is set, it can safely use t.GetEthernetPmdPreconf()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EthernetPmdPreconf == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Config) GetEthernetPmdPreconf() E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE {
	if t == nil || t.EthernetPmdPreconf == 0 {
		return 0
	}
	return t.EthernetPmdPreconf
}

// GetFecMode retrieves the value of the leaf FecMode from the OpenconfigPlatform_Components_Component_Transceiver_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FecMode is set, it can safely use t.GetFecMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FecMode == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Config) GetFecMode() E_OpenconfigPlatformTypes_FEC_MODE_TYPE {
	if t == nil || t.FecMode == 0 {
		return 0
	}
	return t.FecMode
}

// GetFormFactorPreconf retrieves the value of the leaf FormFactorPreconf from the OpenconfigPlatform_Components_Component_Transceiver_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FormFactorPreconf is set, it can safely use t.GetFormFactorPreconf()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FormFactorPreconf == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Config) GetFormFactorPreconf() E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE {
	if t == nil || t.FormFactorPreconf == 0 {
		return 0
	}
	return t.FormFactorPreconf
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels represents the /openconfig-platform/components/component/transceiver/physical-channels YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels struct {
	ΛMetadata []ygot.Annotation                                                                        `path:"@" ygotAnnotation:"true"`
	Channel   map[uint16]*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel `path:"channel" module:"openconfig-platform-transceiver"`
	ΛChannel  []ygot.Annotation                                                                        `path:"@channel" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels) IsYANGGoStruct() {}

// NewChannel creates a new entry in the Channel list of the
// OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels) NewChannel(Index uint16) (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Channel == nil {
		t.Channel = make(map[uint16]*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Channel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Channel", key)
	}

	t.Channel[key] = &OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel{
		Index: &Index,
	}

	return t.Channel[key], nil
}

// RenameChannel renames an entry in the list Channel within
// the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels) RenameChannel(oldK, newK uint16) error {
	if _, ok := t.Channel[newK]; ok {
		return fmt.Errorf("key %v already exists in Channel", newK)
	}

	e, ok := t.Channel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Channel", oldK)
	}
	e.Index = &newK

	t.Channel[newK] = e
	delete(t.Channel, oldK)
	return nil
}

// GetOrCreateChannel retrieves the value with the specified keys from
// the receiver OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels) GetOrCreateChannel(Index uint16) *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel {

	key := Index

	if v, ok := t.Channel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewChannel(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateChannel got unexpected error: %v", err))
	}
	return v
}

// GetChannel retrieves the value with the specified key from
// the Channel map field of OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels) GetChannel(Index uint16) *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Channel[key]; ok {
		return lm
	}
	return nil
}

// AppendChannel appends the supplied OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel struct to the
// list Channel of OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels. If the key value(s) specified in
// the supplied OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel already exist in the list, an error is
// returned.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels) AppendChannel(v *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel) error {
	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Channel == nil {
		t.Channel = make(map[uint16]*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel)
	}

	if _, ok := t.Channel[key]; ok {
		return fmt.Errorf("duplicate key for list Channel %v", key)
	}

	t.Channel[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel represents the /openconfig-platform/components/component/transceiver/physical-channels/channel YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel struct {
	ΛMetadata []ygot.Annotation                                                                    `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config `path:"config" module:"openconfig-platform-transceiver"`
	ΛConfig   []ygot.Annotation                                                                    `path:"@config" ygotAnnotation:"true"`
	Index     *uint16                                                                              `path:"index" module:"openconfig-platform-transceiver"`
	ΛIndex    []ygot.Annotation                                                                    `path:"@index" ygotAnnotation:"true"`
	State     *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State  `path:"state" module:"openconfig-platform-transceiver"`
	ΛState    []ygot.Annotation                                                                    `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel) GetOrCreateConfig() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel) GetOrCreateState() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel) GetConfig() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel) GetState() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetIndex retrieves the value of the leaf Index from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Index is set, it can safely use t.GetIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Index == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel) GetIndex() uint16 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// ΛListKeyMap returns the keys of the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel struct, which is a YANG list entry.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/config YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Description        *string           `path:"description" module:"openconfig-platform-transceiver"`
	ΛDescription       []ygot.Annotation `path:"@description" ygotAnnotation:"true"`
	Index              *uint16           `path:"index" module:"openconfig-platform-transceiver"`
	ΛIndex             []ygot.Annotation `path:"@index" ygotAnnotation:"true"`
	TargetOutputPower  *float64          `path:"target-output-power" module:"openconfig-platform-transceiver"`
	ΛTargetOutputPower []ygot.Annotation `path:"@target-output-power" ygotAnnotation:"true"`
	TxLaser            *bool             `path:"tx-laser" module:"openconfig-platform-transceiver"`
	ΛTxLaser           []ygot.Annotation `path:"@tx-laser" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config) IsYANGGoStruct() {
}

// GetDescription retrieves the value of the leaf Description from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Description is set, it can safely use t.GetDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Description == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIndex retrieves the value of the leaf Index from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Index is set, it can safely use t.GetIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Index == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config) GetIndex() uint16 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetTargetOutputPower retrieves the value of the leaf TargetOutputPower from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TargetOutputPower is set, it can safely use t.GetTargetOutputPower()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TargetOutputPower == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config) GetTargetOutputPower() float64 {
	if t == nil || t.TargetOutputPower == nil {
		return 0.0
	}
	return *t.TargetOutputPower
}

// GetTxLaser retrieves the value of the leaf TxLaser from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TxLaser is set, it can safely use t.GetTxLaser()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TxLaser == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config) GetTxLaser() bool {
	if t == nil || t.TxLaser == nil {
		return false
	}
	return *t.TxLaser
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State struct {
	ΛMetadata          []ygot.Annotation                                                                                    `path:"@" ygotAnnotation:"true"`
	Description        *string                                                                                              `path:"description" module:"openconfig-platform-transceiver"`
	ΛDescription       []ygot.Annotation                                                                                    `path:"@description" ygotAnnotation:"true"`
	Index              *uint16                                                                                              `path:"index" module:"openconfig-platform-transceiver"`
	ΛIndex             []ygot.Annotation                                                                                    `path:"@index" ygotAnnotation:"true"`
	InputPower         *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower       `path:"input-power" module:"openconfig-platform-transceiver"`
	ΛInputPower        []ygot.Annotation                                                                                    `path:"@input-power" ygotAnnotation:"true"`
	LaserBiasCurrent   *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent `path:"laser-bias-current" module:"openconfig-platform-transceiver"`
	ΛLaserBiasCurrent  []ygot.Annotation                                                                                    `path:"@laser-bias-current" ygotAnnotation:"true"`
	OutputFrequency    *uint64                                                                                              `path:"output-frequency" module:"openconfig-platform-transceiver"`
	ΛOutputFrequency   []ygot.Annotation                                                                                    `path:"@output-frequency" ygotAnnotation:"true"`
	OutputPower        *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower      `path:"output-power" module:"openconfig-platform-transceiver"`
	ΛOutputPower       []ygot.Annotation                                                                                    `path:"@output-power" ygotAnnotation:"true"`
	TargetOutputPower  *float64                                                                                             `path:"target-output-power" module:"openconfig-platform-transceiver"`
	ΛTargetOutputPower []ygot.Annotation                                                                                    `path:"@target-output-power" ygotAnnotation:"true"`
	TxLaser            *bool                                                                                                `path:"tx-laser" module:"openconfig-platform-transceiver"`
	ΛTxLaser           []ygot.Annotation                                                                                    `path:"@tx-laser" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) IsYANGGoStruct() {
}

// GetOrCreateInputPower retrieves the value of the InputPower field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) GetOrCreateInputPower() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower {
	if t.InputPower != nil {
		return t.InputPower
	}
	t.InputPower = &OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower{}
	return t.InputPower
}

// GetOrCreateLaserBiasCurrent retrieves the value of the LaserBiasCurrent field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) GetOrCreateLaserBiasCurrent() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent {
	if t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	t.LaserBiasCurrent = &OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent{}
	return t.LaserBiasCurrent
}

// GetOrCreateOutputPower retrieves the value of the OutputPower field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) GetOrCreateOutputPower() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower {
	if t.OutputPower != nil {
		return t.OutputPower
	}
	t.OutputPower = &OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower{}
	return t.OutputPower
}

// GetInputPower returns the value of the InputPower struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State. If the receiver or the field InputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) GetInputPower() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower {
	if t != nil && t.InputPower != nil {
		return t.InputPower
	}
	return nil
}

// GetLaserBiasCurrent returns the value of the LaserBiasCurrent struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State. If the receiver or the field LaserBiasCurrent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) GetLaserBiasCurrent() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent {
	if t != nil && t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	return nil
}

// GetOutputPower returns the value of the OutputPower struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State. If the receiver or the field OutputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) GetOutputPower() *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower {
	if t != nil && t.OutputPower != nil {
		return t.OutputPower
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Description is set, it can safely use t.GetDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Description == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIndex retrieves the value of the leaf Index from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Index is set, it can safely use t.GetIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Index == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) GetIndex() uint16 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetOutputFrequency retrieves the value of the leaf OutputFrequency from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutputFrequency is set, it can safely use t.GetOutputFrequency()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutputFrequency == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) GetOutputFrequency() uint64 {
	if t == nil || t.OutputFrequency == nil {
		return 0
	}
	return *t.OutputFrequency
}

// GetTargetOutputPower retrieves the value of the leaf TargetOutputPower from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TargetOutputPower is set, it can safely use t.GetTargetOutputPower()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TargetOutputPower == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) GetTargetOutputPower() float64 {
	if t == nil || t.TargetOutputPower == nil {
		return 0.0
	}
	return *t.TargetOutputPower
}

// GetTxLaser retrieves the value of the leaf TxLaser from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TxLaser is set, it can safely use t.GetTxLaser()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TxLaser == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) GetTxLaser() bool {
	if t == nil || t.TxLaser == nil {
		return false
	}
	return *t.TxLaser
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/input-power YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) IsYANGGoStruct() {
}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_InputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/laser-bias-current YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) IsYANGGoStruct() {
}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_LaserBiasCurrent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower represents the /openconfig-platform/components/component/transceiver/physical-channels/channel/state/output-power YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) IsYANGGoStruct() {
}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_PhysicalChannels_Channel_State_OutputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Transceiver_State represents the /openconfig-platform/components/component/transceiver/state YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_State struct {
	ΛMetadata               []ygot.Annotation                                                           `path:"@" ygotAnnotation:"true"`
	ConnectorType           E_OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE                             `path:"connector-type" module:"openconfig-platform-transceiver"`
	ΛConnectorType          []ygot.Annotation                                                           `path:"@connector-type" ygotAnnotation:"true"`
	DateCode                *string                                                                     `path:"date-code" module:"openconfig-platform-transceiver"`
	ΛDateCode               []ygot.Annotation                                                           `path:"@date-code" ygotAnnotation:"true"`
	Enabled                 *bool                                                                       `path:"enabled" module:"openconfig-platform-transceiver"`
	ΛEnabled                []ygot.Annotation                                                           `path:"@enabled" ygotAnnotation:"true"`
	EthernetPmd             E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE                                `path:"ethernet-pmd" module:"openconfig-platform-transceiver"`
	ΛEthernetPmd            []ygot.Annotation                                                           `path:"@ethernet-pmd" ygotAnnotation:"true"`
	EthernetPmdPreconf      E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE                                `path:"ethernet-pmd-preconf" module:"openconfig-platform-transceiver"`
	ΛEthernetPmdPreconf     []ygot.Annotation                                                           `path:"@ethernet-pmd-preconf" ygotAnnotation:"true"`
	FaultCondition          *bool                                                                       `path:"fault-condition" module:"openconfig-platform-transceiver"`
	ΛFaultCondition         []ygot.Annotation                                                           `path:"@fault-condition" ygotAnnotation:"true"`
	FecCorrectedBits        *uint64                                                                     `path:"fec-corrected-bits" module:"openconfig-platform-transceiver"`
	ΛFecCorrectedBits       []ygot.Annotation                                                           `path:"@fec-corrected-bits" ygotAnnotation:"true"`
	FecCorrectedBytes       *uint64                                                                     `path:"fec-corrected-bytes" module:"openconfig-platform-transceiver"`
	ΛFecCorrectedBytes      []ygot.Annotation                                                           `path:"@fec-corrected-bytes" ygotAnnotation:"true"`
	FecMode                 E_OpenconfigPlatformTypes_FEC_MODE_TYPE                                     `path:"fec-mode" module:"openconfig-platform-transceiver"`
	ΛFecMode                []ygot.Annotation                                                           `path:"@fec-mode" ygotAnnotation:"true"`
	FecStatus               E_OpenconfigPlatformTypes_FEC_STATUS_TYPE                                   `path:"fec-status" module:"openconfig-platform-transceiver"`
	ΛFecStatus              []ygot.Annotation                                                           `path:"@fec-status" ygotAnnotation:"true"`
	FecUncorrectableBlocks  *uint64                                                                     `path:"fec-uncorrectable-blocks" module:"openconfig-platform-transceiver"`
	ΛFecUncorrectableBlocks []ygot.Annotation                                                           `path:"@fec-uncorrectable-blocks" ygotAnnotation:"true"`
	FecUncorrectableWords   *uint64                                                                     `path:"fec-uncorrectable-words" module:"openconfig-platform-transceiver"`
	ΛFecUncorrectableWords  []ygot.Annotation                                                           `path:"@fec-uncorrectable-words" ygotAnnotation:"true"`
	FormFactor              E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE                     `path:"form-factor" module:"openconfig-platform-transceiver"`
	ΛFormFactor             []ygot.Annotation                                                           `path:"@form-factor" ygotAnnotation:"true"`
	FormFactorPreconf       E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE                     `path:"form-factor-preconf" module:"openconfig-platform-transceiver"`
	ΛFormFactorPreconf      []ygot.Annotation                                                           `path:"@form-factor-preconf" ygotAnnotation:"true"`
	InputPower              *OpenconfigPlatform_Components_Component_Transceiver_State_InputPower       `path:"input-power" module:"openconfig-platform-transceiver"`
	ΛInputPower             []ygot.Annotation                                                           `path:"@input-power" ygotAnnotation:"true"`
	LaserBiasCurrent        *OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent `path:"laser-bias-current" module:"openconfig-platform-transceiver"`
	ΛLaserBiasCurrent       []ygot.Annotation                                                           `path:"@laser-bias-current" ygotAnnotation:"true"`
	OtnComplianceCode       E_OpenconfigTransportTypes_OTN_APPLICATION_CODE                             `path:"otn-compliance-code" module:"openconfig-platform-transceiver"`
	ΛOtnComplianceCode      []ygot.Annotation                                                           `path:"@otn-compliance-code" ygotAnnotation:"true"`
	OutputPower             *OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower      `path:"output-power" module:"openconfig-platform-transceiver"`
	ΛOutputPower            []ygot.Annotation                                                           `path:"@output-power" ygotAnnotation:"true"`
	PostFecBer              *OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer       `path:"post-fec-ber" module:"openconfig-platform-transceiver"`
	ΛPostFecBer             []ygot.Annotation                                                           `path:"@post-fec-ber" ygotAnnotation:"true"`
	PreFecBer               *OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer        `path:"pre-fec-ber" module:"openconfig-platform-transceiver"`
	ΛPreFecBer              []ygot.Annotation                                                           `path:"@pre-fec-ber" ygotAnnotation:"true"`
	Present                 E_OpenconfigPlatform_Components_Component_Transceiver_State_Present         `path:"present" module:"openconfig-platform-transceiver"`
	ΛPresent                []ygot.Annotation                                                           `path:"@present" ygotAnnotation:"true"`
	SerialNo                *string                                                                     `path:"serial-no" module:"openconfig-platform-transceiver"`
	ΛSerialNo               []ygot.Annotation                                                           `path:"@serial-no" ygotAnnotation:"true"`
	SonetSdhComplianceCode  E_OpenconfigTransportTypes_SONET_APPLICATION_CODE                           `path:"sonet-sdh-compliance-code" module:"openconfig-platform-transceiver"`
	ΛSonetSdhComplianceCode []ygot.Annotation                                                           `path:"@sonet-sdh-compliance-code" ygotAnnotation:"true"`
	Vendor                  *string                                                                     `path:"vendor" module:"openconfig-platform-transceiver"`
	ΛVendor                 []ygot.Annotation                                                           `path:"@vendor" ygotAnnotation:"true"`
	VendorPart              *string                                                                     `path:"vendor-part" module:"openconfig-platform-transceiver"`
	ΛVendorPart             []ygot.Annotation                                                           `path:"@vendor-part" ygotAnnotation:"true"`
	VendorRev               *string                                                                     `path:"vendor-rev" module:"openconfig-platform-transceiver"`
	ΛVendorRev              []ygot.Annotation                                                           `path:"@vendor-rev" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_State) IsYANGGoStruct() {}

// GetOrCreateInputPower retrieves the value of the InputPower field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetOrCreateInputPower() *OpenconfigPlatform_Components_Component_Transceiver_State_InputPower {
	if t.InputPower != nil {
		return t.InputPower
	}
	t.InputPower = &OpenconfigPlatform_Components_Component_Transceiver_State_InputPower{}
	return t.InputPower
}

// GetOrCreateLaserBiasCurrent retrieves the value of the LaserBiasCurrent field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetOrCreateLaserBiasCurrent() *OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent {
	if t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	t.LaserBiasCurrent = &OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent{}
	return t.LaserBiasCurrent
}

// GetOrCreateOutputPower retrieves the value of the OutputPower field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetOrCreateOutputPower() *OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower {
	if t.OutputPower != nil {
		return t.OutputPower
	}
	t.OutputPower = &OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower{}
	return t.OutputPower
}

// GetOrCreatePostFecBer retrieves the value of the PostFecBer field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetOrCreatePostFecBer() *OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer {
	if t.PostFecBer != nil {
		return t.PostFecBer
	}
	t.PostFecBer = &OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer{}
	return t.PostFecBer
}

// GetOrCreatePreFecBer retrieves the value of the PreFecBer field
// or returns the existing field if it already exists.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetOrCreatePreFecBer() *OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer {
	if t.PreFecBer != nil {
		return t.PreFecBer
	}
	t.PreFecBer = &OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer{}
	return t.PreFecBer
}

// GetInputPower returns the value of the InputPower struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_State. If the receiver or the field InputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetInputPower() *OpenconfigPlatform_Components_Component_Transceiver_State_InputPower {
	if t != nil && t.InputPower != nil {
		return t.InputPower
	}
	return nil
}

// GetLaserBiasCurrent returns the value of the LaserBiasCurrent struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_State. If the receiver or the field LaserBiasCurrent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetLaserBiasCurrent() *OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent {
	if t != nil && t.LaserBiasCurrent != nil {
		return t.LaserBiasCurrent
	}
	return nil
}

// GetOutputPower returns the value of the OutputPower struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_State. If the receiver or the field OutputPower is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetOutputPower() *OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower {
	if t != nil && t.OutputPower != nil {
		return t.OutputPower
	}
	return nil
}

// GetPostFecBer returns the value of the PostFecBer struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_State. If the receiver or the field PostFecBer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetPostFecBer() *OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer {
	if t != nil && t.PostFecBer != nil {
		return t.PostFecBer
	}
	return nil
}

// GetPreFecBer returns the value of the PreFecBer struct pointer
// from OpenconfigPlatform_Components_Component_Transceiver_State. If the receiver or the field PreFecBer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetPreFecBer() *OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer {
	if t != nil && t.PreFecBer != nil {
		return t.PreFecBer
	}
	return nil
}

// GetConnectorType retrieves the value of the leaf ConnectorType from the OpenconfigPlatform_Components_Component_Transceiver_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ConnectorType is set, it can safely use t.GetConnectorType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ConnectorType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetConnectorType() E_OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE {
	if t == nil || t.ConnectorType == 0 {
		return 0
	}
	return t.ConnectorType
}

// GetDateCode retrieves the value of the leaf DateCode from the OpenconfigPlatform_Components_Component_Transceiver_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DateCode is set, it can safely use t.GetDateCode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DateCode == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetDateCode() string {
	if t == nil || t.DateCode == nil {
		return ""
	}
	return *t.DateCode
}

// GetEnabled retrieves the value of the leaf Enabled from the OpenconfigPlatform_Components_Component_Transceiver_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetEthernetPmd retrieves the value of the leaf EthernetPmd from the OpenconfigPlatform_Components_Component_Transceiver_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EthernetPmd is set, it can safely use t.GetEthernetPmd()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EthernetPmd == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetEthernetPmd() E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE {
	if t == nil || t.EthernetPmd == 0 {
		return 0
	}
	return t.EthernetPmd
}

// GetEthernetPmdPreconf retrieves the value of the leaf EthernetPmdPreconf from the OpenconfigPlatform_Components_Component_Transceiver_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EthernetPmdPreconf is set, it can safely use t.GetEthernetPmdPreconf()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EthernetPmdPreconf == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetEthernetPmdPreconf() E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE {
	if t == nil || t.EthernetPmdPreconf == 0 {
		return 0
	}
	return t.EthernetPmdPreconf
}

// GetFaultCondition retrieves the value of the leaf FaultCondition from the OpenconfigPlatform_Components_Component_Transceiver_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FaultCondition is set, it can safely use t.GetFaultCondition()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FaultCondition == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetFaultCondition() bool {
	if t == nil || t.FaultCondition == nil {
		return false
	}
	return *t.FaultCondition
}

// GetFecCorrectedBits retrieves the value of the leaf FecCorrectedBits from the OpenconfigPlatform_Components_Component_Transceiver_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FecCorrectedBits is set, it can safely use t.GetFecCorrectedBits()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FecCorrectedBits == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetFecCorrectedBits() uint64 {
	if t == nil || t.FecCorrectedBits == nil {
		return 0
	}
	return *t.FecCorrectedBits
}

// GetFecCorrectedBytes retrieves the value of the leaf FecCorrectedBytes from the OpenconfigPlatform_Components_Component_Transceiver_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FecCorrectedBytes is set, it can safely use t.GetFecCorrectedBytes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FecCorrectedBytes == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetFecCorrectedBytes() uint64 {
	if t == nil || t.FecCorrectedBytes == nil {
		return 0
	}
	return *t.FecCorrectedBytes
}

// GetFecMode retrieves the value of the leaf FecMode from the OpenconfigPlatform_Components_Component_Transceiver_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FecMode is set, it can safely use t.GetFecMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FecMode == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetFecMode() E_OpenconfigPlatformTypes_FEC_MODE_TYPE {
	if t == nil || t.FecMode == 0 {
		return 0
	}
	return t.FecMode
}

// GetFecStatus retrieves the value of the leaf FecStatus from the OpenconfigPlatform_Components_Component_Transceiver_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FecStatus is set, it can safely use t.GetFecStatus()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FecStatus == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetFecStatus() E_OpenconfigPlatformTypes_FEC_STATUS_TYPE {
	if t == nil || t.FecStatus == 0 {
		return 0
	}
	return t.FecStatus
}

// GetFecUncorrectableBlocks retrieves the value of the leaf FecUncorrectableBlocks from the OpenconfigPlatform_Components_Component_Transceiver_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FecUncorrectableBlocks is set, it can safely use t.GetFecUncorrectableBlocks()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FecUncorrectableBlocks == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetFecUncorrectableBlocks() uint64 {
	if t == nil || t.FecUncorrectableBlocks == nil {
		return 0
	}
	return *t.FecUncorrectableBlocks
}

// GetFecUncorrectableWords retrieves the value of the leaf FecUncorrectableWords from the OpenconfigPlatform_Components_Component_Transceiver_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FecUncorrectableWords is set, it can safely use t.GetFecUncorrectableWords()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FecUncorrectableWords == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetFecUncorrectableWords() uint64 {
	if t == nil || t.FecUncorrectableWords == nil {
		return 0
	}
	return *t.FecUncorrectableWords
}

// GetFormFactor retrieves the value of the leaf FormFactor from the OpenconfigPlatform_Components_Component_Transceiver_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FormFactor is set, it can safely use t.GetFormFactor()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FormFactor == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetFormFactor() E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE {
	if t == nil || t.FormFactor == 0 {
		return 0
	}
	return t.FormFactor
}

// GetFormFactorPreconf retrieves the value of the leaf FormFactorPreconf from the OpenconfigPlatform_Components_Component_Transceiver_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FormFactorPreconf is set, it can safely use t.GetFormFactorPreconf()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FormFactorPreconf == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetFormFactorPreconf() E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE {
	if t == nil || t.FormFactorPreconf == 0 {
		return 0
	}
	return t.FormFactorPreconf
}

// GetOtnComplianceCode retrieves the value of the leaf OtnComplianceCode from the OpenconfigPlatform_Components_Component_Transceiver_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OtnComplianceCode is set, it can safely use t.GetOtnComplianceCode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OtnComplianceCode == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetOtnComplianceCode() E_OpenconfigTransportTypes_OTN_APPLICATION_CODE {
	if t == nil || t.OtnComplianceCode == 0 {
		return 0
	}
	return t.OtnComplianceCode
}

// GetPresent retrieves the value of the leaf Present from the OpenconfigPlatform_Components_Component_Transceiver_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Present is set, it can safely use t.GetPresent()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Present == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetPresent() E_OpenconfigPlatform_Components_Component_Transceiver_State_Present {
	if t == nil || t.Present == 0 {
		return 0
	}
	return t.Present
}

// GetSerialNo retrieves the value of the leaf SerialNo from the OpenconfigPlatform_Components_Component_Transceiver_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SerialNo is set, it can safely use t.GetSerialNo()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SerialNo == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetSerialNo() string {
	if t == nil || t.SerialNo == nil {
		return ""
	}
	return *t.SerialNo
}

// GetSonetSdhComplianceCode retrieves the value of the leaf SonetSdhComplianceCode from the OpenconfigPlatform_Components_Component_Transceiver_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SonetSdhComplianceCode is set, it can safely use t.GetSonetSdhComplianceCode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SonetSdhComplianceCode == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetSonetSdhComplianceCode() E_OpenconfigTransportTypes_SONET_APPLICATION_CODE {
	if t == nil || t.SonetSdhComplianceCode == 0 {
		return 0
	}
	return t.SonetSdhComplianceCode
}

// GetVendor retrieves the value of the leaf Vendor from the OpenconfigPlatform_Components_Component_Transceiver_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Vendor is set, it can safely use t.GetVendor()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Vendor == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetVendor() string {
	if t == nil || t.Vendor == nil {
		return ""
	}
	return *t.Vendor
}

// GetVendorPart retrieves the value of the leaf VendorPart from the OpenconfigPlatform_Components_Component_Transceiver_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VendorPart is set, it can safely use t.GetVendorPart()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VendorPart == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetVendorPart() string {
	if t == nil || t.VendorPart == nil {
		return ""
	}
	return *t.VendorPart
}

// GetVendorRev retrieves the value of the leaf VendorRev from the OpenconfigPlatform_Components_Component_Transceiver_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VendorRev is set, it can safely use t.GetVendorRev()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VendorRev == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) GetVendorRev() string {
	if t == nil || t.VendorRev == nil {
		return ""
	}
	return *t.VendorRev
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Transceiver_State_InputPower represents the /openconfig-platform/components/component/transceiver/state/input-power YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_State_InputPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_State_InputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_State_InputPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigPlatform_Components_Component_Transceiver_State_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_InputPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigPlatform_Components_Component_Transceiver_State_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_InputPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigPlatform_Components_Component_Transceiver_State_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_InputPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigPlatform_Components_Component_Transceiver_State_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_InputPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigPlatform_Components_Component_Transceiver_State_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_InputPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigPlatform_Components_Component_Transceiver_State_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_InputPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigPlatform_Components_Component_Transceiver_State_InputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_InputPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_InputPower) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_State_InputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_InputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent represents the /openconfig-platform/components/component/transceiver/state/laser-bias-current YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_LaserBiasCurrent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower represents the /openconfig-platform/components/component/transceiver/state/output-power YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_OutputPower) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer represents the /openconfig-platform/components/component/transceiver/state/post-fec-ber YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_PostFecBer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer represents the /openconfig-platform/components/component/transceiver/state/pre-fec-ber YANG schema element.
type OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-platform-transceiver"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-platform-transceiver"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-platform-transceiver"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-platform-transceiver"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-platform-transceiver"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-platform-transceiver"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-platform-transceiver"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigPlatform_Components_Component_Transceiver_State_PreFecBer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System represents the /openconfig-system/system YANG schema element.
type OpenconfigSystem_System struct {
	ΛMetadata     []ygot.Annotation                     `path:"@" ygotAnnotation:"true"`
	Aaa           *OpenconfigSystem_System_Aaa          `path:"aaa" module:"openconfig-system"`
	ΛAaa          []ygot.Annotation                     `path:"@aaa" ygotAnnotation:"true"`
	Alarms        *OpenconfigSystem_System_Alarms       `path:"alarms" module:"openconfig-system"`
	ΛAlarms       []ygot.Annotation                     `path:"@alarms" ygotAnnotation:"true"`
	Clock         *OpenconfigSystem_System_Clock        `path:"clock" module:"openconfig-system"`
	ΛClock        []ygot.Annotation                     `path:"@clock" ygotAnnotation:"true"`
	Config        *OpenconfigSystem_System_Config       `path:"config" module:"openconfig-system"`
	ΛConfig       []ygot.Annotation                     `path:"@config" ygotAnnotation:"true"`
	Cpus          *OpenconfigSystem_System_Cpus         `path:"cpus" module:"openconfig-system"`
	ΛCpus         []ygot.Annotation                     `path:"@cpus" ygotAnnotation:"true"`
	Dns           *OpenconfigSystem_System_Dns          `path:"dns" module:"openconfig-system"`
	ΛDns          []ygot.Annotation                     `path:"@dns" ygotAnnotation:"true"`
	GrpcServer    *OpenconfigSystem_System_GrpcServer   `path:"grpc-server" module:"openconfig-system"`
	ΛGrpcServer   []ygot.Annotation                     `path:"@grpc-server" ygotAnnotation:"true"`
	Logging       *OpenconfigSystem_System_Logging      `path:"logging" module:"openconfig-system"`
	ΛLogging      []ygot.Annotation                     `path:"@logging" ygotAnnotation:"true"`
	Memory        *OpenconfigSystem_System_Memory       `path:"memory" module:"openconfig-system"`
	ΛMemory       []ygot.Annotation                     `path:"@memory" ygotAnnotation:"true"`
	Ntp           *OpenconfigSystem_System_Ntp          `path:"ntp" module:"openconfig-system"`
	ΛNtp          []ygot.Annotation                     `path:"@ntp" ygotAnnotation:"true"`
	Processes     *OpenconfigSystem_System_Processes    `path:"processes" module:"openconfig-system"`
	ΛProcesses    []ygot.Annotation                     `path:"@processes" ygotAnnotation:"true"`
	SshServer     *OpenconfigSystem_System_SshServer    `path:"ssh-server" module:"openconfig-system"`
	ΛSshServer    []ygot.Annotation                     `path:"@ssh-server" ygotAnnotation:"true"`
	State         *OpenconfigSystem_System_State        `path:"state" module:"openconfig-system"`
	ΛState        []ygot.Annotation                     `path:"@state" ygotAnnotation:"true"`
	TelnetServer  *OpenconfigSystem_System_TelnetServer `path:"telnet-server" module:"openconfig-system"`
	ΛTelnetServer []ygot.Annotation                     `path:"@telnet-server" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System) IsYANGGoStruct() {}

// GetOrCreateAaa retrieves the value of the Aaa field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateAaa() *OpenconfigSystem_System_Aaa {
	if t.Aaa != nil {
		return t.Aaa
	}
	t.Aaa = &OpenconfigSystem_System_Aaa{}
	return t.Aaa
}

// GetOrCreateAlarms retrieves the value of the Alarms field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateAlarms() *OpenconfigSystem_System_Alarms {
	if t.Alarms != nil {
		return t.Alarms
	}
	t.Alarms = &OpenconfigSystem_System_Alarms{}
	return t.Alarms
}

// GetOrCreateClock retrieves the value of the Clock field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateClock() *OpenconfigSystem_System_Clock {
	if t.Clock != nil {
		return t.Clock
	}
	t.Clock = &OpenconfigSystem_System_Clock{}
	return t.Clock
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateConfig() *OpenconfigSystem_System_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Config{}
	return t.Config
}

// GetOrCreateCpus retrieves the value of the Cpus field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateCpus() *OpenconfigSystem_System_Cpus {
	if t.Cpus != nil {
		return t.Cpus
	}
	t.Cpus = &OpenconfigSystem_System_Cpus{}
	return t.Cpus
}

// GetOrCreateDns retrieves the value of the Dns field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateDns() *OpenconfigSystem_System_Dns {
	if t.Dns != nil {
		return t.Dns
	}
	t.Dns = &OpenconfigSystem_System_Dns{}
	return t.Dns
}

// GetOrCreateGrpcServer retrieves the value of the GrpcServer field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateGrpcServer() *OpenconfigSystem_System_GrpcServer {
	if t.GrpcServer != nil {
		return t.GrpcServer
	}
	t.GrpcServer = &OpenconfigSystem_System_GrpcServer{}
	return t.GrpcServer
}

// GetOrCreateLogging retrieves the value of the Logging field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateLogging() *OpenconfigSystem_System_Logging {
	if t.Logging != nil {
		return t.Logging
	}
	t.Logging = &OpenconfigSystem_System_Logging{}
	return t.Logging
}

// GetOrCreateMemory retrieves the value of the Memory field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateMemory() *OpenconfigSystem_System_Memory {
	if t.Memory != nil {
		return t.Memory
	}
	t.Memory = &OpenconfigSystem_System_Memory{}
	return t.Memory
}

// GetOrCreateNtp retrieves the value of the Ntp field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateNtp() *OpenconfigSystem_System_Ntp {
	if t.Ntp != nil {
		return t.Ntp
	}
	t.Ntp = &OpenconfigSystem_System_Ntp{}
	return t.Ntp
}

// GetOrCreateProcesses retrieves the value of the Processes field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateProcesses() *OpenconfigSystem_System_Processes {
	if t.Processes != nil {
		return t.Processes
	}
	t.Processes = &OpenconfigSystem_System_Processes{}
	return t.Processes
}

// GetOrCreateSshServer retrieves the value of the SshServer field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateSshServer() *OpenconfigSystem_System_SshServer {
	if t.SshServer != nil {
		return t.SshServer
	}
	t.SshServer = &OpenconfigSystem_System_SshServer{}
	return t.SshServer
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateState() *OpenconfigSystem_System_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_State{}
	return t.State
}

// GetOrCreateTelnetServer retrieves the value of the TelnetServer field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System) GetOrCreateTelnetServer() *OpenconfigSystem_System_TelnetServer {
	if t.TelnetServer != nil {
		return t.TelnetServer
	}
	t.TelnetServer = &OpenconfigSystem_System_TelnetServer{}
	return t.TelnetServer
}

// GetAaa returns the value of the Aaa struct pointer
// from OpenconfigSystem_System. If the receiver or the field Aaa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetAaa() *OpenconfigSystem_System_Aaa {
	if t != nil && t.Aaa != nil {
		return t.Aaa
	}
	return nil
}

// GetAlarms returns the value of the Alarms struct pointer
// from OpenconfigSystem_System. If the receiver or the field Alarms is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetAlarms() *OpenconfigSystem_System_Alarms {
	if t != nil && t.Alarms != nil {
		return t.Alarms
	}
	return nil
}

// GetClock returns the value of the Clock struct pointer
// from OpenconfigSystem_System. If the receiver or the field Clock is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetClock() *OpenconfigSystem_System_Clock {
	if t != nil && t.Clock != nil {
		return t.Clock
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetConfig() *OpenconfigSystem_System_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetCpus returns the value of the Cpus struct pointer
// from OpenconfigSystem_System. If the receiver or the field Cpus is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetCpus() *OpenconfigSystem_System_Cpus {
	if t != nil && t.Cpus != nil {
		return t.Cpus
	}
	return nil
}

// GetDns returns the value of the Dns struct pointer
// from OpenconfigSystem_System. If the receiver or the field Dns is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetDns() *OpenconfigSystem_System_Dns {
	if t != nil && t.Dns != nil {
		return t.Dns
	}
	return nil
}

// GetGrpcServer returns the value of the GrpcServer struct pointer
// from OpenconfigSystem_System. If the receiver or the field GrpcServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetGrpcServer() *OpenconfigSystem_System_GrpcServer {
	if t != nil && t.GrpcServer != nil {
		return t.GrpcServer
	}
	return nil
}

// GetLogging returns the value of the Logging struct pointer
// from OpenconfigSystem_System. If the receiver or the field Logging is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetLogging() *OpenconfigSystem_System_Logging {
	if t != nil && t.Logging != nil {
		return t.Logging
	}
	return nil
}

// GetMemory returns the value of the Memory struct pointer
// from OpenconfigSystem_System. If the receiver or the field Memory is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetMemory() *OpenconfigSystem_System_Memory {
	if t != nil && t.Memory != nil {
		return t.Memory
	}
	return nil
}

// GetNtp returns the value of the Ntp struct pointer
// from OpenconfigSystem_System. If the receiver or the field Ntp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetNtp() *OpenconfigSystem_System_Ntp {
	if t != nil && t.Ntp != nil {
		return t.Ntp
	}
	return nil
}

// GetProcesses returns the value of the Processes struct pointer
// from OpenconfigSystem_System. If the receiver or the field Processes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetProcesses() *OpenconfigSystem_System_Processes {
	if t != nil && t.Processes != nil {
		return t.Processes
	}
	return nil
}

// GetSshServer returns the value of the SshServer struct pointer
// from OpenconfigSystem_System. If the receiver or the field SshServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetSshServer() *OpenconfigSystem_System_SshServer {
	if t != nil && t.SshServer != nil {
		return t.SshServer
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetState() *OpenconfigSystem_System_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetTelnetServer returns the value of the TelnetServer struct pointer
// from OpenconfigSystem_System. If the receiver or the field TelnetServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System) GetTelnetServer() *OpenconfigSystem_System_TelnetServer {
	if t != nil && t.TelnetServer != nil {
		return t.TelnetServer
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Aaa represents the /openconfig-system/system/aaa YANG schema element.
type OpenconfigSystem_System_Aaa struct {
	ΛMetadata       []ygot.Annotation                           `path:"@" ygotAnnotation:"true"`
	Accounting      *OpenconfigSystem_System_Aaa_Accounting     `path:"accounting" module:"openconfig-system"`
	ΛAccounting     []ygot.Annotation                           `path:"@accounting" ygotAnnotation:"true"`
	Authentication  *OpenconfigSystem_System_Aaa_Authentication `path:"authentication" module:"openconfig-system"`
	ΛAuthentication []ygot.Annotation                           `path:"@authentication" ygotAnnotation:"true"`
	Authorization   *OpenconfigSystem_System_Aaa_Authorization  `path:"authorization" module:"openconfig-system"`
	ΛAuthorization  []ygot.Annotation                           `path:"@authorization" ygotAnnotation:"true"`
	Config          *OpenconfigSystem_System_Aaa_Config         `path:"config" module:"openconfig-system"`
	ΛConfig         []ygot.Annotation                           `path:"@config" ygotAnnotation:"true"`
	ServerGroups    *OpenconfigSystem_System_Aaa_ServerGroups   `path:"server-groups" module:"openconfig-system"`
	ΛServerGroups   []ygot.Annotation                           `path:"@server-groups" ygotAnnotation:"true"`
	State           *OpenconfigSystem_System_Aaa_State          `path:"state" module:"openconfig-system"`
	ΛState          []ygot.Annotation                           `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa) IsYANGGoStruct() {}

// GetOrCreateAccounting retrieves the value of the Accounting field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa) GetOrCreateAccounting() *OpenconfigSystem_System_Aaa_Accounting {
	if t.Accounting != nil {
		return t.Accounting
	}
	t.Accounting = &OpenconfigSystem_System_Aaa_Accounting{}
	return t.Accounting
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa) GetOrCreateAuthentication() *OpenconfigSystem_System_Aaa_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &OpenconfigSystem_System_Aaa_Authentication{}
	return t.Authentication
}

// GetOrCreateAuthorization retrieves the value of the Authorization field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa) GetOrCreateAuthorization() *OpenconfigSystem_System_Aaa_Authorization {
	if t.Authorization != nil {
		return t.Authorization
	}
	t.Authorization = &OpenconfigSystem_System_Aaa_Authorization{}
	return t.Authorization
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_Config{}
	return t.Config
}

// GetOrCreateServerGroups retrieves the value of the ServerGroups field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa) GetOrCreateServerGroups() *OpenconfigSystem_System_Aaa_ServerGroups {
	if t.ServerGroups != nil {
		return t.ServerGroups
	}
	t.ServerGroups = &OpenconfigSystem_System_Aaa_ServerGroups{}
	return t.ServerGroups
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa) GetOrCreateState() *OpenconfigSystem_System_Aaa_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_State{}
	return t.State
}

// GetAccounting returns the value of the Accounting struct pointer
// from OpenconfigSystem_System_Aaa. If the receiver or the field Accounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa) GetAccounting() *OpenconfigSystem_System_Aaa_Accounting {
	if t != nil && t.Accounting != nil {
		return t.Accounting
	}
	return nil
}

// GetAuthentication returns the value of the Authentication struct pointer
// from OpenconfigSystem_System_Aaa. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa) GetAuthentication() *OpenconfigSystem_System_Aaa_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetAuthorization returns the value of the Authorization struct pointer
// from OpenconfigSystem_System_Aaa. If the receiver or the field Authorization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa) GetAuthorization() *OpenconfigSystem_System_Aaa_Authorization {
	if t != nil && t.Authorization != nil {
		return t.Authorization
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa) GetConfig() *OpenconfigSystem_System_Aaa_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetServerGroups returns the value of the ServerGroups struct pointer
// from OpenconfigSystem_System_Aaa. If the receiver or the field ServerGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa) GetServerGroups() *OpenconfigSystem_System_Aaa_ServerGroups {
	if t != nil && t.ServerGroups != nil {
		return t.ServerGroups
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa) GetState() *OpenconfigSystem_System_Aaa_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Aaa_Accounting represents the /openconfig-system/system/aaa/accounting YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting struct {
	ΛMetadata []ygot.Annotation                              `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Aaa_Accounting_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                              `path:"@config" ygotAnnotation:"true"`
	Events    *OpenconfigSystem_System_Aaa_Accounting_Events `path:"events" module:"openconfig-system"`
	ΛEvents   []ygot.Annotation                              `path:"@events" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Aaa_Accounting_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Accounting) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_Accounting_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_Accounting_Config{}
	return t.Config
}

// GetOrCreateEvents retrieves the value of the Events field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Accounting) GetOrCreateEvents() *OpenconfigSystem_System_Aaa_Accounting_Events {
	if t.Events != nil {
		return t.Events
	}
	t.Events = &OpenconfigSystem_System_Aaa_Accounting_Events{}
	return t.Events
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Accounting) GetOrCreateState() *OpenconfigSystem_System_Aaa_Accounting_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_Accounting_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_Accounting. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Accounting) GetConfig() *OpenconfigSystem_System_Aaa_Accounting_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetEvents returns the value of the Events struct pointer
// from OpenconfigSystem_System_Aaa_Accounting. If the receiver or the field Events is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Accounting) GetEvents() *OpenconfigSystem_System_Aaa_Accounting_Events {
	if t != nil && t.Events != nil {
		return t.Events
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_Accounting. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Accounting) GetState() *OpenconfigSystem_System_Aaa_Accounting_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Accounting_Config represents the /openconfig-system/system/aaa/accounting/config YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_Config struct {
	ΛMetadata         []ygot.Annotation                                                      `path:"@" ygotAnnotation:"true"`
	AccountingMethod  []OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union `path:"accounting-method" module:"openconfig-system"`
	ΛAccountingMethod []ygot.Annotation                                                      `path:"@accounting-method" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_Config) IsYANGGoStruct() {}

// GetAccountingMethod retrieves the value of the leaf AccountingMethod from the OpenconfigSystem_System_Aaa_Accounting_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AccountingMethod is set, it can safely use t.GetAccountingMethod()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AccountingMethod == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Accounting_Config) GetAccountingMethod() []OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union {
	if t == nil || t.AccountingMethod == nil {
		return nil
	}
	return t.AccountingMethod
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/accounting/config/accounting-method within the YANG schema.
type OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union interface {
	Is_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union()
}

// OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/accounting/config/accounting-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union ensures that OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union() {
}

// OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_String is used when /openconfig-system/system/aaa/accounting/config/accounting-method
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_String struct {
	String string
}

// Is_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union ensures that OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_String
// implements the OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_String) Is_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union() {
}

// To_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Accounting_Config) To_OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Accounting_Config_AccountingMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}

// OpenconfigSystem_System_Aaa_Accounting_Events represents the /openconfig-system/system/aaa/accounting/events YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_Events struct {
	ΛMetadata []ygot.Annotation                                                                                       `path:"@" ygotAnnotation:"true"`
	Event     map[E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Accounting_Events_Event `path:"event" module:"openconfig-system"`
	ΛEvent    []ygot.Annotation                                                                                       `path:"@event" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_Events implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_Events) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// OpenconfigSystem_System_Aaa_Accounting_Events struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) NewEvent(EventType E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) (*OpenconfigSystem_System_Aaa_Accounting_Events_Event, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Accounting_Events_Event)
	}

	key := EventType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &OpenconfigSystem_System_Aaa_Accounting_Events_Event{
		EventType: EventType,
	}

	return t.Event[key], nil
}

// RenameEvent renames an entry in the list Event within
// the OpenconfigSystem_System_Aaa_Accounting_Events struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) RenameEvent(oldK, newK E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) error {
	if _, ok := t.Event[newK]; ok {
		return fmt.Errorf("key %v already exists in Event", newK)
	}

	e, ok := t.Event[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Event", oldK)
	}
	e.EventType = newK

	t.Event[newK] = e
	delete(t.Event, oldK)
	return nil
}

// GetOrCreateEvent retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Aaa_Accounting_Events. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) GetOrCreateEvent(EventType E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) *OpenconfigSystem_System_Aaa_Accounting_Events_Event {

	key := EventType

	if v, ok := t.Event[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvent(EventType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvent got unexpected error: %v", err))
	}
	return v
}

// GetEvent retrieves the value with the specified key from
// the Event map field of OpenconfigSystem_System_Aaa_Accounting_Events. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) GetEvent(EventType E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) *OpenconfigSystem_System_Aaa_Accounting_Events_Event {

	if t == nil {
		return nil
	}

	key := EventType

	if lm, ok := t.Event[key]; ok {
		return lm
	}
	return nil
}

// AppendEvent appends the supplied OpenconfigSystem_System_Aaa_Accounting_Events_Event struct to the
// list Event of OpenconfigSystem_System_Aaa_Accounting_Events. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Aaa_Accounting_Events_Event already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) AppendEvent(v *OpenconfigSystem_System_Aaa_Accounting_Events_Event) error {
	key := v.EventType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Accounting_Events_Event)
	}

	if _, ok := t.Event[key]; ok {
		return fmt.Errorf("duplicate key for list Event %v", key)
	}

	t.Event[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_Events"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Accounting_Events_Event represents the /openconfig-system/system/aaa/accounting/events/event YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_Events_Event struct {
	ΛMetadata  []ygot.Annotation                                           `path:"@" ygotAnnotation:"true"`
	Config     *OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config `path:"config" module:"openconfig-system"`
	ΛConfig    []ygot.Annotation                                           `path:"@config" ygotAnnotation:"true"`
	EventType  E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE              `path:"event-type" module:"openconfig-system"`
	ΛEventType []ygot.Annotation                                           `path:"@event-type" ygotAnnotation:"true"`
	State      *OpenconfigSystem_System_Aaa_Accounting_Events_Event_State  `path:"state" module:"openconfig-system"`
	ΛState     []ygot.Annotation                                           `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_Events_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_Events_Event) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) GetOrCreateState() *OpenconfigSystem_System_Aaa_Accounting_Events_Event_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_Accounting_Events_Event_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_Accounting_Events_Event. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) GetConfig() *OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_Accounting_Events_Event. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) GetState() *OpenconfigSystem_System_Aaa_Accounting_Events_Event_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetEventType retrieves the value of the leaf EventType from the OpenconfigSystem_System_Aaa_Accounting_Events_Event
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EventType is set, it can safely use t.GetEventType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EventType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) GetEventType() E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE {
	if t == nil || t.EventType == 0 {
		return 0
	}
	return t.EventType
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Aaa_Accounting_Events_Event struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"event-type": t.EventType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_Events_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config represents the /openconfig-system/system/aaa/accounting/events/event/config YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config struct {
	ΛMetadata  []ygot.Annotation                                                   `path:"@" ygotAnnotation:"true"`
	EventType  E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE                      `path:"event-type" module:"openconfig-system"`
	ΛEventType []ygot.Annotation                                                   `path:"@event-type" ygotAnnotation:"true"`
	Record     E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record `path:"record" module:"openconfig-system"`
	ΛRecord    []ygot.Annotation                                                   `path:"@record" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config) IsYANGGoStruct() {}

// GetEventType retrieves the value of the leaf EventType from the OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EventType is set, it can safely use t.GetEventType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EventType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config) GetEventType() E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE {
	if t == nil || t.EventType == 0 {
		return 0
	}
	return t.EventType
}

// GetRecord retrieves the value of the leaf Record from the OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Record is set, it can safely use t.GetRecord()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Record == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config) GetRecord() E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record {
	if t == nil || t.Record == 0 {
		return 0
	}
	return t.Record
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Accounting_Events_Event_State represents the /openconfig-system/system/aaa/accounting/events/event/state YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_Events_Event_State struct {
	ΛMetadata  []ygot.Annotation                                                   `path:"@" ygotAnnotation:"true"`
	EventType  E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE                      `path:"event-type" module:"openconfig-system"`
	ΛEventType []ygot.Annotation                                                   `path:"@event-type" ygotAnnotation:"true"`
	Record     E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record `path:"record" module:"openconfig-system"`
	ΛRecord    []ygot.Annotation                                                   `path:"@record" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_Events_Event_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_Events_Event_State) IsYANGGoStruct() {}

// GetEventType retrieves the value of the leaf EventType from the OpenconfigSystem_System_Aaa_Accounting_Events_Event_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EventType is set, it can safely use t.GetEventType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EventType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_State) GetEventType() E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE {
	if t == nil || t.EventType == 0 {
		return 0
	}
	return t.EventType
}

// GetRecord retrieves the value of the leaf Record from the OpenconfigSystem_System_Aaa_Accounting_Events_Event_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Record is set, it can safely use t.GetRecord()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Record == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_State) GetRecord() E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record {
	if t == nil || t.Record == 0 {
		return 0
	}
	return t.Record
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_Events_Event_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_Events_Event_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Accounting_State represents the /openconfig-system/system/aaa/accounting/state YANG schema element.
type OpenconfigSystem_System_Aaa_Accounting_State struct {
	ΛMetadata         []ygot.Annotation                                                     `path:"@" ygotAnnotation:"true"`
	AccountingMethod  []OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union `path:"accounting-method" module:"openconfig-system"`
	ΛAccountingMethod []ygot.Annotation                                                     `path:"@accounting-method" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Accounting_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Accounting_State) IsYANGGoStruct() {}

// GetAccountingMethod retrieves the value of the leaf AccountingMethod from the OpenconfigSystem_System_Aaa_Accounting_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AccountingMethod is set, it can safely use t.GetAccountingMethod()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AccountingMethod == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Accounting_State) GetAccountingMethod() []OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union {
	if t == nil || t.AccountingMethod == nil {
		return nil
	}
	return t.AccountingMethod
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Accounting_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Accounting_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Accounting_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/accounting/state/accounting-method within the YANG schema.
type OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union interface {
	Is_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union()
}

// OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/accounting/state/accounting-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union ensures that OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union() {
}

// OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_String is used when /openconfig-system/system/aaa/accounting/state/accounting-method
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_String struct {
	String string
}

// Is_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union ensures that OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_String
// implements the OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_String) Is_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union() {
}

// To_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Accounting_State) To_OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Accounting_State_AccountingMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}

// OpenconfigSystem_System_Aaa_Authentication represents the /openconfig-system/system/aaa/authentication YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication struct {
	ΛMetadata  []ygot.Annotation                                     `path:"@" ygotAnnotation:"true"`
	AdminUser  *OpenconfigSystem_System_Aaa_Authentication_AdminUser `path:"admin-user" module:"openconfig-system"`
	ΛAdminUser []ygot.Annotation                                     `path:"@admin-user" ygotAnnotation:"true"`
	Config     *OpenconfigSystem_System_Aaa_Authentication_Config    `path:"config" module:"openconfig-system"`
	ΛConfig    []ygot.Annotation                                     `path:"@config" ygotAnnotation:"true"`
	State      *OpenconfigSystem_System_Aaa_Authentication_State     `path:"state" module:"openconfig-system"`
	ΛState     []ygot.Annotation                                     `path:"@state" ygotAnnotation:"true"`
	Users      *OpenconfigSystem_System_Aaa_Authentication_Users     `path:"users" module:"openconfig-system"`
	ΛUsers     []ygot.Annotation                                     `path:"@users" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication) IsYANGGoStruct() {}

// GetOrCreateAdminUser retrieves the value of the AdminUser field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authentication) GetOrCreateAdminUser() *OpenconfigSystem_System_Aaa_Authentication_AdminUser {
	if t.AdminUser != nil {
		return t.AdminUser
	}
	t.AdminUser = &OpenconfigSystem_System_Aaa_Authentication_AdminUser{}
	return t.AdminUser
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authentication) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_Authentication_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_Authentication_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authentication) GetOrCreateState() *OpenconfigSystem_System_Aaa_Authentication_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_Authentication_State{}
	return t.State
}

// GetOrCreateUsers retrieves the value of the Users field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authentication) GetOrCreateUsers() *OpenconfigSystem_System_Aaa_Authentication_Users {
	if t.Users != nil {
		return t.Users
	}
	t.Users = &OpenconfigSystem_System_Aaa_Authentication_Users{}
	return t.Users
}

// GetAdminUser returns the value of the AdminUser struct pointer
// from OpenconfigSystem_System_Aaa_Authentication. If the receiver or the field AdminUser is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication) GetAdminUser() *OpenconfigSystem_System_Aaa_Authentication_AdminUser {
	if t != nil && t.AdminUser != nil {
		return t.AdminUser
	}
	return nil
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_Authentication. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication) GetConfig() *OpenconfigSystem_System_Aaa_Authentication_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_Authentication. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication) GetState() *OpenconfigSystem_System_Aaa_Authentication_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetUsers returns the value of the Users struct pointer
// from OpenconfigSystem_System_Aaa_Authentication. If the receiver or the field Users is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication) GetUsers() *OpenconfigSystem_System_Aaa_Authentication_Users {
	if t != nil && t.Users != nil {
		return t.Users
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authentication_AdminUser represents the /openconfig-system/system/aaa/authentication/admin-user YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_AdminUser struct {
	ΛMetadata []ygot.Annotation                                            `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                            `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Aaa_Authentication_AdminUser_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                            `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_AdminUser implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_AdminUser) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser) GetOrCreateState() *OpenconfigSystem_System_Aaa_Authentication_AdminUser_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_Authentication_AdminUser_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_Authentication_AdminUser. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser) GetConfig() *OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_Authentication_AdminUser. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser) GetState() *OpenconfigSystem_System_Aaa_Authentication_AdminUser_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_AdminUser"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config represents the /openconfig-system/system/aaa/authentication/admin-user/config YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config struct {
	ΛMetadata            []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AdminPassword        *string           `path:"admin-password" module:"openconfig-system"`
	ΛAdminPassword       []ygot.Annotation `path:"@admin-password" ygotAnnotation:"true"`
	AdminPasswordHashed  *string           `path:"admin-password-hashed" module:"openconfig-system"`
	ΛAdminPasswordHashed []ygot.Annotation `path:"@admin-password-hashed" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config) IsYANGGoStruct() {}

// GetAdminPassword retrieves the value of the leaf AdminPassword from the OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdminPassword is set, it can safely use t.GetAdminPassword()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdminPassword == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config) GetAdminPassword() string {
	if t == nil || t.AdminPassword == nil {
		return ""
	}
	return *t.AdminPassword
}

// GetAdminPasswordHashed retrieves the value of the leaf AdminPasswordHashed from the OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdminPasswordHashed is set, it can safely use t.GetAdminPasswordHashed()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdminPasswordHashed == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config) GetAdminPasswordHashed() string {
	if t == nil || t.AdminPasswordHashed == nil {
		return ""
	}
	return *t.AdminPasswordHashed
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authentication_AdminUser_State represents the /openconfig-system/system/aaa/authentication/admin-user/state YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_AdminUser_State struct {
	ΛMetadata            []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AdminPassword        *string           `path:"admin-password" module:"openconfig-system"`
	ΛAdminPassword       []ygot.Annotation `path:"@admin-password" ygotAnnotation:"true"`
	AdminPasswordHashed  *string           `path:"admin-password-hashed" module:"openconfig-system"`
	ΛAdminPasswordHashed []ygot.Annotation `path:"@admin-password-hashed" ygotAnnotation:"true"`
	AdminUsername        *string           `path:"admin-username" module:"openconfig-system"`
	ΛAdminUsername       []ygot.Annotation `path:"@admin-username" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_AdminUser_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_AdminUser_State) IsYANGGoStruct() {}

// GetAdminPassword retrieves the value of the leaf AdminPassword from the OpenconfigSystem_System_Aaa_Authentication_AdminUser_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdminPassword is set, it can safely use t.GetAdminPassword()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdminPassword == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_State) GetAdminPassword() string {
	if t == nil || t.AdminPassword == nil {
		return ""
	}
	return *t.AdminPassword
}

// GetAdminPasswordHashed retrieves the value of the leaf AdminPasswordHashed from the OpenconfigSystem_System_Aaa_Authentication_AdminUser_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdminPasswordHashed is set, it can safely use t.GetAdminPasswordHashed()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdminPasswordHashed == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_State) GetAdminPasswordHashed() string {
	if t == nil || t.AdminPasswordHashed == nil {
		return ""
	}
	return *t.AdminPasswordHashed
}

// GetAdminUsername retrieves the value of the leaf AdminUsername from the OpenconfigSystem_System_Aaa_Authentication_AdminUser_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdminUsername is set, it can safely use t.GetAdminUsername()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdminUsername == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_State) GetAdminUsername() string {
	if t == nil || t.AdminUsername == nil {
		return ""
	}
	return *t.AdminUsername
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_AdminUser_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_AdminUser_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authentication_Config represents the /openconfig-system/system/aaa/authentication/config YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_Config struct {
	ΛMetadata             []ygot.Annotation                                                              `path:"@" ygotAnnotation:"true"`
	AuthenticationMethod  []OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union `path:"authentication-method" module:"openconfig-system"`
	ΛAuthenticationMethod []ygot.Annotation                                                              `path:"@authentication-method" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_Config) IsYANGGoStruct() {}

// GetAuthenticationMethod retrieves the value of the leaf AuthenticationMethod from the OpenconfigSystem_System_Aaa_Authentication_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AuthenticationMethod is set, it can safely use t.GetAuthenticationMethod()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AuthenticationMethod == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Config) GetAuthenticationMethod() []OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union {
	if t == nil || t.AuthenticationMethod == nil {
		return nil
	}
	return t.AuthenticationMethod
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authentication/config/authentication-method within the YANG schema.
type OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union interface {
	Is_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union()
}

// OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/authentication/config/authentication-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union() {
}

// OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String is used when /openconfig-system/system/aaa/authentication/config/authentication-method
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String struct {
	String string
}

// Is_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String
// implements the OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String) Is_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union() {
}

// To_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authentication_Config) To_OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authentication_Config_AuthenticationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}

// OpenconfigSystem_System_Aaa_Authentication_State represents the /openconfig-system/system/aaa/authentication/state YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_State struct {
	ΛMetadata             []ygot.Annotation                                                             `path:"@" ygotAnnotation:"true"`
	AuthenticationMethod  []OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union `path:"authentication-method" module:"openconfig-system"`
	ΛAuthenticationMethod []ygot.Annotation                                                             `path:"@authentication-method" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_State) IsYANGGoStruct() {}

// GetAuthenticationMethod retrieves the value of the leaf AuthenticationMethod from the OpenconfigSystem_System_Aaa_Authentication_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AuthenticationMethod is set, it can safely use t.GetAuthenticationMethod()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AuthenticationMethod == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_State) GetAuthenticationMethod() []OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union {
	if t == nil || t.AuthenticationMethod == nil {
		return nil
	}
	return t.AuthenticationMethod
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authentication/state/authentication-method within the YANG schema.
type OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union interface {
	Is_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union()
}

// OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/authentication/state/authentication-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union() {
}

// OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_String is used when /openconfig-system/system/aaa/authentication/state/authentication-method
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_String struct {
	String string
}

// Is_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_String
// implements the OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_String) Is_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union() {
}

// To_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authentication_State) To_OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authentication_State_AuthenticationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}

// OpenconfigSystem_System_Aaa_Authentication_Users represents the /openconfig-system/system/aaa/authentication/users YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_Users struct {
	ΛMetadata []ygot.Annotation                                                 `path:"@" ygotAnnotation:"true"`
	User      map[string]*OpenconfigSystem_System_Aaa_Authentication_Users_User `path:"user" module:"openconfig-system"`
	ΛUser     []ygot.Annotation                                                 `path:"@user" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_Users implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_Users) IsYANGGoStruct() {}

// NewUser creates a new entry in the User list of the
// OpenconfigSystem_System_Aaa_Authentication_Users struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) NewUser(Username string) (*OpenconfigSystem_System_Aaa_Authentication_Users_User, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*OpenconfigSystem_System_Aaa_Authentication_Users_User)
	}

	key := Username

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.User[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list User", key)
	}

	t.User[key] = &OpenconfigSystem_System_Aaa_Authentication_Users_User{
		Username: &Username,
	}

	return t.User[key], nil
}

// RenameUser renames an entry in the list User within
// the OpenconfigSystem_System_Aaa_Authentication_Users struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) RenameUser(oldK, newK string) error {
	if _, ok := t.User[newK]; ok {
		return fmt.Errorf("key %v already exists in User", newK)
	}

	e, ok := t.User[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in User", oldK)
	}
	e.Username = &newK

	t.User[newK] = e
	delete(t.User, oldK)
	return nil
}

// GetOrCreateUser retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Aaa_Authentication_Users. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) GetOrCreateUser(Username string) *OpenconfigSystem_System_Aaa_Authentication_Users_User {

	key := Username

	if v, ok := t.User[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUser(Username)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUser got unexpected error: %v", err))
	}
	return v
}

// GetUser retrieves the value with the specified key from
// the User map field of OpenconfigSystem_System_Aaa_Authentication_Users. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) GetUser(Username string) *OpenconfigSystem_System_Aaa_Authentication_Users_User {

	if t == nil {
		return nil
	}

	key := Username

	if lm, ok := t.User[key]; ok {
		return lm
	}
	return nil
}

// AppendUser appends the supplied OpenconfigSystem_System_Aaa_Authentication_Users_User struct to the
// list User of OpenconfigSystem_System_Aaa_Authentication_Users. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Aaa_Authentication_Users_User already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) AppendUser(v *OpenconfigSystem_System_Aaa_Authentication_Users_User) error {
	key := *v.Username

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*OpenconfigSystem_System_Aaa_Authentication_Users_User)
	}

	if _, ok := t.User[key]; ok {
		return fmt.Errorf("duplicate key for list User %v", key)
	}

	t.User[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_Users"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User represents the /openconfig-system/system/aaa/authentication/users/user YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_Users_User struct {
	ΛMetadata []ygot.Annotation                                             `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                             `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Aaa_Authentication_Users_User_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                             `path:"@state" ygotAnnotation:"true"`
	Username  *string                                                       `path:"username" module:"openconfig-system"`
	ΛUsername []ygot.Annotation                                             `path:"@username" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_Authentication_Users_User_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) GetOrCreateState() *OpenconfigSystem_System_Aaa_Authentication_Users_User_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_Authentication_Users_User_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_Authentication_Users_User. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) GetConfig() *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_Authentication_Users_User. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) GetState() *OpenconfigSystem_System_Aaa_Authentication_Users_User_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetUsername retrieves the value of the leaf Username from the OpenconfigSystem_System_Aaa_Authentication_Users_User
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Username is set, it can safely use t.GetUsername()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Username == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) GetUsername() string {
	if t == nil || t.Username == nil {
		return ""
	}
	return *t.Username
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Aaa_Authentication_Users_User struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Username == nil {
		return nil, fmt.Errorf("nil value for key Username")
	}

	return map[string]interface{}{
		"username": *t.Username,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_Users_User"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_Config represents the /openconfig-system/system/aaa/authentication/users/user/config YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_Config struct {
	ΛMetadata       []ygot.Annotation                                                       `path:"@" ygotAnnotation:"true"`
	Password        *string                                                                 `path:"password" module:"openconfig-system"`
	ΛPassword       []ygot.Annotation                                                       `path:"@password" ygotAnnotation:"true"`
	PasswordHashed  *string                                                                 `path:"password-hashed" module:"openconfig-system"`
	ΛPasswordHashed []ygot.Annotation                                                       `path:"@password-hashed" ygotAnnotation:"true"`
	Role            OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union `path:"role" module:"openconfig-system"`
	ΛRole           []ygot.Annotation                                                       `path:"@role" ygotAnnotation:"true"`
	SshKey          *string                                                                 `path:"ssh-key" module:"openconfig-system"`
	ΛSshKey         []ygot.Annotation                                                       `path:"@ssh-key" ygotAnnotation:"true"`
	Username        *string                                                                 `path:"username" module:"openconfig-system"`
	ΛUsername       []ygot.Annotation                                                       `path:"@username" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) IsYANGGoStruct() {}

// GetPassword retrieves the value of the leaf Password from the OpenconfigSystem_System_Aaa_Authentication_Users_User_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Password is set, it can safely use t.GetPassword()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Password == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetPasswordHashed retrieves the value of the leaf PasswordHashed from the OpenconfigSystem_System_Aaa_Authentication_Users_User_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PasswordHashed is set, it can safely use t.GetPasswordHashed()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PasswordHashed == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) GetPasswordHashed() string {
	if t == nil || t.PasswordHashed == nil {
		return ""
	}
	return *t.PasswordHashed
}

// GetRole retrieves the value of the leaf Role from the OpenconfigSystem_System_Aaa_Authentication_Users_User_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Role is set, it can safely use t.GetRole()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Role == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) GetRole() OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union {
	if t == nil || t.Role == nil {
		return nil
	}
	return t.Role
}

// GetSshKey retrieves the value of the leaf SshKey from the OpenconfigSystem_System_Aaa_Authentication_Users_User_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SshKey is set, it can safely use t.GetSshKey()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SshKey == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) GetSshKey() string {
	if t == nil || t.SshKey == nil {
		return ""
	}
	return *t.SshKey
}

// GetUsername retrieves the value of the leaf Username from the OpenconfigSystem_System_Aaa_Authentication_Users_User_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Username is set, it can safely use t.GetUsername()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Username == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) GetUsername() string {
	if t == nil || t.Username == nil {
		return ""
	}
	return *t.Username
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_Users_User_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authentication/users/user/config/role within the YANG schema.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union interface {
	Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union()
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES is used when /openconfig-system/system/aaa/authentication/users/user/config/role
// is to be set to a E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES value.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES struct {
	E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
}

// Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
// implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union() {
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_String is used when /openconfig-system/system/aaa/authentication/users/user/config/role
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_String struct {
	String string
}

// Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_String
// implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_String) Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union() {
}

// To_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_Config) To_OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES:
		return &OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authentication_Users_User_Config_Role_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES, string]", i, i)
	}
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_State represents the /openconfig-system/system/aaa/authentication/users/user/state YANG schema element.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_State struct {
	ΛMetadata       []ygot.Annotation                                                      `path:"@" ygotAnnotation:"true"`
	Password        *string                                                                `path:"password" module:"openconfig-system"`
	ΛPassword       []ygot.Annotation                                                      `path:"@password" ygotAnnotation:"true"`
	PasswordHashed  *string                                                                `path:"password-hashed" module:"openconfig-system"`
	ΛPasswordHashed []ygot.Annotation                                                      `path:"@password-hashed" ygotAnnotation:"true"`
	Role            OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union `path:"role" module:"openconfig-system"`
	ΛRole           []ygot.Annotation                                                      `path:"@role" ygotAnnotation:"true"`
	SshKey          *string                                                                `path:"ssh-key" module:"openconfig-system"`
	ΛSshKey         []ygot.Annotation                                                      `path:"@ssh-key" ygotAnnotation:"true"`
	Username        *string                                                                `path:"username" module:"openconfig-system"`
	ΛUsername       []ygot.Annotation                                                      `path:"@username" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_State) IsYANGGoStruct() {}

// GetPassword retrieves the value of the leaf Password from the OpenconfigSystem_System_Aaa_Authentication_Users_User_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Password is set, it can safely use t.GetPassword()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Password == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_State) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetPasswordHashed retrieves the value of the leaf PasswordHashed from the OpenconfigSystem_System_Aaa_Authentication_Users_User_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PasswordHashed is set, it can safely use t.GetPasswordHashed()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PasswordHashed == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_State) GetPasswordHashed() string {
	if t == nil || t.PasswordHashed == nil {
		return ""
	}
	return *t.PasswordHashed
}

// GetRole retrieves the value of the leaf Role from the OpenconfigSystem_System_Aaa_Authentication_Users_User_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Role is set, it can safely use t.GetRole()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Role == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_State) GetRole() OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union {
	if t == nil || t.Role == nil {
		return nil
	}
	return t.Role
}

// GetSshKey retrieves the value of the leaf SshKey from the OpenconfigSystem_System_Aaa_Authentication_Users_User_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SshKey is set, it can safely use t.GetSshKey()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SshKey == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_State) GetSshKey() string {
	if t == nil || t.SshKey == nil {
		return ""
	}
	return *t.SshKey
}

// GetUsername retrieves the value of the leaf Username from the OpenconfigSystem_System_Aaa_Authentication_Users_User_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Username is set, it can safely use t.GetUsername()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Username == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_State) GetUsername() string {
	if t == nil || t.Username == nil {
		return ""
	}
	return *t.Username
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authentication_Users_User_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authentication/users/user/state/role within the YANG schema.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union interface {
	Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union()
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES is used when /openconfig-system/system/aaa/authentication/users/user/state/role
// is to be set to a E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES value.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES struct {
	E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
}

// Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
// implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union() {
}

// OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_String is used when /openconfig-system/system/aaa/authentication/users/user/state/role
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_String struct {
	String string
}

// Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union ensures that OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_String
// implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union interface.
func (*OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_String) Is_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union() {
}

// To_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authentication_Users_User_State) To_OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES:
		return &OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authentication_Users_User_State_Role_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES, string]", i, i)
	}
}

// OpenconfigSystem_System_Aaa_Authorization represents the /openconfig-system/system/aaa/authorization YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization struct {
	ΛMetadata []ygot.Annotation                                 `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Aaa_Authorization_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                 `path:"@config" ygotAnnotation:"true"`
	Events    *OpenconfigSystem_System_Aaa_Authorization_Events `path:"events" module:"openconfig-system"`
	ΛEvents   []ygot.Annotation                                 `path:"@events" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Aaa_Authorization_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                 `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authorization) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_Authorization_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_Authorization_Config{}
	return t.Config
}

// GetOrCreateEvents retrieves the value of the Events field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authorization) GetOrCreateEvents() *OpenconfigSystem_System_Aaa_Authorization_Events {
	if t.Events != nil {
		return t.Events
	}
	t.Events = &OpenconfigSystem_System_Aaa_Authorization_Events{}
	return t.Events
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authorization) GetOrCreateState() *OpenconfigSystem_System_Aaa_Authorization_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_Authorization_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_Authorization. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authorization) GetConfig() *OpenconfigSystem_System_Aaa_Authorization_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetEvents returns the value of the Events struct pointer
// from OpenconfigSystem_System_Aaa_Authorization. If the receiver or the field Events is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authorization) GetEvents() *OpenconfigSystem_System_Aaa_Authorization_Events {
	if t != nil && t.Events != nil {
		return t.Events
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_Authorization. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authorization) GetState() *OpenconfigSystem_System_Aaa_Authorization_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authorization_Config represents the /openconfig-system/system/aaa/authorization/config YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_Config struct {
	ΛMetadata            []ygot.Annotation                                                            `path:"@" ygotAnnotation:"true"`
	AuthorizationMethod  []OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union `path:"authorization-method" module:"openconfig-system"`
	ΛAuthorizationMethod []ygot.Annotation                                                            `path:"@authorization-method" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_Config) IsYANGGoStruct() {}

// GetAuthorizationMethod retrieves the value of the leaf AuthorizationMethod from the OpenconfigSystem_System_Aaa_Authorization_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AuthorizationMethod is set, it can safely use t.GetAuthorizationMethod()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AuthorizationMethod == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authorization_Config) GetAuthorizationMethod() []OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union {
	if t == nil || t.AuthorizationMethod == nil {
		return nil
	}
	return t.AuthorizationMethod
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authorization/config/authorization-method within the YANG schema.
type OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union interface {
	Is_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union()
}

// OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/authorization/config/authorization-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union() {
}

// OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String is used when /openconfig-system/system/aaa/authorization/config/authorization-method
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String struct {
	String string
}

// Is_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String
// implements the OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String) Is_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union() {
}

// To_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authorization_Config) To_OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authorization_Config_AuthorizationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}

// OpenconfigSystem_System_Aaa_Authorization_Events represents the /openconfig-system/system/aaa/authorization/events YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_Events struct {
	ΛMetadata []ygot.Annotation                                                                                             `path:"@" ygotAnnotation:"true"`
	Event     map[E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Authorization_Events_Event `path:"event" module:"openconfig-system"`
	ΛEvent    []ygot.Annotation                                                                                             `path:"@event" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_Events implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_Events) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// OpenconfigSystem_System_Aaa_Authorization_Events struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) NewEvent(EventType E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) (*OpenconfigSystem_System_Aaa_Authorization_Events_Event, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Authorization_Events_Event)
	}

	key := EventType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &OpenconfigSystem_System_Aaa_Authorization_Events_Event{
		EventType: EventType,
	}

	return t.Event[key], nil
}

// RenameEvent renames an entry in the list Event within
// the OpenconfigSystem_System_Aaa_Authorization_Events struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) RenameEvent(oldK, newK E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) error {
	if _, ok := t.Event[newK]; ok {
		return fmt.Errorf("key %v already exists in Event", newK)
	}

	e, ok := t.Event[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Event", oldK)
	}
	e.EventType = newK

	t.Event[newK] = e
	delete(t.Event, oldK)
	return nil
}

// GetOrCreateEvent retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Aaa_Authorization_Events. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) GetOrCreateEvent(EventType E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) *OpenconfigSystem_System_Aaa_Authorization_Events_Event {

	key := EventType

	if v, ok := t.Event[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvent(EventType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvent got unexpected error: %v", err))
	}
	return v
}

// GetEvent retrieves the value with the specified key from
// the Event map field of OpenconfigSystem_System_Aaa_Authorization_Events. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) GetEvent(EventType E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) *OpenconfigSystem_System_Aaa_Authorization_Events_Event {

	if t == nil {
		return nil
	}

	key := EventType

	if lm, ok := t.Event[key]; ok {
		return lm
	}
	return nil
}

// AppendEvent appends the supplied OpenconfigSystem_System_Aaa_Authorization_Events_Event struct to the
// list Event of OpenconfigSystem_System_Aaa_Authorization_Events. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Aaa_Authorization_Events_Event already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) AppendEvent(v *OpenconfigSystem_System_Aaa_Authorization_Events_Event) error {
	key := v.EventType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*OpenconfigSystem_System_Aaa_Authorization_Events_Event)
	}

	if _, ok := t.Event[key]; ok {
		return fmt.Errorf("duplicate key for list Event %v", key)
	}

	t.Event[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_Events"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authorization_Events_Event represents the /openconfig-system/system/aaa/authorization/events/event YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_Events_Event struct {
	ΛMetadata  []ygot.Annotation                                              `path:"@" ygotAnnotation:"true"`
	Config     *OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config `path:"config" module:"openconfig-system"`
	ΛConfig    []ygot.Annotation                                              `path:"@config" ygotAnnotation:"true"`
	EventType  E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE              `path:"event-type" module:"openconfig-system"`
	ΛEventType []ygot.Annotation                                              `path:"@event-type" ygotAnnotation:"true"`
	State      *OpenconfigSystem_System_Aaa_Authorization_Events_Event_State  `path:"state" module:"openconfig-system"`
	ΛState     []ygot.Annotation                                              `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_Events_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_Events_Event) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) GetOrCreateState() *OpenconfigSystem_System_Aaa_Authorization_Events_Event_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_Authorization_Events_Event_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_Authorization_Events_Event. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) GetConfig() *OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_Authorization_Events_Event. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) GetState() *OpenconfigSystem_System_Aaa_Authorization_Events_Event_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetEventType retrieves the value of the leaf EventType from the OpenconfigSystem_System_Aaa_Authorization_Events_Event
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EventType is set, it can safely use t.GetEventType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EventType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) GetEventType() E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE {
	if t == nil || t.EventType == 0 {
		return 0
	}
	return t.EventType
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Aaa_Authorization_Events_Event struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"event-type": t.EventType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_Events_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config represents the /openconfig-system/system/aaa/authorization/events/event/config YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config struct {
	ΛMetadata  []ygot.Annotation                                 `path:"@" ygotAnnotation:"true"`
	EventType  E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE `path:"event-type" module:"openconfig-system"`
	ΛEventType []ygot.Annotation                                 `path:"@event-type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config) IsYANGGoStruct() {}

// GetEventType retrieves the value of the leaf EventType from the OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EventType is set, it can safely use t.GetEventType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EventType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config) GetEventType() E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE {
	if t == nil || t.EventType == 0 {
		return 0
	}
	return t.EventType
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authorization_Events_Event_State represents the /openconfig-system/system/aaa/authorization/events/event/state YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_Events_Event_State struct {
	ΛMetadata  []ygot.Annotation                                 `path:"@" ygotAnnotation:"true"`
	EventType  E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE `path:"event-type" module:"openconfig-system"`
	ΛEventType []ygot.Annotation                                 `path:"@event-type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_Events_Event_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_Events_Event_State) IsYANGGoStruct() {}

// GetEventType retrieves the value of the leaf EventType from the OpenconfigSystem_System_Aaa_Authorization_Events_Event_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EventType is set, it can safely use t.GetEventType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EventType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event_State) GetEventType() E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE {
	if t == nil || t.EventType == 0 {
		return 0
	}
	return t.EventType
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_Events_Event_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_Events_Event_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authorization_State represents the /openconfig-system/system/aaa/authorization/state YANG schema element.
type OpenconfigSystem_System_Aaa_Authorization_State struct {
	ΛMetadata            []ygot.Annotation                                                           `path:"@" ygotAnnotation:"true"`
	AuthorizationMethod  []OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union `path:"authorization-method" module:"openconfig-system"`
	ΛAuthorizationMethod []ygot.Annotation                                                           `path:"@authorization-method" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Authorization_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Authorization_State) IsYANGGoStruct() {}

// GetAuthorizationMethod retrieves the value of the leaf AuthorizationMethod from the OpenconfigSystem_System_Aaa_Authorization_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AuthorizationMethod is set, it can safely use t.GetAuthorizationMethod()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AuthorizationMethod == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_Authorization_State) GetAuthorizationMethod() []OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union {
	if t == nil || t.AuthorizationMethod == nil {
		return nil
	}
	return t.AuthorizationMethod
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Authorization_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Authorization_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Authorization_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/aaa/authorization/state/authorization-method within the YANG schema.
type OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union interface {
	Is_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union()
}

// OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE is used when /openconfig-system/system/aaa/authorization/state/authorization-method
// is to be set to a E_OpenconfigAaaTypes_AAA_METHOD_TYPE value.
type OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE struct {
	E_OpenconfigAaaTypes_AAA_METHOD_TYPE E_OpenconfigAaaTypes_AAA_METHOD_TYPE
}

// Is_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE
// implements the OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE) Is_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union() {
}

// OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_String is used when /openconfig-system/system/aaa/authorization/state/authorization-method
// is to be set to a string value.
type OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_String struct {
	String string
}

// Is_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union ensures that OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_String
// implements the OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union interface.
func (*OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_String) Is_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union() {
}

// To_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Aaa_Authorization_State) To_OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union(i interface{}) (OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAaaTypes_AAA_METHOD_TYPE:
		return &OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_E_OpenconfigAaaTypes_AAA_METHOD_TYPE{v}, nil
	case string:
		return &OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Aaa_Authorization_State_AuthorizationMethod_Union, unknown union type, got: %T, want any of [E_OpenconfigAaaTypes_AAA_METHOD_TYPE, string]", i, i)
	}
}

// OpenconfigSystem_System_Aaa_Config represents the /openconfig-system/system/aaa/config YANG schema element.
type OpenconfigSystem_System_Aaa_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups represents the /openconfig-system/system/aaa/server-groups YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups struct {
	ΛMetadata    []ygot.Annotation                                                `path:"@" ygotAnnotation:"true"`
	ServerGroup  map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup `path:"server-group" module:"openconfig-system"`
	ΛServerGroup []ygot.Annotation                                                `path:"@server-group" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups) IsYANGGoStruct() {}

// NewServerGroup creates a new entry in the ServerGroup list of the
// OpenconfigSystem_System_Aaa_ServerGroups struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) NewServerGroup(Name string) (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerGroup == nil {
		t.ServerGroup = make(map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServerGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServerGroup", key)
	}

	t.ServerGroup[key] = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup{
		Name: &Name,
	}

	return t.ServerGroup[key], nil
}

// RenameServerGroup renames an entry in the list ServerGroup within
// the OpenconfigSystem_System_Aaa_ServerGroups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) RenameServerGroup(oldK, newK string) error {
	if _, ok := t.ServerGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in ServerGroup", newK)
	}

	e, ok := t.ServerGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ServerGroup", oldK)
	}
	e.Name = &newK

	t.ServerGroup[newK] = e
	delete(t.ServerGroup, oldK)
	return nil
}

// GetOrCreateServerGroup retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Aaa_ServerGroups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) GetOrCreateServerGroup(Name string) *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup {

	key := Name

	if v, ok := t.ServerGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServerGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServerGroup got unexpected error: %v", err))
	}
	return v
}

// GetServerGroup retrieves the value with the specified key from
// the ServerGroup map field of OpenconfigSystem_System_Aaa_ServerGroups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) GetServerGroup(Name string) *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ServerGroup[key]; ok {
		return lm
	}
	return nil
}

// AppendServerGroup appends the supplied OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup struct to the
// list ServerGroup of OpenconfigSystem_System_Aaa_ServerGroups. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) AppendServerGroup(v *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) error {
	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerGroup == nil {
		t.ServerGroup = make(map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup)
	}

	if _, ok := t.ServerGroup[key]; ok {
		return fmt.Errorf("duplicate key for list ServerGroup %v", key)
	}

	t.ServerGroup[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup represents the /openconfig-system/system/aaa/server-groups/server-group YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup struct {
	ΛMetadata []ygot.Annotation                                             `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config  `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                             `path:"@config" ygotAnnotation:"true"`
	Name      *string                                                       `path:"name" module:"openconfig-system"`
	ΛName     []ygot.Annotation                                             `path:"@name" ygotAnnotation:"true"`
	Servers   *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers `path:"servers" module:"openconfig-system"`
	ΛServers  []ygot.Annotation                                             `path:"@servers" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State   `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                             `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config{}
	return t.Config
}

// GetOrCreateServers retrieves the value of the Servers field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) GetOrCreateServers() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers {
	if t.Servers != nil {
		return t.Servers
	}
	t.Servers = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers{}
	return t.Servers
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) GetOrCreateState() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) GetConfig() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetServers returns the value of the Servers struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup. If the receiver or the field Servers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) GetServers() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers {
	if t != nil && t.Servers != nil {
		return t.Servers
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) GetState() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config represents the /openconfig-system/system/aaa/server-groups/server-group/config YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config struct {
	ΛMetadata []ygot.Annotation                    `path:"@" ygotAnnotation:"true"`
	Name      *string                              `path:"name" module:"openconfig-system"`
	ΛName     []ygot.Annotation                    `path:"@name" ygotAnnotation:"true"`
	Type      E_OpenconfigAaaTypes_AAA_SERVER_TYPE `path:"type" module:"openconfig-system"`
	ΛType     []ygot.Annotation                    `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Type is set, it can safely use t.GetType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Type == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config) GetType() E_OpenconfigAaaTypes_AAA_SERVER_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers represents the /openconfig-system/system/aaa/server-groups/server-group/servers YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers struct {
	ΛMetadata []ygot.Annotation                                                               `path:"@" ygotAnnotation:"true"`
	Server    map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server `path:"server" module:"openconfig-system"`
	ΛServer   []ygot.Annotation                                                               `path:"@server" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) NewServer(Address string) (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Address = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) GetOrCreateServer(Address string) *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server {

	key := Address

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) GetServer(Address string) *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// AppendServer appends the supplied OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server struct to the
// list Server of OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) AppendServer(v *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) error {
	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server struct {
	ΛMetadata []ygot.Annotation                                                           `path:"@" ygotAnnotation:"true"`
	Address   *string                                                                     `path:"address" module:"openconfig-system"`
	ΛAddress  []ygot.Annotation                                                           `path:"@address" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                                           `path:"@config" ygotAnnotation:"true"`
	Radius    *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius `path:"radius" module:"openconfig-system"`
	ΛRadius   []ygot.Annotation                                                           `path:"@radius" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                                           `path:"@state" ygotAnnotation:"true"`
	Tacacs    *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs `path:"tacacs" module:"openconfig-system"`
	ΛTacacs   []ygot.Annotation                                                           `path:"@tacacs" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config{}
	return t.Config
}

// GetOrCreateRadius retrieves the value of the Radius field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetOrCreateRadius() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius {
	if t.Radius != nil {
		return t.Radius
	}
	t.Radius = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius{}
	return t.Radius
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetOrCreateState() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State{}
	return t.State
}

// GetOrCreateTacacs retrieves the value of the Tacacs field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetOrCreateTacacs() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs {
	if t.Tacacs != nil {
		return t.Tacacs
	}
	t.Tacacs = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs{}
	return t.Tacacs
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetConfig() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetRadius returns the value of the Radius struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server. If the receiver or the field Radius is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetRadius() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius {
	if t != nil && t.Radius != nil {
		return t.Radius
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetState() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetTacacs returns the value of the Tacacs struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server. If the receiver or the field Tacacs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetTacacs() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs {
	if t != nil && t.Tacacs != nil {
		return t.Tacacs
	}
	return nil
}

// GetAddress retrieves the value of the leaf Address from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Address is set, it can safely use t.GetAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Address == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/config YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Address   *string           `path:"address" module:"openconfig-system"`
	ΛAddress  []ygot.Annotation `path:"@address" ygotAnnotation:"true"`
	Name      *string           `path:"name" module:"openconfig-system"`
	ΛName     []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
	Timeout   *uint16           `path:"timeout" module:"openconfig-system"`
	ΛTimeout  []ygot.Annotation `path:"@timeout" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Address is set, it can safely use t.GetAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Address == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetName retrieves the value of the leaf Name from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTimeout retrieves the value of the leaf Timeout from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Timeout is set, it can safely use t.GetTimeout()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Timeout == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius struct {
	ΛMetadata []ygot.Annotation                                                                  `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                                                  `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) GetOrCreateState() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) GetConfig() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) GetState() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/config YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AcctPort            *uint16           `path:"acct-port" module:"openconfig-system"`
	ΛAcctPort           []ygot.Annotation `path:"@acct-port" ygotAnnotation:"true"`
	AuthPort            *uint16           `path:"auth-port" module:"openconfig-system"`
	ΛAuthPort           []ygot.Annotation `path:"@auth-port" ygotAnnotation:"true"`
	RetransmitAttempts  *uint8            `path:"retransmit-attempts" module:"openconfig-system"`
	ΛRetransmitAttempts []ygot.Annotation `path:"@retransmit-attempts" ygotAnnotation:"true"`
	SecretKey           *string           `path:"secret-key" module:"openconfig-system"`
	ΛSecretKey          []ygot.Annotation `path:"@secret-key" ygotAnnotation:"true"`
	SourceAddress       *string           `path:"source-address" module:"openconfig-system"`
	ΛSourceAddress      []ygot.Annotation `path:"@source-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) IsYANGGoStruct() {
}

// GetAcctPort retrieves the value of the leaf AcctPort from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AcctPort is set, it can safely use t.GetAcctPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AcctPort == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) GetAcctPort() uint16 {
	if t == nil || t.AcctPort == nil {
		return 1813
	}
	return *t.AcctPort
}

// GetAuthPort retrieves the value of the leaf AuthPort from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AuthPort is set, it can safely use t.GetAuthPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AuthPort == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) GetAuthPort() uint16 {
	if t == nil || t.AuthPort == nil {
		return 1812
	}
	return *t.AuthPort
}

// GetRetransmitAttempts retrieves the value of the leaf RetransmitAttempts from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RetransmitAttempts is set, it can safely use t.GetRetransmitAttempts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RetransmitAttempts == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) GetRetransmitAttempts() uint8 {
	if t == nil || t.RetransmitAttempts == nil {
		return 0
	}
	return *t.RetransmitAttempts
}

// GetSecretKey retrieves the value of the leaf SecretKey from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SecretKey is set, it can safely use t.GetSecretKey()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SecretKey == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) GetSecretKey() string {
	if t == nil || t.SecretKey == nil {
		return ""
	}
	return *t.SecretKey
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SourceAddress is set, it can safely use t.GetSourceAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SourceAddress == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State struct {
	ΛMetadata           []ygot.Annotation                                                                          `path:"@" ygotAnnotation:"true"`
	AcctPort            *uint16                                                                                    `path:"acct-port" module:"openconfig-system"`
	ΛAcctPort           []ygot.Annotation                                                                          `path:"@acct-port" ygotAnnotation:"true"`
	AuthPort            *uint16                                                                                    `path:"auth-port" module:"openconfig-system"`
	ΛAuthPort           []ygot.Annotation                                                                          `path:"@auth-port" ygotAnnotation:"true"`
	Counters            *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters `path:"counters" module:"openconfig-system"`
	ΛCounters           []ygot.Annotation                                                                          `path:"@counters" ygotAnnotation:"true"`
	RetransmitAttempts  *uint8                                                                                     `path:"retransmit-attempts" module:"openconfig-system"`
	ΛRetransmitAttempts []ygot.Annotation                                                                          `path:"@retransmit-attempts" ygotAnnotation:"true"`
	SecretKey           *string                                                                                    `path:"secret-key" module:"openconfig-system"`
	ΛSecretKey          []ygot.Annotation                                                                          `path:"@secret-key" ygotAnnotation:"true"`
	SourceAddress       *string                                                                                    `path:"source-address" module:"openconfig-system"`
	ΛSourceAddress      []ygot.Annotation                                                                          `path:"@source-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) IsYANGGoStruct() {
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetOrCreateCounters() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetCounters() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetAcctPort retrieves the value of the leaf AcctPort from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AcctPort is set, it can safely use t.GetAcctPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AcctPort == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetAcctPort() uint16 {
	if t == nil || t.AcctPort == nil {
		return 1813
	}
	return *t.AcctPort
}

// GetAuthPort retrieves the value of the leaf AuthPort from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AuthPort is set, it can safely use t.GetAuthPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AuthPort == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetAuthPort() uint16 {
	if t == nil || t.AuthPort == nil {
		return 1812
	}
	return *t.AuthPort
}

// GetRetransmitAttempts retrieves the value of the leaf RetransmitAttempts from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RetransmitAttempts is set, it can safely use t.GetRetransmitAttempts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RetransmitAttempts == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetRetransmitAttempts() uint8 {
	if t == nil || t.RetransmitAttempts == nil {
		return 0
	}
	return *t.RetransmitAttempts
}

// GetSecretKey retrieves the value of the leaf SecretKey from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SecretKey is set, it can safely use t.GetSecretKey()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SecretKey == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetSecretKey() string {
	if t == nil || t.SecretKey == nil {
		return ""
	}
	return *t.SecretKey
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SourceAddress is set, it can safely use t.GetSourceAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SourceAddress == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters struct {
	ΛMetadata              []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AccessAccepts          *uint64           `path:"access-accepts" module:"openconfig-system"`
	ΛAccessAccepts         []ygot.Annotation `path:"@access-accepts" ygotAnnotation:"true"`
	AccessRejects          *uint64           `path:"access-rejects" module:"openconfig-system"`
	ΛAccessRejects         []ygot.Annotation `path:"@access-rejects" ygotAnnotation:"true"`
	RetriedAccessRequests  *uint64           `path:"retried-access-requests" module:"openconfig-system"`
	ΛRetriedAccessRequests []ygot.Annotation `path:"@retried-access-requests" ygotAnnotation:"true"`
	TimeoutAccessRequests  *uint64           `path:"timeout-access-requests" module:"openconfig-system"`
	ΛTimeoutAccessRequests []ygot.Annotation `path:"@timeout-access-requests" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) IsYANGGoStruct() {
}

// GetAccessAccepts retrieves the value of the leaf AccessAccepts from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AccessAccepts is set, it can safely use t.GetAccessAccepts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AccessAccepts == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) GetAccessAccepts() uint64 {
	if t == nil || t.AccessAccepts == nil {
		return 0
	}
	return *t.AccessAccepts
}

// GetAccessRejects retrieves the value of the leaf AccessRejects from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AccessRejects is set, it can safely use t.GetAccessRejects()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AccessRejects == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) GetAccessRejects() uint64 {
	if t == nil || t.AccessRejects == nil {
		return 0
	}
	return *t.AccessRejects
}

// GetRetriedAccessRequests retrieves the value of the leaf RetriedAccessRequests from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RetriedAccessRequests is set, it can safely use t.GetRetriedAccessRequests()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RetriedAccessRequests == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) GetRetriedAccessRequests() uint64 {
	if t == nil || t.RetriedAccessRequests == nil {
		return 0
	}
	return *t.RetriedAccessRequests
}

// GetTimeoutAccessRequests retrieves the value of the leaf TimeoutAccessRequests from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TimeoutAccessRequests is set, it can safely use t.GetTimeoutAccessRequests()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TimeoutAccessRequests == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) GetTimeoutAccessRequests() uint64 {
	if t == nil || t.TimeoutAccessRequests == nil {
		return 0
	}
	return *t.TimeoutAccessRequests
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Radius_State_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/state YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State struct {
	ΛMetadata           []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Address             *string           `path:"address" module:"openconfig-system"`
	ΛAddress            []ygot.Annotation `path:"@address" ygotAnnotation:"true"`
	ConnectionAborts    *uint64           `path:"connection-aborts" module:"openconfig-system"`
	ΛConnectionAborts   []ygot.Annotation `path:"@connection-aborts" ygotAnnotation:"true"`
	ConnectionCloses    *uint64           `path:"connection-closes" module:"openconfig-system"`
	ΛConnectionCloses   []ygot.Annotation `path:"@connection-closes" ygotAnnotation:"true"`
	ConnectionFailures  *uint64           `path:"connection-failures" module:"openconfig-system"`
	ΛConnectionFailures []ygot.Annotation `path:"@connection-failures" ygotAnnotation:"true"`
	ConnectionOpens     *uint64           `path:"connection-opens" module:"openconfig-system"`
	ΛConnectionOpens    []ygot.Annotation `path:"@connection-opens" ygotAnnotation:"true"`
	ConnectionTimeouts  *uint64           `path:"connection-timeouts" module:"openconfig-system"`
	ΛConnectionTimeouts []ygot.Annotation `path:"@connection-timeouts" ygotAnnotation:"true"`
	ErrorsReceived      *uint64           `path:"errors-received" module:"openconfig-system"`
	ΛErrorsReceived     []ygot.Annotation `path:"@errors-received" ygotAnnotation:"true"`
	MessagesReceived    *uint64           `path:"messages-received" module:"openconfig-system"`
	ΛMessagesReceived   []ygot.Annotation `path:"@messages-received" ygotAnnotation:"true"`
	MessagesSent        *uint64           `path:"messages-sent" module:"openconfig-system"`
	ΛMessagesSent       []ygot.Annotation `path:"@messages-sent" ygotAnnotation:"true"`
	Name                *string           `path:"name" module:"openconfig-system"`
	ΛName               []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
	Timeout             *uint16           `path:"timeout" module:"openconfig-system"`
	ΛTimeout            []ygot.Annotation `path:"@timeout" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Address is set, it can safely use t.GetAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Address == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetConnectionAborts retrieves the value of the leaf ConnectionAborts from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ConnectionAborts is set, it can safely use t.GetConnectionAborts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ConnectionAborts == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetConnectionAborts() uint64 {
	if t == nil || t.ConnectionAborts == nil {
		return 0
	}
	return *t.ConnectionAborts
}

// GetConnectionCloses retrieves the value of the leaf ConnectionCloses from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ConnectionCloses is set, it can safely use t.GetConnectionCloses()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ConnectionCloses == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetConnectionCloses() uint64 {
	if t == nil || t.ConnectionCloses == nil {
		return 0
	}
	return *t.ConnectionCloses
}

// GetConnectionFailures retrieves the value of the leaf ConnectionFailures from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ConnectionFailures is set, it can safely use t.GetConnectionFailures()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ConnectionFailures == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetConnectionFailures() uint64 {
	if t == nil || t.ConnectionFailures == nil {
		return 0
	}
	return *t.ConnectionFailures
}

// GetConnectionOpens retrieves the value of the leaf ConnectionOpens from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ConnectionOpens is set, it can safely use t.GetConnectionOpens()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ConnectionOpens == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetConnectionOpens() uint64 {
	if t == nil || t.ConnectionOpens == nil {
		return 0
	}
	return *t.ConnectionOpens
}

// GetConnectionTimeouts retrieves the value of the leaf ConnectionTimeouts from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ConnectionTimeouts is set, it can safely use t.GetConnectionTimeouts()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ConnectionTimeouts == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetConnectionTimeouts() uint64 {
	if t == nil || t.ConnectionTimeouts == nil {
		return 0
	}
	return *t.ConnectionTimeouts
}

// GetErrorsReceived retrieves the value of the leaf ErrorsReceived from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ErrorsReceived is set, it can safely use t.GetErrorsReceived()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ErrorsReceived == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetErrorsReceived() uint64 {
	if t == nil || t.ErrorsReceived == nil {
		return 0
	}
	return *t.ErrorsReceived
}

// GetMessagesReceived retrieves the value of the leaf MessagesReceived from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MessagesReceived is set, it can safely use t.GetMessagesReceived()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MessagesReceived == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetMessagesReceived() uint64 {
	if t == nil || t.MessagesReceived == nil {
		return 0
	}
	return *t.MessagesReceived
}

// GetMessagesSent retrieves the value of the leaf MessagesSent from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MessagesSent is set, it can safely use t.GetMessagesSent()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MessagesSent == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetMessagesSent() uint64 {
	if t == nil || t.MessagesSent == nil {
		return 0
	}
	return *t.MessagesSent
}

// GetName retrieves the value of the leaf Name from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTimeout retrieves the value of the leaf Timeout from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Timeout is set, it can safely use t.GetTimeout()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Timeout == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs struct {
	ΛMetadata []ygot.Annotation                                                                  `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                                                  `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) GetOrCreateConfig() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) GetOrCreateState() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) GetConfig() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) GetState() *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/config YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Port           *uint16           `path:"port" module:"openconfig-system"`
	ΛPort          []ygot.Annotation `path:"@port" ygotAnnotation:"true"`
	SecretKey      *string           `path:"secret-key" module:"openconfig-system"`
	ΛSecretKey     []ygot.Annotation `path:"@secret-key" ygotAnnotation:"true"`
	SourceAddress  *string           `path:"source-address" module:"openconfig-system"`
	ΛSourceAddress []ygot.Annotation `path:"@source-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) IsYANGGoStruct() {
}

// GetPort retrieves the value of the leaf Port from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Port is set, it can safely use t.GetPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Port == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 49
	}
	return *t.Port
}

// GetSecretKey retrieves the value of the leaf SecretKey from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SecretKey is set, it can safely use t.GetSecretKey()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SecretKey == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) GetSecretKey() string {
	if t == nil || t.SecretKey == nil {
		return ""
	}
	return *t.SecretKey
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SourceAddress is set, it can safely use t.GetSourceAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SourceAddress == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs/state YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Port           *uint16           `path:"port" module:"openconfig-system"`
	ΛPort          []ygot.Annotation `path:"@port" ygotAnnotation:"true"`
	SecretKey      *string           `path:"secret-key" module:"openconfig-system"`
	ΛSecretKey     []ygot.Annotation `path:"@secret-key" ygotAnnotation:"true"`
	SourceAddress  *string           `path:"source-address" module:"openconfig-system"`
	ΛSourceAddress []ygot.Annotation `path:"@source-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) IsYANGGoStruct() {
}

// GetPort retrieves the value of the leaf Port from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Port is set, it can safely use t.GetPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Port == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 49
	}
	return *t.Port
}

// GetSecretKey retrieves the value of the leaf SecretKey from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SecretKey is set, it can safely use t.GetSecretKey()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SecretKey == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) GetSecretKey() string {
	if t == nil || t.SecretKey == nil {
		return ""
	}
	return *t.SecretKey
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SourceAddress is set, it can safely use t.GetSourceAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SourceAddress == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_Servers_Server_Tacacs_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State represents the /openconfig-system/system/aaa/server-groups/server-group/state YANG schema element.
type OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State struct {
	ΛMetadata []ygot.Annotation                    `path:"@" ygotAnnotation:"true"`
	Name      *string                              `path:"name" module:"openconfig-system"`
	ΛName     []ygot.Annotation                    `path:"@name" ygotAnnotation:"true"`
	Type      E_OpenconfigAaaTypes_AAA_SERVER_TYPE `path:"type" module:"openconfig-system"`
	ΛType     []ygot.Annotation                    `path:"@type" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Type is set, it can safely use t.GetType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Type == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State) GetType() E_OpenconfigAaaTypes_AAA_SERVER_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_ServerGroups_ServerGroup_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Aaa_State represents the /openconfig-system/system/aaa/state YANG schema element.
type OpenconfigSystem_System_Aaa_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Aaa_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Aaa_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Aaa_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Aaa_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Aaa_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Alarms represents the /openconfig-system/system/alarms YANG schema element.
type OpenconfigSystem_System_Alarms struct {
	ΛMetadata []ygot.Annotation                                `path:"@" ygotAnnotation:"true"`
	Alarm     map[string]*OpenconfigSystem_System_Alarms_Alarm `path:"alarm" module:"openconfig-system"`
	ΛAlarm    []ygot.Annotation                                `path:"@alarm" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Alarms implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Alarms) IsYANGGoStruct() {}

// NewAlarm creates a new entry in the Alarm list of the
// OpenconfigSystem_System_Alarms struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Alarms) NewAlarm(Id string) (*OpenconfigSystem_System_Alarms_Alarm, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alarm == nil {
		t.Alarm = make(map[string]*OpenconfigSystem_System_Alarms_Alarm)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Alarm[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Alarm", key)
	}

	t.Alarm[key] = &OpenconfigSystem_System_Alarms_Alarm{
		Id: &Id,
	}

	return t.Alarm[key], nil
}

// RenameAlarm renames an entry in the list Alarm within
// the OpenconfigSystem_System_Alarms struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Alarms) RenameAlarm(oldK, newK string) error {
	if _, ok := t.Alarm[newK]; ok {
		return fmt.Errorf("key %v already exists in Alarm", newK)
	}

	e, ok := t.Alarm[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Alarm", oldK)
	}
	e.Id = &newK

	t.Alarm[newK] = e
	delete(t.Alarm, oldK)
	return nil
}

// GetOrCreateAlarm retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Alarms. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Alarms) GetOrCreateAlarm(Id string) *OpenconfigSystem_System_Alarms_Alarm {

	key := Id

	if v, ok := t.Alarm[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAlarm(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAlarm got unexpected error: %v", err))
	}
	return v
}

// GetAlarm retrieves the value with the specified key from
// the Alarm map field of OpenconfigSystem_System_Alarms. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Alarms) GetAlarm(Id string) *OpenconfigSystem_System_Alarms_Alarm {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Alarm[key]; ok {
		return lm
	}
	return nil
}

// AppendAlarm appends the supplied OpenconfigSystem_System_Alarms_Alarm struct to the
// list Alarm of OpenconfigSystem_System_Alarms. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Alarms_Alarm already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Alarms) AppendAlarm(v *OpenconfigSystem_System_Alarms_Alarm) error {
	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alarm == nil {
		t.Alarm = make(map[string]*OpenconfigSystem_System_Alarms_Alarm)
	}

	if _, ok := t.Alarm[key]; ok {
		return fmt.Errorf("duplicate key for list Alarm %v", key)
	}

	t.Alarm[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Alarms) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Alarms"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Alarms) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Alarms_Alarm represents the /openconfig-system/system/alarms/alarm YANG schema element.
type OpenconfigSystem_System_Alarms_Alarm struct {
	ΛMetadata []ygot.Annotation                            `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Alarms_Alarm_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                            `path:"@config" ygotAnnotation:"true"`
	Id        *string                                      `path:"id" module:"openconfig-system"`
	ΛId       []ygot.Annotation                            `path:"@id" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Alarms_Alarm_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                            `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Alarms_Alarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Alarms_Alarm) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Alarms_Alarm) GetOrCreateConfig() *OpenconfigSystem_System_Alarms_Alarm_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Alarms_Alarm_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Alarms_Alarm) GetOrCreateState() *OpenconfigSystem_System_Alarms_Alarm_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Alarms_Alarm_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Alarms_Alarm. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Alarms_Alarm) GetConfig() *OpenconfigSystem_System_Alarms_Alarm_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Alarms_Alarm. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Alarms_Alarm) GetState() *OpenconfigSystem_System_Alarms_Alarm_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetId retrieves the value of the leaf Id from the OpenconfigSystem_System_Alarms_Alarm
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Id is set, it can safely use t.GetId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Id == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Alarms_Alarm) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Alarms_Alarm struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Alarms_Alarm) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Alarms_Alarm) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Alarms_Alarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Alarms_Alarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Alarms_Alarm_Config represents the /openconfig-system/system/alarms/alarm/config YANG schema element.
type OpenconfigSystem_System_Alarms_Alarm_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Alarms_Alarm_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Alarms_Alarm_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Alarms_Alarm_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Alarms_Alarm_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Alarms_Alarm_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Alarms_Alarm_State represents the /openconfig-system/system/alarms/alarm/state YANG schema element.
type OpenconfigSystem_System_Alarms_Alarm_State struct {
	ΛMetadata    []ygot.Annotation                                       `path:"@" ygotAnnotation:"true"`
	Id           *string                                                 `path:"id" module:"openconfig-system"`
	ΛId          []ygot.Annotation                                       `path:"@id" ygotAnnotation:"true"`
	Resource     *string                                                 `path:"resource" module:"openconfig-system"`
	ΛResource    []ygot.Annotation                                       `path:"@resource" ygotAnnotation:"true"`
	Severity     E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY        `path:"severity" module:"openconfig-system"`
	ΛSeverity    []ygot.Annotation                                       `path:"@severity" ygotAnnotation:"true"`
	Text         *string                                                 `path:"text" module:"openconfig-system"`
	ΛText        []ygot.Annotation                                       `path:"@text" ygotAnnotation:"true"`
	TimeCreated  *uint64                                                 `path:"time-created" module:"openconfig-system"`
	ΛTimeCreated []ygot.Annotation                                       `path:"@time-created" ygotAnnotation:"true"`
	TypeId       OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union `path:"type-id" module:"openconfig-system"`
	ΛTypeId      []ygot.Annotation                                       `path:"@type-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Alarms_Alarm_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Alarms_Alarm_State) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the OpenconfigSystem_System_Alarms_Alarm_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Id is set, it can safely use t.GetId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Id == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetResource retrieves the value of the leaf Resource from the OpenconfigSystem_System_Alarms_Alarm_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Resource is set, it can safely use t.GetResource()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Resource == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) GetResource() string {
	if t == nil || t.Resource == nil {
		return ""
	}
	return *t.Resource
}

// GetSeverity retrieves the value of the leaf Severity from the OpenconfigSystem_System_Alarms_Alarm_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Severity is set, it can safely use t.GetSeverity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Severity == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) GetSeverity() E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// GetText retrieves the value of the leaf Text from the OpenconfigSystem_System_Alarms_Alarm_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Text is set, it can safely use t.GetText()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Text == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) GetText() string {
	if t == nil || t.Text == nil {
		return ""
	}
	return *t.Text
}

// GetTimeCreated retrieves the value of the leaf TimeCreated from the OpenconfigSystem_System_Alarms_Alarm_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TimeCreated is set, it can safely use t.GetTimeCreated()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TimeCreated == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) GetTimeCreated() uint64 {
	if t == nil || t.TimeCreated == nil {
		return 0
	}
	return *t.TimeCreated
}

// GetTypeId retrieves the value of the leaf TypeId from the OpenconfigSystem_System_Alarms_Alarm_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TypeId is set, it can safely use t.GetTypeId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TypeId == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) GetTypeId() OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union {
	if t == nil || t.TypeId == nil {
		return nil
	}
	return t.TypeId
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Alarms_Alarm_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/alarms/alarm/state/type-id within the YANG schema.
type OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union interface {
	Is_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union()
}

// OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID is used when /openconfig-system/system/alarms/alarm/state/type-id
// is to be set to a E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID value.
type OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID struct {
	E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
}

// Is_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union ensures that OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
// implements the OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union interface.
func (*OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID) Is_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union() {
}

// OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_String is used when /openconfig-system/system/alarms/alarm/state/type-id
// is to be set to a string value.
type OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_String struct {
	String string
}

// Is_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union ensures that OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_String
// implements the OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union interface.
func (*OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_String) Is_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union() {
}

// To_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Alarms_Alarm_State) To_OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union(i interface{}) (OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID:
		return &OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID{v}, nil
	case string:
		return &OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Alarms_Alarm_State_TypeId_Union, unknown union type, got: %T, want any of [E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID, string]", i, i)
	}
}

// OpenconfigSystem_System_Clock represents the /openconfig-system/system/clock YANG schema element.
type OpenconfigSystem_System_Clock struct {
	ΛMetadata []ygot.Annotation                     `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Clock_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                     `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Clock_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                     `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Clock implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Clock) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Clock) GetOrCreateConfig() *OpenconfigSystem_System_Clock_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Clock_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Clock) GetOrCreateState() *OpenconfigSystem_System_Clock_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Clock_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Clock. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Clock) GetConfig() *OpenconfigSystem_System_Clock_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Clock. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Clock) GetState() *OpenconfigSystem_System_Clock_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Clock) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Clock"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Clock) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Clock_Config represents the /openconfig-system/system/clock/config YANG schema element.
type OpenconfigSystem_System_Clock_Config struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	TimezoneName  *string           `path:"timezone-name" module:"openconfig-system"`
	ΛTimezoneName []ygot.Annotation `path:"@timezone-name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Clock_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Clock_Config) IsYANGGoStruct() {}

// GetTimezoneName retrieves the value of the leaf TimezoneName from the OpenconfigSystem_System_Clock_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TimezoneName is set, it can safely use t.GetTimezoneName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TimezoneName == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Clock_Config) GetTimezoneName() string {
	if t == nil || t.TimezoneName == nil {
		return ""
	}
	return *t.TimezoneName
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Clock_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Clock_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Clock_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Clock_State represents the /openconfig-system/system/clock/state YANG schema element.
type OpenconfigSystem_System_Clock_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	TimezoneName  *string           `path:"timezone-name" module:"openconfig-system"`
	ΛTimezoneName []ygot.Annotation `path:"@timezone-name" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Clock_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Clock_State) IsYANGGoStruct() {}

// GetTimezoneName retrieves the value of the leaf TimezoneName from the OpenconfigSystem_System_Clock_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TimezoneName is set, it can safely use t.GetTimezoneName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TimezoneName == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Clock_State) GetTimezoneName() string {
	if t == nil || t.TimezoneName == nil {
		return ""
	}
	return *t.TimezoneName
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Clock_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Clock_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Clock_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Config represents the /openconfig-system/system/config YANG schema element.
type OpenconfigSystem_System_Config struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	DomainName   *string           `path:"domain-name" module:"openconfig-system"`
	ΛDomainName  []ygot.Annotation `path:"@domain-name" ygotAnnotation:"true"`
	Hostname     *string           `path:"hostname" module:"openconfig-system"`
	ΛHostname    []ygot.Annotation `path:"@hostname" ygotAnnotation:"true"`
	LoginBanner  *string           `path:"login-banner" module:"openconfig-system"`
	ΛLoginBanner []ygot.Annotation `path:"@login-banner" ygotAnnotation:"true"`
	MotdBanner   *string           `path:"motd-banner" module:"openconfig-system"`
	ΛMotdBanner  []ygot.Annotation `path:"@motd-banner" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Config) IsYANGGoStruct() {}

// GetDomainName retrieves the value of the leaf DomainName from the OpenconfigSystem_System_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DomainName is set, it can safely use t.GetDomainName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DomainName == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Config) GetDomainName() string {
	if t == nil || t.DomainName == nil {
		return ""
	}
	return *t.DomainName
}

// GetHostname retrieves the value of the leaf Hostname from the OpenconfigSystem_System_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Hostname is set, it can safely use t.GetHostname()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Hostname == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Config) GetHostname() string {
	if t == nil || t.Hostname == nil {
		return ""
	}
	return *t.Hostname
}

// GetLoginBanner retrieves the value of the leaf LoginBanner from the OpenconfigSystem_System_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LoginBanner is set, it can safely use t.GetLoginBanner()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LoginBanner == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Config) GetLoginBanner() string {
	if t == nil || t.LoginBanner == nil {
		return ""
	}
	return *t.LoginBanner
}

// GetMotdBanner retrieves the value of the leaf MotdBanner from the OpenconfigSystem_System_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MotdBanner is set, it can safely use t.GetMotdBanner()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MotdBanner == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Config) GetMotdBanner() string {
	if t == nil || t.MotdBanner == nil {
		return ""
	}
	return *t.MotdBanner
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Config) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Cpus represents the /openconfig-system/system/cpus YANG schema element.
type OpenconfigSystem_System_Cpus struct {
	ΛMetadata []ygot.Annotation                                                                        `path:"@" ygotAnnotation:"true"`
	Cpu       map[OpenconfigSystem_System_Cpus_Cpu_State_Index_Union]*OpenconfigSystem_System_Cpus_Cpu `path:"cpu" module:"openconfig-system"`
	ΛCpu      []ygot.Annotation                                                                        `path:"@cpu" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus) IsYANGGoStruct() {}

// NewCpu creates a new entry in the Cpu list of the
// OpenconfigSystem_System_Cpus struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Cpus) NewCpu(Index OpenconfigSystem_System_Cpus_Cpu_State_Index_Union) (*OpenconfigSystem_System_Cpus_Cpu, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cpu == nil {
		t.Cpu = make(map[OpenconfigSystem_System_Cpus_Cpu_State_Index_Union]*OpenconfigSystem_System_Cpus_Cpu)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Cpu[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Cpu", key)
	}

	t.Cpu[key] = &OpenconfigSystem_System_Cpus_Cpu{
		Index: Index,
	}

	return t.Cpu[key], nil
}

// RenameCpu renames an entry in the list Cpu within
// the OpenconfigSystem_System_Cpus struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Cpus) RenameCpu(oldK, newK OpenconfigSystem_System_Cpus_Cpu_State_Index_Union) error {
	if _, ok := t.Cpu[newK]; ok {
		return fmt.Errorf("key %v already exists in Cpu", newK)
	}

	e, ok := t.Cpu[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Cpu", oldK)
	}
	e.Index = newK

	t.Cpu[newK] = e
	delete(t.Cpu, oldK)
	return nil
}

// GetOrCreateCpu retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Cpus. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Cpus) GetOrCreateCpu(Index OpenconfigSystem_System_Cpus_Cpu_State_Index_Union) *OpenconfigSystem_System_Cpus_Cpu {

	key := Index

	if v, ok := t.Cpu[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCpu(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCpu got unexpected error: %v", err))
	}
	return v
}

// GetCpu retrieves the value with the specified key from
// the Cpu map field of OpenconfigSystem_System_Cpus. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Cpus) GetCpu(Index OpenconfigSystem_System_Cpus_Cpu_State_Index_Union) *OpenconfigSystem_System_Cpus_Cpu {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Cpu[key]; ok {
		return lm
	}
	return nil
}

// AppendCpu appends the supplied OpenconfigSystem_System_Cpus_Cpu struct to the
// list Cpu of OpenconfigSystem_System_Cpus. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Cpus_Cpu already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Cpus) AppendCpu(v *OpenconfigSystem_System_Cpus_Cpu) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cpu == nil {
		t.Cpu = make(map[OpenconfigSystem_System_Cpus_Cpu_State_Index_Union]*OpenconfigSystem_System_Cpus_Cpu)
	}

	if _, ok := t.Cpu[key]; ok {
		return fmt.Errorf("duplicate key for list Cpu %v", key)
	}

	t.Cpu[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Cpus_Cpu represents the /openconfig-system/system/cpus/cpu YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu struct {
	ΛMetadata []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	Index     OpenconfigSystem_System_Cpus_Cpu_State_Index_Union `path:"index" module:"openconfig-system"`
	ΛIndex    []ygot.Annotation                                  `path:"@index" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Cpus_Cpu_State            `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu) IsYANGGoStruct() {}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu) GetOrCreateState() *OpenconfigSystem_System_Cpus_Cpu_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Cpus_Cpu_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Cpus_Cpu. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu) GetState() *OpenconfigSystem_System_Cpus_Cpu_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetIndex retrieves the value of the leaf Index from the OpenconfigSystem_System_Cpus_Cpu
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Index is set, it can safely use t.GetIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Index == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu) GetIndex() OpenconfigSystem_System_Cpus_Cpu_State_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Cpus_Cpu struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Cpus_Cpu) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Cpus_Cpu_State_Index_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/cpus/cpu/index within the YANG schema.
type OpenconfigSystem_System_Cpus_Cpu_State_Index_Union interface {
	Is_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union()
}

// OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_E_OpenconfigSystem_System_Cpus_Cpu_State_Index is used when /openconfig-system/system/cpus/cpu/index
// is to be set to a E_OpenconfigSystem_System_Cpus_Cpu_State_Index value.
type OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_E_OpenconfigSystem_System_Cpus_Cpu_State_Index struct {
	E_OpenconfigSystem_System_Cpus_Cpu_State_Index E_OpenconfigSystem_System_Cpus_Cpu_State_Index
}

// Is_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union ensures that OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_E_OpenconfigSystem_System_Cpus_Cpu_State_Index
// implements the OpenconfigSystem_System_Cpus_Cpu_State_Index_Union interface.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_E_OpenconfigSystem_System_Cpus_Cpu_State_Index) Is_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union() {
}

// OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_Uint32 is used when /openconfig-system/system/cpus/cpu/index
// is to be set to a uint32 value.
type OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_Uint32 struct {
	Uint32 uint32
}

// Is_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union ensures that OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_Uint32
// implements the OpenconfigSystem_System_Cpus_Cpu_State_Index_Union interface.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_Uint32) Is_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union() {
}

// To_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Cpus_Cpu_State_Index_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Cpus_Cpu) To_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union(i interface{}) (OpenconfigSystem_System_Cpus_Cpu_State_Index_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigSystem_System_Cpus_Cpu_State_Index:
		return &OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_E_OpenconfigSystem_System_Cpus_Cpu_State_Index{v}, nil
	case uint32:
		return &OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Cpus_Cpu_State_Index_Union, unknown union type, got: %T, want any of [E_OpenconfigSystem_System_Cpus_Cpu_State_Index, uint32]", i, i)
	}
}

// OpenconfigSystem_System_Cpus_Cpu_State represents the /openconfig-system/system/cpus/cpu/state YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State struct {
	ΛMetadata          []ygot.Annotation                                         `path:"@" ygotAnnotation:"true"`
	HardwareInterrupt  *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt `path:"hardware-interrupt" module:"openconfig-system"`
	ΛHardwareInterrupt []ygot.Annotation                                         `path:"@hardware-interrupt" ygotAnnotation:"true"`
	Idle               *OpenconfigSystem_System_Cpus_Cpu_State_Idle              `path:"idle" module:"openconfig-system"`
	ΛIdle              []ygot.Annotation                                         `path:"@idle" ygotAnnotation:"true"`
	Index              OpenconfigSystem_System_Cpus_Cpu_State_Index_Union        `path:"index" module:"openconfig-system"`
	ΛIndex             []ygot.Annotation                                         `path:"@index" ygotAnnotation:"true"`
	Kernel             *OpenconfigSystem_System_Cpus_Cpu_State_Kernel            `path:"kernel" module:"openconfig-system"`
	ΛKernel            []ygot.Annotation                                         `path:"@kernel" ygotAnnotation:"true"`
	Nice               *OpenconfigSystem_System_Cpus_Cpu_State_Nice              `path:"nice" module:"openconfig-system"`
	ΛNice              []ygot.Annotation                                         `path:"@nice" ygotAnnotation:"true"`
	SoftwareInterrupt  *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt `path:"software-interrupt" module:"openconfig-system"`
	ΛSoftwareInterrupt []ygot.Annotation                                         `path:"@software-interrupt" ygotAnnotation:"true"`
	Total              *OpenconfigSystem_System_Cpus_Cpu_State_Total             `path:"total" module:"openconfig-system"`
	ΛTotal             []ygot.Annotation                                         `path:"@total" ygotAnnotation:"true"`
	User               *OpenconfigSystem_System_Cpus_Cpu_State_User              `path:"user" module:"openconfig-system"`
	ΛUser              []ygot.Annotation                                         `path:"@user" ygotAnnotation:"true"`
	Wait               *OpenconfigSystem_System_Cpus_Cpu_State_Wait              `path:"wait" module:"openconfig-system"`
	ΛWait              []ygot.Annotation                                         `path:"@wait" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State) IsYANGGoStruct() {}

// GetOrCreateHardwareInterrupt retrieves the value of the HardwareInterrupt field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetOrCreateHardwareInterrupt() *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt {
	if t.HardwareInterrupt != nil {
		return t.HardwareInterrupt
	}
	t.HardwareInterrupt = &OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt{}
	return t.HardwareInterrupt
}

// GetOrCreateIdle retrieves the value of the Idle field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetOrCreateIdle() *OpenconfigSystem_System_Cpus_Cpu_State_Idle {
	if t.Idle != nil {
		return t.Idle
	}
	t.Idle = &OpenconfigSystem_System_Cpus_Cpu_State_Idle{}
	return t.Idle
}

// GetOrCreateKernel retrieves the value of the Kernel field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetOrCreateKernel() *OpenconfigSystem_System_Cpus_Cpu_State_Kernel {
	if t.Kernel != nil {
		return t.Kernel
	}
	t.Kernel = &OpenconfigSystem_System_Cpus_Cpu_State_Kernel{}
	return t.Kernel
}

// GetOrCreateNice retrieves the value of the Nice field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetOrCreateNice() *OpenconfigSystem_System_Cpus_Cpu_State_Nice {
	if t.Nice != nil {
		return t.Nice
	}
	t.Nice = &OpenconfigSystem_System_Cpus_Cpu_State_Nice{}
	return t.Nice
}

// GetOrCreateSoftwareInterrupt retrieves the value of the SoftwareInterrupt field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetOrCreateSoftwareInterrupt() *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt {
	if t.SoftwareInterrupt != nil {
		return t.SoftwareInterrupt
	}
	t.SoftwareInterrupt = &OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt{}
	return t.SoftwareInterrupt
}

// GetOrCreateTotal retrieves the value of the Total field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetOrCreateTotal() *OpenconfigSystem_System_Cpus_Cpu_State_Total {
	if t.Total != nil {
		return t.Total
	}
	t.Total = &OpenconfigSystem_System_Cpus_Cpu_State_Total{}
	return t.Total
}

// GetOrCreateUser retrieves the value of the User field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetOrCreateUser() *OpenconfigSystem_System_Cpus_Cpu_State_User {
	if t.User != nil {
		return t.User
	}
	t.User = &OpenconfigSystem_System_Cpus_Cpu_State_User{}
	return t.User
}

// GetOrCreateWait retrieves the value of the Wait field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetOrCreateWait() *OpenconfigSystem_System_Cpus_Cpu_State_Wait {
	if t.Wait != nil {
		return t.Wait
	}
	t.Wait = &OpenconfigSystem_System_Cpus_Cpu_State_Wait{}
	return t.Wait
}

// GetHardwareInterrupt returns the value of the HardwareInterrupt struct pointer
// from OpenconfigSystem_System_Cpus_Cpu_State. If the receiver or the field HardwareInterrupt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetHardwareInterrupt() *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt {
	if t != nil && t.HardwareInterrupt != nil {
		return t.HardwareInterrupt
	}
	return nil
}

// GetIdle returns the value of the Idle struct pointer
// from OpenconfigSystem_System_Cpus_Cpu_State. If the receiver or the field Idle is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetIdle() *OpenconfigSystem_System_Cpus_Cpu_State_Idle {
	if t != nil && t.Idle != nil {
		return t.Idle
	}
	return nil
}

// GetKernel returns the value of the Kernel struct pointer
// from OpenconfigSystem_System_Cpus_Cpu_State. If the receiver or the field Kernel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetKernel() *OpenconfigSystem_System_Cpus_Cpu_State_Kernel {
	if t != nil && t.Kernel != nil {
		return t.Kernel
	}
	return nil
}

// GetNice returns the value of the Nice struct pointer
// from OpenconfigSystem_System_Cpus_Cpu_State. If the receiver or the field Nice is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetNice() *OpenconfigSystem_System_Cpus_Cpu_State_Nice {
	if t != nil && t.Nice != nil {
		return t.Nice
	}
	return nil
}

// GetSoftwareInterrupt returns the value of the SoftwareInterrupt struct pointer
// from OpenconfigSystem_System_Cpus_Cpu_State. If the receiver or the field SoftwareInterrupt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetSoftwareInterrupt() *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt {
	if t != nil && t.SoftwareInterrupt != nil {
		return t.SoftwareInterrupt
	}
	return nil
}

// GetTotal returns the value of the Total struct pointer
// from OpenconfigSystem_System_Cpus_Cpu_State. If the receiver or the field Total is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetTotal() *OpenconfigSystem_System_Cpus_Cpu_State_Total {
	if t != nil && t.Total != nil {
		return t.Total
	}
	return nil
}

// GetUser returns the value of the User struct pointer
// from OpenconfigSystem_System_Cpus_Cpu_State. If the receiver or the field User is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetUser() *OpenconfigSystem_System_Cpus_Cpu_State_User {
	if t != nil && t.User != nil {
		return t.User
	}
	return nil
}

// GetWait returns the value of the Wait struct pointer
// from OpenconfigSystem_System_Cpus_Cpu_State. If the receiver or the field Wait is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetWait() *OpenconfigSystem_System_Cpus_Cpu_State_Wait {
	if t != nil && t.Wait != nil {
		return t.Wait
	}
	return nil
}

// GetIndex retrieves the value of the leaf Index from the OpenconfigSystem_System_Cpus_Cpu_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Index is set, it can safely use t.GetIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Index == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) GetIndex() OpenconfigSystem_System_Cpus_Cpu_State_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// To_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_Cpus_Cpu_State_Index_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_Cpus_Cpu_State) To_OpenconfigSystem_System_Cpus_Cpu_State_Index_Union(i interface{}) (OpenconfigSystem_System_Cpus_Cpu_State_Index_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigSystem_System_Cpus_Cpu_State_Index:
		return &OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_E_OpenconfigSystem_System_Cpus_Cpu_State_Index{v}, nil
	case uint32:
		return &OpenconfigSystem_System_Cpus_Cpu_State_Index_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_Cpus_Cpu_State_Index_Union, unknown union type, got: %T, want any of [E_OpenconfigSystem_System_Cpus_Cpu_State_Index, uint32]", i, i)
	}
}

// OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_HardwareInterrupt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Cpus_Cpu_State_Idle represents the /openconfig-system/system/cpus/cpu/state/idle YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_Idle struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_Idle implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Idle) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigSystem_System_Cpus_Cpu_State_Idle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Idle) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigSystem_System_Cpus_Cpu_State_Idle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Idle) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigSystem_System_Cpus_Cpu_State_Idle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Idle) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigSystem_System_Cpus_Cpu_State_Idle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Idle) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigSystem_System_Cpus_Cpu_State_Idle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Idle) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigSystem_System_Cpus_Cpu_State_Idle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Idle) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigSystem_System_Cpus_Cpu_State_Idle
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Idle) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Idle) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_Idle"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Idle) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Cpus_Cpu_State_Kernel represents the /openconfig-system/system/cpus/cpu/state/kernel YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_Kernel struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_Kernel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Kernel) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigSystem_System_Cpus_Cpu_State_Kernel
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Kernel) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigSystem_System_Cpus_Cpu_State_Kernel
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Kernel) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigSystem_System_Cpus_Cpu_State_Kernel
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Kernel) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigSystem_System_Cpus_Cpu_State_Kernel
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Kernel) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigSystem_System_Cpus_Cpu_State_Kernel
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Kernel) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigSystem_System_Cpus_Cpu_State_Kernel
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Kernel) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigSystem_System_Cpus_Cpu_State_Kernel
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Kernel) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Kernel) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_Kernel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Kernel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Cpus_Cpu_State_Nice represents the /openconfig-system/system/cpus/cpu/state/nice YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_Nice struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_Nice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Nice) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigSystem_System_Cpus_Cpu_State_Nice
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Nice) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigSystem_System_Cpus_Cpu_State_Nice
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Nice) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigSystem_System_Cpus_Cpu_State_Nice
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Nice) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigSystem_System_Cpus_Cpu_State_Nice
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Nice) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigSystem_System_Cpus_Cpu_State_Nice
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Nice) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigSystem_System_Cpus_Cpu_State_Nice
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Nice) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigSystem_System_Cpus_Cpu_State_Nice
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Nice) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Nice) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_Nice"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Nice) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt represents the /openconfig-system/system/cpus/cpu/state/software-interrupt YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_SoftwareInterrupt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Cpus_Cpu_State_Total represents the /openconfig-system/system/cpus/cpu/state/total YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_Total struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_Total implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Total) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigSystem_System_Cpus_Cpu_State_Total
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Total) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigSystem_System_Cpus_Cpu_State_Total
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Total) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigSystem_System_Cpus_Cpu_State_Total
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Total) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigSystem_System_Cpus_Cpu_State_Total
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Total) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigSystem_System_Cpus_Cpu_State_Total
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Total) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigSystem_System_Cpus_Cpu_State_Total
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Total) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigSystem_System_Cpus_Cpu_State_Total
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Total) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Total) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_Total"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Total) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Cpus_Cpu_State_User represents the /openconfig-system/system/cpus/cpu/state/user YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_User struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_User) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigSystem_System_Cpus_Cpu_State_User
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_User) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigSystem_System_Cpus_Cpu_State_User
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_User) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigSystem_System_Cpus_Cpu_State_User
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_User) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigSystem_System_Cpus_Cpu_State_User
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_User) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigSystem_System_Cpus_Cpu_State_User
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_User) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigSystem_System_Cpus_Cpu_State_User
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_User) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigSystem_System_Cpus_Cpu_State_User
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_User) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_User) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_User"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_User) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Cpus_Cpu_State_Wait represents the /openconfig-system/system/cpus/cpu/state/wait YANG schema element.
type OpenconfigSystem_System_Cpus_Cpu_State_Wait struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *uint8            `path:"avg" module:"openconfig-system"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *uint8            `path:"instant" module:"openconfig-system"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-system"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *uint8            `path:"max" module:"openconfig-system"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-system"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *uint8            `path:"min" module:"openconfig-system"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-system"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Cpus_Cpu_State_Wait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Cpus_Cpu_State_Wait) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigSystem_System_Cpus_Cpu_State_Wait
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Wait) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigSystem_System_Cpus_Cpu_State_Wait
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Wait) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigSystem_System_Cpus_Cpu_State_Wait
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Wait) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigSystem_System_Cpus_Cpu_State_Wait
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Wait) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigSystem_System_Cpus_Cpu_State_Wait
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Wait) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigSystem_System_Cpus_Cpu_State_Wait
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Wait) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigSystem_System_Cpus_Cpu_State_Wait
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Wait) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Wait) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Cpus_Cpu_State_Wait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Cpus_Cpu_State_Wait) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Dns represents the /openconfig-system/system/dns YANG schema element.
type OpenconfigSystem_System_Dns struct {
	ΛMetadata    []ygot.Annotation                        `path:"@" ygotAnnotation:"true"`
	Config       *OpenconfigSystem_System_Dns_Config      `path:"config" module:"openconfig-system"`
	ΛConfig      []ygot.Annotation                        `path:"@config" ygotAnnotation:"true"`
	HostEntries  *OpenconfigSystem_System_Dns_HostEntries `path:"host-entries" module:"openconfig-system"`
	ΛHostEntries []ygot.Annotation                        `path:"@host-entries" ygotAnnotation:"true"`
	Servers      *OpenconfigSystem_System_Dns_Servers     `path:"servers" module:"openconfig-system"`
	ΛServers     []ygot.Annotation                        `path:"@servers" ygotAnnotation:"true"`
	State        *OpenconfigSystem_System_Dns_State       `path:"state" module:"openconfig-system"`
	ΛState       []ygot.Annotation                        `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Dns) GetOrCreateConfig() *OpenconfigSystem_System_Dns_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Dns_Config{}
	return t.Config
}

// GetOrCreateHostEntries retrieves the value of the HostEntries field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Dns) GetOrCreateHostEntries() *OpenconfigSystem_System_Dns_HostEntries {
	if t.HostEntries != nil {
		return t.HostEntries
	}
	t.HostEntries = &OpenconfigSystem_System_Dns_HostEntries{}
	return t.HostEntries
}

// GetOrCreateServers retrieves the value of the Servers field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Dns) GetOrCreateServers() *OpenconfigSystem_System_Dns_Servers {
	if t.Servers != nil {
		return t.Servers
	}
	t.Servers = &OpenconfigSystem_System_Dns_Servers{}
	return t.Servers
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Dns) GetOrCreateState() *OpenconfigSystem_System_Dns_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Dns_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Dns. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Dns) GetConfig() *OpenconfigSystem_System_Dns_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetHostEntries returns the value of the HostEntries struct pointer
// from OpenconfigSystem_System_Dns. If the receiver or the field HostEntries is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Dns) GetHostEntries() *OpenconfigSystem_System_Dns_HostEntries {
	if t != nil && t.HostEntries != nil {
		return t.HostEntries
	}
	return nil
}

// GetServers returns the value of the Servers struct pointer
// from OpenconfigSystem_System_Dns. If the receiver or the field Servers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Dns) GetServers() *OpenconfigSystem_System_Dns_Servers {
	if t != nil && t.Servers != nil {
		return t.Servers
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Dns. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Dns) GetState() *OpenconfigSystem_System_Dns_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Dns_Config represents the /openconfig-system/system/dns/config YANG schema element.
type OpenconfigSystem_System_Dns_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Search    []string          `path:"search" module:"openconfig-system"`
	ΛSearch   []ygot.Annotation `path:"@search" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_Config) IsYANGGoStruct() {}

// GetSearch retrieves the value of the leaf Search from the OpenconfigSystem_System_Dns_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Search is set, it can safely use t.GetSearch()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Search == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_Config) GetSearch() []string {
	if t == nil || t.Search == nil {
		return nil
	}
	return t.Search
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Dns_HostEntries represents the /openconfig-system/system/dns/host-entries YANG schema element.
type OpenconfigSystem_System_Dns_HostEntries struct {
	ΛMetadata  []ygot.Annotation                                             `path:"@" ygotAnnotation:"true"`
	HostEntry  map[string]*OpenconfigSystem_System_Dns_HostEntries_HostEntry `path:"host-entry" module:"openconfig-system"`
	ΛHostEntry []ygot.Annotation                                             `path:"@host-entry" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_HostEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_HostEntries) IsYANGGoStruct() {}

// NewHostEntry creates a new entry in the HostEntry list of the
// OpenconfigSystem_System_Dns_HostEntries struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Dns_HostEntries) NewHostEntry(Hostname string) (*OpenconfigSystem_System_Dns_HostEntries_HostEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostEntry == nil {
		t.HostEntry = make(map[string]*OpenconfigSystem_System_Dns_HostEntries_HostEntry)
	}

	key := Hostname

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HostEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HostEntry", key)
	}

	t.HostEntry[key] = &OpenconfigSystem_System_Dns_HostEntries_HostEntry{
		Hostname: &Hostname,
	}

	return t.HostEntry[key], nil
}

// RenameHostEntry renames an entry in the list HostEntry within
// the OpenconfigSystem_System_Dns_HostEntries struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Dns_HostEntries) RenameHostEntry(oldK, newK string) error {
	if _, ok := t.HostEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in HostEntry", newK)
	}

	e, ok := t.HostEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HostEntry", oldK)
	}
	e.Hostname = &newK

	t.HostEntry[newK] = e
	delete(t.HostEntry, oldK)
	return nil
}

// GetOrCreateHostEntry retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Dns_HostEntries. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Dns_HostEntries) GetOrCreateHostEntry(Hostname string) *OpenconfigSystem_System_Dns_HostEntries_HostEntry {

	key := Hostname

	if v, ok := t.HostEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHostEntry(Hostname)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHostEntry got unexpected error: %v", err))
	}
	return v
}

// GetHostEntry retrieves the value with the specified key from
// the HostEntry map field of OpenconfigSystem_System_Dns_HostEntries. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Dns_HostEntries) GetHostEntry(Hostname string) *OpenconfigSystem_System_Dns_HostEntries_HostEntry {

	if t == nil {
		return nil
	}

	key := Hostname

	if lm, ok := t.HostEntry[key]; ok {
		return lm
	}
	return nil
}

// AppendHostEntry appends the supplied OpenconfigSystem_System_Dns_HostEntries_HostEntry struct to the
// list HostEntry of OpenconfigSystem_System_Dns_HostEntries. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Dns_HostEntries_HostEntry already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Dns_HostEntries) AppendHostEntry(v *OpenconfigSystem_System_Dns_HostEntries_HostEntry) error {
	key := *v.Hostname

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostEntry == nil {
		t.HostEntry = make(map[string]*OpenconfigSystem_System_Dns_HostEntries_HostEntry)
	}

	if _, ok := t.HostEntry[key]; ok {
		return fmt.Errorf("duplicate key for list HostEntry %v", key)
	}

	t.HostEntry[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_HostEntries) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_HostEntries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_HostEntries) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Dns_HostEntries_HostEntry represents the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type OpenconfigSystem_System_Dns_HostEntries_HostEntry struct {
	ΛMetadata []ygot.Annotation                                         `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                         `path:"@config" ygotAnnotation:"true"`
	Hostname  *string                                                   `path:"hostname" module:"openconfig-system"`
	ΛHostname []ygot.Annotation                                         `path:"@hostname" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                         `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_HostEntries_HostEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_HostEntries_HostEntry) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) GetOrCreateConfig() *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) GetOrCreateState() *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Dns_HostEntries_HostEntry_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Dns_HostEntries_HostEntry. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) GetConfig() *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Dns_HostEntries_HostEntry. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) GetState() *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetHostname retrieves the value of the leaf Hostname from the OpenconfigSystem_System_Dns_HostEntries_HostEntry
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Hostname is set, it can safely use t.GetHostname()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Hostname == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) GetHostname() string {
	if t == nil || t.Hostname == nil {
		return ""
	}
	return *t.Hostname
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Dns_HostEntries_HostEntry struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Hostname == nil {
		return nil, fmt.Errorf("nil value for key Hostname")
	}

	return map[string]interface{}{
		"hostname": *t.Hostname,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_HostEntries_HostEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config represents the /openconfig-system/system/dns/host-entries/host-entry/config YANG schema element.
type OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Alias        []string          `path:"alias" module:"openconfig-system"`
	ΛAlias       []ygot.Annotation `path:"@alias" ygotAnnotation:"true"`
	Hostname     *string           `path:"hostname" module:"openconfig-system"`
	ΛHostname    []ygot.Annotation `path:"@hostname" ygotAnnotation:"true"`
	Ipv4Address  []string          `path:"ipv4-address" module:"openconfig-system"`
	ΛIpv4Address []ygot.Annotation `path:"@ipv4-address" ygotAnnotation:"true"`
	Ipv6Address  []string          `path:"ipv6-address" module:"openconfig-system"`
	ΛIpv6Address []ygot.Annotation `path:"@ipv6-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config) IsYANGGoStruct() {}

// GetAlias retrieves the value of the leaf Alias from the OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Alias is set, it can safely use t.GetAlias()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Alias == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config) GetAlias() []string {
	if t == nil || t.Alias == nil {
		return nil
	}
	return t.Alias
}

// GetHostname retrieves the value of the leaf Hostname from the OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Hostname is set, it can safely use t.GetHostname()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Hostname == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config) GetHostname() string {
	if t == nil || t.Hostname == nil {
		return ""
	}
	return *t.Hostname
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ipv4Address is set, it can safely use t.GetIpv4Address()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ipv4Address == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config) GetIpv4Address() []string {
	if t == nil || t.Ipv4Address == nil {
		return nil
	}
	return t.Ipv4Address
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ipv6Address is set, it can safely use t.GetIpv6Address()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ipv6Address == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config) GetIpv6Address() []string {
	if t == nil || t.Ipv6Address == nil {
		return nil
	}
	return t.Ipv6Address
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Dns_HostEntries_HostEntry_State represents the /openconfig-system/system/dns/host-entries/host-entry/state YANG schema element.
type OpenconfigSystem_System_Dns_HostEntries_HostEntry_State struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Alias        []string          `path:"alias" module:"openconfig-system"`
	ΛAlias       []ygot.Annotation `path:"@alias" ygotAnnotation:"true"`
	Hostname     *string           `path:"hostname" module:"openconfig-system"`
	ΛHostname    []ygot.Annotation `path:"@hostname" ygotAnnotation:"true"`
	Ipv4Address  []string          `path:"ipv4-address" module:"openconfig-system"`
	ΛIpv4Address []ygot.Annotation `path:"@ipv4-address" ygotAnnotation:"true"`
	Ipv6Address  []string          `path:"ipv6-address" module:"openconfig-system"`
	ΛIpv6Address []ygot.Annotation `path:"@ipv6-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_HostEntries_HostEntry_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_HostEntries_HostEntry_State) IsYANGGoStruct() {}

// GetAlias retrieves the value of the leaf Alias from the OpenconfigSystem_System_Dns_HostEntries_HostEntry_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Alias is set, it can safely use t.GetAlias()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Alias == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State) GetAlias() []string {
	if t == nil || t.Alias == nil {
		return nil
	}
	return t.Alias
}

// GetHostname retrieves the value of the leaf Hostname from the OpenconfigSystem_System_Dns_HostEntries_HostEntry_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Hostname is set, it can safely use t.GetHostname()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Hostname == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State) GetHostname() string {
	if t == nil || t.Hostname == nil {
		return ""
	}
	return *t.Hostname
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the OpenconfigSystem_System_Dns_HostEntries_HostEntry_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ipv4Address is set, it can safely use t.GetIpv4Address()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ipv4Address == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State) GetIpv4Address() []string {
	if t == nil || t.Ipv4Address == nil {
		return nil
	}
	return t.Ipv4Address
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the OpenconfigSystem_System_Dns_HostEntries_HostEntry_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Ipv6Address is set, it can safely use t.GetIpv6Address()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Ipv6Address == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State) GetIpv6Address() []string {
	if t == nil || t.Ipv6Address == nil {
		return nil
	}
	return t.Ipv6Address
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_HostEntries_HostEntry_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_HostEntries_HostEntry_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Dns_Servers represents the /openconfig-system/system/dns/servers YANG schema element.
type OpenconfigSystem_System_Dns_Servers struct {
	ΛMetadata []ygot.Annotation                                      `path:"@" ygotAnnotation:"true"`
	Server    map[string]*OpenconfigSystem_System_Dns_Servers_Server `path:"server" module:"openconfig-system"`
	ΛServer   []ygot.Annotation                                      `path:"@server" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_Servers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_Servers) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// OpenconfigSystem_System_Dns_Servers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Dns_Servers) NewServer(Address string) (*OpenconfigSystem_System_Dns_Servers_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigSystem_System_Dns_Servers_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &OpenconfigSystem_System_Dns_Servers_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the OpenconfigSystem_System_Dns_Servers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Dns_Servers) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Address = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Dns_Servers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Dns_Servers) GetOrCreateServer(Address string) *OpenconfigSystem_System_Dns_Servers_Server {

	key := Address

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of OpenconfigSystem_System_Dns_Servers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Dns_Servers) GetServer(Address string) *OpenconfigSystem_System_Dns_Servers_Server {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// AppendServer appends the supplied OpenconfigSystem_System_Dns_Servers_Server struct to the
// list Server of OpenconfigSystem_System_Dns_Servers. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Dns_Servers_Server already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Dns_Servers) AppendServer(v *OpenconfigSystem_System_Dns_Servers_Server) error {
	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigSystem_System_Dns_Servers_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Servers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_Servers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_Servers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Dns_Servers_Server represents the /openconfig-system/system/dns/servers/server YANG schema element.
type OpenconfigSystem_System_Dns_Servers_Server struct {
	ΛMetadata []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	Address   *string                                            `path:"address" module:"openconfig-system"`
	ΛAddress  []ygot.Annotation                                  `path:"@address" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Dns_Servers_Server_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                  `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Dns_Servers_Server_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_Servers_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_Servers_Server) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Dns_Servers_Server) GetOrCreateConfig() *OpenconfigSystem_System_Dns_Servers_Server_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Dns_Servers_Server_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Dns_Servers_Server) GetOrCreateState() *OpenconfigSystem_System_Dns_Servers_Server_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Dns_Servers_Server_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Dns_Servers_Server. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Dns_Servers_Server) GetConfig() *OpenconfigSystem_System_Dns_Servers_Server_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Dns_Servers_Server. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Dns_Servers_Server) GetState() *OpenconfigSystem_System_Dns_Servers_Server_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetAddress retrieves the value of the leaf Address from the OpenconfigSystem_System_Dns_Servers_Server
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Address is set, it can safely use t.GetAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Address == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_Servers_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Dns_Servers_Server struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Dns_Servers_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Servers_Server) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_Servers_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_Servers_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Dns_Servers_Server_Config represents the /openconfig-system/system/dns/servers/server/config YANG schema element.
type OpenconfigSystem_System_Dns_Servers_Server_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Address   *string           `path:"address" module:"openconfig-system"`
	ΛAddress  []ygot.Annotation `path:"@address" ygotAnnotation:"true"`
	Port      *uint16           `path:"port" module:"openconfig-system"`
	ΛPort     []ygot.Annotation `path:"@port" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_Servers_Server_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_Servers_Server_Config) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the OpenconfigSystem_System_Dns_Servers_Server_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Address is set, it can safely use t.GetAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Address == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_Servers_Server_Config) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetPort retrieves the value of the leaf Port from the OpenconfigSystem_System_Dns_Servers_Server_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Port is set, it can safely use t.GetPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Port == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_Servers_Server_Config) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 53
	}
	return *t.Port
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Servers_Server_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_Servers_Server_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_Servers_Server_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Dns_Servers_Server_State represents the /openconfig-system/system/dns/servers/server/state YANG schema element.
type OpenconfigSystem_System_Dns_Servers_Server_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Address   *string           `path:"address" module:"openconfig-system"`
	ΛAddress  []ygot.Annotation `path:"@address" ygotAnnotation:"true"`
	Port      *uint16           `path:"port" module:"openconfig-system"`
	ΛPort     []ygot.Annotation `path:"@port" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_Servers_Server_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_Servers_Server_State) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the OpenconfigSystem_System_Dns_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Address is set, it can safely use t.GetAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Address == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_Servers_Server_State) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetPort retrieves the value of the leaf Port from the OpenconfigSystem_System_Dns_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Port is set, it can safely use t.GetPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Port == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_Servers_Server_State) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 53
	}
	return *t.Port
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_Servers_Server_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_Servers_Server_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_Servers_Server_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Dns_State represents the /openconfig-system/system/dns/state YANG schema element.
type OpenconfigSystem_System_Dns_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Search    []string          `path:"search" module:"openconfig-system"`
	ΛSearch   []ygot.Annotation `path:"@search" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Dns_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Dns_State) IsYANGGoStruct() {}

// GetSearch retrieves the value of the leaf Search from the OpenconfigSystem_System_Dns_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Search is set, it can safely use t.GetSearch()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Search == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Dns_State) GetSearch() []string {
	if t == nil || t.Search == nil {
		return nil
	}
	return t.Search
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Dns_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Dns_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Dns_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_GrpcServer represents the /openconfig-system/system/grpc-server YANG schema element.
type OpenconfigSystem_System_GrpcServer struct {
	ΛMetadata []ygot.Annotation                          `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_GrpcServer_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                          `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_GrpcServer_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                          `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_GrpcServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_GrpcServer) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_GrpcServer) GetOrCreateConfig() *OpenconfigSystem_System_GrpcServer_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_GrpcServer_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_GrpcServer) GetOrCreateState() *OpenconfigSystem_System_GrpcServer_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_GrpcServer_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_GrpcServer. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_GrpcServer) GetConfig() *OpenconfigSystem_System_GrpcServer_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_GrpcServer. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_GrpcServer) GetState() *OpenconfigSystem_System_GrpcServer_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_GrpcServer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_GrpcServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_GrpcServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_GrpcServer_Config represents the /openconfig-system/system/grpc-server/config YANG schema element.
type OpenconfigSystem_System_GrpcServer_Config struct {
	ΛMetadata          []ygot.Annotation                                                 `path:"@" ygotAnnotation:"true"`
	CertificateId      *string                                                           `path:"certificate-id" module:"openconfig-system"`
	ΛCertificateId     []ygot.Annotation                                                 `path:"@certificate-id" ygotAnnotation:"true"`
	Enable             *bool                                                             `path:"enable" module:"openconfig-system"`
	ΛEnable            []ygot.Annotation                                                 `path:"@enable" ygotAnnotation:"true"`
	ListenAddresses    []OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union `path:"listen-addresses" module:"openconfig-system"`
	ΛListenAddresses   []ygot.Annotation                                                 `path:"@listen-addresses" ygotAnnotation:"true"`
	Port               *uint16                                                           `path:"port" module:"openconfig-system"`
	ΛPort              []ygot.Annotation                                                 `path:"@port" ygotAnnotation:"true"`
	TransportSecurity  *bool                                                             `path:"transport-security" module:"openconfig-system"`
	ΛTransportSecurity []ygot.Annotation                                                 `path:"@transport-security" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_GrpcServer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_GrpcServer_Config) IsYANGGoStruct() {}

// GetCertificateId retrieves the value of the leaf CertificateId from the OpenconfigSystem_System_GrpcServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CertificateId is set, it can safely use t.GetCertificateId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CertificateId == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_GrpcServer_Config) GetCertificateId() string {
	if t == nil || t.CertificateId == nil {
		return ""
	}
	return *t.CertificateId
}

// GetEnable retrieves the value of the leaf Enable from the OpenconfigSystem_System_GrpcServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enable is set, it can safely use t.GetEnable()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enable == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_GrpcServer_Config) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return true
	}
	return *t.Enable
}

// GetListenAddresses retrieves the value of the leaf ListenAddresses from the OpenconfigSystem_System_GrpcServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ListenAddresses is set, it can safely use t.GetListenAddresses()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ListenAddresses == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_GrpcServer_Config) GetListenAddresses() []OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union {
	if t == nil || t.ListenAddresses == nil {
		return nil
	}
	return t.ListenAddresses
}

// GetPort retrieves the value of the leaf Port from the OpenconfigSystem_System_GrpcServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Port is set, it can safely use t.GetPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Port == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_GrpcServer_Config) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// GetTransportSecurity retrieves the value of the leaf TransportSecurity from the OpenconfigSystem_System_GrpcServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TransportSecurity is set, it can safely use t.GetTransportSecurity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TransportSecurity == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_GrpcServer_Config) GetTransportSecurity() bool {
	if t == nil || t.TransportSecurity == nil {
		return false
	}
	return *t.TransportSecurity
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_GrpcServer_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_GrpcServer_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_GrpcServer_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/grpc-server/config/listen-addresses within the YANG schema.
type OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union interface {
	Is_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union()
}

// OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses is used when /openconfig-system/system/grpc-server/config/listen-addresses
// is to be set to a E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses value.
type OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses struct {
	E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses
}

// Is_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union ensures that OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses
// implements the OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union interface.
func (*OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses) Is_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union() {
}

// OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_String is used when /openconfig-system/system/grpc-server/config/listen-addresses
// is to be set to a string value.
type OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_String struct {
	String string
}

// Is_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union ensures that OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_String
// implements the OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union interface.
func (*OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_String) Is_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union() {
}

// To_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_GrpcServer_Config) To_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union(i interface{}) (OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses:
		return &OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses{v}, nil
	case string:
		return &OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_Union, unknown union type, got: %T, want any of [E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses, string]", i, i)
	}
}

// OpenconfigSystem_System_GrpcServer_State represents the /openconfig-system/system/grpc-server/state YANG schema element.
type OpenconfigSystem_System_GrpcServer_State struct {
	ΛMetadata          []ygot.Annotation                                                `path:"@" ygotAnnotation:"true"`
	CertificateId      *string                                                          `path:"certificate-id" module:"openconfig-system"`
	ΛCertificateId     []ygot.Annotation                                                `path:"@certificate-id" ygotAnnotation:"true"`
	Enable             *bool                                                            `path:"enable" module:"openconfig-system"`
	ΛEnable            []ygot.Annotation                                                `path:"@enable" ygotAnnotation:"true"`
	ListenAddresses    []OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union `path:"listen-addresses" module:"openconfig-system"`
	ΛListenAddresses   []ygot.Annotation                                                `path:"@listen-addresses" ygotAnnotation:"true"`
	Port               *uint16                                                          `path:"port" module:"openconfig-system"`
	ΛPort              []ygot.Annotation                                                `path:"@port" ygotAnnotation:"true"`
	TransportSecurity  *bool                                                            `path:"transport-security" module:"openconfig-system"`
	ΛTransportSecurity []ygot.Annotation                                                `path:"@transport-security" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_GrpcServer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_GrpcServer_State) IsYANGGoStruct() {}

// GetCertificateId retrieves the value of the leaf CertificateId from the OpenconfigSystem_System_GrpcServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CertificateId is set, it can safely use t.GetCertificateId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CertificateId == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_GrpcServer_State) GetCertificateId() string {
	if t == nil || t.CertificateId == nil {
		return ""
	}
	return *t.CertificateId
}

// GetEnable retrieves the value of the leaf Enable from the OpenconfigSystem_System_GrpcServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enable is set, it can safely use t.GetEnable()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enable == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_GrpcServer_State) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return true
	}
	return *t.Enable
}

// GetListenAddresses retrieves the value of the leaf ListenAddresses from the OpenconfigSystem_System_GrpcServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ListenAddresses is set, it can safely use t.GetListenAddresses()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ListenAddresses == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_GrpcServer_State) GetListenAddresses() []OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union {
	if t == nil || t.ListenAddresses == nil {
		return nil
	}
	return t.ListenAddresses
}

// GetPort retrieves the value of the leaf Port from the OpenconfigSystem_System_GrpcServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Port is set, it can safely use t.GetPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Port == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_GrpcServer_State) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// GetTransportSecurity retrieves the value of the leaf TransportSecurity from the OpenconfigSystem_System_GrpcServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TransportSecurity is set, it can safely use t.GetTransportSecurity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TransportSecurity == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_GrpcServer_State) GetTransportSecurity() bool {
	if t == nil || t.TransportSecurity == nil {
		return false
	}
	return *t.TransportSecurity
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_GrpcServer_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_GrpcServer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_GrpcServer_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-system/system/grpc-server/state/listen-addresses within the YANG schema.
type OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union interface {
	Is_OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union()
}

// OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses is used when /openconfig-system/system/grpc-server/state/listen-addresses
// is to be set to a E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses value.
type OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses struct {
	E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses
}

// Is_OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union ensures that OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses
// implements the OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union interface.
func (*OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses) Is_OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union() {
}

// OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_String is used when /openconfig-system/system/grpc-server/state/listen-addresses
// is to be set to a string value.
type OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_String struct {
	String string
}

// Is_OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union ensures that OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_String
// implements the OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union interface.
func (*OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_String) Is_OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union() {
}

// To_OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union takes an input interface{} and attempts to convert it to a struct
// which implements the OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *OpenconfigSystem_System_GrpcServer_State) To_OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union(i interface{}) (OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union, error) {
	switch v := i.(type) {
	case E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses:
		return &OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses{v}, nil
	case string:
		return &OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to OpenconfigSystem_System_GrpcServer_State_ListenAddresses_Union, unknown union type, got: %T, want any of [E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses, string]", i, i)
	}
}

// OpenconfigSystem_System_Logging represents the /openconfig-system/system/logging YANG schema element.
type OpenconfigSystem_System_Logging struct {
	ΛMetadata      []ygot.Annotation                              `path:"@" ygotAnnotation:"true"`
	Console        *OpenconfigSystem_System_Logging_Console       `path:"console" module:"openconfig-system"`
	ΛConsole       []ygot.Annotation                              `path:"@console" ygotAnnotation:"true"`
	RemoteServers  *OpenconfigSystem_System_Logging_RemoteServers `path:"remote-servers" module:"openconfig-system"`
	ΛRemoteServers []ygot.Annotation                              `path:"@remote-servers" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging) IsYANGGoStruct() {}

// GetOrCreateConsole retrieves the value of the Console field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging) GetOrCreateConsole() *OpenconfigSystem_System_Logging_Console {
	if t.Console != nil {
		return t.Console
	}
	t.Console = &OpenconfigSystem_System_Logging_Console{}
	return t.Console
}

// GetOrCreateRemoteServers retrieves the value of the RemoteServers field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging) GetOrCreateRemoteServers() *OpenconfigSystem_System_Logging_RemoteServers {
	if t.RemoteServers != nil {
		return t.RemoteServers
	}
	t.RemoteServers = &OpenconfigSystem_System_Logging_RemoteServers{}
	return t.RemoteServers
}

// GetConsole returns the value of the Console struct pointer
// from OpenconfigSystem_System_Logging. If the receiver or the field Console is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging) GetConsole() *OpenconfigSystem_System_Logging_Console {
	if t != nil && t.Console != nil {
		return t.Console
	}
	return nil
}

// GetRemoteServers returns the value of the RemoteServers struct pointer
// from OpenconfigSystem_System_Logging. If the receiver or the field RemoteServers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging) GetRemoteServers() *OpenconfigSystem_System_Logging_RemoteServers {
	if t != nil && t.RemoteServers != nil {
		return t.RemoteServers
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_Console represents the /openconfig-system/system/logging/console YANG schema element.
type OpenconfigSystem_System_Logging_Console struct {
	ΛMetadata  []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	Config     *OpenconfigSystem_System_Logging_Console_Config    `path:"config" module:"openconfig-system"`
	ΛConfig    []ygot.Annotation                                  `path:"@config" ygotAnnotation:"true"`
	Selectors  *OpenconfigSystem_System_Logging_Console_Selectors `path:"selectors" module:"openconfig-system"`
	ΛSelectors []ygot.Annotation                                  `path:"@selectors" ygotAnnotation:"true"`
	State      *OpenconfigSystem_System_Logging_Console_State     `path:"state" module:"openconfig-system"`
	ΛState     []ygot.Annotation                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_Console) GetOrCreateConfig() *OpenconfigSystem_System_Logging_Console_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Logging_Console_Config{}
	return t.Config
}

// GetOrCreateSelectors retrieves the value of the Selectors field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_Console) GetOrCreateSelectors() *OpenconfigSystem_System_Logging_Console_Selectors {
	if t.Selectors != nil {
		return t.Selectors
	}
	t.Selectors = &OpenconfigSystem_System_Logging_Console_Selectors{}
	return t.Selectors
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_Console) GetOrCreateState() *OpenconfigSystem_System_Logging_Console_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Logging_Console_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Logging_Console. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_Console) GetConfig() *OpenconfigSystem_System_Logging_Console_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetSelectors returns the value of the Selectors struct pointer
// from OpenconfigSystem_System_Logging_Console. If the receiver or the field Selectors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_Console) GetSelectors() *OpenconfigSystem_System_Logging_Console_Selectors {
	if t != nil && t.Selectors != nil {
		return t.Selectors
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Logging_Console. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_Console) GetState() *OpenconfigSystem_System_Logging_Console_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_Console_Config represents the /openconfig-system/system/logging/console/config YANG schema element.
type OpenconfigSystem_System_Logging_Console_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_Console_Selectors represents the /openconfig-system/system/logging/console/selectors YANG schema element.
type OpenconfigSystem_System_Logging_Console_Selectors struct {
	ΛMetadata []ygot.Annotation                                                                                                              `path:"@" ygotAnnotation:"true"`
	Selector  map[OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_Console_Selectors_Selector `path:"selector" module:"openconfig-system"`
	ΛSelector []ygot.Annotation                                                                                                              `path:"@selector" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_Selectors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_Selectors) IsYANGGoStruct() {}

// OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/console/selectors.
type OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key struct {
	Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility"`
	Severity E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity"`
}

// NewSelector creates a new entry in the Selector list of the
// OpenconfigSystem_System_Logging_Console_Selectors struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) NewSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) (*OpenconfigSystem_System_Logging_Console_Selectors_Selector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_Console_Selectors_Selector)
	}

	key := OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &OpenconfigSystem_System_Logging_Console_Selectors_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// RenameSelector renames an entry in the list Selector within
// the OpenconfigSystem_System_Logging_Console_Selectors struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) RenameSelector(oldK, newK OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key) error {
	if _, ok := t.Selector[newK]; ok {
		return fmt.Errorf("key %v already exists in Selector", newK)
	}

	e, ok := t.Selector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Selector", oldK)
	}
	e.Facility = newK.Facility
	e.Severity = newK.Severity

	t.Selector[newK] = e
	delete(t.Selector, oldK)
	return nil
}

// GetOrCreateSelector retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Logging_Console_Selectors. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) GetOrCreateSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) *OpenconfigSystem_System_Logging_Console_Selectors_Selector {

	key := OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if v, ok := t.Selector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSelector(Facility, Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSelector got unexpected error: %v", err))
	}
	return v
}

// GetSelector retrieves the value with the specified key from
// the Selector map field of OpenconfigSystem_System_Logging_Console_Selectors. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) GetSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) *OpenconfigSystem_System_Logging_Console_Selectors_Selector {

	if t == nil {
		return nil
	}

	key := OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if lm, ok := t.Selector[key]; ok {
		return lm
	}
	return nil
}

// AppendSelector appends the supplied OpenconfigSystem_System_Logging_Console_Selectors_Selector struct to the
// list Selector of OpenconfigSystem_System_Logging_Console_Selectors. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Logging_Console_Selectors_Selector already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) AppendSelector(v *OpenconfigSystem_System_Logging_Console_Selectors_Selector) error {
	key := OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key{Facility: v.Facility, Severity: v.Severity}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigSystem_System_Logging_Console_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_Console_Selectors_Selector)
	}

	if _, ok := t.Selector[key]; ok {
		return fmt.Errorf("duplicate key for list Selector %v", key)
	}

	t.Selector[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_Selectors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_Selectors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_Console_Selectors_Selector represents the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type OpenconfigSystem_System_Logging_Console_Selectors_Selector struct {
	ΛMetadata []ygot.Annotation                                                  `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                                  `path:"@config" ygotAnnotation:"true"`
	Facility  E_OpenconfigSystemLogging_SYSLOG_FACILITY                          `path:"facility" module:"openconfig-system"`
	ΛFacility []ygot.Annotation                                                  `path:"@facility" ygotAnnotation:"true"`
	Severity  E_OpenconfigSystemLogging_SyslogSeverity                           `path:"severity" module:"openconfig-system"`
	ΛSeverity []ygot.Annotation                                                  `path:"@severity" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Logging_Console_Selectors_Selector_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_Selectors_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_Selectors_Selector) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) GetOrCreateConfig() *OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) GetOrCreateState() *OpenconfigSystem_System_Logging_Console_Selectors_Selector_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Logging_Console_Selectors_Selector_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Logging_Console_Selectors_Selector. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) GetConfig() *OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Logging_Console_Selectors_Selector. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) GetState() *OpenconfigSystem_System_Logging_Console_Selectors_Selector_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetFacility retrieves the value of the leaf Facility from the OpenconfigSystem_System_Logging_Console_Selectors_Selector
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Facility is set, it can safely use t.GetFacility()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Facility == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) GetFacility() E_OpenconfigSystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the OpenconfigSystem_System_Logging_Console_Selectors_Selector
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Severity is set, it can safely use t.GetSeverity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Severity == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) GetSeverity() E_OpenconfigSystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Logging_Console_Selectors_Selector struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_Selectors_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config represents the /openconfig-system/system/logging/console/selectors/selector/config YANG schema element.
type OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config struct {
	ΛMetadata []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	Facility  E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility" module:"openconfig-system"`
	ΛFacility []ygot.Annotation                         `path:"@facility" ygotAnnotation:"true"`
	Severity  E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity" module:"openconfig-system"`
	ΛSeverity []ygot.Annotation                         `path:"@severity" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config) IsYANGGoStruct() {}

// GetFacility retrieves the value of the leaf Facility from the OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Facility is set, it can safely use t.GetFacility()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Facility == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config) GetFacility() E_OpenconfigSystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Severity is set, it can safely use t.GetSeverity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Severity == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config) GetSeverity() E_OpenconfigSystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_Console_Selectors_Selector_State represents the /openconfig-system/system/logging/console/selectors/selector/state YANG schema element.
type OpenconfigSystem_System_Logging_Console_Selectors_Selector_State struct {
	ΛMetadata []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	Facility  E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility" module:"openconfig-system"`
	ΛFacility []ygot.Annotation                         `path:"@facility" ygotAnnotation:"true"`
	Severity  E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity" module:"openconfig-system"`
	ΛSeverity []ygot.Annotation                         `path:"@severity" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_Selectors_Selector_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_Selectors_Selector_State) IsYANGGoStruct() {}

// GetFacility retrieves the value of the leaf Facility from the OpenconfigSystem_System_Logging_Console_Selectors_Selector_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Facility is set, it can safely use t.GetFacility()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Facility == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_State) GetFacility() E_OpenconfigSystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the OpenconfigSystem_System_Logging_Console_Selectors_Selector_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Severity is set, it can safely use t.GetSeverity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Severity == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_State) GetSeverity() E_OpenconfigSystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_Selectors_Selector_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_Selectors_Selector_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_Console_State represents the /openconfig-system/system/logging/console/state YANG schema element.
type OpenconfigSystem_System_Logging_Console_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_Console_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_Console_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_Console_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_Console_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_Console_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_RemoteServers represents the /openconfig-system/system/logging/remote-servers YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers struct {
	ΛMetadata     []ygot.Annotation                                                      `path:"@" ygotAnnotation:"true"`
	RemoteServer  map[string]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer `path:"remote-server" module:"openconfig-system"`
	ΛRemoteServer []ygot.Annotation                                                      `path:"@remote-server" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers) IsYANGGoStruct() {}

// NewRemoteServer creates a new entry in the RemoteServer list of the
// OpenconfigSystem_System_Logging_RemoteServers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Logging_RemoteServers) NewRemoteServer(Host string) (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteServer == nil {
		t.RemoteServer = make(map[string]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer)
	}

	key := Host

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RemoteServer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RemoteServer", key)
	}

	t.RemoteServer[key] = &OpenconfigSystem_System_Logging_RemoteServers_RemoteServer{
		Host: &Host,
	}

	return t.RemoteServer[key], nil
}

// RenameRemoteServer renames an entry in the list RemoteServer within
// the OpenconfigSystem_System_Logging_RemoteServers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Logging_RemoteServers) RenameRemoteServer(oldK, newK string) error {
	if _, ok := t.RemoteServer[newK]; ok {
		return fmt.Errorf("key %v already exists in RemoteServer", newK)
	}

	e, ok := t.RemoteServer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RemoteServer", oldK)
	}
	e.Host = &newK

	t.RemoteServer[newK] = e
	delete(t.RemoteServer, oldK)
	return nil
}

// GetOrCreateRemoteServer retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Logging_RemoteServers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Logging_RemoteServers) GetOrCreateRemoteServer(Host string) *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer {

	key := Host

	if v, ok := t.RemoteServer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRemoteServer(Host)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRemoteServer got unexpected error: %v", err))
	}
	return v
}

// GetRemoteServer retrieves the value with the specified key from
// the RemoteServer map field of OpenconfigSystem_System_Logging_RemoteServers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Logging_RemoteServers) GetRemoteServer(Host string) *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer {

	if t == nil {
		return nil
	}

	key := Host

	if lm, ok := t.RemoteServer[key]; ok {
		return lm
	}
	return nil
}

// AppendRemoteServer appends the supplied OpenconfigSystem_System_Logging_RemoteServers_RemoteServer struct to the
// list RemoteServer of OpenconfigSystem_System_Logging_RemoteServers. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Logging_RemoteServers_RemoteServer already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Logging_RemoteServers) AppendRemoteServer(v *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) error {
	key := *v.Host

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteServer == nil {
		t.RemoteServer = make(map[string]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer)
	}

	if _, ok := t.RemoteServer[key]; ok {
		return fmt.Errorf("duplicate key for list RemoteServer %v", key)
	}

	t.RemoteServer[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer represents the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer struct {
	ΛMetadata  []ygot.Annotation                                                     `path:"@" ygotAnnotation:"true"`
	Config     *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config    `path:"config" module:"openconfig-system"`
	ΛConfig    []ygot.Annotation                                                     `path:"@config" ygotAnnotation:"true"`
	Host       *string                                                               `path:"host" module:"openconfig-system"`
	ΛHost      []ygot.Annotation                                                     `path:"@host" ygotAnnotation:"true"`
	Selectors  *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors `path:"selectors" module:"openconfig-system"`
	ΛSelectors []ygot.Annotation                                                     `path:"@selectors" ygotAnnotation:"true"`
	State      *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State     `path:"state" module:"openconfig-system"`
	ΛState     []ygot.Annotation                                                     `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) GetOrCreateConfig() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config{}
	return t.Config
}

// GetOrCreateSelectors retrieves the value of the Selectors field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) GetOrCreateSelectors() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors {
	if t.Selectors != nil {
		return t.Selectors
	}
	t.Selectors = &OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors{}
	return t.Selectors
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) GetOrCreateState() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Logging_RemoteServers_RemoteServer. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) GetConfig() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetSelectors returns the value of the Selectors struct pointer
// from OpenconfigSystem_System_Logging_RemoteServers_RemoteServer. If the receiver or the field Selectors is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) GetSelectors() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors {
	if t != nil && t.Selectors != nil {
		return t.Selectors
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Logging_RemoteServers_RemoteServer. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) GetState() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetHost retrieves the value of the leaf Host from the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Host is set, it can safely use t.GetHost()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Host == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) GetHost() string {
	if t == nil || t.Host == nil {
		return ""
	}
	return *t.Host
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Host == nil {
		return nil, fmt.Errorf("nil value for key Host")
	}

	return map[string]interface{}{
		"host": *t.Host,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config represents the /openconfig-system/system/logging/remote-servers/remote-server/config YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Host           *string           `path:"host" module:"openconfig-system"`
	ΛHost          []ygot.Annotation `path:"@host" ygotAnnotation:"true"`
	RemotePort     *uint16           `path:"remote-port" module:"openconfig-system"`
	ΛRemotePort    []ygot.Annotation `path:"@remote-port" ygotAnnotation:"true"`
	SourceAddress  *string           `path:"source-address" module:"openconfig-system"`
	ΛSourceAddress []ygot.Annotation `path:"@source-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config) IsYANGGoStruct() {}

// GetHost retrieves the value of the leaf Host from the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Host is set, it can safely use t.GetHost()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Host == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config) GetHost() string {
	if t == nil || t.Host == nil {
		return ""
	}
	return *t.Host
}

// GetRemotePort retrieves the value of the leaf RemotePort from the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RemotePort is set, it can safely use t.GetRemotePort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RemotePort == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config) GetRemotePort() uint16 {
	if t == nil || t.RemotePort == nil {
		return 514
	}
	return *t.RemotePort
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SourceAddress is set, it can safely use t.GetSourceAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SourceAddress == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors struct {
	ΛMetadata []ygot.Annotation                                                                                                                                                    `path:"@" ygotAnnotation:"true"`
	Selector  map[OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector `path:"selector" module:"openconfig-system"`
	ΛSelector []ygot.Annotation                                                                                                                                                    `path:"@selector" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) IsYANGGoStruct() {}

// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/remote-servers/remote-server/selectors.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key struct {
	Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility"`
	Severity E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity"`
}

// NewSelector creates a new entry in the Selector list of the
// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) NewSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector)
	}

	key := OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// RenameSelector renames an entry in the list Selector within
// the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) RenameSelector(oldK, newK OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key) error {
	if _, ok := t.Selector[newK]; ok {
		return fmt.Errorf("key %v already exists in Selector", newK)
	}

	e, ok := t.Selector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Selector", oldK)
	}
	e.Facility = newK.Facility
	e.Severity = newK.Severity

	t.Selector[newK] = e
	delete(t.Selector, oldK)
	return nil
}

// GetOrCreateSelector retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) GetOrCreateSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector {

	key := OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if v, ok := t.Selector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSelector(Facility, Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSelector got unexpected error: %v", err))
	}
	return v
}

// GetSelector retrieves the value with the specified key from
// the Selector map field of OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) GetSelector(Facility E_OpenconfigSystemLogging_SYSLOG_FACILITY, Severity E_OpenconfigSystemLogging_SyslogSeverity) *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector {

	if t == nil {
		return nil
	}

	key := OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if lm, ok := t.Selector[key]; ok {
		return lm
	}
	return nil
}

// AppendSelector appends the supplied OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector struct to the
// list Selector of OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) AppendSelector(v *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) error {
	key := OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key{Facility: v.Facility, Severity: v.Severity}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Key]*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector)
	}

	if _, ok := t.Selector[key]; ok {
		return fmt.Errorf("duplicate key for list Selector %v", key)
	}

	t.Selector[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector struct {
	ΛMetadata []ygot.Annotation                                                                     `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                                                     `path:"@config" ygotAnnotation:"true"`
	Facility  E_OpenconfigSystemLogging_SYSLOG_FACILITY                                             `path:"facility" module:"openconfig-system"`
	ΛFacility []ygot.Annotation                                                                     `path:"@facility" ygotAnnotation:"true"`
	Severity  E_OpenconfigSystemLogging_SyslogSeverity                                              `path:"severity" module:"openconfig-system"`
	ΛSeverity []ygot.Annotation                                                                     `path:"@severity" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                                                     `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) GetOrCreateConfig() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) GetOrCreateState() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) GetConfig() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) GetState() *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetFacility retrieves the value of the leaf Facility from the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Facility is set, it can safely use t.GetFacility()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Facility == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) GetFacility() E_OpenconfigSystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Severity is set, it can safely use t.GetSeverity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Severity == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) GetSeverity() E_OpenconfigSystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/config YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config struct {
	ΛMetadata []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	Facility  E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility" module:"openconfig-system"`
	ΛFacility []ygot.Annotation                         `path:"@facility" ygotAnnotation:"true"`
	Severity  E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity" module:"openconfig-system"`
	ΛSeverity []ygot.Annotation                         `path:"@severity" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) IsYANGGoStruct() {
}

// GetFacility retrieves the value of the leaf Facility from the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Facility is set, it can safely use t.GetFacility()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Facility == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) GetFacility() E_OpenconfigSystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Severity is set, it can safely use t.GetSeverity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Severity == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) GetSeverity() E_OpenconfigSystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector/state YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State struct {
	ΛMetadata []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	Facility  E_OpenconfigSystemLogging_SYSLOG_FACILITY `path:"facility" module:"openconfig-system"`
	ΛFacility []ygot.Annotation                         `path:"@facility" ygotAnnotation:"true"`
	Severity  E_OpenconfigSystemLogging_SyslogSeverity  `path:"severity" module:"openconfig-system"`
	ΛSeverity []ygot.Annotation                         `path:"@severity" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) IsYANGGoStruct() {
}

// GetFacility retrieves the value of the leaf Facility from the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Facility is set, it can safely use t.GetFacility()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Facility == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) GetFacility() E_OpenconfigSystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Severity is set, it can safely use t.GetSeverity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Severity == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) GetSeverity() E_OpenconfigSystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_Selectors_Selector_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State represents the /openconfig-system/system/logging/remote-servers/remote-server/state YANG schema element.
type OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State struct {
	ΛMetadata      []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Host           *string           `path:"host" module:"openconfig-system"`
	ΛHost          []ygot.Annotation `path:"@host" ygotAnnotation:"true"`
	RemotePort     *uint16           `path:"remote-port" module:"openconfig-system"`
	ΛRemotePort    []ygot.Annotation `path:"@remote-port" ygotAnnotation:"true"`
	SourceAddress  *string           `path:"source-address" module:"openconfig-system"`
	ΛSourceAddress []ygot.Annotation `path:"@source-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State) IsYANGGoStruct() {}

// GetHost retrieves the value of the leaf Host from the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Host is set, it can safely use t.GetHost()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Host == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State) GetHost() string {
	if t == nil || t.Host == nil {
		return ""
	}
	return *t.Host
}

// GetRemotePort retrieves the value of the leaf RemotePort from the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RemotePort is set, it can safely use t.GetRemotePort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RemotePort == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State) GetRemotePort() uint16 {
	if t == nil || t.RemotePort == nil {
		return 514
	}
	return *t.RemotePort
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SourceAddress is set, it can safely use t.GetSourceAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SourceAddress == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Logging_RemoteServers_RemoteServer_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Memory represents the /openconfig-system/system/memory YANG schema element.
type OpenconfigSystem_System_Memory struct {
	ΛMetadata []ygot.Annotation                      `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Memory_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                      `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Memory_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                      `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Memory) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Memory) GetOrCreateConfig() *OpenconfigSystem_System_Memory_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Memory_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Memory) GetOrCreateState() *OpenconfigSystem_System_Memory_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Memory_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Memory. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Memory) GetConfig() *OpenconfigSystem_System_Memory_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Memory. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Memory) GetState() *OpenconfigSystem_System_Memory_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Memory) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Memory"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Memory) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Memory_Config represents the /openconfig-system/system/memory/config YANG schema element.
type OpenconfigSystem_System_Memory_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Memory_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Memory_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Memory_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Memory_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Memory_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Memory_State represents the /openconfig-system/system/memory/state YANG schema element.
type OpenconfigSystem_System_Memory_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Physical  *uint64           `path:"physical" module:"openconfig-system"`
	ΛPhysical []ygot.Annotation `path:"@physical" ygotAnnotation:"true"`
	Reserved  *uint64           `path:"reserved" module:"openconfig-system"`
	ΛReserved []ygot.Annotation `path:"@reserved" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Memory_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Memory_State) IsYANGGoStruct() {}

// GetPhysical retrieves the value of the leaf Physical from the OpenconfigSystem_System_Memory_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Physical is set, it can safely use t.GetPhysical()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Physical == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Memory_State) GetPhysical() uint64 {
	if t == nil || t.Physical == nil {
		return 0
	}
	return *t.Physical
}

// GetReserved retrieves the value of the leaf Reserved from the OpenconfigSystem_System_Memory_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Reserved is set, it can safely use t.GetReserved()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Reserved == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Memory_State) GetReserved() uint64 {
	if t == nil || t.Reserved == nil {
		return 0
	}
	return *t.Reserved
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Memory_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Memory_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Memory_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Ntp represents the /openconfig-system/system/ntp YANG schema element.
type OpenconfigSystem_System_Ntp struct {
	ΛMetadata []ygot.Annotation                    `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Ntp_Config  `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                    `path:"@config" ygotAnnotation:"true"`
	NtpKeys   *OpenconfigSystem_System_Ntp_NtpKeys `path:"ntp-keys" module:"openconfig-system"`
	ΛNtpKeys  []ygot.Annotation                    `path:"@ntp-keys" ygotAnnotation:"true"`
	Servers   *OpenconfigSystem_System_Ntp_Servers `path:"servers" module:"openconfig-system"`
	ΛServers  []ygot.Annotation                    `path:"@servers" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Ntp_State   `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                    `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Ntp) GetOrCreateConfig() *OpenconfigSystem_System_Ntp_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Ntp_Config{}
	return t.Config
}

// GetOrCreateNtpKeys retrieves the value of the NtpKeys field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Ntp) GetOrCreateNtpKeys() *OpenconfigSystem_System_Ntp_NtpKeys {
	if t.NtpKeys != nil {
		return t.NtpKeys
	}
	t.NtpKeys = &OpenconfigSystem_System_Ntp_NtpKeys{}
	return t.NtpKeys
}

// GetOrCreateServers retrieves the value of the Servers field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Ntp) GetOrCreateServers() *OpenconfigSystem_System_Ntp_Servers {
	if t.Servers != nil {
		return t.Servers
	}
	t.Servers = &OpenconfigSystem_System_Ntp_Servers{}
	return t.Servers
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Ntp) GetOrCreateState() *OpenconfigSystem_System_Ntp_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Ntp_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Ntp. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Ntp) GetConfig() *OpenconfigSystem_System_Ntp_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetNtpKeys returns the value of the NtpKeys struct pointer
// from OpenconfigSystem_System_Ntp. If the receiver or the field NtpKeys is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Ntp) GetNtpKeys() *OpenconfigSystem_System_Ntp_NtpKeys {
	if t != nil && t.NtpKeys != nil {
		return t.NtpKeys
	}
	return nil
}

// GetServers returns the value of the Servers struct pointer
// from OpenconfigSystem_System_Ntp. If the receiver or the field Servers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Ntp) GetServers() *OpenconfigSystem_System_Ntp_Servers {
	if t != nil && t.Servers != nil {
		return t.Servers
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Ntp. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Ntp) GetState() *OpenconfigSystem_System_Ntp_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_Ntp_Config represents the /openconfig-system/system/ntp/config YANG schema element.
type OpenconfigSystem_System_Ntp_Config struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	EnableNtpAuth     *bool             `path:"enable-ntp-auth" module:"openconfig-system"`
	ΛEnableNtpAuth    []ygot.Annotation `path:"@enable-ntp-auth" ygotAnnotation:"true"`
	Enabled           *bool             `path:"enabled" module:"openconfig-system"`
	ΛEnabled          []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	NtpSourceAddress  *string           `path:"ntp-source-address" module:"openconfig-system"`
	ΛNtpSourceAddress []ygot.Annotation `path:"@ntp-source-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_Config) IsYANGGoStruct() {}

// GetEnableNtpAuth retrieves the value of the leaf EnableNtpAuth from the OpenconfigSystem_System_Ntp_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EnableNtpAuth is set, it can safely use t.GetEnableNtpAuth()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EnableNtpAuth == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Config) GetEnableNtpAuth() bool {
	if t == nil || t.EnableNtpAuth == nil {
		return false
	}
	return *t.EnableNtpAuth
}

// GetEnabled retrieves the value of the leaf Enabled from the OpenconfigSystem_System_Ntp_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Config) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetNtpSourceAddress retrieves the value of the leaf NtpSourceAddress from the OpenconfigSystem_System_Ntp_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NtpSourceAddress is set, it can safely use t.GetNtpSourceAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NtpSourceAddress == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Config) GetNtpSourceAddress() string {
	if t == nil || t.NtpSourceAddress == nil {
		return ""
	}
	return *t.NtpSourceAddress
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Ntp_NtpKeys represents the /openconfig-system/system/ntp/ntp-keys YANG schema element.
type OpenconfigSystem_System_Ntp_NtpKeys struct {
	ΛMetadata []ygot.Annotation                                      `path:"@" ygotAnnotation:"true"`
	NtpKey    map[uint16]*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey `path:"ntp-key" module:"openconfig-system"`
	ΛNtpKey   []ygot.Annotation                                      `path:"@ntp-key" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_NtpKeys implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_NtpKeys) IsYANGGoStruct() {}

// NewNtpKey creates a new entry in the NtpKey list of the
// OpenconfigSystem_System_Ntp_NtpKeys struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) NewNtpKey(KeyId uint16) (*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NtpKey == nil {
		t.NtpKey = make(map[uint16]*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey)
	}

	key := KeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NtpKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NtpKey", key)
	}

	t.NtpKey[key] = &OpenconfigSystem_System_Ntp_NtpKeys_NtpKey{
		KeyId: &KeyId,
	}

	return t.NtpKey[key], nil
}

// RenameNtpKey renames an entry in the list NtpKey within
// the OpenconfigSystem_System_Ntp_NtpKeys struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) RenameNtpKey(oldK, newK uint16) error {
	if _, ok := t.NtpKey[newK]; ok {
		return fmt.Errorf("key %v already exists in NtpKey", newK)
	}

	e, ok := t.NtpKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NtpKey", oldK)
	}
	e.KeyId = &newK

	t.NtpKey[newK] = e
	delete(t.NtpKey, oldK)
	return nil
}

// GetOrCreateNtpKey retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Ntp_NtpKeys. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) GetOrCreateNtpKey(KeyId uint16) *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey {

	key := KeyId

	if v, ok := t.NtpKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNtpKey(KeyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNtpKey got unexpected error: %v", err))
	}
	return v
}

// GetNtpKey retrieves the value with the specified key from
// the NtpKey map field of OpenconfigSystem_System_Ntp_NtpKeys. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) GetNtpKey(KeyId uint16) *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey {

	if t == nil {
		return nil
	}

	key := KeyId

	if lm, ok := t.NtpKey[key]; ok {
		return lm
	}
	return nil
}

// AppendNtpKey appends the supplied OpenconfigSystem_System_Ntp_NtpKeys_NtpKey struct to the
// list NtpKey of OpenconfigSystem_System_Ntp_NtpKeys. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Ntp_NtpKeys_NtpKey already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) AppendNtpKey(v *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) error {
	key := *v.KeyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NtpKey == nil {
		t.NtpKey = make(map[uint16]*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey)
	}

	if _, ok := t.NtpKey[key]; ok {
		return fmt.Errorf("duplicate key for list NtpKey %v", key)
	}

	t.NtpKey[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_NtpKeys"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_NtpKeys) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Ntp_NtpKeys_NtpKey represents the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type OpenconfigSystem_System_Ntp_NtpKeys_NtpKey struct {
	ΛMetadata []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                  `path:"@config" ygotAnnotation:"true"`
	KeyId     *uint16                                            `path:"key-id" module:"openconfig-system"`
	ΛKeyId    []ygot.Annotation                                  `path:"@key-id" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_NtpKeys_NtpKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) GetOrCreateConfig() *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) GetOrCreateState() *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Ntp_NtpKeys_NtpKey. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) GetConfig() *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Ntp_NtpKeys_NtpKey. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) GetState() *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetKeyId retrieves the value of the leaf KeyId from the OpenconfigSystem_System_Ntp_NtpKeys_NtpKey
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if KeyId is set, it can safely use t.GetKeyId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.KeyId == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) GetKeyId() uint16 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Ntp_NtpKeys_NtpKey struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.KeyId == nil {
		return nil, fmt.Errorf("nil value for key KeyId")
	}

	return map[string]interface{}{
		"key-id": *t.KeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_NtpKeys_NtpKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/config YANG schema element.
type OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config struct {
	ΛMetadata []ygot.Annotation                `path:"@" ygotAnnotation:"true"`
	KeyId     *uint16                          `path:"key-id" module:"openconfig-system"`
	ΛKeyId    []ygot.Annotation                `path:"@key-id" ygotAnnotation:"true"`
	KeyType   E_OpenconfigSystem_NTP_AUTH_TYPE `path:"key-type" module:"openconfig-system"`
	ΛKeyType  []ygot.Annotation                `path:"@key-type" ygotAnnotation:"true"`
	KeyValue  *string                          `path:"key-value" module:"openconfig-system"`
	ΛKeyValue []ygot.Annotation                `path:"@key-value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config) IsYANGGoStruct() {}

// GetKeyId retrieves the value of the leaf KeyId from the OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if KeyId is set, it can safely use t.GetKeyId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.KeyId == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config) GetKeyId() uint16 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetKeyType retrieves the value of the leaf KeyType from the OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if KeyType is set, it can safely use t.GetKeyType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.KeyType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config) GetKeyType() E_OpenconfigSystem_NTP_AUTH_TYPE {
	if t == nil || t.KeyType == 0 {
		return 0
	}
	return t.KeyType
}

// GetKeyValue retrieves the value of the leaf KeyValue from the OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if KeyValue is set, it can safely use t.GetKeyValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.KeyValue == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config) GetKeyValue() string {
	if t == nil || t.KeyValue == nil {
		return ""
	}
	return *t.KeyValue
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State represents the /openconfig-system/system/ntp/ntp-keys/ntp-key/state YANG schema element.
type OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State struct {
	ΛMetadata []ygot.Annotation                `path:"@" ygotAnnotation:"true"`
	KeyId     *uint16                          `path:"key-id" module:"openconfig-system"`
	ΛKeyId    []ygot.Annotation                `path:"@key-id" ygotAnnotation:"true"`
	KeyType   E_OpenconfigSystem_NTP_AUTH_TYPE `path:"key-type" module:"openconfig-system"`
	ΛKeyType  []ygot.Annotation                `path:"@key-type" ygotAnnotation:"true"`
	KeyValue  *string                          `path:"key-value" module:"openconfig-system"`
	ΛKeyValue []ygot.Annotation                `path:"@key-value" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State) IsYANGGoStruct() {}

// GetKeyId retrieves the value of the leaf KeyId from the OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if KeyId is set, it can safely use t.GetKeyId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.KeyId == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State) GetKeyId() uint16 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetKeyType retrieves the value of the leaf KeyType from the OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if KeyType is set, it can safely use t.GetKeyType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.KeyType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State) GetKeyType() E_OpenconfigSystem_NTP_AUTH_TYPE {
	if t == nil || t.KeyType == 0 {
		return 0
	}
	return t.KeyType
}

// GetKeyValue retrieves the value of the leaf KeyValue from the OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if KeyValue is set, it can safely use t.GetKeyValue()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.KeyValue == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State) GetKeyValue() string {
	if t == nil || t.KeyValue == nil {
		return ""
	}
	return *t.KeyValue
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_NtpKeys_NtpKey_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Ntp_Servers represents the /openconfig-system/system/ntp/servers YANG schema element.
type OpenconfigSystem_System_Ntp_Servers struct {
	ΛMetadata []ygot.Annotation                                      `path:"@" ygotAnnotation:"true"`
	Server    map[string]*OpenconfigSystem_System_Ntp_Servers_Server `path:"server" module:"openconfig-system"`
	ΛServer   []ygot.Annotation                                      `path:"@server" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_Servers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_Servers) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// OpenconfigSystem_System_Ntp_Servers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Ntp_Servers) NewServer(Address string) (*OpenconfigSystem_System_Ntp_Servers_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigSystem_System_Ntp_Servers_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &OpenconfigSystem_System_Ntp_Servers_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the OpenconfigSystem_System_Ntp_Servers struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Ntp_Servers) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Address = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Ntp_Servers. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Ntp_Servers) GetOrCreateServer(Address string) *OpenconfigSystem_System_Ntp_Servers_Server {

	key := Address

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of OpenconfigSystem_System_Ntp_Servers. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Ntp_Servers) GetServer(Address string) *OpenconfigSystem_System_Ntp_Servers_Server {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// AppendServer appends the supplied OpenconfigSystem_System_Ntp_Servers_Server struct to the
// list Server of OpenconfigSystem_System_Ntp_Servers. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Ntp_Servers_Server already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Ntp_Servers) AppendServer(v *OpenconfigSystem_System_Ntp_Servers_Server) error {
	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*OpenconfigSystem_System_Ntp_Servers_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Servers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_Servers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_Servers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Ntp_Servers_Server represents the /openconfig-system/system/ntp/servers/server YANG schema element.
type OpenconfigSystem_System_Ntp_Servers_Server struct {
	ΛMetadata []ygot.Annotation                                  `path:"@" ygotAnnotation:"true"`
	Address   *string                                            `path:"address" module:"openconfig-system"`
	ΛAddress  []ygot.Annotation                                  `path:"@address" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_Ntp_Servers_Server_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                                  `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Ntp_Servers_Server_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                  `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_Servers_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_Servers_Server) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) GetOrCreateConfig() *OpenconfigSystem_System_Ntp_Servers_Server_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_Ntp_Servers_Server_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) GetOrCreateState() *OpenconfigSystem_System_Ntp_Servers_Server_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Ntp_Servers_Server_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_Ntp_Servers_Server. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) GetConfig() *OpenconfigSystem_System_Ntp_Servers_Server_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Ntp_Servers_Server. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) GetState() *OpenconfigSystem_System_Ntp_Servers_Server_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetAddress retrieves the value of the leaf Address from the OpenconfigSystem_System_Ntp_Servers_Server
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Address is set, it can safely use t.GetAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Address == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Ntp_Servers_Server struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_Servers_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_Servers_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Ntp_Servers_Server_Config represents the /openconfig-system/system/ntp/servers/server/config YANG schema element.
type OpenconfigSystem_System_Ntp_Servers_Server_Config struct {
	ΛMetadata        []ygot.Annotation                                                   `path:"@" ygotAnnotation:"true"`
	Address          *string                                                             `path:"address" module:"openconfig-system"`
	ΛAddress         []ygot.Annotation                                                   `path:"@address" ygotAnnotation:"true"`
	AssociationType  E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType `path:"association-type" module:"openconfig-system"`
	ΛAssociationType []ygot.Annotation                                                   `path:"@association-type" ygotAnnotation:"true"`
	Iburst           *bool                                                               `path:"iburst" module:"openconfig-system"`
	ΛIburst          []ygot.Annotation                                                   `path:"@iburst" ygotAnnotation:"true"`
	Port             *uint16                                                             `path:"port" module:"openconfig-system"`
	ΛPort            []ygot.Annotation                                                   `path:"@port" ygotAnnotation:"true"`
	Prefer           *bool                                                               `path:"prefer" module:"openconfig-system"`
	ΛPrefer          []ygot.Annotation                                                   `path:"@prefer" ygotAnnotation:"true"`
	Version          *uint8                                                              `path:"version" module:"openconfig-system"`
	ΛVersion         []ygot.Annotation                                                   `path:"@version" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_Servers_Server_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_Servers_Server_Config) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the OpenconfigSystem_System_Ntp_Servers_Server_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Address is set, it can safely use t.GetAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Address == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_Config) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAssociationType retrieves the value of the leaf AssociationType from the OpenconfigSystem_System_Ntp_Servers_Server_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AssociationType is set, it can safely use t.GetAssociationType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AssociationType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_Config) GetAssociationType() E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType {
	if t == nil || t.AssociationType == 0 {
		return OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_SERVER
	}
	return t.AssociationType
}

// GetIburst retrieves the value of the leaf Iburst from the OpenconfigSystem_System_Ntp_Servers_Server_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Iburst is set, it can safely use t.GetIburst()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Iburst == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_Config) GetIburst() bool {
	if t == nil || t.Iburst == nil {
		return false
	}
	return *t.Iburst
}

// GetPort retrieves the value of the leaf Port from the OpenconfigSystem_System_Ntp_Servers_Server_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Port is set, it can safely use t.GetPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Port == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_Config) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 123
	}
	return *t.Port
}

// GetPrefer retrieves the value of the leaf Prefer from the OpenconfigSystem_System_Ntp_Servers_Server_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Prefer is set, it can safely use t.GetPrefer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Prefer == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_Config) GetPrefer() bool {
	if t == nil || t.Prefer == nil {
		return false
	}
	return *t.Prefer
}

// GetVersion retrieves the value of the leaf Version from the OpenconfigSystem_System_Ntp_Servers_Server_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Version is set, it can safely use t.GetVersion()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Version == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_Config) GetVersion() uint8 {
	if t == nil || t.Version == nil {
		return 4
	}
	return *t.Version
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_Servers_Server_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Ntp_Servers_Server_State represents the /openconfig-system/system/ntp/servers/server/state YANG schema element.
type OpenconfigSystem_System_Ntp_Servers_Server_State struct {
	ΛMetadata        []ygot.Annotation                                                   `path:"@" ygotAnnotation:"true"`
	Address          *string                                                             `path:"address" module:"openconfig-system"`
	ΛAddress         []ygot.Annotation                                                   `path:"@address" ygotAnnotation:"true"`
	AssociationType  E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType `path:"association-type" module:"openconfig-system"`
	ΛAssociationType []ygot.Annotation                                                   `path:"@association-type" ygotAnnotation:"true"`
	Iburst           *bool                                                               `path:"iburst" module:"openconfig-system"`
	ΛIburst          []ygot.Annotation                                                   `path:"@iburst" ygotAnnotation:"true"`
	Offset           *uint64                                                             `path:"offset" module:"openconfig-system"`
	ΛOffset          []ygot.Annotation                                                   `path:"@offset" ygotAnnotation:"true"`
	PollInterval     *uint32                                                             `path:"poll-interval" module:"openconfig-system"`
	ΛPollInterval    []ygot.Annotation                                                   `path:"@poll-interval" ygotAnnotation:"true"`
	Port             *uint16                                                             `path:"port" module:"openconfig-system"`
	ΛPort            []ygot.Annotation                                                   `path:"@port" ygotAnnotation:"true"`
	Prefer           *bool                                                               `path:"prefer" module:"openconfig-system"`
	ΛPrefer          []ygot.Annotation                                                   `path:"@prefer" ygotAnnotation:"true"`
	RootDelay        *uint32                                                             `path:"root-delay" module:"openconfig-system"`
	ΛRootDelay       []ygot.Annotation                                                   `path:"@root-delay" ygotAnnotation:"true"`
	RootDispersion   *uint64                                                             `path:"root-dispersion" module:"openconfig-system"`
	ΛRootDispersion  []ygot.Annotation                                                   `path:"@root-dispersion" ygotAnnotation:"true"`
	Stratum          *uint8                                                              `path:"stratum" module:"openconfig-system"`
	ΛStratum         []ygot.Annotation                                                   `path:"@stratum" ygotAnnotation:"true"`
	Version          *uint8                                                              `path:"version" module:"openconfig-system"`
	ΛVersion         []ygot.Annotation                                                   `path:"@version" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_Servers_Server_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_Servers_Server_State) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the OpenconfigSystem_System_Ntp_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Address is set, it can safely use t.GetAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Address == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAssociationType retrieves the value of the leaf AssociationType from the OpenconfigSystem_System_Ntp_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AssociationType is set, it can safely use t.GetAssociationType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AssociationType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) GetAssociationType() E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType {
	if t == nil || t.AssociationType == 0 {
		return OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_SERVER
	}
	return t.AssociationType
}

// GetIburst retrieves the value of the leaf Iburst from the OpenconfigSystem_System_Ntp_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Iburst is set, it can safely use t.GetIburst()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Iburst == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) GetIburst() bool {
	if t == nil || t.Iburst == nil {
		return false
	}
	return *t.Iburst
}

// GetOffset retrieves the value of the leaf Offset from the OpenconfigSystem_System_Ntp_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Offset is set, it can safely use t.GetOffset()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Offset == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) GetOffset() uint64 {
	if t == nil || t.Offset == nil {
		return 0
	}
	return *t.Offset
}

// GetPollInterval retrieves the value of the leaf PollInterval from the OpenconfigSystem_System_Ntp_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PollInterval is set, it can safely use t.GetPollInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PollInterval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) GetPollInterval() uint32 {
	if t == nil || t.PollInterval == nil {
		return 0
	}
	return *t.PollInterval
}

// GetPort retrieves the value of the leaf Port from the OpenconfigSystem_System_Ntp_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Port is set, it can safely use t.GetPort()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Port == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 123
	}
	return *t.Port
}

// GetPrefer retrieves the value of the leaf Prefer from the OpenconfigSystem_System_Ntp_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Prefer is set, it can safely use t.GetPrefer()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Prefer == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) GetPrefer() bool {
	if t == nil || t.Prefer == nil {
		return false
	}
	return *t.Prefer
}

// GetRootDelay retrieves the value of the leaf RootDelay from the OpenconfigSystem_System_Ntp_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RootDelay is set, it can safely use t.GetRootDelay()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RootDelay == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) GetRootDelay() uint32 {
	if t == nil || t.RootDelay == nil {
		return 0
	}
	return *t.RootDelay
}

// GetRootDispersion retrieves the value of the leaf RootDispersion from the OpenconfigSystem_System_Ntp_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RootDispersion is set, it can safely use t.GetRootDispersion()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RootDispersion == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) GetRootDispersion() uint64 {
	if t == nil || t.RootDispersion == nil {
		return 0
	}
	return *t.RootDispersion
}

// GetStratum retrieves the value of the leaf Stratum from the OpenconfigSystem_System_Ntp_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Stratum is set, it can safely use t.GetStratum()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Stratum == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) GetStratum() uint8 {
	if t == nil || t.Stratum == nil {
		return 0
	}
	return *t.Stratum
}

// GetVersion retrieves the value of the leaf Version from the OpenconfigSystem_System_Ntp_Servers_Server_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Version is set, it can safely use t.GetVersion()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Version == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) GetVersion() uint8 {
	if t == nil || t.Version == nil {
		return 4
	}
	return *t.Version
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_Servers_Server_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_Servers_Server_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Ntp_State represents the /openconfig-system/system/ntp/state YANG schema element.
type OpenconfigSystem_System_Ntp_State struct {
	ΛMetadata         []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	AuthMismatch      *uint64           `path:"auth-mismatch" module:"openconfig-system"`
	ΛAuthMismatch     []ygot.Annotation `path:"@auth-mismatch" ygotAnnotation:"true"`
	EnableNtpAuth     *bool             `path:"enable-ntp-auth" module:"openconfig-system"`
	ΛEnableNtpAuth    []ygot.Annotation `path:"@enable-ntp-auth" ygotAnnotation:"true"`
	Enabled           *bool             `path:"enabled" module:"openconfig-system"`
	ΛEnabled          []ygot.Annotation `path:"@enabled" ygotAnnotation:"true"`
	NtpSourceAddress  *string           `path:"ntp-source-address" module:"openconfig-system"`
	ΛNtpSourceAddress []ygot.Annotation `path:"@ntp-source-address" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Ntp_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Ntp_State) IsYANGGoStruct() {}

// GetAuthMismatch retrieves the value of the leaf AuthMismatch from the OpenconfigSystem_System_Ntp_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AuthMismatch is set, it can safely use t.GetAuthMismatch()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AuthMismatch == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_State) GetAuthMismatch() uint64 {
	if t == nil || t.AuthMismatch == nil {
		return 0
	}
	return *t.AuthMismatch
}

// GetEnableNtpAuth retrieves the value of the leaf EnableNtpAuth from the OpenconfigSystem_System_Ntp_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if EnableNtpAuth is set, it can safely use t.GetEnableNtpAuth()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.EnableNtpAuth == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_State) GetEnableNtpAuth() bool {
	if t == nil || t.EnableNtpAuth == nil {
		return false
	}
	return *t.EnableNtpAuth
}

// GetEnabled retrieves the value of the leaf Enabled from the OpenconfigSystem_System_Ntp_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enabled is set, it can safely use t.GetEnabled()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enabled == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_State) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetNtpSourceAddress retrieves the value of the leaf NtpSourceAddress from the OpenconfigSystem_System_Ntp_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if NtpSourceAddress is set, it can safely use t.GetNtpSourceAddress()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.NtpSourceAddress == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Ntp_State) GetNtpSourceAddress() string {
	if t == nil || t.NtpSourceAddress == nil {
		return ""
	}
	return *t.NtpSourceAddress
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Ntp_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Ntp_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Ntp_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Processes represents the /openconfig-system/system/processes YANG schema element.
type OpenconfigSystem_System_Processes struct {
	ΛMetadata []ygot.Annotation                                     `path:"@" ygotAnnotation:"true"`
	Process   map[uint64]*OpenconfigSystem_System_Processes_Process `path:"process" module:"openconfig-system"`
	ΛProcess  []ygot.Annotation                                     `path:"@process" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Processes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Processes) IsYANGGoStruct() {}

// NewProcess creates a new entry in the Process list of the
// OpenconfigSystem_System_Processes struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigSystem_System_Processes) NewProcess(Pid uint64) (*OpenconfigSystem_System_Processes_Process, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Process == nil {
		t.Process = make(map[uint64]*OpenconfigSystem_System_Processes_Process)
	}

	key := Pid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Process[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Process", key)
	}

	t.Process[key] = &OpenconfigSystem_System_Processes_Process{
		Pid: &Pid,
	}

	return t.Process[key], nil
}

// RenameProcess renames an entry in the list Process within
// the OpenconfigSystem_System_Processes struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigSystem_System_Processes) RenameProcess(oldK, newK uint64) error {
	if _, ok := t.Process[newK]; ok {
		return fmt.Errorf("key %v already exists in Process", newK)
	}

	e, ok := t.Process[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Process", oldK)
	}
	e.Pid = &newK

	t.Process[newK] = e
	delete(t.Process, oldK)
	return nil
}

// GetOrCreateProcess retrieves the value with the specified keys from
// the receiver OpenconfigSystem_System_Processes. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigSystem_System_Processes) GetOrCreateProcess(Pid uint64) *OpenconfigSystem_System_Processes_Process {

	key := Pid

	if v, ok := t.Process[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProcess(Pid)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProcess got unexpected error: %v", err))
	}
	return v
}

// GetProcess retrieves the value with the specified key from
// the Process map field of OpenconfigSystem_System_Processes. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigSystem_System_Processes) GetProcess(Pid uint64) *OpenconfigSystem_System_Processes_Process {

	if t == nil {
		return nil
	}

	key := Pid

	if lm, ok := t.Process[key]; ok {
		return lm
	}
	return nil
}

// AppendProcess appends the supplied OpenconfigSystem_System_Processes_Process struct to the
// list Process of OpenconfigSystem_System_Processes. If the key value(s) specified in
// the supplied OpenconfigSystem_System_Processes_Process already exist in the list, an error is
// returned.
func (t *OpenconfigSystem_System_Processes) AppendProcess(v *OpenconfigSystem_System_Processes_Process) error {
	key := *v.Pid

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Process == nil {
		t.Process = make(map[uint64]*OpenconfigSystem_System_Processes_Process)
	}

	if _, ok := t.Process[key]; ok {
		return fmt.Errorf("duplicate key for list Process %v", key)
	}

	t.Process[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Processes) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Processes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Processes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Processes_Process represents the /openconfig-system/system/processes/process YANG schema element.
type OpenconfigSystem_System_Processes_Process struct {
	ΛMetadata []ygot.Annotation                                `path:"@" ygotAnnotation:"true"`
	Pid       *uint64                                          `path:"pid" module:"openconfig-system"`
	ΛPid      []ygot.Annotation                                `path:"@pid" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_Processes_Process_State `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                                `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Processes_Process implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Processes_Process) IsYANGGoStruct() {}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_Processes_Process) GetOrCreateState() *OpenconfigSystem_System_Processes_Process_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_Processes_Process_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_Processes_Process. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_Processes_Process) GetState() *OpenconfigSystem_System_Processes_Process_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetPid retrieves the value of the leaf Pid from the OpenconfigSystem_System_Processes_Process
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Pid is set, it can safely use t.GetPid()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Pid == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Processes_Process) GetPid() uint64 {
	if t == nil || t.Pid == nil {
		return 0
	}
	return *t.Pid
}

// ΛListKeyMap returns the keys of the OpenconfigSystem_System_Processes_Process struct, which is a YANG list entry.
func (t *OpenconfigSystem_System_Processes_Process) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Pid == nil {
		return nil, fmt.Errorf("nil value for key Pid")
	}

	return map[string]interface{}{
		"pid": *t.Pid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Processes_Process) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Processes_Process"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Processes_Process) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_Processes_Process_State represents the /openconfig-system/system/processes/process/state YANG schema element.
type OpenconfigSystem_System_Processes_Process_State struct {
	ΛMetadata          []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Args               []string          `path:"args" module:"openconfig-system"`
	ΛArgs              []ygot.Annotation `path:"@args" ygotAnnotation:"true"`
	CpuUsageSystem     *uint64           `path:"cpu-usage-system" module:"openconfig-system"`
	ΛCpuUsageSystem    []ygot.Annotation `path:"@cpu-usage-system" ygotAnnotation:"true"`
	CpuUsageUser       *uint64           `path:"cpu-usage-user" module:"openconfig-system"`
	ΛCpuUsageUser      []ygot.Annotation `path:"@cpu-usage-user" ygotAnnotation:"true"`
	CpuUtilization     *uint8            `path:"cpu-utilization" module:"openconfig-system"`
	ΛCpuUtilization    []ygot.Annotation `path:"@cpu-utilization" ygotAnnotation:"true"`
	MemoryUsage        *uint64           `path:"memory-usage" module:"openconfig-system"`
	ΛMemoryUsage       []ygot.Annotation `path:"@memory-usage" ygotAnnotation:"true"`
	MemoryUtilization  *uint8            `path:"memory-utilization" module:"openconfig-system"`
	ΛMemoryUtilization []ygot.Annotation `path:"@memory-utilization" ygotAnnotation:"true"`
	Name               *string           `path:"name" module:"openconfig-system"`
	ΛName              []ygot.Annotation `path:"@name" ygotAnnotation:"true"`
	Pid                *uint64           `path:"pid" module:"openconfig-system"`
	ΛPid               []ygot.Annotation `path:"@pid" ygotAnnotation:"true"`
	StartTime          *uint64           `path:"start-time" module:"openconfig-system"`
	ΛStartTime         []ygot.Annotation `path:"@start-time" ygotAnnotation:"true"`
	Uptime             *uint64           `path:"uptime" module:"openconfig-system"`
	ΛUptime            []ygot.Annotation `path:"@uptime" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_Processes_Process_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_Processes_Process_State) IsYANGGoStruct() {}

// GetArgs retrieves the value of the leaf Args from the OpenconfigSystem_System_Processes_Process_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Args is set, it can safely use t.GetArgs()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Args == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Processes_Process_State) GetArgs() []string {
	if t == nil || t.Args == nil {
		return nil
	}
	return t.Args
}

// GetCpuUsageSystem retrieves the value of the leaf CpuUsageSystem from the OpenconfigSystem_System_Processes_Process_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CpuUsageSystem is set, it can safely use t.GetCpuUsageSystem()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CpuUsageSystem == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Processes_Process_State) GetCpuUsageSystem() uint64 {
	if t == nil || t.CpuUsageSystem == nil {
		return 0
	}
	return *t.CpuUsageSystem
}

// GetCpuUsageUser retrieves the value of the leaf CpuUsageUser from the OpenconfigSystem_System_Processes_Process_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CpuUsageUser is set, it can safely use t.GetCpuUsageUser()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CpuUsageUser == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Processes_Process_State) GetCpuUsageUser() uint64 {
	if t == nil || t.CpuUsageUser == nil {
		return 0
	}
	return *t.CpuUsageUser
}

// GetCpuUtilization retrieves the value of the leaf CpuUtilization from the OpenconfigSystem_System_Processes_Process_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CpuUtilization is set, it can safely use t.GetCpuUtilization()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CpuUtilization == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Processes_Process_State) GetCpuUtilization() uint8 {
	if t == nil || t.CpuUtilization == nil {
		return 0
	}
	return *t.CpuUtilization
}

// GetMemoryUsage retrieves the value of the leaf MemoryUsage from the OpenconfigSystem_System_Processes_Process_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MemoryUsage is set, it can safely use t.GetMemoryUsage()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MemoryUsage == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Processes_Process_State) GetMemoryUsage() uint64 {
	if t == nil || t.MemoryUsage == nil {
		return 0
	}
	return *t.MemoryUsage
}

// GetMemoryUtilization retrieves the value of the leaf MemoryUtilization from the OpenconfigSystem_System_Processes_Process_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MemoryUtilization is set, it can safely use t.GetMemoryUtilization()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MemoryUtilization == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Processes_Process_State) GetMemoryUtilization() uint8 {
	if t == nil || t.MemoryUtilization == nil {
		return 0
	}
	return *t.MemoryUtilization
}

// GetName retrieves the value of the leaf Name from the OpenconfigSystem_System_Processes_Process_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Name is set, it can safely use t.GetName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Name == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Processes_Process_State) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPid retrieves the value of the leaf Pid from the OpenconfigSystem_System_Processes_Process_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Pid is set, it can safely use t.GetPid()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Pid == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Processes_Process_State) GetPid() uint64 {
	if t == nil || t.Pid == nil {
		return 0
	}
	return *t.Pid
}

// GetStartTime retrieves the value of the leaf StartTime from the OpenconfigSystem_System_Processes_Process_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if StartTime is set, it can safely use t.GetStartTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.StartTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Processes_Process_State) GetStartTime() uint64 {
	if t == nil || t.StartTime == nil {
		return 0
	}
	return *t.StartTime
}

// GetUptime retrieves the value of the leaf Uptime from the OpenconfigSystem_System_Processes_Process_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Uptime is set, it can safely use t.GetUptime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Uptime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_Processes_Process_State) GetUptime() uint64 {
	if t == nil || t.Uptime == nil {
		return 0
	}
	return *t.Uptime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_Processes_Process_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_Processes_Process_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_Processes_Process_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_SshServer represents the /openconfig-system/system/ssh-server YANG schema element.
type OpenconfigSystem_System_SshServer struct {
	ΛMetadata []ygot.Annotation                         `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_SshServer_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                         `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_SshServer_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                         `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_SshServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_SshServer) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_SshServer) GetOrCreateConfig() *OpenconfigSystem_System_SshServer_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_SshServer_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_SshServer) GetOrCreateState() *OpenconfigSystem_System_SshServer_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_SshServer_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_SshServer. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_SshServer) GetConfig() *OpenconfigSystem_System_SshServer_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_SshServer. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_SshServer) GetState() *OpenconfigSystem_System_SshServer_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_SshServer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_SshServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_SshServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_SshServer_Config represents the /openconfig-system/system/ssh-server/config YANG schema element.
type OpenconfigSystem_System_SshServer_Config struct {
	ΛMetadata        []ygot.Annotation                                          `path:"@" ygotAnnotation:"true"`
	Enable           *bool                                                      `path:"enable" module:"openconfig-system"`
	ΛEnable          []ygot.Annotation                                          `path:"@enable" ygotAnnotation:"true"`
	ProtocolVersion  E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion `path:"protocol-version" module:"openconfig-system"`
	ΛProtocolVersion []ygot.Annotation                                          `path:"@protocol-version" ygotAnnotation:"true"`
	RateLimit        *uint16                                                    `path:"rate-limit" module:"openconfig-system"`
	ΛRateLimit       []ygot.Annotation                                          `path:"@rate-limit" ygotAnnotation:"true"`
	SessionLimit     *uint16                                                    `path:"session-limit" module:"openconfig-system"`
	ΛSessionLimit    []ygot.Annotation                                          `path:"@session-limit" ygotAnnotation:"true"`
	Timeout          *uint16                                                    `path:"timeout" module:"openconfig-system"`
	ΛTimeout         []ygot.Annotation                                          `path:"@timeout" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_SshServer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_SshServer_Config) IsYANGGoStruct() {}

// GetEnable retrieves the value of the leaf Enable from the OpenconfigSystem_System_SshServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enable is set, it can safely use t.GetEnable()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enable == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_SshServer_Config) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return true
	}
	return *t.Enable
}

// GetProtocolVersion retrieves the value of the leaf ProtocolVersion from the OpenconfigSystem_System_SshServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ProtocolVersion is set, it can safely use t.GetProtocolVersion()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ProtocolVersion == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_SshServer_Config) GetProtocolVersion() E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion {
	if t == nil || t.ProtocolVersion == 0 {
		return OpenconfigSystem_System_SshServer_Config_ProtocolVersion_V2
	}
	return t.ProtocolVersion
}

// GetRateLimit retrieves the value of the leaf RateLimit from the OpenconfigSystem_System_SshServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RateLimit is set, it can safely use t.GetRateLimit()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RateLimit == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_SshServer_Config) GetRateLimit() uint16 {
	if t == nil || t.RateLimit == nil {
		return 0
	}
	return *t.RateLimit
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the OpenconfigSystem_System_SshServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SessionLimit is set, it can safely use t.GetSessionLimit()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SessionLimit == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_SshServer_Config) GetSessionLimit() uint16 {
	if t == nil || t.SessionLimit == nil {
		return 0
	}
	return *t.SessionLimit
}

// GetTimeout retrieves the value of the leaf Timeout from the OpenconfigSystem_System_SshServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Timeout is set, it can safely use t.GetTimeout()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Timeout == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_SshServer_Config) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_SshServer_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_SshServer_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_SshServer_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_SshServer_State represents the /openconfig-system/system/ssh-server/state YANG schema element.
type OpenconfigSystem_System_SshServer_State struct {
	ΛMetadata        []ygot.Annotation                                          `path:"@" ygotAnnotation:"true"`
	Enable           *bool                                                      `path:"enable" module:"openconfig-system"`
	ΛEnable          []ygot.Annotation                                          `path:"@enable" ygotAnnotation:"true"`
	ProtocolVersion  E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion `path:"protocol-version" module:"openconfig-system"`
	ΛProtocolVersion []ygot.Annotation                                          `path:"@protocol-version" ygotAnnotation:"true"`
	RateLimit        *uint16                                                    `path:"rate-limit" module:"openconfig-system"`
	ΛRateLimit       []ygot.Annotation                                          `path:"@rate-limit" ygotAnnotation:"true"`
	SessionLimit     *uint16                                                    `path:"session-limit" module:"openconfig-system"`
	ΛSessionLimit    []ygot.Annotation                                          `path:"@session-limit" ygotAnnotation:"true"`
	Timeout          *uint16                                                    `path:"timeout" module:"openconfig-system"`
	ΛTimeout         []ygot.Annotation                                          `path:"@timeout" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_SshServer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_SshServer_State) IsYANGGoStruct() {}

// GetEnable retrieves the value of the leaf Enable from the OpenconfigSystem_System_SshServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enable is set, it can safely use t.GetEnable()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enable == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_SshServer_State) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return true
	}
	return *t.Enable
}

// GetProtocolVersion retrieves the value of the leaf ProtocolVersion from the OpenconfigSystem_System_SshServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ProtocolVersion is set, it can safely use t.GetProtocolVersion()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ProtocolVersion == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_SshServer_State) GetProtocolVersion() E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion {
	if t == nil || t.ProtocolVersion == 0 {
		return OpenconfigSystem_System_SshServer_Config_ProtocolVersion_V2
	}
	return t.ProtocolVersion
}

// GetRateLimit retrieves the value of the leaf RateLimit from the OpenconfigSystem_System_SshServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RateLimit is set, it can safely use t.GetRateLimit()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RateLimit == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_SshServer_State) GetRateLimit() uint16 {
	if t == nil || t.RateLimit == nil {
		return 0
	}
	return *t.RateLimit
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the OpenconfigSystem_System_SshServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SessionLimit is set, it can safely use t.GetSessionLimit()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SessionLimit == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_SshServer_State) GetSessionLimit() uint16 {
	if t == nil || t.SessionLimit == nil {
		return 0
	}
	return *t.SessionLimit
}

// GetTimeout retrieves the value of the leaf Timeout from the OpenconfigSystem_System_SshServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Timeout is set, it can safely use t.GetTimeout()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Timeout == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_SshServer_State) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_SshServer_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_SshServer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_SshServer_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_State represents the /openconfig-system/system/state YANG schema element.
type OpenconfigSystem_System_State struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	BootTime         *uint64           `path:"boot-time" module:"openconfig-system"`
	ΛBootTime        []ygot.Annotation `path:"@boot-time" ygotAnnotation:"true"`
	CurrentDatetime  *string           `path:"current-datetime" module:"openconfig-system"`
	ΛCurrentDatetime []ygot.Annotation `path:"@current-datetime" ygotAnnotation:"true"`
	DomainName       *string           `path:"domain-name" module:"openconfig-system"`
	ΛDomainName      []ygot.Annotation `path:"@domain-name" ygotAnnotation:"true"`
	Hostname         *string           `path:"hostname" module:"openconfig-system"`
	ΛHostname        []ygot.Annotation `path:"@hostname" ygotAnnotation:"true"`
	LoginBanner      *string           `path:"login-banner" module:"openconfig-system"`
	ΛLoginBanner     []ygot.Annotation `path:"@login-banner" ygotAnnotation:"true"`
	MotdBanner       *string           `path:"motd-banner" module:"openconfig-system"`
	ΛMotdBanner      []ygot.Annotation `path:"@motd-banner" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_State) IsYANGGoStruct() {}

// GetBootTime retrieves the value of the leaf BootTime from the OpenconfigSystem_System_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if BootTime is set, it can safely use t.GetBootTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.BootTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_State) GetBootTime() uint64 {
	if t == nil || t.BootTime == nil {
		return 0
	}
	return *t.BootTime
}

// GetCurrentDatetime retrieves the value of the leaf CurrentDatetime from the OpenconfigSystem_System_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CurrentDatetime is set, it can safely use t.GetCurrentDatetime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CurrentDatetime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_State) GetCurrentDatetime() string {
	if t == nil || t.CurrentDatetime == nil {
		return ""
	}
	return *t.CurrentDatetime
}

// GetDomainName retrieves the value of the leaf DomainName from the OpenconfigSystem_System_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if DomainName is set, it can safely use t.GetDomainName()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.DomainName == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_State) GetDomainName() string {
	if t == nil || t.DomainName == nil {
		return ""
	}
	return *t.DomainName
}

// GetHostname retrieves the value of the leaf Hostname from the OpenconfigSystem_System_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Hostname is set, it can safely use t.GetHostname()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Hostname == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_State) GetHostname() string {
	if t == nil || t.Hostname == nil {
		return ""
	}
	return *t.Hostname
}

// GetLoginBanner retrieves the value of the leaf LoginBanner from the OpenconfigSystem_System_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LoginBanner is set, it can safely use t.GetLoginBanner()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LoginBanner == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_State) GetLoginBanner() string {
	if t == nil || t.LoginBanner == nil {
		return ""
	}
	return *t.LoginBanner
}

// GetMotdBanner retrieves the value of the leaf MotdBanner from the OpenconfigSystem_System_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MotdBanner is set, it can safely use t.GetMotdBanner()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MotdBanner == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_State) GetMotdBanner() string {
	if t == nil || t.MotdBanner == nil {
		return ""
	}
	return *t.MotdBanner
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_State) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// OpenconfigSystem_System_TelnetServer represents the /openconfig-system/system/telnet-server YANG schema element.
type OpenconfigSystem_System_TelnetServer struct {
	ΛMetadata []ygot.Annotation                            `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigSystem_System_TelnetServer_Config `path:"config" module:"openconfig-system"`
	ΛConfig   []ygot.Annotation                            `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigSystem_System_TelnetServer_State  `path:"state" module:"openconfig-system"`
	ΛState    []ygot.Annotation                            `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_TelnetServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_TelnetServer) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_TelnetServer) GetOrCreateConfig() *OpenconfigSystem_System_TelnetServer_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigSystem_System_TelnetServer_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigSystem_System_TelnetServer) GetOrCreateState() *OpenconfigSystem_System_TelnetServer_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigSystem_System_TelnetServer_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigSystem_System_TelnetServer. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_TelnetServer) GetConfig() *OpenconfigSystem_System_TelnetServer_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigSystem_System_TelnetServer. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigSystem_System_TelnetServer) GetState() *OpenconfigSystem_System_TelnetServer_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_TelnetServer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_TelnetServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_TelnetServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_TelnetServer_Config represents the /openconfig-system/system/telnet-server/config YANG schema element.
type OpenconfigSystem_System_TelnetServer_Config struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enable        *bool             `path:"enable" module:"openconfig-system"`
	ΛEnable       []ygot.Annotation `path:"@enable" ygotAnnotation:"true"`
	RateLimit     *uint16           `path:"rate-limit" module:"openconfig-system"`
	ΛRateLimit    []ygot.Annotation `path:"@rate-limit" ygotAnnotation:"true"`
	SessionLimit  *uint16           `path:"session-limit" module:"openconfig-system"`
	ΛSessionLimit []ygot.Annotation `path:"@session-limit" ygotAnnotation:"true"`
	Timeout       *uint16           `path:"timeout" module:"openconfig-system"`
	ΛTimeout      []ygot.Annotation `path:"@timeout" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_TelnetServer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_TelnetServer_Config) IsYANGGoStruct() {}

// GetEnable retrieves the value of the leaf Enable from the OpenconfigSystem_System_TelnetServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enable is set, it can safely use t.GetEnable()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enable == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_TelnetServer_Config) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// GetRateLimit retrieves the value of the leaf RateLimit from the OpenconfigSystem_System_TelnetServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RateLimit is set, it can safely use t.GetRateLimit()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RateLimit == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_TelnetServer_Config) GetRateLimit() uint16 {
	if t == nil || t.RateLimit == nil {
		return 0
	}
	return *t.RateLimit
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the OpenconfigSystem_System_TelnetServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SessionLimit is set, it can safely use t.GetSessionLimit()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SessionLimit == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_TelnetServer_Config) GetSessionLimit() uint16 {
	if t == nil || t.SessionLimit == nil {
		return 0
	}
	return *t.SessionLimit
}

// GetTimeout retrieves the value of the leaf Timeout from the OpenconfigSystem_System_TelnetServer_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Timeout is set, it can safely use t.GetTimeout()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Timeout == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_TelnetServer_Config) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_TelnetServer_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_TelnetServer_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_TelnetServer_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigSystem_System_TelnetServer_State represents the /openconfig-system/system/telnet-server/state YANG schema element.
type OpenconfigSystem_System_TelnetServer_State struct {
	ΛMetadata     []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Enable        *bool             `path:"enable" module:"openconfig-system"`
	ΛEnable       []ygot.Annotation `path:"@enable" ygotAnnotation:"true"`
	RateLimit     *uint16           `path:"rate-limit" module:"openconfig-system"`
	ΛRateLimit    []ygot.Annotation `path:"@rate-limit" ygotAnnotation:"true"`
	SessionLimit  *uint16           `path:"session-limit" module:"openconfig-system"`
	ΛSessionLimit []ygot.Annotation `path:"@session-limit" ygotAnnotation:"true"`
	Timeout       *uint16           `path:"timeout" module:"openconfig-system"`
	ΛTimeout      []ygot.Annotation `path:"@timeout" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigSystem_System_TelnetServer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSystem_System_TelnetServer_State) IsYANGGoStruct() {}

// GetEnable retrieves the value of the leaf Enable from the OpenconfigSystem_System_TelnetServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Enable is set, it can safely use t.GetEnable()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Enable == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_TelnetServer_State) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// GetRateLimit retrieves the value of the leaf RateLimit from the OpenconfigSystem_System_TelnetServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RateLimit is set, it can safely use t.GetRateLimit()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RateLimit == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_TelnetServer_State) GetRateLimit() uint16 {
	if t == nil || t.RateLimit == nil {
		return 0
	}
	return *t.RateLimit
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the OpenconfigSystem_System_TelnetServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SessionLimit is set, it can safely use t.GetSessionLimit()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SessionLimit == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_TelnetServer_State) GetSessionLimit() uint16 {
	if t == nil || t.SessionLimit == nil {
		return 0
	}
	return *t.SessionLimit
}

// GetTimeout retrieves the value of the leaf Timeout from the OpenconfigSystem_System_TelnetServer_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Timeout is set, it can safely use t.GetTimeout()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Timeout == nil'
// before retrieving the leaf's value.
func (t *OpenconfigSystem_System_TelnetServer_State) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigSystem_System_TelnetServer_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigSystem_System_TelnetServer_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigSystem_System_TelnetServer_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice represents the /openconfig-terminal-device/terminal-device YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice struct {
	ΛMetadata         []ygot.Annotation                                         `path:"@" ygotAnnotation:"true"`
	Config            *OpenconfigTerminalDevice_TerminalDevice_Config           `path:"config" module:"openconfig-terminal-device"`
	ΛConfig           []ygot.Annotation                                         `path:"@config" ygotAnnotation:"true"`
	LogicalChannels   *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels  `path:"logical-channels" module:"openconfig-terminal-device"`
	ΛLogicalChannels  []ygot.Annotation                                         `path:"@logical-channels" ygotAnnotation:"true"`
	OperationalModes  *OpenconfigTerminalDevice_TerminalDevice_OperationalModes `path:"operational-modes" module:"openconfig-terminal-device"`
	ΛOperationalModes []ygot.Annotation                                         `path:"@operational-modes" ygotAnnotation:"true"`
	State             *OpenconfigTerminalDevice_TerminalDevice_State            `path:"state" module:"openconfig-terminal-device"`
	ΛState            []ygot.Annotation                                         `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigTerminalDevice_TerminalDevice) GetOrCreateConfig() *OpenconfigTerminalDevice_TerminalDevice_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigTerminalDevice_TerminalDevice_Config{}
	return t.Config
}

// GetOrCreateLogicalChannels retrieves the value of the LogicalChannels field
// or returns the existing field if it already exists.
func (t *OpenconfigTerminalDevice_TerminalDevice) GetOrCreateLogicalChannels() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels {
	if t.LogicalChannels != nil {
		return t.LogicalChannels
	}
	t.LogicalChannels = &OpenconfigTerminalDevice_TerminalDevice_LogicalChannels{}
	return t.LogicalChannels
}

// GetOrCreateOperationalModes retrieves the value of the OperationalModes field
// or returns the existing field if it already exists.
func (t *OpenconfigTerminalDevice_TerminalDevice) GetOrCreateOperationalModes() *OpenconfigTerminalDevice_TerminalDevice_OperationalModes {
	if t.OperationalModes != nil {
		return t.OperationalModes
	}
	t.OperationalModes = &OpenconfigTerminalDevice_TerminalDevice_OperationalModes{}
	return t.OperationalModes
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigTerminalDevice_TerminalDevice) GetOrCreateState() *OpenconfigTerminalDevice_TerminalDevice_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigTerminalDevice_TerminalDevice_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigTerminalDevice_TerminalDevice. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice) GetConfig() *OpenconfigTerminalDevice_TerminalDevice_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetLogicalChannels returns the value of the LogicalChannels struct pointer
// from OpenconfigTerminalDevice_TerminalDevice. If the receiver or the field LogicalChannels is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice) GetLogicalChannels() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels {
	if t != nil && t.LogicalChannels != nil {
		return t.LogicalChannels
	}
	return nil
}

// GetOperationalModes returns the value of the OperationalModes struct pointer
// from OpenconfigTerminalDevice_TerminalDevice. If the receiver or the field OperationalModes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice) GetOperationalModes() *OpenconfigTerminalDevice_TerminalDevice_OperationalModes {
	if t != nil && t.OperationalModes != nil {
		return t.OperationalModes
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigTerminalDevice_TerminalDevice. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice) GetState() *OpenconfigTerminalDevice_TerminalDevice_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_Config represents the /openconfig-terminal-device/terminal-device/config YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels represents the /openconfig-terminal-device/terminal-device/logical-channels YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_LogicalChannels struct {
	ΛMetadata []ygot.Annotation                                                           `path:"@" ygotAnnotation:"true"`
	Channel   map[uint32]*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel `path:"channel" module:"openconfig-terminal-device"`
	ΛChannel  []ygot.Annotation                                                           `path:"@channel" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_LogicalChannels implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels) IsYANGGoStruct() {}

// NewChannel creates a new entry in the Channel list of the
// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels) NewChannel(Index uint32) (*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Channel == nil {
		t.Channel = make(map[uint32]*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Channel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Channel", key)
	}

	t.Channel[key] = &OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel{
		Index: &Index,
	}

	return t.Channel[key], nil
}

// RenameChannel renames an entry in the list Channel within
// the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels) RenameChannel(oldK, newK uint32) error {
	if _, ok := t.Channel[newK]; ok {
		return fmt.Errorf("key %v already exists in Channel", newK)
	}

	e, ok := t.Channel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Channel", oldK)
	}
	e.Index = &newK

	t.Channel[newK] = e
	delete(t.Channel, oldK)
	return nil
}

// GetOrCreateChannel retrieves the value with the specified keys from
// the receiver OpenconfigTerminalDevice_TerminalDevice_LogicalChannels. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels) GetOrCreateChannel(Index uint32) *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel {

	key := Index

	if v, ok := t.Channel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewChannel(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateChannel got unexpected error: %v", err))
	}
	return v
}

// GetChannel retrieves the value with the specified key from
// the Channel map field of OpenconfigTerminalDevice_TerminalDevice_LogicalChannels. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels) GetChannel(Index uint32) *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Channel[key]; ok {
		return lm
	}
	return nil
}

// AppendChannel appends the supplied OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel struct to the
// list Channel of OpenconfigTerminalDevice_TerminalDevice_LogicalChannels. If the key value(s) specified in
// the supplied OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel already exist in the list, an error is
// returned.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels) AppendChannel(v *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel) error {
	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Channel == nil {
		t.Channel = make(map[uint32]*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel)
	}

	if _, ok := t.Channel[key]; ok {
		return fmt.Errorf("duplicate key for list Channel %v", key)
	}

	t.Channel[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_LogicalChannels"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel represents the /openconfig-terminal-device/terminal-device/logical-channels/channel YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel struct {
	ΛMetadata                  []ygot.Annotation                                                                          `path:"@" ygotAnnotation:"true"`
	Config                     *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config                    `path:"config" module:"openconfig-terminal-device"`
	ΛConfig                    []ygot.Annotation                                                                          `path:"@config" ygotAnnotation:"true"`
	Ethernet                   *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet                  `path:"ethernet" module:"openconfig-terminal-device"`
	ΛEthernet                  []ygot.Annotation                                                                          `path:"@ethernet" ygotAnnotation:"true"`
	Index                      *uint32                                                                                    `path:"index" module:"openconfig-terminal-device"`
	ΛIndex                     []ygot.Annotation                                                                          `path:"@index" ygotAnnotation:"true"`
	Ingress                    *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress                   `path:"ingress" module:"openconfig-terminal-device"`
	ΛIngress                   []ygot.Annotation                                                                          `path:"@ingress" ygotAnnotation:"true"`
	LogicalChannelAssignments  *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments `path:"logical-channel-assignments" module:"openconfig-terminal-device"`
	ΛLogicalChannelAssignments []ygot.Annotation                                                                          `path:"@logical-channel-assignments" ygotAnnotation:"true"`
	Otn                        *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn                       `path:"otn" module:"openconfig-terminal-device"`
	ΛOtn                       []ygot.Annotation                                                                          `path:"@otn" ygotAnnotation:"true"`
	State                      *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State                     `path:"state" module:"openconfig-terminal-device"`
	ΛState                     []ygot.Annotation                                                                          `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel) GetOrCreateConfig() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config{}
	return t.Config
}

// GetOrCreateEthernet retrieves the value of the Ethernet field
// or returns the existing field if it already exists.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel) GetOrCreateEthernet() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet {
	if t.Ethernet != nil {
		return t.Ethernet
	}
	t.Ethernet = &OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet{}
	return t.Ethernet
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel) GetOrCreateIngress() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress{}
	return t.Ingress
}

// GetOrCreateLogicalChannelAssignments retrieves the value of the LogicalChannelAssignments field
// or returns the existing field if it already exists.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel) GetOrCreateLogicalChannelAssignments() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments {
	if t.LogicalChannelAssignments != nil {
		return t.LogicalChannelAssignments
	}
	t.LogicalChannelAssignments = &OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments{}
	return t.LogicalChannelAssignments
}

// GetOrCreateOtn retrieves the value of the Otn field
// or returns the existing field if it already exists.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel) GetOrCreateOtn() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn {
	if t.Otn != nil {
		return t.Otn
	}
	t.Otn = &OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn{}
	return t.Otn
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel) GetOrCreateState() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel) GetConfig() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetEthernet returns the value of the Ethernet struct pointer
// from OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel. If the receiver or the field Ethernet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel) GetEthernet() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet {
	if t != nil && t.Ethernet != nil {
		return t.Ethernet
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel) GetIngress() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetLogicalChannelAssignments returns the value of the LogicalChannelAssignments struct pointer
// from OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel. If the receiver or the field LogicalChannelAssignments is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel) GetLogicalChannelAssignments() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments {
	if t != nil && t.LogicalChannelAssignments != nil {
		return t.LogicalChannelAssignments
	}
	return nil
}

// GetOtn returns the value of the Otn struct pointer
// from OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel. If the receiver or the field Otn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel) GetOtn() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn {
	if t != nil && t.Otn != nil {
		return t.Otn
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel) GetState() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetIndex retrieves the value of the leaf Index from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Index is set, it can safely use t.GetIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Index == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// ΛListKeyMap returns the keys of the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel struct, which is a YANG list entry.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/config YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config struct {
	ΛMetadata           []ygot.Annotation                                        `path:"@" ygotAnnotation:"true"`
	AdminState          E_OpenconfigTerminalDevice_AdminStateType                `path:"admin-state" module:"openconfig-terminal-device"`
	ΛAdminState         []ygot.Annotation                                        `path:"@admin-state" ygotAnnotation:"true"`
	Description         *string                                                  `path:"description" module:"openconfig-terminal-device"`
	ΛDescription        []ygot.Annotation                                        `path:"@description" ygotAnnotation:"true"`
	Index               *uint32                                                  `path:"index" module:"openconfig-terminal-device"`
	ΛIndex              []ygot.Annotation                                        `path:"@index" ygotAnnotation:"true"`
	LogicalChannelType  E_OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE `path:"logical-channel-type" module:"openconfig-terminal-device"`
	ΛLogicalChannelType []ygot.Annotation                                        `path:"@logical-channel-type" ygotAnnotation:"true"`
	LoopbackMode        E_OpenconfigTerminalDevice_LoopbackModeType              `path:"loopback-mode" module:"openconfig-terminal-device"`
	ΛLoopbackMode       []ygot.Annotation                                        `path:"@loopback-mode" ygotAnnotation:"true"`
	RateClass           E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE     `path:"rate-class" module:"openconfig-terminal-device"`
	ΛRateClass          []ygot.Annotation                                        `path:"@rate-class" ygotAnnotation:"true"`
	TestSignal          *bool                                                    `path:"test-signal" module:"openconfig-terminal-device"`
	ΛTestSignal         []ygot.Annotation                                        `path:"@test-signal" ygotAnnotation:"true"`
	TribProtocol        E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE       `path:"trib-protocol" module:"openconfig-terminal-device"`
	ΛTribProtocol       []ygot.Annotation                                        `path:"@trib-protocol" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdminState is set, it can safely use t.GetAdminState()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdminState == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config) GetAdminState() E_OpenconfigTerminalDevice_AdminStateType {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Description is set, it can safely use t.GetDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Description == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIndex retrieves the value of the leaf Index from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Index is set, it can safely use t.GetIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Index == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLogicalChannelType retrieves the value of the leaf LogicalChannelType from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LogicalChannelType is set, it can safely use t.GetLogicalChannelType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LogicalChannelType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config) GetLogicalChannelType() E_OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE {
	if t == nil || t.LogicalChannelType == 0 {
		return 0
	}
	return t.LogicalChannelType
}

// GetLoopbackMode retrieves the value of the leaf LoopbackMode from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LoopbackMode is set, it can safely use t.GetLoopbackMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LoopbackMode == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config) GetLoopbackMode() E_OpenconfigTerminalDevice_LoopbackModeType {
	if t == nil || t.LoopbackMode == 0 {
		return OpenconfigTerminalDevice_LoopbackModeType_NONE
	}
	return t.LoopbackMode
}

// GetRateClass retrieves the value of the leaf RateClass from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RateClass is set, it can safely use t.GetRateClass()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RateClass == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config) GetRateClass() E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE {
	if t == nil || t.RateClass == 0 {
		return 0
	}
	return t.RateClass
}

// GetTestSignal retrieves the value of the leaf TestSignal from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TestSignal is set, it can safely use t.GetTestSignal()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TestSignal == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config) GetTestSignal() bool {
	if t == nil || t.TestSignal == nil {
		return false
	}
	return *t.TestSignal
}

// GetTribProtocol retrieves the value of the leaf TribProtocol from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TribProtocol is set, it can safely use t.GetTribProtocol()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TribProtocol == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config) GetTribProtocol() E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE {
	if t == nil || t.TribProtocol == 0 {
		return 0
	}
	return t.TribProtocol
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet struct {
	ΛMetadata []ygot.Annotation                                                                `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_Config `path:"config" module:"openconfig-terminal-device"`
	ΛConfig   []ygot.Annotation                                                                `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State  `path:"state" module:"openconfig-terminal-device"`
	ΛState    []ygot.Annotation                                                                `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet) GetOrCreateConfig() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet) GetOrCreateState() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet) GetConfig() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet) GetState() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_Config represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/config YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_Config) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ethernet/state YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State struct {
	ΛMetadata                    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	In_8021QFrames               *uint64           `path:"in-8021q-frames" module:"openconfig-terminal-device"`
	ΛIn_8021QFrames              []ygot.Annotation `path:"@in-8021q-frames" ygotAnnotation:"true"`
	InBlockErrors                *uint64           `path:"in-block-errors" module:"openconfig-terminal-device"`
	ΛInBlockErrors               []ygot.Annotation `path:"@in-block-errors" ygotAnnotation:"true"`
	InCrcErrors                  *uint64           `path:"in-crc-errors" module:"openconfig-terminal-device"`
	ΛInCrcErrors                 []ygot.Annotation `path:"@in-crc-errors" ygotAnnotation:"true"`
	InFragmentFrames             *uint64           `path:"in-fragment-frames" module:"openconfig-terminal-device"`
	ΛInFragmentFrames            []ygot.Annotation `path:"@in-fragment-frames" ygotAnnotation:"true"`
	InJabberFrames               *uint64           `path:"in-jabber-frames" module:"openconfig-terminal-device"`
	ΛInJabberFrames              []ygot.Annotation `path:"@in-jabber-frames" ygotAnnotation:"true"`
	InMacControlFrames           *uint64           `path:"in-mac-control-frames" module:"openconfig-terminal-device"`
	ΛInMacControlFrames          []ygot.Annotation `path:"@in-mac-control-frames" ygotAnnotation:"true"`
	InMacPauseFrames             *uint64           `path:"in-mac-pause-frames" module:"openconfig-terminal-device"`
	ΛInMacPauseFrames            []ygot.Annotation `path:"@in-mac-pause-frames" ygotAnnotation:"true"`
	InOversizeFrames             *uint64           `path:"in-oversize-frames" module:"openconfig-terminal-device"`
	ΛInOversizeFrames            []ygot.Annotation `path:"@in-oversize-frames" ygotAnnotation:"true"`
	InPcsBipErrors               *uint64           `path:"in-pcs-bip-errors" module:"openconfig-terminal-device"`
	ΛInPcsBipErrors              []ygot.Annotation `path:"@in-pcs-bip-errors" ygotAnnotation:"true"`
	InPcsErroredSeconds          *uint64           `path:"in-pcs-errored-seconds" module:"openconfig-terminal-device"`
	ΛInPcsErroredSeconds         []ygot.Annotation `path:"@in-pcs-errored-seconds" ygotAnnotation:"true"`
	InPcsSeverelyErroredSeconds  *uint64           `path:"in-pcs-severely-errored-seconds" module:"openconfig-terminal-device"`
	ΛInPcsSeverelyErroredSeconds []ygot.Annotation `path:"@in-pcs-severely-errored-seconds" ygotAnnotation:"true"`
	InPcsUnavailableSeconds      *uint64           `path:"in-pcs-unavailable-seconds" module:"openconfig-terminal-device"`
	ΛInPcsUnavailableSeconds     []ygot.Annotation `path:"@in-pcs-unavailable-seconds" ygotAnnotation:"true"`
	InUndersizeFrames            *uint64           `path:"in-undersize-frames" module:"openconfig-terminal-device"`
	ΛInUndersizeFrames           []ygot.Annotation `path:"@in-undersize-frames" ygotAnnotation:"true"`
	Out_8021QFrames              *uint64           `path:"out-8021q-frames" module:"openconfig-terminal-device"`
	ΛOut_8021QFrames             []ygot.Annotation `path:"@out-8021q-frames" ygotAnnotation:"true"`
	OutBlockErrors               *uint64           `path:"out-block-errors" module:"openconfig-terminal-device"`
	ΛOutBlockErrors              []ygot.Annotation `path:"@out-block-errors" ygotAnnotation:"true"`
	OutCrcErrors                 *uint64           `path:"out-crc-errors" module:"openconfig-terminal-device"`
	ΛOutCrcErrors                []ygot.Annotation `path:"@out-crc-errors" ygotAnnotation:"true"`
	OutMacControlFrames          *uint64           `path:"out-mac-control-frames" module:"openconfig-terminal-device"`
	ΛOutMacControlFrames         []ygot.Annotation `path:"@out-mac-control-frames" ygotAnnotation:"true"`
	OutMacPauseFrames            *uint64           `path:"out-mac-pause-frames" module:"openconfig-terminal-device"`
	ΛOutMacPauseFrames           []ygot.Annotation `path:"@out-mac-pause-frames" ygotAnnotation:"true"`
	OutPcsBipErrors              *uint64           `path:"out-pcs-bip-errors" module:"openconfig-terminal-device"`
	ΛOutPcsBipErrors             []ygot.Annotation `path:"@out-pcs-bip-errors" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State) IsYANGGoStruct() {
}

// GetIn_8021QFrames retrieves the value of the leaf In_8021QFrames from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if In_8021QFrames is set, it can safely use t.GetIn_8021QFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.In_8021QFrames == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetIn_8021QFrames() uint64 {
	if t == nil || t.In_8021QFrames == nil {
		return 0
	}
	return *t.In_8021QFrames
}

// GetInBlockErrors retrieves the value of the leaf InBlockErrors from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InBlockErrors is set, it can safely use t.GetInBlockErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InBlockErrors == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetInBlockErrors() uint64 {
	if t == nil || t.InBlockErrors == nil {
		return 0
	}
	return *t.InBlockErrors
}

// GetInCrcErrors retrieves the value of the leaf InCrcErrors from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InCrcErrors is set, it can safely use t.GetInCrcErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InCrcErrors == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetInCrcErrors() uint64 {
	if t == nil || t.InCrcErrors == nil {
		return 0
	}
	return *t.InCrcErrors
}

// GetInFragmentFrames retrieves the value of the leaf InFragmentFrames from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InFragmentFrames is set, it can safely use t.GetInFragmentFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InFragmentFrames == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetInFragmentFrames() uint64 {
	if t == nil || t.InFragmentFrames == nil {
		return 0
	}
	return *t.InFragmentFrames
}

// GetInJabberFrames retrieves the value of the leaf InJabberFrames from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InJabberFrames is set, it can safely use t.GetInJabberFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InJabberFrames == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetInJabberFrames() uint64 {
	if t == nil || t.InJabberFrames == nil {
		return 0
	}
	return *t.InJabberFrames
}

// GetInMacControlFrames retrieves the value of the leaf InMacControlFrames from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InMacControlFrames is set, it can safely use t.GetInMacControlFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InMacControlFrames == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetInMacControlFrames() uint64 {
	if t == nil || t.InMacControlFrames == nil {
		return 0
	}
	return *t.InMacControlFrames
}

// GetInMacPauseFrames retrieves the value of the leaf InMacPauseFrames from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InMacPauseFrames is set, it can safely use t.GetInMacPauseFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InMacPauseFrames == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetInMacPauseFrames() uint64 {
	if t == nil || t.InMacPauseFrames == nil {
		return 0
	}
	return *t.InMacPauseFrames
}

// GetInOversizeFrames retrieves the value of the leaf InOversizeFrames from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InOversizeFrames is set, it can safely use t.GetInOversizeFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InOversizeFrames == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetInOversizeFrames() uint64 {
	if t == nil || t.InOversizeFrames == nil {
		return 0
	}
	return *t.InOversizeFrames
}

// GetInPcsBipErrors retrieves the value of the leaf InPcsBipErrors from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InPcsBipErrors is set, it can safely use t.GetInPcsBipErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InPcsBipErrors == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetInPcsBipErrors() uint64 {
	if t == nil || t.InPcsBipErrors == nil {
		return 0
	}
	return *t.InPcsBipErrors
}

// GetInPcsErroredSeconds retrieves the value of the leaf InPcsErroredSeconds from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InPcsErroredSeconds is set, it can safely use t.GetInPcsErroredSeconds()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InPcsErroredSeconds == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetInPcsErroredSeconds() uint64 {
	if t == nil || t.InPcsErroredSeconds == nil {
		return 0
	}
	return *t.InPcsErroredSeconds
}

// GetInPcsSeverelyErroredSeconds retrieves the value of the leaf InPcsSeverelyErroredSeconds from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InPcsSeverelyErroredSeconds is set, it can safely use t.GetInPcsSeverelyErroredSeconds()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InPcsSeverelyErroredSeconds == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetInPcsSeverelyErroredSeconds() uint64 {
	if t == nil || t.InPcsSeverelyErroredSeconds == nil {
		return 0
	}
	return *t.InPcsSeverelyErroredSeconds
}

// GetInPcsUnavailableSeconds retrieves the value of the leaf InPcsUnavailableSeconds from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InPcsUnavailableSeconds is set, it can safely use t.GetInPcsUnavailableSeconds()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InPcsUnavailableSeconds == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetInPcsUnavailableSeconds() uint64 {
	if t == nil || t.InPcsUnavailableSeconds == nil {
		return 0
	}
	return *t.InPcsUnavailableSeconds
}

// GetInUndersizeFrames retrieves the value of the leaf InUndersizeFrames from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if InUndersizeFrames is set, it can safely use t.GetInUndersizeFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.InUndersizeFrames == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetInUndersizeFrames() uint64 {
	if t == nil || t.InUndersizeFrames == nil {
		return 0
	}
	return *t.InUndersizeFrames
}

// GetOut_8021QFrames retrieves the value of the leaf Out_8021QFrames from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Out_8021QFrames is set, it can safely use t.GetOut_8021QFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Out_8021QFrames == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetOut_8021QFrames() uint64 {
	if t == nil || t.Out_8021QFrames == nil {
		return 0
	}
	return *t.Out_8021QFrames
}

// GetOutBlockErrors retrieves the value of the leaf OutBlockErrors from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutBlockErrors is set, it can safely use t.GetOutBlockErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutBlockErrors == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetOutBlockErrors() uint64 {
	if t == nil || t.OutBlockErrors == nil {
		return 0
	}
	return *t.OutBlockErrors
}

// GetOutCrcErrors retrieves the value of the leaf OutCrcErrors from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutCrcErrors is set, it can safely use t.GetOutCrcErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutCrcErrors == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetOutCrcErrors() uint64 {
	if t == nil || t.OutCrcErrors == nil {
		return 0
	}
	return *t.OutCrcErrors
}

// GetOutMacControlFrames retrieves the value of the leaf OutMacControlFrames from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutMacControlFrames is set, it can safely use t.GetOutMacControlFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutMacControlFrames == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetOutMacControlFrames() uint64 {
	if t == nil || t.OutMacControlFrames == nil {
		return 0
	}
	return *t.OutMacControlFrames
}

// GetOutMacPauseFrames retrieves the value of the leaf OutMacPauseFrames from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutMacPauseFrames is set, it can safely use t.GetOutMacPauseFrames()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutMacPauseFrames == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetOutMacPauseFrames() uint64 {
	if t == nil || t.OutMacPauseFrames == nil {
		return 0
	}
	return *t.OutMacPauseFrames
}

// GetOutPcsBipErrors retrieves the value of the leaf OutPcsBipErrors from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OutPcsBipErrors is set, it can safely use t.GetOutPcsBipErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OutPcsBipErrors == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State) GetOutPcsBipErrors() uint64 {
	if t == nil || t.OutPcsBipErrors == nil {
		return 0
	}
	return *t.OutPcsBipErrors
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ethernet_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress struct {
	ΛMetadata []ygot.Annotation                                                               `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_Config `path:"config" module:"openconfig-terminal-device"`
	ΛConfig   []ygot.Annotation                                                               `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_State  `path:"state" module:"openconfig-terminal-device"`
	ΛState    []ygot.Annotation                                                               `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress) GetOrCreateConfig() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress) GetOrCreateState() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress) GetConfig() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress) GetState() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_Config represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress/config YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_Config struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	PhysicalChannel  []uint16          `path:"physical-channel" module:"openconfig-terminal-device"`
	ΛPhysicalChannel []ygot.Annotation `path:"@physical-channel" ygotAnnotation:"true"`
	Transceiver      *string           `path:"transceiver" module:"openconfig-terminal-device"`
	ΛTransceiver     []ygot.Annotation `path:"@transceiver" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_Config) IsYANGGoStruct() {
}

// GetPhysicalChannel retrieves the value of the leaf PhysicalChannel from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PhysicalChannel is set, it can safely use t.GetPhysicalChannel()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PhysicalChannel == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_Config) GetPhysicalChannel() []uint16 {
	if t == nil || t.PhysicalChannel == nil {
		return nil
	}
	return t.PhysicalChannel
}

// GetTransceiver retrieves the value of the leaf Transceiver from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Transceiver is set, it can safely use t.GetTransceiver()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Transceiver == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_Config) GetTransceiver() string {
	if t == nil || t.Transceiver == nil {
		return ""
	}
	return *t.Transceiver
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_State represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/ingress/state YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_State struct {
	ΛMetadata        []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	PhysicalChannel  []uint16          `path:"physical-channel" module:"openconfig-terminal-device"`
	ΛPhysicalChannel []ygot.Annotation `path:"@physical-channel" ygotAnnotation:"true"`
	Transceiver      *string           `path:"transceiver" module:"openconfig-terminal-device"`
	ΛTransceiver     []ygot.Annotation `path:"@transceiver" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_State) IsYANGGoStruct() {
}

// GetPhysicalChannel retrieves the value of the leaf PhysicalChannel from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if PhysicalChannel is set, it can safely use t.GetPhysicalChannel()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.PhysicalChannel == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_State) GetPhysicalChannel() []uint16 {
	if t == nil || t.PhysicalChannel == nil {
		return nil
	}
	return t.PhysicalChannel
}

// GetTransceiver retrieves the value of the leaf Transceiver from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Transceiver is set, it can safely use t.GetTransceiver()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Transceiver == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_State) GetTransceiver() string {
	if t == nil || t.Transceiver == nil {
		return ""
	}
	return *t.Transceiver
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Ingress_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments struct {
	ΛMetadata   []ygot.Annotation                                                                                                `path:"@" ygotAnnotation:"true"`
	Assignment  map[uint32]*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment `path:"assignment" module:"openconfig-terminal-device"`
	ΛAssignment []ygot.Annotation                                                                                                `path:"@assignment" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments) IsYANGGoStruct() {
}

// NewAssignment creates a new entry in the Assignment list of the
// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments) NewAssignment(Index uint32) (*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Assignment == nil {
		t.Assignment = make(map[uint32]*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Assignment[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Assignment", key)
	}

	t.Assignment[key] = &OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment{
		Index: &Index,
	}

	return t.Assignment[key], nil
}

// RenameAssignment renames an entry in the list Assignment within
// the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments) RenameAssignment(oldK, newK uint32) error {
	if _, ok := t.Assignment[newK]; ok {
		return fmt.Errorf("key %v already exists in Assignment", newK)
	}

	e, ok := t.Assignment[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Assignment", oldK)
	}
	e.Index = &newK

	t.Assignment[newK] = e
	delete(t.Assignment, oldK)
	return nil
}

// GetOrCreateAssignment retrieves the value with the specified keys from
// the receiver OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments) GetOrCreateAssignment(Index uint32) *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment {

	key := Index

	if v, ok := t.Assignment[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAssignment(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAssignment got unexpected error: %v", err))
	}
	return v
}

// GetAssignment retrieves the value with the specified key from
// the Assignment map field of OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments) GetAssignment(Index uint32) *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Assignment[key]; ok {
		return lm
	}
	return nil
}

// AppendAssignment appends the supplied OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment struct to the
// list Assignment of OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments. If the key value(s) specified in
// the supplied OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment already exist in the list, an error is
// returned.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments) AppendAssignment(v *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment) error {
	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Assignment == nil {
		t.Assignment = make(map[uint32]*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment)
	}

	if _, ok := t.Assignment[key]; ok {
		return fmt.Errorf("duplicate key for list Assignment %v", key)
	}

	t.Assignment[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment struct {
	ΛMetadata []ygot.Annotation                                                                                            `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config `path:"config" module:"openconfig-terminal-device"`
	ΛConfig   []ygot.Annotation                                                                                            `path:"@config" ygotAnnotation:"true"`
	Index     *uint32                                                                                                      `path:"index" module:"openconfig-terminal-device"`
	ΛIndex    []ygot.Annotation                                                                                            `path:"@index" ygotAnnotation:"true"`
	State     *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State  `path:"state" module:"openconfig-terminal-device"`
	ΛState    []ygot.Annotation                                                                                            `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment) IsYANGGoStruct() {
}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment) GetOrCreateConfig() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment) GetOrCreateState() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment) GetConfig() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment) GetState() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetIndex retrieves the value of the leaf Index from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Index is set, it can safely use t.GetIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Index == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// ΛListKeyMap returns the keys of the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment struct, which is a YANG list entry.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config struct {
	ΛMetadata           []ygot.Annotation                                                                                                            `path:"@" ygotAnnotation:"true"`
	Allocation          *float64                                                                                                                     `path:"allocation" module:"openconfig-terminal-device"`
	ΛAllocation         []ygot.Annotation                                                                                                            `path:"@allocation" ygotAnnotation:"true"`
	AssignmentType      E_OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType `path:"assignment-type" module:"openconfig-terminal-device"`
	ΛAssignmentType     []ygot.Annotation                                                                                                            `path:"@assignment-type" ygotAnnotation:"true"`
	Description         *string                                                                                                                      `path:"description" module:"openconfig-terminal-device"`
	ΛDescription        []ygot.Annotation                                                                                                            `path:"@description" ygotAnnotation:"true"`
	Index               *uint32                                                                                                                      `path:"index" module:"openconfig-terminal-device"`
	ΛIndex              []ygot.Annotation                                                                                                            `path:"@index" ygotAnnotation:"true"`
	LogicalChannel      *uint32                                                                                                                      `path:"logical-channel" module:"openconfig-terminal-device"`
	ΛLogicalChannel     []ygot.Annotation                                                                                                            `path:"@logical-channel" ygotAnnotation:"true"`
	Mapping             E_OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL                                                                            `path:"mapping" module:"openconfig-terminal-device"`
	ΛMapping            []ygot.Annotation                                                                                                            `path:"@mapping" ygotAnnotation:"true"`
	OpticalChannel      *string                                                                                                                      `path:"optical-channel" module:"openconfig-terminal-device"`
	ΛOpticalChannel     []ygot.Annotation                                                                                                            `path:"@optical-channel" ygotAnnotation:"true"`
	TributarySlotIndex  *int32                                                                                                                       `path:"tributary-slot-index" module:"openconfig-terminal-device"`
	ΛTributarySlotIndex []ygot.Annotation                                                                                                            `path:"@tributary-slot-index" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config) IsYANGGoStruct() {
}

// GetAllocation retrieves the value of the leaf Allocation from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Allocation is set, it can safely use t.GetAllocation()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Allocation == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config) GetAllocation() float64 {
	if t == nil || t.Allocation == nil {
		return 0.0
	}
	return *t.Allocation
}

// GetAssignmentType retrieves the value of the leaf AssignmentType from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AssignmentType is set, it can safely use t.GetAssignmentType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AssignmentType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config) GetAssignmentType() E_OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType {
	if t == nil || t.AssignmentType == 0 {
		return 0
	}
	return t.AssignmentType
}

// GetDescription retrieves the value of the leaf Description from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Description is set, it can safely use t.GetDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Description == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIndex retrieves the value of the leaf Index from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Index is set, it can safely use t.GetIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Index == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLogicalChannel retrieves the value of the leaf LogicalChannel from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LogicalChannel is set, it can safely use t.GetLogicalChannel()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LogicalChannel == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config) GetLogicalChannel() uint32 {
	if t == nil || t.LogicalChannel == nil {
		return 0
	}
	return *t.LogicalChannel
}

// GetMapping retrieves the value of the leaf Mapping from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Mapping is set, it can safely use t.GetMapping()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Mapping == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config) GetMapping() E_OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL {
	if t == nil || t.Mapping == 0 {
		return 0
	}
	return t.Mapping
}

// GetOpticalChannel retrieves the value of the leaf OpticalChannel from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OpticalChannel is set, it can safely use t.GetOpticalChannel()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OpticalChannel == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config) GetOpticalChannel() string {
	if t == nil || t.OpticalChannel == nil {
		return ""
	}
	return *t.OpticalChannel
}

// GetTributarySlotIndex retrieves the value of the leaf TributarySlotIndex from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TributarySlotIndex is set, it can safely use t.GetTributarySlotIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TributarySlotIndex == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config) GetTributarySlotIndex() int32 {
	if t == nil || t.TributarySlotIndex == nil {
		return 0
	}
	return *t.TributarySlotIndex
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State struct {
	ΛMetadata           []ygot.Annotation                                                                                                            `path:"@" ygotAnnotation:"true"`
	Allocation          *float64                                                                                                                     `path:"allocation" module:"openconfig-terminal-device"`
	ΛAllocation         []ygot.Annotation                                                                                                            `path:"@allocation" ygotAnnotation:"true"`
	AssignmentType      E_OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType `path:"assignment-type" module:"openconfig-terminal-device"`
	ΛAssignmentType     []ygot.Annotation                                                                                                            `path:"@assignment-type" ygotAnnotation:"true"`
	Description         *string                                                                                                                      `path:"description" module:"openconfig-terminal-device"`
	ΛDescription        []ygot.Annotation                                                                                                            `path:"@description" ygotAnnotation:"true"`
	Index               *uint32                                                                                                                      `path:"index" module:"openconfig-terminal-device"`
	ΛIndex              []ygot.Annotation                                                                                                            `path:"@index" ygotAnnotation:"true"`
	LogicalChannel      *uint32                                                                                                                      `path:"logical-channel" module:"openconfig-terminal-device"`
	ΛLogicalChannel     []ygot.Annotation                                                                                                            `path:"@logical-channel" ygotAnnotation:"true"`
	Mapping             E_OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL                                                                            `path:"mapping" module:"openconfig-terminal-device"`
	ΛMapping            []ygot.Annotation                                                                                                            `path:"@mapping" ygotAnnotation:"true"`
	OpticalChannel      *string                                                                                                                      `path:"optical-channel" module:"openconfig-terminal-device"`
	ΛOpticalChannel     []ygot.Annotation                                                                                                            `path:"@optical-channel" ygotAnnotation:"true"`
	TributarySlotIndex  *int32                                                                                                                       `path:"tributary-slot-index" module:"openconfig-terminal-device"`
	ΛTributarySlotIndex []ygot.Annotation                                                                                                            `path:"@tributary-slot-index" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State) IsYANGGoStruct() {
}

// GetAllocation retrieves the value of the leaf Allocation from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Allocation is set, it can safely use t.GetAllocation()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Allocation == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State) GetAllocation() float64 {
	if t == nil || t.Allocation == nil {
		return 0.0
	}
	return *t.Allocation
}

// GetAssignmentType retrieves the value of the leaf AssignmentType from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AssignmentType is set, it can safely use t.GetAssignmentType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AssignmentType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State) GetAssignmentType() E_OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType {
	if t == nil || t.AssignmentType == 0 {
		return 0
	}
	return t.AssignmentType
}

// GetDescription retrieves the value of the leaf Description from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Description is set, it can safely use t.GetDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Description == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIndex retrieves the value of the leaf Index from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Index is set, it can safely use t.GetIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Index == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLogicalChannel retrieves the value of the leaf LogicalChannel from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LogicalChannel is set, it can safely use t.GetLogicalChannel()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LogicalChannel == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State) GetLogicalChannel() uint32 {
	if t == nil || t.LogicalChannel == nil {
		return 0
	}
	return *t.LogicalChannel
}

// GetMapping retrieves the value of the leaf Mapping from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Mapping is set, it can safely use t.GetMapping()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Mapping == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State) GetMapping() E_OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL {
	if t == nil || t.Mapping == 0 {
		return 0
	}
	return t.Mapping
}

// GetOpticalChannel retrieves the value of the leaf OpticalChannel from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if OpticalChannel is set, it can safely use t.GetOpticalChannel()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.OpticalChannel == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State) GetOpticalChannel() string {
	if t == nil || t.OpticalChannel == nil {
		return ""
	}
	return *t.OpticalChannel
}

// GetTributarySlotIndex retrieves the value of the leaf TributarySlotIndex from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TributarySlotIndex is set, it can safely use t.GetTributarySlotIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TributarySlotIndex == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State) GetTributarySlotIndex() int32 {
	if t == nil || t.TributarySlotIndex == nil {
		return 0
	}
	return *t.TributarySlotIndex
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn struct {
	ΛMetadata []ygot.Annotation                                                           `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_Config `path:"config" module:"openconfig-terminal-device"`
	ΛConfig   []ygot.Annotation                                                           `path:"@config" ygotAnnotation:"true"`
	State     *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State  `path:"state" module:"openconfig-terminal-device"`
	ΛState    []ygot.Annotation                                                           `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn) GetOrCreateConfig() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn) GetOrCreateState() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn) GetConfig() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn) GetState() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_Config represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/config YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_Config struct {
	ΛMetadata                 []ygot.Annotation                                     `path:"@" ygotAnnotation:"true"`
	TributarySlotGranularity  E_OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY `path:"tributary-slot-granularity" module:"openconfig-terminal-device"`
	ΛTributarySlotGranularity []ygot.Annotation                                     `path:"@tributary-slot-granularity" ygotAnnotation:"true"`
	TtiMsgAuto                *bool                                                 `path:"tti-msg-auto" module:"openconfig-terminal-device"`
	ΛTtiMsgAuto               []ygot.Annotation                                     `path:"@tti-msg-auto" ygotAnnotation:"true"`
	TtiMsgExpected            *string                                               `path:"tti-msg-expected" module:"openconfig-terminal-device"`
	ΛTtiMsgExpected           []ygot.Annotation                                     `path:"@tti-msg-expected" ygotAnnotation:"true"`
	TtiMsgTransmit            *string                                               `path:"tti-msg-transmit" module:"openconfig-terminal-device"`
	ΛTtiMsgTransmit           []ygot.Annotation                                     `path:"@tti-msg-transmit" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_Config) IsYANGGoStruct() {}

// GetTributarySlotGranularity retrieves the value of the leaf TributarySlotGranularity from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TributarySlotGranularity is set, it can safely use t.GetTributarySlotGranularity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TributarySlotGranularity == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_Config) GetTributarySlotGranularity() E_OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY {
	if t == nil || t.TributarySlotGranularity == 0 {
		return 0
	}
	return t.TributarySlotGranularity
}

// GetTtiMsgAuto retrieves the value of the leaf TtiMsgAuto from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TtiMsgAuto is set, it can safely use t.GetTtiMsgAuto()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TtiMsgAuto == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_Config) GetTtiMsgAuto() bool {
	if t == nil || t.TtiMsgAuto == nil {
		return false
	}
	return *t.TtiMsgAuto
}

// GetTtiMsgExpected retrieves the value of the leaf TtiMsgExpected from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TtiMsgExpected is set, it can safely use t.GetTtiMsgExpected()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TtiMsgExpected == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_Config) GetTtiMsgExpected() string {
	if t == nil || t.TtiMsgExpected == nil {
		return ""
	}
	return *t.TtiMsgExpected
}

// GetTtiMsgTransmit retrieves the value of the leaf TtiMsgTransmit from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_Config
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TtiMsgTransmit is set, it can safely use t.GetTtiMsgTransmit()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TtiMsgTransmit == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_Config) GetTtiMsgTransmit() string {
	if t == nil || t.TtiMsgTransmit == nil {
		return ""
	}
	return *t.TtiMsgTransmit
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State struct {
	ΛMetadata                 []ygot.Annotation                                                                     `path:"@" ygotAnnotation:"true"`
	BackgroundBlockErrors     *uint64                                                                               `path:"background-block-errors" module:"openconfig-terminal-device"`
	ΛBackgroundBlockErrors    []ygot.Annotation                                                                     `path:"@background-block-errors" ygotAnnotation:"true"`
	CodeViolations            *uint64                                                                               `path:"code-violations" module:"openconfig-terminal-device"`
	ΛCodeViolations           []ygot.Annotation                                                                     `path:"@code-violations" ygotAnnotation:"true"`
	ErroredBlocks             *uint64                                                                               `path:"errored-blocks" module:"openconfig-terminal-device"`
	ΛErroredBlocks            []ygot.Annotation                                                                     `path:"@errored-blocks" ygotAnnotation:"true"`
	ErroredSeconds            *uint64                                                                               `path:"errored-seconds" module:"openconfig-terminal-device"`
	ΛErroredSeconds           []ygot.Annotation                                                                     `path:"@errored-seconds" ygotAnnotation:"true"`
	Esnr                      *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr       `path:"esnr" module:"openconfig-terminal-device"`
	ΛEsnr                     []ygot.Annotation                                                                     `path:"@esnr" ygotAnnotation:"true"`
	FecCorrectedBits          *uint64                                                                               `path:"fec-corrected-bits" module:"openconfig-terminal-device"`
	ΛFecCorrectedBits         []ygot.Annotation                                                                     `path:"@fec-corrected-bits" ygotAnnotation:"true"`
	FecCorrectedBytes         *uint64                                                                               `path:"fec-corrected-bytes" module:"openconfig-terminal-device"`
	ΛFecCorrectedBytes        []ygot.Annotation                                                                     `path:"@fec-corrected-bytes" ygotAnnotation:"true"`
	FecUncorrectableBlocks    *uint64                                                                               `path:"fec-uncorrectable-blocks" module:"openconfig-terminal-device"`
	ΛFecUncorrectableBlocks   []ygot.Annotation                                                                     `path:"@fec-uncorrectable-blocks" ygotAnnotation:"true"`
	FecUncorrectableWords     *uint64                                                                               `path:"fec-uncorrectable-words" module:"openconfig-terminal-device"`
	ΛFecUncorrectableWords    []ygot.Annotation                                                                     `path:"@fec-uncorrectable-words" ygotAnnotation:"true"`
	PostFecBer                *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer `path:"post-fec-ber" module:"openconfig-terminal-device"`
	ΛPostFecBer               []ygot.Annotation                                                                     `path:"@post-fec-ber" ygotAnnotation:"true"`
	PreFecBer                 *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer  `path:"pre-fec-ber" module:"openconfig-terminal-device"`
	ΛPreFecBer                []ygot.Annotation                                                                     `path:"@pre-fec-ber" ygotAnnotation:"true"`
	QValue                    *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_QValue     `path:"q-value" module:"openconfig-terminal-device"`
	ΛQValue                   []ygot.Annotation                                                                     `path:"@q-value" ygotAnnotation:"true"`
	RdiMsg                    *string                                                                               `path:"rdi-msg" module:"openconfig-terminal-device"`
	ΛRdiMsg                   []ygot.Annotation                                                                     `path:"@rdi-msg" ygotAnnotation:"true"`
	SeverelyErroredSeconds    *uint64                                                                               `path:"severely-errored-seconds" module:"openconfig-terminal-device"`
	ΛSeverelyErroredSeconds   []ygot.Annotation                                                                     `path:"@severely-errored-seconds" ygotAnnotation:"true"`
	TributarySlotGranularity  E_OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY                                 `path:"tributary-slot-granularity" module:"openconfig-terminal-device"`
	ΛTributarySlotGranularity []ygot.Annotation                                                                     `path:"@tributary-slot-granularity" ygotAnnotation:"true"`
	TtiMsgAuto                *bool                                                                                 `path:"tti-msg-auto" module:"openconfig-terminal-device"`
	ΛTtiMsgAuto               []ygot.Annotation                                                                     `path:"@tti-msg-auto" ygotAnnotation:"true"`
	TtiMsgExpected            *string                                                                               `path:"tti-msg-expected" module:"openconfig-terminal-device"`
	ΛTtiMsgExpected           []ygot.Annotation                                                                     `path:"@tti-msg-expected" ygotAnnotation:"true"`
	TtiMsgRecv                *string                                                                               `path:"tti-msg-recv" module:"openconfig-terminal-device"`
	ΛTtiMsgRecv               []ygot.Annotation                                                                     `path:"@tti-msg-recv" ygotAnnotation:"true"`
	TtiMsgTransmit            *string                                                                               `path:"tti-msg-transmit" module:"openconfig-terminal-device"`
	ΛTtiMsgTransmit           []ygot.Annotation                                                                     `path:"@tti-msg-transmit" ygotAnnotation:"true"`
	UnavailableSeconds        *uint64                                                                               `path:"unavailable-seconds" module:"openconfig-terminal-device"`
	ΛUnavailableSeconds       []ygot.Annotation                                                                     `path:"@unavailable-seconds" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) IsYANGGoStruct() {}

// GetOrCreateEsnr retrieves the value of the Esnr field
// or returns the existing field if it already exists.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) GetOrCreateEsnr() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr {
	if t.Esnr != nil {
		return t.Esnr
	}
	t.Esnr = &OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr{}
	return t.Esnr
}

// GetOrCreatePostFecBer retrieves the value of the PostFecBer field
// or returns the existing field if it already exists.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) GetOrCreatePostFecBer() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer {
	if t.PostFecBer != nil {
		return t.PostFecBer
	}
	t.PostFecBer = &OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer{}
	return t.PostFecBer
}

// GetOrCreatePreFecBer retrieves the value of the PreFecBer field
// or returns the existing field if it already exists.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) GetOrCreatePreFecBer() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer {
	if t.PreFecBer != nil {
		return t.PreFecBer
	}
	t.PreFecBer = &OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer{}
	return t.PreFecBer
}

// GetOrCreateQValue retrieves the value of the QValue field
// or returns the existing field if it already exists.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) GetOrCreateQValue() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_QValue {
	if t.QValue != nil {
		return t.QValue
	}
	t.QValue = &OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_QValue{}
	return t.QValue
}

// GetEsnr returns the value of the Esnr struct pointer
// from OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State. If the receiver or the field Esnr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) GetEsnr() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr {
	if t != nil && t.Esnr != nil {
		return t.Esnr
	}
	return nil
}

// GetPostFecBer returns the value of the PostFecBer struct pointer
// from OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State. If the receiver or the field PostFecBer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) GetPostFecBer() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer {
	if t != nil && t.PostFecBer != nil {
		return t.PostFecBer
	}
	return nil
}

// GetPreFecBer returns the value of the PreFecBer struct pointer
// from OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State. If the receiver or the field PreFecBer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) GetPreFecBer() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer {
	if t != nil && t.PreFecBer != nil {
		return t.PreFecBer
	}
	return nil
}

// GetQValue returns the value of the QValue struct pointer
// from OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State. If the receiver or the field QValue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) GetQValue() *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_QValue {
	if t != nil && t.QValue != nil {
		return t.QValue
	}
	return nil
}

// GetBackgroundBlockErrors retrieves the value of the leaf BackgroundBlockErrors from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if BackgroundBlockErrors is set, it can safely use t.GetBackgroundBlockErrors()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.BackgroundBlockErrors == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) GetBackgroundBlockErrors() uint64 {
	if t == nil || t.BackgroundBlockErrors == nil {
		return 0
	}
	return *t.BackgroundBlockErrors
}

// GetCodeViolations retrieves the value of the leaf CodeViolations from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if CodeViolations is set, it can safely use t.GetCodeViolations()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.CodeViolations == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) GetCodeViolations() uint64 {
	if t == nil || t.CodeViolations == nil {
		return 0
	}
	return *t.CodeViolations
}

// GetErroredBlocks retrieves the value of the leaf ErroredBlocks from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ErroredBlocks is set, it can safely use t.GetErroredBlocks()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ErroredBlocks == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) GetErroredBlocks() uint64 {
	if t == nil || t.ErroredBlocks == nil {
		return 0
	}
	return *t.ErroredBlocks
}

// GetErroredSeconds retrieves the value of the leaf ErroredSeconds from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ErroredSeconds is set, it can safely use t.GetErroredSeconds()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ErroredSeconds == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) GetErroredSeconds() uint64 {
	if t == nil || t.ErroredSeconds == nil {
		return 0
	}
	return *t.ErroredSeconds
}

// GetFecCorrectedBits retrieves the value of the leaf FecCorrectedBits from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FecCorrectedBits is set, it can safely use t.GetFecCorrectedBits()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FecCorrectedBits == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) GetFecCorrectedBits() uint64 {
	if t == nil || t.FecCorrectedBits == nil {
		return 0
	}
	return *t.FecCorrectedBits
}

// GetFecCorrectedBytes retrieves the value of the leaf FecCorrectedBytes from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FecCorrectedBytes is set, it can safely use t.GetFecCorrectedBytes()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FecCorrectedBytes == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) GetFecCorrectedBytes() uint64 {
	if t == nil || t.FecCorrectedBytes == nil {
		return 0
	}
	return *t.FecCorrectedBytes
}

// GetFecUncorrectableBlocks retrieves the value of the leaf FecUncorrectableBlocks from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FecUncorrectableBlocks is set, it can safely use t.GetFecUncorrectableBlocks()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FecUncorrectableBlocks == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) GetFecUncorrectableBlocks() uint64 {
	if t == nil || t.FecUncorrectableBlocks == nil {
		return 0
	}
	return *t.FecUncorrectableBlocks
}

// GetFecUncorrectableWords retrieves the value of the leaf FecUncorrectableWords from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if FecUncorrectableWords is set, it can safely use t.GetFecUncorrectableWords()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.FecUncorrectableWords == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) GetFecUncorrectableWords() uint64 {
	if t == nil || t.FecUncorrectableWords == nil {
		return 0
	}
	return *t.FecUncorrectableWords
}

// GetRdiMsg retrieves the value of the leaf RdiMsg from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RdiMsg is set, it can safely use t.GetRdiMsg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RdiMsg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) GetRdiMsg() string {
	if t == nil || t.RdiMsg == nil {
		return ""
	}
	return *t.RdiMsg
}

// GetSeverelyErroredSeconds retrieves the value of the leaf SeverelyErroredSeconds from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if SeverelyErroredSeconds is set, it can safely use t.GetSeverelyErroredSeconds()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.SeverelyErroredSeconds == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) GetSeverelyErroredSeconds() uint64 {
	if t == nil || t.SeverelyErroredSeconds == nil {
		return 0
	}
	return *t.SeverelyErroredSeconds
}

// GetTributarySlotGranularity retrieves the value of the leaf TributarySlotGranularity from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TributarySlotGranularity is set, it can safely use t.GetTributarySlotGranularity()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TributarySlotGranularity == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) GetTributarySlotGranularity() E_OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY {
	if t == nil || t.TributarySlotGranularity == 0 {
		return 0
	}
	return t.TributarySlotGranularity
}

// GetTtiMsgAuto retrieves the value of the leaf TtiMsgAuto from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TtiMsgAuto is set, it can safely use t.GetTtiMsgAuto()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TtiMsgAuto == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) GetTtiMsgAuto() bool {
	if t == nil || t.TtiMsgAuto == nil {
		return false
	}
	return *t.TtiMsgAuto
}

// GetTtiMsgExpected retrieves the value of the leaf TtiMsgExpected from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TtiMsgExpected is set, it can safely use t.GetTtiMsgExpected()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TtiMsgExpected == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) GetTtiMsgExpected() string {
	if t == nil || t.TtiMsgExpected == nil {
		return ""
	}
	return *t.TtiMsgExpected
}

// GetTtiMsgRecv retrieves the value of the leaf TtiMsgRecv from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TtiMsgRecv is set, it can safely use t.GetTtiMsgRecv()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TtiMsgRecv == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) GetTtiMsgRecv() string {
	if t == nil || t.TtiMsgRecv == nil {
		return ""
	}
	return *t.TtiMsgRecv
}

// GetTtiMsgTransmit retrieves the value of the leaf TtiMsgTransmit from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TtiMsgTransmit is set, it can safely use t.GetTtiMsgTransmit()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TtiMsgTransmit == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) GetTtiMsgTransmit() string {
	if t == nil || t.TtiMsgTransmit == nil {
		return ""
	}
	return *t.TtiMsgTransmit
}

// GetUnavailableSeconds retrieves the value of the leaf UnavailableSeconds from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if UnavailableSeconds is set, it can safely use t.GetUnavailableSeconds()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.UnavailableSeconds == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) GetUnavailableSeconds() uint64 {
	if t == nil || t.UnavailableSeconds == nil {
		return 0
	}
	return *t.UnavailableSeconds
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/esnr YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr) IsYANGGoStruct() {
}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_Esnr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/post-fec-ber YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer) IsYANGGoStruct() {
}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PostFecBer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/pre-fec-ber YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer) IsYANGGoStruct() {
}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_PreFecBer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_QValue represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/otn/state/q-value YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_QValue struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Avg       *float64          `path:"avg" module:"openconfig-terminal-device"`
	ΛAvg      []ygot.Annotation `path:"@avg" ygotAnnotation:"true"`
	Instant   *float64          `path:"instant" module:"openconfig-terminal-device"`
	ΛInstant  []ygot.Annotation `path:"@instant" ygotAnnotation:"true"`
	Interval  *uint64           `path:"interval" module:"openconfig-terminal-device"`
	ΛInterval []ygot.Annotation `path:"@interval" ygotAnnotation:"true"`
	Max       *float64          `path:"max" module:"openconfig-terminal-device"`
	ΛMax      []ygot.Annotation `path:"@max" ygotAnnotation:"true"`
	MaxTime   *uint64           `path:"max-time" module:"openconfig-terminal-device"`
	ΛMaxTime  []ygot.Annotation `path:"@max-time" ygotAnnotation:"true"`
	Min       *float64          `path:"min" module:"openconfig-terminal-device"`
	ΛMin      []ygot.Annotation `path:"@min" ygotAnnotation:"true"`
	MinTime   *uint64           `path:"min-time" module:"openconfig-terminal-device"`
	ΛMinTime  []ygot.Annotation `path:"@min-time" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_QValue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_QValue) IsYANGGoStruct() {
}

// GetAvg retrieves the value of the leaf Avg from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_QValue
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Avg is set, it can safely use t.GetAvg()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Avg == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_QValue) GetAvg() float64 {
	if t == nil || t.Avg == nil {
		return 0.0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_QValue
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Instant is set, it can safely use t.GetInstant()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Instant == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_QValue) GetInstant() float64 {
	if t == nil || t.Instant == nil {
		return 0.0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_QValue
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Interval is set, it can safely use t.GetInterval()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Interval == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_QValue) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_QValue
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Max is set, it can safely use t.GetMax()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Max == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_QValue) GetMax() float64 {
	if t == nil || t.Max == nil {
		return 0.0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_QValue
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MaxTime is set, it can safely use t.GetMaxTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MaxTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_QValue) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_QValue
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Min is set, it can safely use t.GetMin()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Min == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_QValue) GetMin() float64 {
	if t == nil || t.Min == nil {
		return 0.0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_QValue
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if MinTime is set, it can safely use t.GetMinTime()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.MinTime == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_QValue) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_QValue) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_QValue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_Otn_State_QValue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State represents the /openconfig-terminal-device/terminal-device/logical-channels/channel/state YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State struct {
	ΛMetadata           []ygot.Annotation                                                                 `path:"@" ygotAnnotation:"true"`
	AdminState          E_OpenconfigTerminalDevice_AdminStateType                                         `path:"admin-state" module:"openconfig-terminal-device"`
	ΛAdminState         []ygot.Annotation                                                                 `path:"@admin-state" ygotAnnotation:"true"`
	Description         *string                                                                           `path:"description" module:"openconfig-terminal-device"`
	ΛDescription        []ygot.Annotation                                                                 `path:"@description" ygotAnnotation:"true"`
	Index               *uint32                                                                           `path:"index" module:"openconfig-terminal-device"`
	ΛIndex              []ygot.Annotation                                                                 `path:"@index" ygotAnnotation:"true"`
	LinkState           E_OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState `path:"link-state" module:"openconfig-terminal-device"`
	ΛLinkState          []ygot.Annotation                                                                 `path:"@link-state" ygotAnnotation:"true"`
	LogicalChannelType  E_OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE                          `path:"logical-channel-type" module:"openconfig-terminal-device"`
	ΛLogicalChannelType []ygot.Annotation                                                                 `path:"@logical-channel-type" ygotAnnotation:"true"`
	LoopbackMode        E_OpenconfigTerminalDevice_LoopbackModeType                                       `path:"loopback-mode" module:"openconfig-terminal-device"`
	ΛLoopbackMode       []ygot.Annotation                                                                 `path:"@loopback-mode" ygotAnnotation:"true"`
	RateClass           E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE                              `path:"rate-class" module:"openconfig-terminal-device"`
	ΛRateClass          []ygot.Annotation                                                                 `path:"@rate-class" ygotAnnotation:"true"`
	TestSignal          *bool                                                                             `path:"test-signal" module:"openconfig-terminal-device"`
	ΛTestSignal         []ygot.Annotation                                                                 `path:"@test-signal" ygotAnnotation:"true"`
	TribProtocol        E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE                                `path:"trib-protocol" module:"openconfig-terminal-device"`
	ΛTribProtocol       []ygot.Annotation                                                                 `path:"@trib-protocol" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if AdminState is set, it can safely use t.GetAdminState()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.AdminState == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State) GetAdminState() E_OpenconfigTerminalDevice_AdminStateType {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Description is set, it can safely use t.GetDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Description == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIndex retrieves the value of the leaf Index from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Index is set, it can safely use t.GetIndex()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Index == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLinkState retrieves the value of the leaf LinkState from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LinkState is set, it can safely use t.GetLinkState()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LinkState == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State) GetLinkState() E_OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState {
	if t == nil || t.LinkState == 0 {
		return 0
	}
	return t.LinkState
}

// GetLogicalChannelType retrieves the value of the leaf LogicalChannelType from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LogicalChannelType is set, it can safely use t.GetLogicalChannelType()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LogicalChannelType == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State) GetLogicalChannelType() E_OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE {
	if t == nil || t.LogicalChannelType == 0 {
		return 0
	}
	return t.LogicalChannelType
}

// GetLoopbackMode retrieves the value of the leaf LoopbackMode from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if LoopbackMode is set, it can safely use t.GetLoopbackMode()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.LoopbackMode == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State) GetLoopbackMode() E_OpenconfigTerminalDevice_LoopbackModeType {
	if t == nil || t.LoopbackMode == 0 {
		return OpenconfigTerminalDevice_LoopbackModeType_NONE
	}
	return t.LoopbackMode
}

// GetRateClass retrieves the value of the leaf RateClass from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if RateClass is set, it can safely use t.GetRateClass()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.RateClass == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State) GetRateClass() E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE {
	if t == nil || t.RateClass == 0 {
		return 0
	}
	return t.RateClass
}

// GetTestSignal retrieves the value of the leaf TestSignal from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TestSignal is set, it can safely use t.GetTestSignal()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TestSignal == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State) GetTestSignal() bool {
	if t == nil || t.TestSignal == nil {
		return false
	}
	return *t.TestSignal
}

// GetTribProtocol retrieves the value of the leaf TribProtocol from the OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if TribProtocol is set, it can safely use t.GetTribProtocol()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.TribProtocol == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State) GetTribProtocol() E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE {
	if t == nil || t.TribProtocol == 0 {
		return 0
	}
	return t.TribProtocol
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_OperationalModes represents the /openconfig-terminal-device/terminal-device/operational-modes YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_OperationalModes struct {
	ΛMetadata []ygot.Annotation                                                         `path:"@" ygotAnnotation:"true"`
	Mode      map[uint16]*OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode `path:"mode" module:"openconfig-terminal-device"`
	ΛMode     []ygot.Annotation                                                         `path:"@mode" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_OperationalModes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_OperationalModes) IsYANGGoStruct() {}

// NewMode creates a new entry in the Mode list of the
// OpenconfigTerminalDevice_TerminalDevice_OperationalModes struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigTerminalDevice_TerminalDevice_OperationalModes) NewMode(ModeId uint16) (*OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mode == nil {
		t.Mode = make(map[uint16]*OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode)
	}

	key := ModeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mode[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mode", key)
	}

	t.Mode[key] = &OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode{
		ModeId: &ModeId,
	}

	return t.Mode[key], nil
}

// RenameMode renames an entry in the list Mode within
// the OpenconfigTerminalDevice_TerminalDevice_OperationalModes struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *OpenconfigTerminalDevice_TerminalDevice_OperationalModes) RenameMode(oldK, newK uint16) error {
	if _, ok := t.Mode[newK]; ok {
		return fmt.Errorf("key %v already exists in Mode", newK)
	}

	e, ok := t.Mode[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mode", oldK)
	}
	e.ModeId = &newK

	t.Mode[newK] = e
	delete(t.Mode, oldK)
	return nil
}

// GetOrCreateMode retrieves the value with the specified keys from
// the receiver OpenconfigTerminalDevice_TerminalDevice_OperationalModes. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *OpenconfigTerminalDevice_TerminalDevice_OperationalModes) GetOrCreateMode(ModeId uint16) *OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode {

	key := ModeId

	if v, ok := t.Mode[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMode(ModeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMode got unexpected error: %v", err))
	}
	return v
}

// GetMode retrieves the value with the specified key from
// the Mode map field of OpenconfigTerminalDevice_TerminalDevice_OperationalModes. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice_OperationalModes) GetMode(ModeId uint16) *OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode {

	if t == nil {
		return nil
	}

	key := ModeId

	if lm, ok := t.Mode[key]; ok {
		return lm
	}
	return nil
}

// AppendMode appends the supplied OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode struct to the
// list Mode of OpenconfigTerminalDevice_TerminalDevice_OperationalModes. If the key value(s) specified in
// the supplied OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode already exist in the list, an error is
// returned.
func (t *OpenconfigTerminalDevice_TerminalDevice_OperationalModes) AppendMode(v *OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode) error {
	key := *v.ModeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mode == nil {
		t.Mode = make(map[uint16]*OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode)
	}

	if _, ok := t.Mode[key]; ok {
		return fmt.Errorf("duplicate key for list Mode %v", key)
	}

	t.Mode[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_OperationalModes) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_OperationalModes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_OperationalModes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode represents the /openconfig-terminal-device/terminal-device/operational-modes/mode YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode struct {
	ΛMetadata []ygot.Annotation                                                     `path:"@" ygotAnnotation:"true"`
	Config    *OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_Config `path:"config" module:"openconfig-terminal-device"`
	ΛConfig   []ygot.Annotation                                                     `path:"@config" ygotAnnotation:"true"`
	ModeId    *uint16                                                               `path:"mode-id" module:"openconfig-terminal-device"`
	ΛModeId   []ygot.Annotation                                                     `path:"@mode-id" ygotAnnotation:"true"`
	State     *OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_State  `path:"state" module:"openconfig-terminal-device"`
	ΛState    []ygot.Annotation                                                     `path:"@state" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode) IsYANGGoStruct() {}

// GetOrCreateConfig retrieves the value of the Config field
// or returns the existing field if it already exists.
func (t *OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode) GetOrCreateConfig() *OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_Config {
	if t.Config != nil {
		return t.Config
	}
	t.Config = &OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_Config{}
	return t.Config
}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode) GetOrCreateState() *OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_State {
	if t.State != nil {
		return t.State
	}
	t.State = &OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_State{}
	return t.State
}

// GetConfig returns the value of the Config struct pointer
// from OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode. If the receiver or the field Config is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode) GetConfig() *OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_Config {
	if t != nil && t.Config != nil {
		return t.Config
	}
	return nil
}

// GetState returns the value of the State struct pointer
// from OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode) GetState() *OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetModeId retrieves the value of the leaf ModeId from the OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ModeId is set, it can safely use t.GetModeId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ModeId == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode) GetModeId() uint16 {
	if t == nil || t.ModeId == nil {
		return 0
	}
	return *t.ModeId
}

// ΛListKeyMap returns the keys of the OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode struct, which is a YANG list entry.
func (t *OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ModeId == nil {
		return nil, fmt.Errorf("nil value for key ModeId")
	}

	return map[string]interface{}{
		"mode-id": *t.ModeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_Config represents the /openconfig-terminal-device/terminal-device/operational-modes/mode/config YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_Config struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_Config) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_Config"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_Config) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_State represents the /openconfig-terminal-device/terminal-device/operational-modes/mode/state YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_State struct {
	ΛMetadata    []ygot.Annotation `path:"@" ygotAnnotation:"true"`
	Description  *string           `path:"description" module:"openconfig-terminal-device"`
	ΛDescription []ygot.Annotation `path:"@description" ygotAnnotation:"true"`
	ModeId       *uint16           `path:"mode-id" module:"openconfig-terminal-device"`
	ΛModeId      []ygot.Annotation `path:"@mode-id" ygotAnnotation:"true"`
	VendorId     *string           `path:"vendor-id" module:"openconfig-terminal-device"`
	ΛVendorId    []ygot.Annotation `path:"@vendor-id" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_State) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Description is set, it can safely use t.GetDescription()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Description == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_State) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetModeId retrieves the value of the leaf ModeId from the OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if ModeId is set, it can safely use t.GetModeId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.ModeId == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_State) GetModeId() uint16 {
	if t == nil || t.ModeId == nil {
		return 0
	}
	return *t.ModeId
}

// GetVendorId retrieves the value of the leaf VendorId from the OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_State
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if VendorId is set, it can safely use t.GetVendorId()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.VendorId == nil'
// before retrieving the leaf's value.
func (t *OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_State) GetVendorId() string {
	if t == nil || t.VendorId == nil {
		return ""
	}
	return *t.VendorId
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_OperationalModes_Mode_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// OpenconfigTerminalDevice_TerminalDevice_State represents the /openconfig-terminal-device/terminal-device/state YANG schema element.
type OpenconfigTerminalDevice_TerminalDevice_State struct {
	ΛMetadata []ygot.Annotation `path:"@" ygotAnnotation:"true"`
}

// IsYANGGoStruct ensures that OpenconfigTerminalDevice_TerminalDevice_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigTerminalDevice_TerminalDevice_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *OpenconfigTerminalDevice_TerminalDevice_State) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["OpenconfigTerminalDevice_TerminalDevice_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *OpenconfigTerminalDevice_TerminalDevice_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// E_IETFInterfaces_InterfaceType is a derived int64 type which is used to represent
// the enumerated node IETFInterfaces_InterfaceType. An additional value named
// IETFInterfaces_InterfaceType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFInterfaces_InterfaceType int64

// IsYANGGoEnum ensures that IETFInterfaces_InterfaceType implements the yang.GoEnum
// interface. This ensures that IETFInterfaces_InterfaceType can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFInterfaces_InterfaceType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFInterfaces_InterfaceType.
func (E_IETFInterfaces_InterfaceType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

const (
	// IETFInterfaces_InterfaceType_UNSET corresponds to the value UNSET of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_UNSET E_IETFInterfaces_InterfaceType = 0
	// IETFInterfaces_InterfaceType_a12MppSwitch corresponds to the value a12MppSwitch of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_a12MppSwitch E_IETFInterfaces_InterfaceType = 1
	// IETFInterfaces_InterfaceType_aal2 corresponds to the value aal2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aal2 E_IETFInterfaces_InterfaceType = 2
	// IETFInterfaces_InterfaceType_aal5 corresponds to the value aal5 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aal5 E_IETFInterfaces_InterfaceType = 3
	// IETFInterfaces_InterfaceType_actelisMetaLOOP corresponds to the value actelisMetaLOOP of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_actelisMetaLOOP E_IETFInterfaces_InterfaceType = 4
	// IETFInterfaces_InterfaceType_adsl corresponds to the value adsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_adsl E_IETFInterfaces_InterfaceType = 5
	// IETFInterfaces_InterfaceType_adsl2 corresponds to the value adsl2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_adsl2 E_IETFInterfaces_InterfaceType = 6
	// IETFInterfaces_InterfaceType_adsl2plus corresponds to the value adsl2plus of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_adsl2plus E_IETFInterfaces_InterfaceType = 7
	// IETFInterfaces_InterfaceType_aflane8023 corresponds to the value aflane8023 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aflane8023 E_IETFInterfaces_InterfaceType = 8
	// IETFInterfaces_InterfaceType_aflane8025 corresponds to the value aflane8025 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aflane8025 E_IETFInterfaces_InterfaceType = 9
	// IETFInterfaces_InterfaceType_aluELP corresponds to the value aluELP of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluELP E_IETFInterfaces_InterfaceType = 10
	// IETFInterfaces_InterfaceType_aluEpon corresponds to the value aluEpon of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluEpon E_IETFInterfaces_InterfaceType = 11
	// IETFInterfaces_InterfaceType_aluEponLogicalLink corresponds to the value aluEponLogicalLink of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluEponLogicalLink E_IETFInterfaces_InterfaceType = 12
	// IETFInterfaces_InterfaceType_aluEponOnu corresponds to the value aluEponOnu of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluEponOnu E_IETFInterfaces_InterfaceType = 13
	// IETFInterfaces_InterfaceType_aluEponPhysicalUni corresponds to the value aluEponPhysicalUni of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluEponPhysicalUni E_IETFInterfaces_InterfaceType = 14
	// IETFInterfaces_InterfaceType_aluGponOnu corresponds to the value aluGponOnu of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluGponOnu E_IETFInterfaces_InterfaceType = 15
	// IETFInterfaces_InterfaceType_aluGponPhysicalUni corresponds to the value aluGponPhysicalUni of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aluGponPhysicalUni E_IETFInterfaces_InterfaceType = 16
	// IETFInterfaces_InterfaceType_arap corresponds to the value arap of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_arap E_IETFInterfaces_InterfaceType = 17
	// IETFInterfaces_InterfaceType_arcnet corresponds to the value arcnet of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_arcnet E_IETFInterfaces_InterfaceType = 18
	// IETFInterfaces_InterfaceType_arcnetPlus corresponds to the value arcnetPlus of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_arcnetPlus E_IETFInterfaces_InterfaceType = 19
	// IETFInterfaces_InterfaceType_async corresponds to the value async of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_async E_IETFInterfaces_InterfaceType = 20
	// IETFInterfaces_InterfaceType_atm corresponds to the value atm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atm E_IETFInterfaces_InterfaceType = 21
	// IETFInterfaces_InterfaceType_atmDxi corresponds to the value atmDxi of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmDxi E_IETFInterfaces_InterfaceType = 22
	// IETFInterfaces_InterfaceType_atmFuni corresponds to the value atmFuni of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmFuni E_IETFInterfaces_InterfaceType = 23
	// IETFInterfaces_InterfaceType_atmIma corresponds to the value atmIma of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmIma E_IETFInterfaces_InterfaceType = 24
	// IETFInterfaces_InterfaceType_atmLogical corresponds to the value atmLogical of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmLogical E_IETFInterfaces_InterfaceType = 25
	// IETFInterfaces_InterfaceType_atmRadio corresponds to the value atmRadio of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmRadio E_IETFInterfaces_InterfaceType = 26
	// IETFInterfaces_InterfaceType_atmSubInterface corresponds to the value atmSubInterface of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmSubInterface E_IETFInterfaces_InterfaceType = 27
	// IETFInterfaces_InterfaceType_atmVciEndPt corresponds to the value atmVciEndPt of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmVciEndPt E_IETFInterfaces_InterfaceType = 28
	// IETFInterfaces_InterfaceType_atmVirtual corresponds to the value atmVirtual of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmVirtual E_IETFInterfaces_InterfaceType = 29
	// IETFInterfaces_InterfaceType_atmbond corresponds to the value atmbond of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_atmbond E_IETFInterfaces_InterfaceType = 30
	// IETFInterfaces_InterfaceType_aviciOpticalEther corresponds to the value aviciOpticalEther of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_aviciOpticalEther E_IETFInterfaces_InterfaceType = 31
	// IETFInterfaces_InterfaceType_basicISDN corresponds to the value basicISDN of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_basicISDN E_IETFInterfaces_InterfaceType = 32
	// IETFInterfaces_InterfaceType_bgppolicyaccounting corresponds to the value bgppolicyaccounting of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_bgppolicyaccounting E_IETFInterfaces_InterfaceType = 33
	// IETFInterfaces_InterfaceType_bits corresponds to the value bits of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_bits E_IETFInterfaces_InterfaceType = 34
	// IETFInterfaces_InterfaceType_bridge corresponds to the value bridge of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_bridge E_IETFInterfaces_InterfaceType = 35
	// IETFInterfaces_InterfaceType_bsc corresponds to the value bsc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_bsc E_IETFInterfaces_InterfaceType = 36
	// IETFInterfaces_InterfaceType_cableDownstreamRfPort corresponds to the value cableDownstreamRfPort of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_cableDownstreamRfPort E_IETFInterfaces_InterfaceType = 37
	// IETFInterfaces_InterfaceType_capwapDot11Bss corresponds to the value capwapDot11Bss of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_capwapDot11Bss E_IETFInterfaces_InterfaceType = 38
	// IETFInterfaces_InterfaceType_capwapDot11Profile corresponds to the value capwapDot11Profile of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_capwapDot11Profile E_IETFInterfaces_InterfaceType = 39
	// IETFInterfaces_InterfaceType_capwapWtpVirtualRadio corresponds to the value capwapWtpVirtualRadio of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_capwapWtpVirtualRadio E_IETFInterfaces_InterfaceType = 40
	// IETFInterfaces_InterfaceType_cblVectaStar corresponds to the value cblVectaStar of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_cblVectaStar E_IETFInterfaces_InterfaceType = 41
	// IETFInterfaces_InterfaceType_cctEmul corresponds to the value cctEmul of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_cctEmul E_IETFInterfaces_InterfaceType = 42
	// IETFInterfaces_InterfaceType_ces corresponds to the value ces of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ces E_IETFInterfaces_InterfaceType = 43
	// IETFInterfaces_InterfaceType_channel corresponds to the value channel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_channel E_IETFInterfaces_InterfaceType = 44
	// IETFInterfaces_InterfaceType_ciscoISLvlan corresponds to the value ciscoISLvlan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ciscoISLvlan E_IETFInterfaces_InterfaceType = 45
	// IETFInterfaces_InterfaceType_cnr corresponds to the value cnr of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_cnr E_IETFInterfaces_InterfaceType = 46
	// IETFInterfaces_InterfaceType_coffee corresponds to the value coffee of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_coffee E_IETFInterfaces_InterfaceType = 47
	// IETFInterfaces_InterfaceType_compositeLink corresponds to the value compositeLink of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_compositeLink E_IETFInterfaces_InterfaceType = 48
	// IETFInterfaces_InterfaceType_dcn corresponds to the value dcn of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dcn E_IETFInterfaces_InterfaceType = 49
	// IETFInterfaces_InterfaceType_ddnX25 corresponds to the value ddnX25 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ddnX25 E_IETFInterfaces_InterfaceType = 50
	// IETFInterfaces_InterfaceType_digitalPowerline corresponds to the value digitalPowerline of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_digitalPowerline E_IETFInterfaces_InterfaceType = 51
	// IETFInterfaces_InterfaceType_digitalWrapperOverheadChannel corresponds to the value digitalWrapperOverheadChannel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_digitalWrapperOverheadChannel E_IETFInterfaces_InterfaceType = 52
	// IETFInterfaces_InterfaceType_dlsw corresponds to the value dlsw of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dlsw E_IETFInterfaces_InterfaceType = 53
	// IETFInterfaces_InterfaceType_docsCableDownstream corresponds to the value docsCableDownstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableDownstream E_IETFInterfaces_InterfaceType = 54
	// IETFInterfaces_InterfaceType_docsCableMCmtsDownstream corresponds to the value docsCableMCmtsDownstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableMCmtsDownstream E_IETFInterfaces_InterfaceType = 55
	// IETFInterfaces_InterfaceType_docsCableMaclayer corresponds to the value docsCableMaclayer of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableMaclayer E_IETFInterfaces_InterfaceType = 56
	// IETFInterfaces_InterfaceType_docsCableUpstream corresponds to the value docsCableUpstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableUpstream E_IETFInterfaces_InterfaceType = 57
	// IETFInterfaces_InterfaceType_docsCableUpstreamChannel corresponds to the value docsCableUpstreamChannel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableUpstreamChannel E_IETFInterfaces_InterfaceType = 58
	// IETFInterfaces_InterfaceType_docsCableUpstreamRfPort corresponds to the value docsCableUpstreamRfPort of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_docsCableUpstreamRfPort E_IETFInterfaces_InterfaceType = 59
	// IETFInterfaces_InterfaceType_ds0 corresponds to the value ds0 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ds0 E_IETFInterfaces_InterfaceType = 60
	// IETFInterfaces_InterfaceType_ds0Bundle corresponds to the value ds0Bundle of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ds0Bundle E_IETFInterfaces_InterfaceType = 61
	// IETFInterfaces_InterfaceType_ds1 corresponds to the value ds1 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ds1 E_IETFInterfaces_InterfaceType = 62
	// IETFInterfaces_InterfaceType_ds1FDL corresponds to the value ds1FDL of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ds1FDL E_IETFInterfaces_InterfaceType = 63
	// IETFInterfaces_InterfaceType_ds3 corresponds to the value ds3 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ds3 E_IETFInterfaces_InterfaceType = 64
	// IETFInterfaces_InterfaceType_dtm corresponds to the value dtm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dtm E_IETFInterfaces_InterfaceType = 65
	// IETFInterfaces_InterfaceType_dvbAsiIn corresponds to the value dvbAsiIn of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbAsiIn E_IETFInterfaces_InterfaceType = 66
	// IETFInterfaces_InterfaceType_dvbAsiOut corresponds to the value dvbAsiOut of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbAsiOut E_IETFInterfaces_InterfaceType = 67
	// IETFInterfaces_InterfaceType_dvbRccDownstream corresponds to the value dvbRccDownstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbRccDownstream E_IETFInterfaces_InterfaceType = 68
	// IETFInterfaces_InterfaceType_dvbRccMacLayer corresponds to the value dvbRccMacLayer of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbRccMacLayer E_IETFInterfaces_InterfaceType = 69
	// IETFInterfaces_InterfaceType_dvbRccUpstream corresponds to the value dvbRccUpstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbRccUpstream E_IETFInterfaces_InterfaceType = 70
	// IETFInterfaces_InterfaceType_dvbRcsMacLayer corresponds to the value dvbRcsMacLayer of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbRcsMacLayer E_IETFInterfaces_InterfaceType = 71
	// IETFInterfaces_InterfaceType_dvbRcsTdma corresponds to the value dvbRcsTdma of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbRcsTdma E_IETFInterfaces_InterfaceType = 72
	// IETFInterfaces_InterfaceType_dvbTdm corresponds to the value dvbTdm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_dvbTdm E_IETFInterfaces_InterfaceType = 73
	// IETFInterfaces_InterfaceType_e1 corresponds to the value e1 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_e1 E_IETFInterfaces_InterfaceType = 74
	// IETFInterfaces_InterfaceType_econet corresponds to the value econet of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_econet E_IETFInterfaces_InterfaceType = 75
	// IETFInterfaces_InterfaceType_eon corresponds to the value eon of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_eon E_IETFInterfaces_InterfaceType = 76
	// IETFInterfaces_InterfaceType_eplrs corresponds to the value eplrs of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_eplrs E_IETFInterfaces_InterfaceType = 77
	// IETFInterfaces_InterfaceType_escon corresponds to the value escon of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_escon E_IETFInterfaces_InterfaceType = 78
	// IETFInterfaces_InterfaceType_ethernet3Mbit corresponds to the value ethernet3Mbit of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ethernet3Mbit E_IETFInterfaces_InterfaceType = 79
	// IETFInterfaces_InterfaceType_ethernetCsmacd corresponds to the value ethernetCsmacd of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ethernetCsmacd E_IETFInterfaces_InterfaceType = 80
	// IETFInterfaces_InterfaceType_fast corresponds to the value fast of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fast E_IETFInterfaces_InterfaceType = 81
	// IETFInterfaces_InterfaceType_fastEther corresponds to the value fastEther of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fastEther E_IETFInterfaces_InterfaceType = 82
	// IETFInterfaces_InterfaceType_fastEtherFX corresponds to the value fastEtherFX of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fastEtherFX E_IETFInterfaces_InterfaceType = 83
	// IETFInterfaces_InterfaceType_fcipLink corresponds to the value fcipLink of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fcipLink E_IETFInterfaces_InterfaceType = 84
	// IETFInterfaces_InterfaceType_fddi corresponds to the value fddi of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fddi E_IETFInterfaces_InterfaceType = 85
	// IETFInterfaces_InterfaceType_fibreChannel corresponds to the value fibreChannel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_fibreChannel E_IETFInterfaces_InterfaceType = 86
	// IETFInterfaces_InterfaceType_frDlciEndPt corresponds to the value frDlciEndPt of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frDlciEndPt E_IETFInterfaces_InterfaceType = 87
	// IETFInterfaces_InterfaceType_frForward corresponds to the value frForward of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frForward E_IETFInterfaces_InterfaceType = 88
	// IETFInterfaces_InterfaceType_frameRelay corresponds to the value frameRelay of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frameRelay E_IETFInterfaces_InterfaceType = 89
	// IETFInterfaces_InterfaceType_frameRelayInterconnect corresponds to the value frameRelayInterconnect of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frameRelayInterconnect E_IETFInterfaces_InterfaceType = 90
	// IETFInterfaces_InterfaceType_frameRelayMPI corresponds to the value frameRelayMPI of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frameRelayMPI E_IETFInterfaces_InterfaceType = 91
	// IETFInterfaces_InterfaceType_frameRelayService corresponds to the value frameRelayService of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frameRelayService E_IETFInterfaces_InterfaceType = 92
	// IETFInterfaces_InterfaceType_frf16MfrBundle corresponds to the value frf16MfrBundle of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_frf16MfrBundle E_IETFInterfaces_InterfaceType = 93
	// IETFInterfaces_InterfaceType_g703at2mb corresponds to the value g703at2mb of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_g703at2mb E_IETFInterfaces_InterfaceType = 94
	// IETFInterfaces_InterfaceType_g703at64k corresponds to the value g703at64k of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_g703at64k E_IETFInterfaces_InterfaceType = 95
	// IETFInterfaces_InterfaceType_g9981 corresponds to the value g9981 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_g9981 E_IETFInterfaces_InterfaceType = 96
	// IETFInterfaces_InterfaceType_g9982 corresponds to the value g9982 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_g9982 E_IETFInterfaces_InterfaceType = 97
	// IETFInterfaces_InterfaceType_g9983 corresponds to the value g9983 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_g9983 E_IETFInterfaces_InterfaceType = 98
	// IETFInterfaces_InterfaceType_gfp corresponds to the value gfp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gfp E_IETFInterfaces_InterfaceType = 99
	// IETFInterfaces_InterfaceType_gigabitEthernet corresponds to the value gigabitEthernet of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gigabitEthernet E_IETFInterfaces_InterfaceType = 100
	// IETFInterfaces_InterfaceType_gpon corresponds to the value gpon of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gpon E_IETFInterfaces_InterfaceType = 101
	// IETFInterfaces_InterfaceType_gr303IDT corresponds to the value gr303IDT of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gr303IDT E_IETFInterfaces_InterfaceType = 102
	// IETFInterfaces_InterfaceType_gr303RDT corresponds to the value gr303RDT of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gr303RDT E_IETFInterfaces_InterfaceType = 103
	// IETFInterfaces_InterfaceType_gtp corresponds to the value gtp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_gtp E_IETFInterfaces_InterfaceType = 104
	// IETFInterfaces_InterfaceType_h323Gatekeeper corresponds to the value h323Gatekeeper of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_h323Gatekeeper E_IETFInterfaces_InterfaceType = 105
	// IETFInterfaces_InterfaceType_h323Proxy corresponds to the value h323Proxy of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_h323Proxy E_IETFInterfaces_InterfaceType = 106
	// IETFInterfaces_InterfaceType_hdh1822 corresponds to the value hdh1822 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hdh1822 E_IETFInterfaces_InterfaceType = 107
	// IETFInterfaces_InterfaceType_hdlc corresponds to the value hdlc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hdlc E_IETFInterfaces_InterfaceType = 108
	// IETFInterfaces_InterfaceType_hdsl2 corresponds to the value hdsl2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hdsl2 E_IETFInterfaces_InterfaceType = 109
	// IETFInterfaces_InterfaceType_hiperlan2 corresponds to the value hiperlan2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hiperlan2 E_IETFInterfaces_InterfaceType = 110
	// IETFInterfaces_InterfaceType_hippi corresponds to the value hippi of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hippi E_IETFInterfaces_InterfaceType = 111
	// IETFInterfaces_InterfaceType_hippiInterface corresponds to the value hippiInterface of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hippiInterface E_IETFInterfaces_InterfaceType = 112
	// IETFInterfaces_InterfaceType_homepna corresponds to the value homepna of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_homepna E_IETFInterfaces_InterfaceType = 113
	// IETFInterfaces_InterfaceType_hostPad corresponds to the value hostPad of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hostPad E_IETFInterfaces_InterfaceType = 114
	// IETFInterfaces_InterfaceType_hssi corresponds to the value hssi of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hssi E_IETFInterfaces_InterfaceType = 115
	// IETFInterfaces_InterfaceType_hyperchannel corresponds to the value hyperchannel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_hyperchannel E_IETFInterfaces_InterfaceType = 116
	// IETFInterfaces_InterfaceType_iana_interface_type corresponds to the value iana_interface_type of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iana_interface_type E_IETFInterfaces_InterfaceType = 117
	// IETFInterfaces_InterfaceType_ibm370parChan corresponds to the value ibm370parChan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ibm370parChan E_IETFInterfaces_InterfaceType = 118
	// IETFInterfaces_InterfaceType_idsl corresponds to the value idsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_idsl E_IETFInterfaces_InterfaceType = 119
	// IETFInterfaces_InterfaceType_ieee1394 corresponds to the value ieee1394 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ieee1394 E_IETFInterfaces_InterfaceType = 120
	// IETFInterfaces_InterfaceType_ieee80211 corresponds to the value ieee80211 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ieee80211 E_IETFInterfaces_InterfaceType = 121
	// IETFInterfaces_InterfaceType_ieee80212 corresponds to the value ieee80212 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ieee80212 E_IETFInterfaces_InterfaceType = 122
	// IETFInterfaces_InterfaceType_ieee802154 corresponds to the value ieee802154 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ieee802154 E_IETFInterfaces_InterfaceType = 123
	// IETFInterfaces_InterfaceType_ieee80216WMAN corresponds to the value ieee80216WMAN of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ieee80216WMAN E_IETFInterfaces_InterfaceType = 124
	// IETFInterfaces_InterfaceType_ieee8023adLag corresponds to the value ieee8023adLag of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ieee8023adLag E_IETFInterfaces_InterfaceType = 125
	// IETFInterfaces_InterfaceType_if_gsn corresponds to the value if_gsn of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_if_gsn E_IETFInterfaces_InterfaceType = 126
	// IETFInterfaces_InterfaceType_ifPwType corresponds to the value ifPwType of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ifPwType E_IETFInterfaces_InterfaceType = 127
	// IETFInterfaces_InterfaceType_ifVfiType corresponds to the value ifVfiType of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ifVfiType E_IETFInterfaces_InterfaceType = 128
	// IETFInterfaces_InterfaceType_ilan corresponds to the value ilan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ilan E_IETFInterfaces_InterfaceType = 129
	// IETFInterfaces_InterfaceType_imt corresponds to the value imt of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_imt E_IETFInterfaces_InterfaceType = 130
	// IETFInterfaces_InterfaceType_infiniband corresponds to the value infiniband of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_infiniband E_IETFInterfaces_InterfaceType = 131
	// IETFInterfaces_InterfaceType_interleave corresponds to the value interleave of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_interleave E_IETFInterfaces_InterfaceType = 132
	// IETFInterfaces_InterfaceType_ip corresponds to the value ip of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ip E_IETFInterfaces_InterfaceType = 133
	// IETFInterfaces_InterfaceType_ipForward corresponds to the value ipForward of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ipForward E_IETFInterfaces_InterfaceType = 134
	// IETFInterfaces_InterfaceType_ipOverAtm corresponds to the value ipOverAtm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ipOverAtm E_IETFInterfaces_InterfaceType = 135
	// IETFInterfaces_InterfaceType_ipOverCdlc corresponds to the value ipOverCdlc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ipOverCdlc E_IETFInterfaces_InterfaceType = 136
	// IETFInterfaces_InterfaceType_ipOverClaw corresponds to the value ipOverClaw of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ipOverClaw E_IETFInterfaces_InterfaceType = 137
	// IETFInterfaces_InterfaceType_ipSwitch corresponds to the value ipSwitch of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ipSwitch E_IETFInterfaces_InterfaceType = 138
	// IETFInterfaces_InterfaceType_isdn corresponds to the value isdn of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_isdn E_IETFInterfaces_InterfaceType = 139
	// IETFInterfaces_InterfaceType_isdns corresponds to the value isdns of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_isdns E_IETFInterfaces_InterfaceType = 140
	// IETFInterfaces_InterfaceType_isdnu corresponds to the value isdnu of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_isdnu E_IETFInterfaces_InterfaceType = 141
	// IETFInterfaces_InterfaceType_iso88022llc corresponds to the value iso88022llc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88022llc E_IETFInterfaces_InterfaceType = 142
	// IETFInterfaces_InterfaceType_iso88023Csmacd corresponds to the value iso88023Csmacd of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88023Csmacd E_IETFInterfaces_InterfaceType = 143
	// IETFInterfaces_InterfaceType_iso88024TokenBus corresponds to the value iso88024TokenBus of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88024TokenBus E_IETFInterfaces_InterfaceType = 144
	// IETFInterfaces_InterfaceType_iso88025CRFPInt corresponds to the value iso88025CRFPInt of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88025CRFPInt E_IETFInterfaces_InterfaceType = 145
	// IETFInterfaces_InterfaceType_iso88025Dtr corresponds to the value iso88025Dtr of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88025Dtr E_IETFInterfaces_InterfaceType = 146
	// IETFInterfaces_InterfaceType_iso88025Fiber corresponds to the value iso88025Fiber of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88025Fiber E_IETFInterfaces_InterfaceType = 147
	// IETFInterfaces_InterfaceType_iso88025TokenRing corresponds to the value iso88025TokenRing of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88025TokenRing E_IETFInterfaces_InterfaceType = 148
	// IETFInterfaces_InterfaceType_iso88026Man corresponds to the value iso88026Man of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_iso88026Man E_IETFInterfaces_InterfaceType = 149
	// IETFInterfaces_InterfaceType_isup corresponds to the value isup of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_isup E_IETFInterfaces_InterfaceType = 150
	// IETFInterfaces_InterfaceType_l2vlan corresponds to the value l2vlan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_l2vlan E_IETFInterfaces_InterfaceType = 151
	// IETFInterfaces_InterfaceType_l3ipvlan corresponds to the value l3ipvlan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_l3ipvlan E_IETFInterfaces_InterfaceType = 152
	// IETFInterfaces_InterfaceType_l3ipxvlan corresponds to the value l3ipxvlan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_l3ipxvlan E_IETFInterfaces_InterfaceType = 153
	// IETFInterfaces_InterfaceType_lapb corresponds to the value lapb of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_lapb E_IETFInterfaces_InterfaceType = 154
	// IETFInterfaces_InterfaceType_lapd corresponds to the value lapd of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_lapd E_IETFInterfaces_InterfaceType = 155
	// IETFInterfaces_InterfaceType_lapf corresponds to the value lapf of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_lapf E_IETFInterfaces_InterfaceType = 156
	// IETFInterfaces_InterfaceType_linegroup corresponds to the value linegroup of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_linegroup E_IETFInterfaces_InterfaceType = 157
	// IETFInterfaces_InterfaceType_lmp corresponds to the value lmp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_lmp E_IETFInterfaces_InterfaceType = 158
	// IETFInterfaces_InterfaceType_localTalk corresponds to the value localTalk of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_localTalk E_IETFInterfaces_InterfaceType = 159
	// IETFInterfaces_InterfaceType_macSecControlledIF corresponds to the value macSecControlledIF of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_macSecControlledIF E_IETFInterfaces_InterfaceType = 160
	// IETFInterfaces_InterfaceType_macSecUncontrolledIF corresponds to the value macSecUncontrolledIF of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_macSecUncontrolledIF E_IETFInterfaces_InterfaceType = 161
	// IETFInterfaces_InterfaceType_mediaMailOverIp corresponds to the value mediaMailOverIp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mediaMailOverIp E_IETFInterfaces_InterfaceType = 162
	// IETFInterfaces_InterfaceType_mfSigLink corresponds to the value mfSigLink of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mfSigLink E_IETFInterfaces_InterfaceType = 163
	// IETFInterfaces_InterfaceType_miox25 corresponds to the value miox25 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_miox25 E_IETFInterfaces_InterfaceType = 164
	// IETFInterfaces_InterfaceType_mocaVersion1 corresponds to the value mocaVersion1 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mocaVersion1 E_IETFInterfaces_InterfaceType = 165
	// IETFInterfaces_InterfaceType_modem corresponds to the value modem of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_modem E_IETFInterfaces_InterfaceType = 166
	// IETFInterfaces_InterfaceType_mpc corresponds to the value mpc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mpc E_IETFInterfaces_InterfaceType = 167
	// IETFInterfaces_InterfaceType_mpegTransport corresponds to the value mpegTransport of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mpegTransport E_IETFInterfaces_InterfaceType = 168
	// IETFInterfaces_InterfaceType_mpls corresponds to the value mpls of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mpls E_IETFInterfaces_InterfaceType = 169
	// IETFInterfaces_InterfaceType_mplsTunnel corresponds to the value mplsTunnel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mplsTunnel E_IETFInterfaces_InterfaceType = 170
	// IETFInterfaces_InterfaceType_msdsl corresponds to the value msdsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_msdsl E_IETFInterfaces_InterfaceType = 171
	// IETFInterfaces_InterfaceType_mvl corresponds to the value mvl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_mvl E_IETFInterfaces_InterfaceType = 172
	// IETFInterfaces_InterfaceType_myrinet corresponds to the value myrinet of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_myrinet E_IETFInterfaces_InterfaceType = 173
	// IETFInterfaces_InterfaceType_nfas corresponds to the value nfas of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_nfas E_IETFInterfaces_InterfaceType = 174
	// IETFInterfaces_InterfaceType_nsip corresponds to the value nsip of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_nsip E_IETFInterfaces_InterfaceType = 175
	// IETFInterfaces_InterfaceType_opticalChannel corresponds to the value opticalChannel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_opticalChannel E_IETFInterfaces_InterfaceType = 176
	// IETFInterfaces_InterfaceType_opticalChannelGroup corresponds to the value opticalChannelGroup of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_opticalChannelGroup E_IETFInterfaces_InterfaceType = 177
	// IETFInterfaces_InterfaceType_opticalTransport corresponds to the value opticalTransport of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_opticalTransport E_IETFInterfaces_InterfaceType = 178
	// IETFInterfaces_InterfaceType_other corresponds to the value other of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_other E_IETFInterfaces_InterfaceType = 179
	// IETFInterfaces_InterfaceType_otnOdu corresponds to the value otnOdu of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_otnOdu E_IETFInterfaces_InterfaceType = 180
	// IETFInterfaces_InterfaceType_otnOtu corresponds to the value otnOtu of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_otnOtu E_IETFInterfaces_InterfaceType = 181
	// IETFInterfaces_InterfaceType_para corresponds to the value para of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_para E_IETFInterfaces_InterfaceType = 182
	// IETFInterfaces_InterfaceType_pdnEtherLoop1 corresponds to the value pdnEtherLoop1 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pdnEtherLoop1 E_IETFInterfaces_InterfaceType = 183
	// IETFInterfaces_InterfaceType_pdnEtherLoop2 corresponds to the value pdnEtherLoop2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pdnEtherLoop2 E_IETFInterfaces_InterfaceType = 184
	// IETFInterfaces_InterfaceType_pip corresponds to the value pip of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pip E_IETFInterfaces_InterfaceType = 185
	// IETFInterfaces_InterfaceType_plc corresponds to the value plc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_plc E_IETFInterfaces_InterfaceType = 186
	// IETFInterfaces_InterfaceType_pon155 corresponds to the value pon155 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pon155 E_IETFInterfaces_InterfaceType = 187
	// IETFInterfaces_InterfaceType_pon622 corresponds to the value pon622 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pon622 E_IETFInterfaces_InterfaceType = 188
	// IETFInterfaces_InterfaceType_pos corresponds to the value pos of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pos E_IETFInterfaces_InterfaceType = 189
	// IETFInterfaces_InterfaceType_ppp corresponds to the value ppp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ppp E_IETFInterfaces_InterfaceType = 190
	// IETFInterfaces_InterfaceType_pppMultilinkBundle corresponds to the value pppMultilinkBundle of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_pppMultilinkBundle E_IETFInterfaces_InterfaceType = 191
	// IETFInterfaces_InterfaceType_primaryISDN corresponds to the value primaryISDN of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_primaryISDN E_IETFInterfaces_InterfaceType = 192
	// IETFInterfaces_InterfaceType_propAtm corresponds to the value propAtm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propAtm E_IETFInterfaces_InterfaceType = 193
	// IETFInterfaces_InterfaceType_propBWAp2Mp corresponds to the value propBWAp2Mp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propBWAp2Mp E_IETFInterfaces_InterfaceType = 194
	// IETFInterfaces_InterfaceType_propCnls corresponds to the value propCnls of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propCnls E_IETFInterfaces_InterfaceType = 195
	// IETFInterfaces_InterfaceType_propDocsWirelessDownstream corresponds to the value propDocsWirelessDownstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propDocsWirelessDownstream E_IETFInterfaces_InterfaceType = 196
	// IETFInterfaces_InterfaceType_propDocsWirelessMaclayer corresponds to the value propDocsWirelessMaclayer of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propDocsWirelessMaclayer E_IETFInterfaces_InterfaceType = 197
	// IETFInterfaces_InterfaceType_propDocsWirelessUpstream corresponds to the value propDocsWirelessUpstream of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propDocsWirelessUpstream E_IETFInterfaces_InterfaceType = 198
	// IETFInterfaces_InterfaceType_propMultiplexor corresponds to the value propMultiplexor of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propMultiplexor E_IETFInterfaces_InterfaceType = 199
	// IETFInterfaces_InterfaceType_propPointToPointSerial corresponds to the value propPointToPointSerial of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propPointToPointSerial E_IETFInterfaces_InterfaceType = 200
	// IETFInterfaces_InterfaceType_propVirtual corresponds to the value propVirtual of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propVirtual E_IETFInterfaces_InterfaceType = 201
	// IETFInterfaces_InterfaceType_propWirelessP2P corresponds to the value propWirelessP2P of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_propWirelessP2P E_IETFInterfaces_InterfaceType = 202
	// IETFInterfaces_InterfaceType_proteon10Mbit corresponds to the value proteon10Mbit of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_proteon10Mbit E_IETFInterfaces_InterfaceType = 203
	// IETFInterfaces_InterfaceType_proteon80Mbit corresponds to the value proteon80Mbit of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_proteon80Mbit E_IETFInterfaces_InterfaceType = 204
	// IETFInterfaces_InterfaceType_q2931 corresponds to the value q2931 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_q2931 E_IETFInterfaces_InterfaceType = 205
	// IETFInterfaces_InterfaceType_qam corresponds to the value qam of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_qam E_IETFInterfaces_InterfaceType = 206
	// IETFInterfaces_InterfaceType_qllc corresponds to the value qllc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_qllc E_IETFInterfaces_InterfaceType = 207
	// IETFInterfaces_InterfaceType_radioMAC corresponds to the value radioMAC of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_radioMAC E_IETFInterfaces_InterfaceType = 208
	// IETFInterfaces_InterfaceType_radsl corresponds to the value radsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_radsl E_IETFInterfaces_InterfaceType = 209
	// IETFInterfaces_InterfaceType_reachDSL corresponds to the value reachDSL of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_reachDSL E_IETFInterfaces_InterfaceType = 210
	// IETFInterfaces_InterfaceType_regular1822 corresponds to the value regular1822 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_regular1822 E_IETFInterfaces_InterfaceType = 211
	// IETFInterfaces_InterfaceType_rfc1483 corresponds to the value rfc1483 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_rfc1483 E_IETFInterfaces_InterfaceType = 212
	// IETFInterfaces_InterfaceType_rfc877x25 corresponds to the value rfc877x25 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_rfc877x25 E_IETFInterfaces_InterfaceType = 213
	// IETFInterfaces_InterfaceType_rpr corresponds to the value rpr of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_rpr E_IETFInterfaces_InterfaceType = 214
	// IETFInterfaces_InterfaceType_rs232 corresponds to the value rs232 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_rs232 E_IETFInterfaces_InterfaceType = 215
	// IETFInterfaces_InterfaceType_rsrb corresponds to the value rsrb of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_rsrb E_IETFInterfaces_InterfaceType = 216
	// IETFInterfaces_InterfaceType_sdlc corresponds to the value sdlc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sdlc E_IETFInterfaces_InterfaceType = 217
	// IETFInterfaces_InterfaceType_sdsl corresponds to the value sdsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sdsl E_IETFInterfaces_InterfaceType = 218
	// IETFInterfaces_InterfaceType_shdsl corresponds to the value shdsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_shdsl E_IETFInterfaces_InterfaceType = 219
	// IETFInterfaces_InterfaceType_sip corresponds to the value sip of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sip E_IETFInterfaces_InterfaceType = 220
	// IETFInterfaces_InterfaceType_sipSig corresponds to the value sipSig of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sipSig E_IETFInterfaces_InterfaceType = 221
	// IETFInterfaces_InterfaceType_sipTg corresponds to the value sipTg of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sipTg E_IETFInterfaces_InterfaceType = 222
	// IETFInterfaces_InterfaceType_sixToFour corresponds to the value sixToFour of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sixToFour E_IETFInterfaces_InterfaceType = 223
	// IETFInterfaces_InterfaceType_slip corresponds to the value slip of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_slip E_IETFInterfaces_InterfaceType = 224
	// IETFInterfaces_InterfaceType_smdsDxi corresponds to the value smdsDxi of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_smdsDxi E_IETFInterfaces_InterfaceType = 225
	// IETFInterfaces_InterfaceType_smdsIcip corresponds to the value smdsIcip of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_smdsIcip E_IETFInterfaces_InterfaceType = 226
	// IETFInterfaces_InterfaceType_softwareLoopback corresponds to the value softwareLoopback of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_softwareLoopback E_IETFInterfaces_InterfaceType = 227
	// IETFInterfaces_InterfaceType_sonet corresponds to the value sonet of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sonet E_IETFInterfaces_InterfaceType = 228
	// IETFInterfaces_InterfaceType_sonetOverheadChannel corresponds to the value sonetOverheadChannel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sonetOverheadChannel E_IETFInterfaces_InterfaceType = 229
	// IETFInterfaces_InterfaceType_sonetPath corresponds to the value sonetPath of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sonetPath E_IETFInterfaces_InterfaceType = 230
	// IETFInterfaces_InterfaceType_sonetVT corresponds to the value sonetVT of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_sonetVT E_IETFInterfaces_InterfaceType = 231
	// IETFInterfaces_InterfaceType_srp corresponds to the value srp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_srp E_IETFInterfaces_InterfaceType = 232
	// IETFInterfaces_InterfaceType_ss7SigLink corresponds to the value ss7SigLink of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ss7SigLink E_IETFInterfaces_InterfaceType = 233
	// IETFInterfaces_InterfaceType_stackToStack corresponds to the value stackToStack of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_stackToStack E_IETFInterfaces_InterfaceType = 234
	// IETFInterfaces_InterfaceType_starLan corresponds to the value starLan of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_starLan E_IETFInterfaces_InterfaceType = 235
	// IETFInterfaces_InterfaceType_tdlc corresponds to the value tdlc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_tdlc E_IETFInterfaces_InterfaceType = 236
	// IETFInterfaces_InterfaceType_teLink corresponds to the value teLink of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_teLink E_IETFInterfaces_InterfaceType = 237
	// IETFInterfaces_InterfaceType_termPad corresponds to the value termPad of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_termPad E_IETFInterfaces_InterfaceType = 238
	// IETFInterfaces_InterfaceType_tr008 corresponds to the value tr008 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_tr008 E_IETFInterfaces_InterfaceType = 239
	// IETFInterfaces_InterfaceType_transpHdlc corresponds to the value transpHdlc of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_transpHdlc E_IETFInterfaces_InterfaceType = 240
	// IETFInterfaces_InterfaceType_tunnel corresponds to the value tunnel of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_tunnel E_IETFInterfaces_InterfaceType = 241
	// IETFInterfaces_InterfaceType_ultra corresponds to the value ultra of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_ultra E_IETFInterfaces_InterfaceType = 242
	// IETFInterfaces_InterfaceType_usb corresponds to the value usb of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_usb E_IETFInterfaces_InterfaceType = 243
	// IETFInterfaces_InterfaceType_v11 corresponds to the value v11 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_v11 E_IETFInterfaces_InterfaceType = 244
	// IETFInterfaces_InterfaceType_v35 corresponds to the value v35 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_v35 E_IETFInterfaces_InterfaceType = 245
	// IETFInterfaces_InterfaceType_v36 corresponds to the value v36 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_v36 E_IETFInterfaces_InterfaceType = 246
	// IETFInterfaces_InterfaceType_v37 corresponds to the value v37 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_v37 E_IETFInterfaces_InterfaceType = 247
	// IETFInterfaces_InterfaceType_vdsl corresponds to the value vdsl of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_vdsl E_IETFInterfaces_InterfaceType = 248
	// IETFInterfaces_InterfaceType_vdsl2 corresponds to the value vdsl2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_vdsl2 E_IETFInterfaces_InterfaceType = 249
	// IETFInterfaces_InterfaceType_virtualIpAddress corresponds to the value virtualIpAddress of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_virtualIpAddress E_IETFInterfaces_InterfaceType = 250
	// IETFInterfaces_InterfaceType_virtualTg corresponds to the value virtualTg of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_virtualTg E_IETFInterfaces_InterfaceType = 251
	// IETFInterfaces_InterfaceType_vmwareNicTeam corresponds to the value vmwareNicTeam of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_vmwareNicTeam E_IETFInterfaces_InterfaceType = 252
	// IETFInterfaces_InterfaceType_vmwareVirtualNic corresponds to the value vmwareVirtualNic of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_vmwareVirtualNic E_IETFInterfaces_InterfaceType = 253
	// IETFInterfaces_InterfaceType_voiceDID corresponds to the value voiceDID of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceDID E_IETFInterfaces_InterfaceType = 254
	// IETFInterfaces_InterfaceType_voiceEBS corresponds to the value voiceEBS of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceEBS E_IETFInterfaces_InterfaceType = 255
	// IETFInterfaces_InterfaceType_voiceEM corresponds to the value voiceEM of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceEM E_IETFInterfaces_InterfaceType = 256
	// IETFInterfaces_InterfaceType_voiceEMFGD corresponds to the value voiceEMFGD of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceEMFGD E_IETFInterfaces_InterfaceType = 257
	// IETFInterfaces_InterfaceType_voiceEncap corresponds to the value voiceEncap of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceEncap E_IETFInterfaces_InterfaceType = 258
	// IETFInterfaces_InterfaceType_voiceFGDEANA corresponds to the value voiceFGDEANA of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceFGDEANA E_IETFInterfaces_InterfaceType = 259
	// IETFInterfaces_InterfaceType_voiceFGDOS corresponds to the value voiceFGDOS of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceFGDOS E_IETFInterfaces_InterfaceType = 260
	// IETFInterfaces_InterfaceType_voiceFXO corresponds to the value voiceFXO of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceFXO E_IETFInterfaces_InterfaceType = 261
	// IETFInterfaces_InterfaceType_voiceFXS corresponds to the value voiceFXS of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceFXS E_IETFInterfaces_InterfaceType = 262
	// IETFInterfaces_InterfaceType_voiceOverAtm corresponds to the value voiceOverAtm of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceOverAtm E_IETFInterfaces_InterfaceType = 263
	// IETFInterfaces_InterfaceType_voiceOverCable corresponds to the value voiceOverCable of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceOverCable E_IETFInterfaces_InterfaceType = 264
	// IETFInterfaces_InterfaceType_voiceOverFrameRelay corresponds to the value voiceOverFrameRelay of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceOverFrameRelay E_IETFInterfaces_InterfaceType = 265
	// IETFInterfaces_InterfaceType_voiceOverIp corresponds to the value voiceOverIp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_voiceOverIp E_IETFInterfaces_InterfaceType = 266
	// IETFInterfaces_InterfaceType_wwanPP corresponds to the value wwanPP of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_wwanPP E_IETFInterfaces_InterfaceType = 267
	// IETFInterfaces_InterfaceType_wwanPP2 corresponds to the value wwanPP2 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_wwanPP2 E_IETFInterfaces_InterfaceType = 268
	// IETFInterfaces_InterfaceType_x213 corresponds to the value x213 of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_x213 E_IETFInterfaces_InterfaceType = 269
	// IETFInterfaces_InterfaceType_x25huntGroup corresponds to the value x25huntGroup of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_x25huntGroup E_IETFInterfaces_InterfaceType = 270
	// IETFInterfaces_InterfaceType_x25mlp corresponds to the value x25mlp of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_x25mlp E_IETFInterfaces_InterfaceType = 271
	// IETFInterfaces_InterfaceType_x25ple corresponds to the value x25ple of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_x25ple E_IETFInterfaces_InterfaceType = 272
	// IETFInterfaces_InterfaceType_x86Laps corresponds to the value x86Laps of IETFInterfaces_InterfaceType
	IETFInterfaces_InterfaceType_x86Laps E_IETFInterfaces_InterfaceType = 273
)

// E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE. An additional value named
// OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE int64

// IsYANGGoEnum ensures that OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE.
func (E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_UNSET corresponds to the value UNSET of OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE
	OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_UNSET E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE = 0
	// OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_AAA_ACCOUNTING_EVENT_COMMAND corresponds to the value AAA_ACCOUNTING_EVENT_COMMAND of OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE
	OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_AAA_ACCOUNTING_EVENT_COMMAND E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE = 1
	// OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_AAA_ACCOUNTING_EVENT_LOGIN corresponds to the value AAA_ACCOUNTING_EVENT_LOGIN of OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE
	OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE_AAA_ACCOUNTING_EVENT_LOGIN E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE = 2
)

// E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE. An additional value named
// OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE int64

// IsYANGGoEnum ensures that OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE.
func (E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_UNSET corresponds to the value UNSET of OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
	OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_UNSET E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE = 0
	// OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_AAA_AUTHORIZATION_EVENT_COMMAND corresponds to the value AAA_AUTHORIZATION_EVENT_COMMAND of OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
	OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_AAA_AUTHORIZATION_EVENT_COMMAND E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE = 1
	// OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_AAA_AUTHORIZATION_EVENT_CONFIG corresponds to the value AAA_AUTHORIZATION_EVENT_CONFIG of OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE
	OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE_AAA_AUTHORIZATION_EVENT_CONFIG E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE = 2
)

// E_OpenconfigAaaTypes_AAA_METHOD_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigAaaTypes_AAA_METHOD_TYPE. An additional value named
// OpenconfigAaaTypes_AAA_METHOD_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAaaTypes_AAA_METHOD_TYPE int64

// IsYANGGoEnum ensures that OpenconfigAaaTypes_AAA_METHOD_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigAaaTypes_AAA_METHOD_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAaaTypes_AAA_METHOD_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAaaTypes_AAA_METHOD_TYPE.
func (E_OpenconfigAaaTypes_AAA_METHOD_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAaaTypes_AAA_METHOD_TYPE_UNSET corresponds to the value UNSET of OpenconfigAaaTypes_AAA_METHOD_TYPE
	OpenconfigAaaTypes_AAA_METHOD_TYPE_UNSET E_OpenconfigAaaTypes_AAA_METHOD_TYPE = 0
	// OpenconfigAaaTypes_AAA_METHOD_TYPE_LOCAL corresponds to the value LOCAL of OpenconfigAaaTypes_AAA_METHOD_TYPE
	OpenconfigAaaTypes_AAA_METHOD_TYPE_LOCAL E_OpenconfigAaaTypes_AAA_METHOD_TYPE = 1
	// OpenconfigAaaTypes_AAA_METHOD_TYPE_RADIUS_ALL corresponds to the value RADIUS_ALL of OpenconfigAaaTypes_AAA_METHOD_TYPE
	OpenconfigAaaTypes_AAA_METHOD_TYPE_RADIUS_ALL E_OpenconfigAaaTypes_AAA_METHOD_TYPE = 2
	// OpenconfigAaaTypes_AAA_METHOD_TYPE_TACACS_ALL corresponds to the value TACACS_ALL of OpenconfigAaaTypes_AAA_METHOD_TYPE
	OpenconfigAaaTypes_AAA_METHOD_TYPE_TACACS_ALL E_OpenconfigAaaTypes_AAA_METHOD_TYPE = 3
)

// E_OpenconfigAaaTypes_AAA_SERVER_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigAaaTypes_AAA_SERVER_TYPE. An additional value named
// OpenconfigAaaTypes_AAA_SERVER_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAaaTypes_AAA_SERVER_TYPE int64

// IsYANGGoEnum ensures that OpenconfigAaaTypes_AAA_SERVER_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigAaaTypes_AAA_SERVER_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAaaTypes_AAA_SERVER_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAaaTypes_AAA_SERVER_TYPE.
func (E_OpenconfigAaaTypes_AAA_SERVER_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAaaTypes_AAA_SERVER_TYPE_UNSET corresponds to the value UNSET of OpenconfigAaaTypes_AAA_SERVER_TYPE
	OpenconfigAaaTypes_AAA_SERVER_TYPE_UNSET E_OpenconfigAaaTypes_AAA_SERVER_TYPE = 0
	// OpenconfigAaaTypes_AAA_SERVER_TYPE_RADIUS corresponds to the value RADIUS of OpenconfigAaaTypes_AAA_SERVER_TYPE
	OpenconfigAaaTypes_AAA_SERVER_TYPE_RADIUS E_OpenconfigAaaTypes_AAA_SERVER_TYPE = 1
	// OpenconfigAaaTypes_AAA_SERVER_TYPE_TACACS corresponds to the value TACACS of OpenconfigAaaTypes_AAA_SERVER_TYPE
	OpenconfigAaaTypes_AAA_SERVER_TYPE_TACACS E_OpenconfigAaaTypes_AAA_SERVER_TYPE = 2
)

// E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES is a derived int64 type which is used to represent
// the enumerated node OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES. An additional value named
// OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES int64

// IsYANGGoEnum ensures that OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES implements the yang.GoEnum
// interface. This ensures that OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES.
func (E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES_UNSET corresponds to the value UNSET of OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
	OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES_UNSET E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES = 0
	// OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES_SYSTEM_ROLE_ADMIN corresponds to the value SYSTEM_ROLE_ADMIN of OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES
	OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES_SYSTEM_ROLE_ADMIN E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES = 1
)

// E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY is a derived int64 type which is used to represent
// the enumerated node OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY. An additional value named
// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY int64

// IsYANGGoEnum ensures that OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY implements the yang.GoEnum
// interface. This ensures that OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY.
func (E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNSET corresponds to the value UNSET of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNSET E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 0
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_CRITICAL corresponds to the value CRITICAL of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_CRITICAL E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 1
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MAJOR corresponds to the value MAJOR of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MAJOR E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 2
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MINOR corresponds to the value MINOR of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_MINOR E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 3
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNKNOWN corresponds to the value UNKNOWN of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_UNKNOWN E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 4
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_WARNING corresponds to the value WARNING of OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY_WARNING E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY = 5
)

// E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID is a derived int64 type which is used to represent
// the enumerated node OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID. An additional value named
// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID int64

// IsYANGGoEnum ensures that OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID implements the yang.GoEnum
// interface. This ensures that OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID.
func (E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_UNSET corresponds to the value UNSET of OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_UNSET E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID = 0
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_AIS corresponds to the value AIS of OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_AIS E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID = 1
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_EQPT corresponds to the value EQPT of OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_EQPT E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID = 2
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_LOS corresponds to the value LOS of OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_LOS E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID = 3
	// OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_OTS corresponds to the value OTS of OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID
	OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID_OTS E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID = 4
)

// E_OpenconfigIfEthernet_ETHERNET_SPEED is a derived int64 type which is used to represent
// the enumerated node OpenconfigIfEthernet_ETHERNET_SPEED. An additional value named
// OpenconfigIfEthernet_ETHERNET_SPEED_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigIfEthernet_ETHERNET_SPEED int64

// IsYANGGoEnum ensures that OpenconfigIfEthernet_ETHERNET_SPEED implements the yang.GoEnum
// interface. This ensures that OpenconfigIfEthernet_ETHERNET_SPEED can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigIfEthernet_ETHERNET_SPEED) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigIfEthernet_ETHERNET_SPEED.
func (E_OpenconfigIfEthernet_ETHERNET_SPEED) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigIfEthernet_ETHERNET_SPEED_UNSET corresponds to the value UNSET of OpenconfigIfEthernet_ETHERNET_SPEED
	OpenconfigIfEthernet_ETHERNET_SPEED_UNSET E_OpenconfigIfEthernet_ETHERNET_SPEED = 0
	// OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_100GB corresponds to the value SPEED_100GB of OpenconfigIfEthernet_ETHERNET_SPEED
	OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_100GB E_OpenconfigIfEthernet_ETHERNET_SPEED = 1
	// OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_100MB corresponds to the value SPEED_100MB of OpenconfigIfEthernet_ETHERNET_SPEED
	OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_100MB E_OpenconfigIfEthernet_ETHERNET_SPEED = 2
	// OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_10GB corresponds to the value SPEED_10GB of OpenconfigIfEthernet_ETHERNET_SPEED
	OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_10GB E_OpenconfigIfEthernet_ETHERNET_SPEED = 3
	// OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_10MB corresponds to the value SPEED_10MB of OpenconfigIfEthernet_ETHERNET_SPEED
	OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_10MB E_OpenconfigIfEthernet_ETHERNET_SPEED = 4
	// OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_1GB corresponds to the value SPEED_1GB of OpenconfigIfEthernet_ETHERNET_SPEED
	OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_1GB E_OpenconfigIfEthernet_ETHERNET_SPEED = 5
	// OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_2500MB corresponds to the value SPEED_2500MB of OpenconfigIfEthernet_ETHERNET_SPEED
	OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_2500MB E_OpenconfigIfEthernet_ETHERNET_SPEED = 6
	// OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_25GB corresponds to the value SPEED_25GB of OpenconfigIfEthernet_ETHERNET_SPEED
	OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_25GB E_OpenconfigIfEthernet_ETHERNET_SPEED = 7
	// OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_40GB corresponds to the value SPEED_40GB of OpenconfigIfEthernet_ETHERNET_SPEED
	OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_40GB E_OpenconfigIfEthernet_ETHERNET_SPEED = 8
	// OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_50GB corresponds to the value SPEED_50GB of OpenconfigIfEthernet_ETHERNET_SPEED
	OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_50GB E_OpenconfigIfEthernet_ETHERNET_SPEED = 9
	// OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_5GB corresponds to the value SPEED_5GB of OpenconfigIfEthernet_ETHERNET_SPEED
	OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_5GB E_OpenconfigIfEthernet_ETHERNET_SPEED = 10
	// OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_UNKNOWN corresponds to the value SPEED_UNKNOWN of OpenconfigIfEthernet_ETHERNET_SPEED
	OpenconfigIfEthernet_ETHERNET_SPEED_SPEED_UNKNOWN E_OpenconfigIfEthernet_ETHERNET_SPEED = 11
)

// E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls is a derived int64 type which is used to represent
// the enumerated node OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls. An additional value named
// OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls int64

// IsYANGGoEnum ensures that OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls implements the yang.GoEnum
// interface. This ensures that OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls.
func (E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls_UNSET corresponds to the value UNSET of OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls
	OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls_UNSET E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls = 0
	// OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls_NONE corresponds to the value NONE of OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls
	OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls_NONE E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls = 1
	// OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls_LASER_SHUTDOWN corresponds to the value LASER_SHUTDOWN of OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls
	OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls_LASER_SHUTDOWN E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls = 2
	// OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls_ETHERNET corresponds to the value ETHERNET of OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls
	OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls_ETHERNET E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls = 3
)

// E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec is a derived int64 type which is used to represent
// the enumerated node OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec. An additional value named
// OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec int64

// IsYANGGoEnum ensures that OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec implements the yang.GoEnum
// interface. This ensures that OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec.
func (E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec_UNSET corresponds to the value UNSET of OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec
	OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec_UNSET E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec = 0
	// OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec_ENABLED corresponds to the value ENABLED of OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec
	OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec_ENABLED E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec = 1
	// OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec_DISABLED corresponds to the value DISABLED of OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec
	OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec_DISABLED E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec = 2
	// OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec_AUTO corresponds to the value AUTO of OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec
	OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec_AUTO E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec = 3
)

// E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode is a derived int64 type which is used to represent
// the enumerated node OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode. An additional value named
// OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode int64

// IsYANGGoEnum ensures that OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode implements the yang.GoEnum
// interface. This ensures that OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode.
func (E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode_UNSET corresponds to the value UNSET of OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode
	OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode_UNSET E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode = 0
	// OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode_FULL corresponds to the value FULL of OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode
	OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode_FULL E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode = 1
	// OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode_HALF corresponds to the value HALF of OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode
	OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode_HALF E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode = 2
)

// E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode is a derived int64 type which is used to represent
// the enumerated node OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode. An additional value named
// OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode int64

// IsYANGGoEnum ensures that OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode implements the yang.GoEnum
// interface. This ensures that OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode) IsYANGGoEnum() {
}

// ΛMap returns the value lookup map associated with  OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode.
func (E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode_UNSET corresponds to the value UNSET of OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode
	OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode_UNSET E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode = 0
	// OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode_FULL corresponds to the value FULL of OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode
	OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode_FULL E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode = 1
	// OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode_HALF corresponds to the value HALF of OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode
	OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode_HALF E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode = 2
)

// E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus is a derived int64 type which is used to represent
// the enumerated node OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus. An additional value named
// OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus int64

// IsYANGGoEnum ensures that OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus implements the yang.GoEnum
// interface. This ensures that OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus.
func (E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_UNSET corresponds to the value UNSET of OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus
	OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_UNSET E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus = 0
	// OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_UP corresponds to the value UP of OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus
	OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_UP E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus = 1
	// OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_DOWN corresponds to the value DOWN of OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus
	OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_DOWN E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus = 2
	// OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_TESTING corresponds to the value TESTING of OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus
	OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus_TESTING E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus = 3
)

// E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus is a derived int64 type which is used to represent
// the enumerated node OpenconfigInterfaces_Interfaces_Interface_State_OperStatus. An additional value named
// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus int64

// IsYANGGoEnum ensures that OpenconfigInterfaces_Interfaces_Interface_State_OperStatus implements the yang.GoEnum
// interface. This ensures that OpenconfigInterfaces_Interfaces_Interface_State_OperStatus can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigInterfaces_Interfaces_Interface_State_OperStatus.
func (E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_UNSET corresponds to the value UNSET of OpenconfigInterfaces_Interfaces_Interface_State_OperStatus
	OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_UNSET E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus = 0
	// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_UP corresponds to the value UP of OpenconfigInterfaces_Interfaces_Interface_State_OperStatus
	OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_UP E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus = 2
	// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_DOWN corresponds to the value DOWN of OpenconfigInterfaces_Interfaces_Interface_State_OperStatus
	OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_DOWN E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus = 3
	// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_TESTING corresponds to the value TESTING of OpenconfigInterfaces_Interfaces_Interface_State_OperStatus
	OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_TESTING E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus = 4
	// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_UNKNOWN corresponds to the value UNKNOWN of OpenconfigInterfaces_Interfaces_Interface_State_OperStatus
	OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_UNKNOWN E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus = 5
	// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_DORMANT corresponds to the value DORMANT of OpenconfigInterfaces_Interfaces_Interface_State_OperStatus
	OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_DORMANT E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus = 6
	// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_NOT_PRESENT corresponds to the value NOT_PRESENT of OpenconfigInterfaces_Interfaces_Interface_State_OperStatus
	OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_NOT_PRESENT E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus = 7
	// OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_LOWER_LAYER_DOWN corresponds to the value LOWER_LAYER_DOWN of OpenconfigInterfaces_Interfaces_Interface_State_OperStatus
	OpenconfigInterfaces_Interfaces_Interface_State_OperStatus_LOWER_LAYER_DOWN E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus = 8
)

// E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY is a derived int64 type which is used to represent
// the enumerated node OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY. An additional value named
// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY int64

// IsYANGGoEnum ensures that OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY implements the yang.GoEnum
// interface. This ensures that OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY.
func (E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_UNSET corresponds to the value UNSET of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_UNSET E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 0
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_C_VLAN corresponds to the value C_VLAN of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_C_VLAN E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 1
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_DOCSIS_CABLE_DEVICE corresponds to the value DOCSIS_CABLE_DEVICE of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_DOCSIS_CABLE_DEVICE E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 2
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_MAC_BRIDGE corresponds to the value MAC_BRIDGE of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_MAC_BRIDGE E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 3
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_OTHER corresponds to the value OTHER of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_OTHER E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 4
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_REPEATER corresponds to the value REPEATER of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_REPEATER E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 5
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_ROUTER corresponds to the value ROUTER of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_ROUTER E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 6
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_STATION_ONLY corresponds to the value STATION_ONLY of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_STATION_ONLY E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 7
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_S_VLAN corresponds to the value S_VLAN of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_S_VLAN E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 8
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_TELEPHONE corresponds to the value TELEPHONE of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_TELEPHONE E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 9
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_TWO_PORT_MAC_RELAY corresponds to the value TWO_PORT_MAC_RELAY of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_TWO_PORT_MAC_RELAY E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 10
	// OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_WLAN_ACCESS_POINT corresponds to the value WLAN_ACCESS_POINT of OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY
	OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY_WLAN_ACCESS_POINT E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY = 11
)

// E_OpenconfigLldpTypes_LLDP_TLV is a derived int64 type which is used to represent
// the enumerated node OpenconfigLldpTypes_LLDP_TLV. An additional value named
// OpenconfigLldpTypes_LLDP_TLV_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigLldpTypes_LLDP_TLV int64

// IsYANGGoEnum ensures that OpenconfigLldpTypes_LLDP_TLV implements the yang.GoEnum
// interface. This ensures that OpenconfigLldpTypes_LLDP_TLV can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigLldpTypes_LLDP_TLV) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigLldpTypes_LLDP_TLV.
func (E_OpenconfigLldpTypes_LLDP_TLV) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

const (
	// OpenconfigLldpTypes_LLDP_TLV_UNSET corresponds to the value UNSET of OpenconfigLldpTypes_LLDP_TLV
	OpenconfigLldpTypes_LLDP_TLV_UNSET E_OpenconfigLldpTypes_LLDP_TLV = 0
	// OpenconfigLldpTypes_LLDP_TLV_CHASSIS_ID corresponds to the value CHASSIS_ID of OpenconfigLldpTypes_LLDP_TLV
	OpenconfigLldpTypes_LLDP_TLV_CHASSIS_ID E_OpenconfigLldpTypes_LLDP_TLV = 1
	// OpenconfigLldpTypes_LLDP_TLV_MANAGEMENT_ADDRESS corresponds to the value MANAGEMENT_ADDRESS of OpenconfigLldpTypes_LLDP_TLV
	OpenconfigLldpTypes_LLDP_TLV_MANAGEMENT_ADDRESS E_OpenconfigLldpTypes_LLDP_TLV = 2
	// OpenconfigLldpTypes_LLDP_TLV_PORT_DESCRIPTION corresponds to the value PORT_DESCRIPTION of OpenconfigLldpTypes_LLDP_TLV
	OpenconfigLldpTypes_LLDP_TLV_PORT_DESCRIPTION E_OpenconfigLldpTypes_LLDP_TLV = 3
	// OpenconfigLldpTypes_LLDP_TLV_PORT_ID corresponds to the value PORT_ID of OpenconfigLldpTypes_LLDP_TLV
	OpenconfigLldpTypes_LLDP_TLV_PORT_ID E_OpenconfigLldpTypes_LLDP_TLV = 4
	// OpenconfigLldpTypes_LLDP_TLV_SYSTEM_CAPABILITIES corresponds to the value SYSTEM_CAPABILITIES of OpenconfigLldpTypes_LLDP_TLV
	OpenconfigLldpTypes_LLDP_TLV_SYSTEM_CAPABILITIES E_OpenconfigLldpTypes_LLDP_TLV = 5
	// OpenconfigLldpTypes_LLDP_TLV_SYSTEM_DESCRIPTION corresponds to the value SYSTEM_DESCRIPTION of OpenconfigLldpTypes_LLDP_TLV
	OpenconfigLldpTypes_LLDP_TLV_SYSTEM_DESCRIPTION E_OpenconfigLldpTypes_LLDP_TLV = 6
	// OpenconfigLldpTypes_LLDP_TLV_SYSTEM_NAME corresponds to the value SYSTEM_NAME of OpenconfigLldpTypes_LLDP_TLV
	OpenconfigLldpTypes_LLDP_TLV_SYSTEM_NAME E_OpenconfigLldpTypes_LLDP_TLV = 7
)

// E_OpenconfigLldp_ChassisIdType is a derived int64 type which is used to represent
// the enumerated node OpenconfigLldp_ChassisIdType. An additional value named
// OpenconfigLldp_ChassisIdType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigLldp_ChassisIdType int64

// IsYANGGoEnum ensures that OpenconfigLldp_ChassisIdType implements the yang.GoEnum
// interface. This ensures that OpenconfigLldp_ChassisIdType can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigLldp_ChassisIdType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigLldp_ChassisIdType.
func (E_OpenconfigLldp_ChassisIdType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

const (
	// OpenconfigLldp_ChassisIdType_UNSET corresponds to the value UNSET of OpenconfigLldp_ChassisIdType
	OpenconfigLldp_ChassisIdType_UNSET E_OpenconfigLldp_ChassisIdType = 0
	// OpenconfigLldp_ChassisIdType_CHASSIS_COMPONENT corresponds to the value CHASSIS_COMPONENT of OpenconfigLldp_ChassisIdType
	OpenconfigLldp_ChassisIdType_CHASSIS_COMPONENT E_OpenconfigLldp_ChassisIdType = 1
	// OpenconfigLldp_ChassisIdType_INTERFACE_ALIAS corresponds to the value INTERFACE_ALIAS of OpenconfigLldp_ChassisIdType
	OpenconfigLldp_ChassisIdType_INTERFACE_ALIAS E_OpenconfigLldp_ChassisIdType = 2
	// OpenconfigLldp_ChassisIdType_PORT_COMPONENT corresponds to the value PORT_COMPONENT of OpenconfigLldp_ChassisIdType
	OpenconfigLldp_ChassisIdType_PORT_COMPONENT E_OpenconfigLldp_ChassisIdType = 3
	// OpenconfigLldp_ChassisIdType_MAC_ADDRESS corresponds to the value MAC_ADDRESS of OpenconfigLldp_ChassisIdType
	OpenconfigLldp_ChassisIdType_MAC_ADDRESS E_OpenconfigLldp_ChassisIdType = 4
	// OpenconfigLldp_ChassisIdType_NETWORK_ADDRESS corresponds to the value NETWORK_ADDRESS of OpenconfigLldp_ChassisIdType
	OpenconfigLldp_ChassisIdType_NETWORK_ADDRESS E_OpenconfigLldp_ChassisIdType = 5
	// OpenconfigLldp_ChassisIdType_INTERFACE_NAME corresponds to the value INTERFACE_NAME of OpenconfigLldp_ChassisIdType
	OpenconfigLldp_ChassisIdType_INTERFACE_NAME E_OpenconfigLldp_ChassisIdType = 6
	// OpenconfigLldp_ChassisIdType_LOCAL corresponds to the value LOCAL of OpenconfigLldp_ChassisIdType
	OpenconfigLldp_ChassisIdType_LOCAL E_OpenconfigLldp_ChassisIdType = 7
)

// E_OpenconfigLldp_PortIdType is a derived int64 type which is used to represent
// the enumerated node OpenconfigLldp_PortIdType. An additional value named
// OpenconfigLldp_PortIdType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigLldp_PortIdType int64

// IsYANGGoEnum ensures that OpenconfigLldp_PortIdType implements the yang.GoEnum
// interface. This ensures that OpenconfigLldp_PortIdType can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigLldp_PortIdType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigLldp_PortIdType.
func (E_OpenconfigLldp_PortIdType) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum }

const (
	// OpenconfigLldp_PortIdType_UNSET corresponds to the value UNSET of OpenconfigLldp_PortIdType
	OpenconfigLldp_PortIdType_UNSET E_OpenconfigLldp_PortIdType = 0
	// OpenconfigLldp_PortIdType_INTERFACE_ALIAS corresponds to the value INTERFACE_ALIAS of OpenconfigLldp_PortIdType
	OpenconfigLldp_PortIdType_INTERFACE_ALIAS E_OpenconfigLldp_PortIdType = 1
	// OpenconfigLldp_PortIdType_PORT_COMPONENT corresponds to the value PORT_COMPONENT of OpenconfigLldp_PortIdType
	OpenconfigLldp_PortIdType_PORT_COMPONENT E_OpenconfigLldp_PortIdType = 2
	// OpenconfigLldp_PortIdType_MAC_ADDRESS corresponds to the value MAC_ADDRESS of OpenconfigLldp_PortIdType
	OpenconfigLldp_PortIdType_MAC_ADDRESS E_OpenconfigLldp_PortIdType = 3
	// OpenconfigLldp_PortIdType_NETWORK_ADDRESS corresponds to the value NETWORK_ADDRESS of OpenconfigLldp_PortIdType
	OpenconfigLldp_PortIdType_NETWORK_ADDRESS E_OpenconfigLldp_PortIdType = 4
	// OpenconfigLldp_PortIdType_INTERFACE_NAME corresponds to the value INTERFACE_NAME of OpenconfigLldp_PortIdType
	OpenconfigLldp_PortIdType_INTERFACE_NAME E_OpenconfigLldp_PortIdType = 5
	// OpenconfigLldp_PortIdType_AGENT_CIRCUIT_ID corresponds to the value AGENT_CIRCUIT_ID of OpenconfigLldp_PortIdType
	OpenconfigLldp_PortIdType_AGENT_CIRCUIT_ID E_OpenconfigLldp_PortIdType = 6
	// OpenconfigLldp_PortIdType_LOCAL corresponds to the value LOCAL of OpenconfigLldp_PortIdType
	OpenconfigLldp_PortIdType_LOCAL E_OpenconfigLldp_PortIdType = 7
)

// E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS is a derived int64 type which is used to represent
// the enumerated node OpenconfigPlatformTypes_COMPONENT_OPER_STATUS. An additional value named
// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS int64

// IsYANGGoEnum ensures that OpenconfigPlatformTypes_COMPONENT_OPER_STATUS implements the yang.GoEnum
// interface. This ensures that OpenconfigPlatformTypes_COMPONENT_OPER_STATUS can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPlatformTypes_COMPONENT_OPER_STATUS.
func (E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_UNSET corresponds to the value UNSET of OpenconfigPlatformTypes_COMPONENT_OPER_STATUS
	OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_UNSET E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS = 0
	// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_ACTIVE corresponds to the value ACTIVE of OpenconfigPlatformTypes_COMPONENT_OPER_STATUS
	OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_ACTIVE E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS = 1
	// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_DISABLED corresponds to the value DISABLED of OpenconfigPlatformTypes_COMPONENT_OPER_STATUS
	OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_DISABLED E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS = 2
	// OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_INACTIVE corresponds to the value INACTIVE of OpenconfigPlatformTypes_COMPONENT_OPER_STATUS
	OpenconfigPlatformTypes_COMPONENT_OPER_STATUS_INACTIVE E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS = 3
)

// E_OpenconfigPlatformTypes_FEC_MODE_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigPlatformTypes_FEC_MODE_TYPE. An additional value named
// OpenconfigPlatformTypes_FEC_MODE_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPlatformTypes_FEC_MODE_TYPE int64

// IsYANGGoEnum ensures that OpenconfigPlatformTypes_FEC_MODE_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigPlatformTypes_FEC_MODE_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPlatformTypes_FEC_MODE_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPlatformTypes_FEC_MODE_TYPE.
func (E_OpenconfigPlatformTypes_FEC_MODE_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigPlatformTypes_FEC_MODE_TYPE_UNSET corresponds to the value UNSET of OpenconfigPlatformTypes_FEC_MODE_TYPE
	OpenconfigPlatformTypes_FEC_MODE_TYPE_UNSET E_OpenconfigPlatformTypes_FEC_MODE_TYPE = 0
	// OpenconfigPlatformTypes_FEC_MODE_TYPE_FEC_AUTO corresponds to the value FEC_AUTO of OpenconfigPlatformTypes_FEC_MODE_TYPE
	OpenconfigPlatformTypes_FEC_MODE_TYPE_FEC_AUTO E_OpenconfigPlatformTypes_FEC_MODE_TYPE = 1
	// OpenconfigPlatformTypes_FEC_MODE_TYPE_FEC_DISABLED corresponds to the value FEC_DISABLED of OpenconfigPlatformTypes_FEC_MODE_TYPE
	OpenconfigPlatformTypes_FEC_MODE_TYPE_FEC_DISABLED E_OpenconfigPlatformTypes_FEC_MODE_TYPE = 2
	// OpenconfigPlatformTypes_FEC_MODE_TYPE_FEC_ENABLED corresponds to the value FEC_ENABLED of OpenconfigPlatformTypes_FEC_MODE_TYPE
	OpenconfigPlatformTypes_FEC_MODE_TYPE_FEC_ENABLED E_OpenconfigPlatformTypes_FEC_MODE_TYPE = 3
)

// E_OpenconfigPlatformTypes_FEC_STATUS_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigPlatformTypes_FEC_STATUS_TYPE. An additional value named
// OpenconfigPlatformTypes_FEC_STATUS_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPlatformTypes_FEC_STATUS_TYPE int64

// IsYANGGoEnum ensures that OpenconfigPlatformTypes_FEC_STATUS_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigPlatformTypes_FEC_STATUS_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPlatformTypes_FEC_STATUS_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPlatformTypes_FEC_STATUS_TYPE.
func (E_OpenconfigPlatformTypes_FEC_STATUS_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigPlatformTypes_FEC_STATUS_TYPE_UNSET corresponds to the value UNSET of OpenconfigPlatformTypes_FEC_STATUS_TYPE
	OpenconfigPlatformTypes_FEC_STATUS_TYPE_UNSET E_OpenconfigPlatformTypes_FEC_STATUS_TYPE = 0
	// OpenconfigPlatformTypes_FEC_STATUS_TYPE_FEC_STATUS_LOCKED corresponds to the value FEC_STATUS_LOCKED of OpenconfigPlatformTypes_FEC_STATUS_TYPE
	OpenconfigPlatformTypes_FEC_STATUS_TYPE_FEC_STATUS_LOCKED E_OpenconfigPlatformTypes_FEC_STATUS_TYPE = 1
	// OpenconfigPlatformTypes_FEC_STATUS_TYPE_FEC_STATUS_UNLOCKED corresponds to the value FEC_STATUS_UNLOCKED of OpenconfigPlatformTypes_FEC_STATUS_TYPE
	OpenconfigPlatformTypes_FEC_STATUS_TYPE_FEC_STATUS_UNLOCKED E_OpenconfigPlatformTypes_FEC_STATUS_TYPE = 2
)

// E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT is a derived int64 type which is used to represent
// the enumerated node OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT. An additional value named
// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT int64

// IsYANGGoEnum ensures that OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT implements the yang.GoEnum
// interface. This ensures that OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT.
func (E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_UNSET corresponds to the value UNSET of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_UNSET E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 0
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_BACKPLANE corresponds to the value BACKPLANE of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_BACKPLANE E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 1
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CHASSIS corresponds to the value CHASSIS of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CHASSIS E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 2
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CONTROLLER_CARD corresponds to the value CONTROLLER_CARD of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CONTROLLER_CARD E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 3
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CPU corresponds to the value CPU of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_CPU E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 4
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FABRIC corresponds to the value FABRIC of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FABRIC E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 5
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FAN corresponds to the value FAN of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FAN E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 6
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FRU corresponds to the value FRU of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_FRU E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 7
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_INTEGRATED_CIRCUIT corresponds to the value INTEGRATED_CIRCUIT of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_INTEGRATED_CIRCUIT E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 8
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_LINECARD corresponds to the value LINECARD of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_LINECARD E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 9
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_OPTICAL_CHANNEL corresponds to the value OPTICAL_CHANNEL of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_OPTICAL_CHANNEL E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 10
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_PORT corresponds to the value PORT of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_PORT E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 11
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_POWER_SUPPLY corresponds to the value POWER_SUPPLY of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_POWER_SUPPLY E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 12
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_SENSOR corresponds to the value SENSOR of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_SENSOR E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 13
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_STORAGE corresponds to the value STORAGE of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_STORAGE E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 14
	// OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_TRANSCEIVER corresponds to the value TRANSCEIVER of OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT_TRANSCEIVER E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT = 15
)

// E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT is a derived int64 type which is used to represent
// the enumerated node OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT. An additional value named
// OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT int64

// IsYANGGoEnum ensures that OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT implements the yang.GoEnum
// interface. This ensures that OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT.
func (E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_UNSET corresponds to the value UNSET of OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_UNSET E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT = 0
	// OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_OPERATING_SYSTEM corresponds to the value OPERATING_SYSTEM of OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT
	OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT_OPERATING_SYSTEM E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT = 1
)

// E_OpenconfigPlatform_Components_Component_Transceiver_State_Present is a derived int64 type which is used to represent
// the enumerated node OpenconfigPlatform_Components_Component_Transceiver_State_Present. An additional value named
// OpenconfigPlatform_Components_Component_Transceiver_State_Present_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigPlatform_Components_Component_Transceiver_State_Present int64

// IsYANGGoEnum ensures that OpenconfigPlatform_Components_Component_Transceiver_State_Present implements the yang.GoEnum
// interface. This ensures that OpenconfigPlatform_Components_Component_Transceiver_State_Present can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigPlatform_Components_Component_Transceiver_State_Present) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigPlatform_Components_Component_Transceiver_State_Present.
func (E_OpenconfigPlatform_Components_Component_Transceiver_State_Present) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigPlatform_Components_Component_Transceiver_State_Present_UNSET corresponds to the value UNSET of OpenconfigPlatform_Components_Component_Transceiver_State_Present
	OpenconfigPlatform_Components_Component_Transceiver_State_Present_UNSET E_OpenconfigPlatform_Components_Component_Transceiver_State_Present = 0
	// OpenconfigPlatform_Components_Component_Transceiver_State_Present_PRESENT corresponds to the value PRESENT of OpenconfigPlatform_Components_Component_Transceiver_State_Present
	OpenconfigPlatform_Components_Component_Transceiver_State_Present_PRESENT E_OpenconfigPlatform_Components_Component_Transceiver_State_Present = 1
	// OpenconfigPlatform_Components_Component_Transceiver_State_Present_NOT_PRESENT corresponds to the value NOT_PRESENT of OpenconfigPlatform_Components_Component_Transceiver_State_Present
	OpenconfigPlatform_Components_Component_Transceiver_State_Present_NOT_PRESENT E_OpenconfigPlatform_Components_Component_Transceiver_State_Present = 2
)

// E_OpenconfigSystemLogging_SYSLOG_FACILITY is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystemLogging_SYSLOG_FACILITY. An additional value named
// OpenconfigSystemLogging_SYSLOG_FACILITY_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystemLogging_SYSLOG_FACILITY int64

// IsYANGGoEnum ensures that OpenconfigSystemLogging_SYSLOG_FACILITY implements the yang.GoEnum
// interface. This ensures that OpenconfigSystemLogging_SYSLOG_FACILITY can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystemLogging_SYSLOG_FACILITY) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystemLogging_SYSLOG_FACILITY.
func (E_OpenconfigSystemLogging_SYSLOG_FACILITY) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigSystemLogging_SYSLOG_FACILITY_UNSET corresponds to the value UNSET of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_UNSET E_OpenconfigSystemLogging_SYSLOG_FACILITY = 0
	// OpenconfigSystemLogging_SYSLOG_FACILITY_ALL corresponds to the value ALL of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_ALL E_OpenconfigSystemLogging_SYSLOG_FACILITY = 1
	// OpenconfigSystemLogging_SYSLOG_FACILITY_AUDIT corresponds to the value AUDIT of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_AUDIT E_OpenconfigSystemLogging_SYSLOG_FACILITY = 2
	// OpenconfigSystemLogging_SYSLOG_FACILITY_AUTH corresponds to the value AUTH of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_AUTH E_OpenconfigSystemLogging_SYSLOG_FACILITY = 3
	// OpenconfigSystemLogging_SYSLOG_FACILITY_AUTHPRIV corresponds to the value AUTHPRIV of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_AUTHPRIV E_OpenconfigSystemLogging_SYSLOG_FACILITY = 4
	// OpenconfigSystemLogging_SYSLOG_FACILITY_CONSOLE corresponds to the value CONSOLE of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_CONSOLE E_OpenconfigSystemLogging_SYSLOG_FACILITY = 5
	// OpenconfigSystemLogging_SYSLOG_FACILITY_KERNEL corresponds to the value KERNEL of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_KERNEL E_OpenconfigSystemLogging_SYSLOG_FACILITY = 6
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL0 corresponds to the value LOCAL0 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL0 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 7
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL1 corresponds to the value LOCAL1 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL1 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 8
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL2 corresponds to the value LOCAL2 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL2 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 9
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL3 corresponds to the value LOCAL3 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL3 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 10
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL4 corresponds to the value LOCAL4 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL4 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 11
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL5 corresponds to the value LOCAL5 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL5 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 12
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL6 corresponds to the value LOCAL6 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL6 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 13
	// OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL7 corresponds to the value LOCAL7 of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_LOCAL7 E_OpenconfigSystemLogging_SYSLOG_FACILITY = 14
	// OpenconfigSystemLogging_SYSLOG_FACILITY_MAIL corresponds to the value MAIL of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_MAIL E_OpenconfigSystemLogging_SYSLOG_FACILITY = 15
	// OpenconfigSystemLogging_SYSLOG_FACILITY_NTP corresponds to the value NTP of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_NTP E_OpenconfigSystemLogging_SYSLOG_FACILITY = 16
	// OpenconfigSystemLogging_SYSLOG_FACILITY_SYSLOG corresponds to the value SYSLOG of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_SYSLOG E_OpenconfigSystemLogging_SYSLOG_FACILITY = 17
	// OpenconfigSystemLogging_SYSLOG_FACILITY_SYSTEM_DAEMON corresponds to the value SYSTEM_DAEMON of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_SYSTEM_DAEMON E_OpenconfigSystemLogging_SYSLOG_FACILITY = 18
	// OpenconfigSystemLogging_SYSLOG_FACILITY_USER corresponds to the value USER of OpenconfigSystemLogging_SYSLOG_FACILITY
	OpenconfigSystemLogging_SYSLOG_FACILITY_USER E_OpenconfigSystemLogging_SYSLOG_FACILITY = 19
)

// E_OpenconfigSystemLogging_SyslogSeverity is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystemLogging_SyslogSeverity. An additional value named
// OpenconfigSystemLogging_SyslogSeverity_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystemLogging_SyslogSeverity int64

// IsYANGGoEnum ensures that OpenconfigSystemLogging_SyslogSeverity implements the yang.GoEnum
// interface. This ensures that OpenconfigSystemLogging_SyslogSeverity can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystemLogging_SyslogSeverity) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystemLogging_SyslogSeverity.
func (E_OpenconfigSystemLogging_SyslogSeverity) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigSystemLogging_SyslogSeverity_UNSET corresponds to the value UNSET of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_UNSET E_OpenconfigSystemLogging_SyslogSeverity = 0
	// OpenconfigSystemLogging_SyslogSeverity_EMERGENCY corresponds to the value EMERGENCY of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_EMERGENCY E_OpenconfigSystemLogging_SyslogSeverity = 1
	// OpenconfigSystemLogging_SyslogSeverity_ALERT corresponds to the value ALERT of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_ALERT E_OpenconfigSystemLogging_SyslogSeverity = 2
	// OpenconfigSystemLogging_SyslogSeverity_CRITICAL corresponds to the value CRITICAL of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_CRITICAL E_OpenconfigSystemLogging_SyslogSeverity = 3
	// OpenconfigSystemLogging_SyslogSeverity_ERROR corresponds to the value ERROR of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_ERROR E_OpenconfigSystemLogging_SyslogSeverity = 4
	// OpenconfigSystemLogging_SyslogSeverity_WARNING corresponds to the value WARNING of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_WARNING E_OpenconfigSystemLogging_SyslogSeverity = 5
	// OpenconfigSystemLogging_SyslogSeverity_NOTICE corresponds to the value NOTICE of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_NOTICE E_OpenconfigSystemLogging_SyslogSeverity = 6
	// OpenconfigSystemLogging_SyslogSeverity_INFORMATIONAL corresponds to the value INFORMATIONAL of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_INFORMATIONAL E_OpenconfigSystemLogging_SyslogSeverity = 7
	// OpenconfigSystemLogging_SyslogSeverity_DEBUG corresponds to the value DEBUG of OpenconfigSystemLogging_SyslogSeverity
	OpenconfigSystemLogging_SyslogSeverity_DEBUG E_OpenconfigSystemLogging_SyslogSeverity = 8
)

// E_OpenconfigSystem_NTP_AUTH_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystem_NTP_AUTH_TYPE. An additional value named
// OpenconfigSystem_NTP_AUTH_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystem_NTP_AUTH_TYPE int64

// IsYANGGoEnum ensures that OpenconfigSystem_NTP_AUTH_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigSystem_NTP_AUTH_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystem_NTP_AUTH_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystem_NTP_AUTH_TYPE.
func (E_OpenconfigSystem_NTP_AUTH_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigSystem_NTP_AUTH_TYPE_UNSET corresponds to the value UNSET of OpenconfigSystem_NTP_AUTH_TYPE
	OpenconfigSystem_NTP_AUTH_TYPE_UNSET E_OpenconfigSystem_NTP_AUTH_TYPE = 0
	// OpenconfigSystem_NTP_AUTH_TYPE_NTP_AUTH_MD5 corresponds to the value NTP_AUTH_MD5 of OpenconfigSystem_NTP_AUTH_TYPE
	OpenconfigSystem_NTP_AUTH_TYPE_NTP_AUTH_MD5 E_OpenconfigSystem_NTP_AUTH_TYPE = 1
)

// E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record. An additional value named
// OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record int64

// IsYANGGoEnum ensures that OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record implements the yang.GoEnum
// interface. This ensures that OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record.
func (E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record_UNSET corresponds to the value UNSET of OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record
	OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record_UNSET E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record = 0
	// OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record_START_STOP corresponds to the value START_STOP of OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record
	OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record_START_STOP E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record = 1
	// OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record_STOP corresponds to the value STOP of OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record
	OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record_STOP E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record = 2
)

// E_OpenconfigSystem_System_Cpus_Cpu_State_Index is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystem_System_Cpus_Cpu_State_Index. An additional value named
// OpenconfigSystem_System_Cpus_Cpu_State_Index_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystem_System_Cpus_Cpu_State_Index int64

// IsYANGGoEnum ensures that OpenconfigSystem_System_Cpus_Cpu_State_Index implements the yang.GoEnum
// interface. This ensures that OpenconfigSystem_System_Cpus_Cpu_State_Index can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystem_System_Cpus_Cpu_State_Index) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystem_System_Cpus_Cpu_State_Index.
func (E_OpenconfigSystem_System_Cpus_Cpu_State_Index) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigSystem_System_Cpus_Cpu_State_Index_UNSET corresponds to the value UNSET of OpenconfigSystem_System_Cpus_Cpu_State_Index
	OpenconfigSystem_System_Cpus_Cpu_State_Index_UNSET E_OpenconfigSystem_System_Cpus_Cpu_State_Index = 0
	// OpenconfigSystem_System_Cpus_Cpu_State_Index_ALL corresponds to the value ALL of OpenconfigSystem_System_Cpus_Cpu_State_Index
	OpenconfigSystem_System_Cpus_Cpu_State_Index_ALL E_OpenconfigSystem_System_Cpus_Cpu_State_Index = 1
)

// E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystem_System_GrpcServer_Config_ListenAddresses. An additional value named
// OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses int64

// IsYANGGoEnum ensures that OpenconfigSystem_System_GrpcServer_Config_ListenAddresses implements the yang.GoEnum
// interface. This ensures that OpenconfigSystem_System_GrpcServer_Config_ListenAddresses can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystem_System_GrpcServer_Config_ListenAddresses.
func (E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_UNSET corresponds to the value UNSET of OpenconfigSystem_System_GrpcServer_Config_ListenAddresses
	OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_UNSET E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses = 0
	// OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_ANY corresponds to the value ANY of OpenconfigSystem_System_GrpcServer_Config_ListenAddresses
	OpenconfigSystem_System_GrpcServer_Config_ListenAddresses_ANY E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses = 1
)

// E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType. An additional value named
// OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType int64

// IsYANGGoEnum ensures that OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType implements the yang.GoEnum
// interface. This ensures that OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType.
func (E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_UNSET corresponds to the value UNSET of OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType
	OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_UNSET E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType = 0
	// OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_SERVER corresponds to the value SERVER of OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType
	OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_SERVER E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType = 1
	// OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_PEER corresponds to the value PEER of OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType
	OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_PEER E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType = 2
	// OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_POOL corresponds to the value POOL of OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType
	OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType_POOL E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType = 3
)

// E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion is a derived int64 type which is used to represent
// the enumerated node OpenconfigSystem_System_SshServer_Config_ProtocolVersion. An additional value named
// OpenconfigSystem_System_SshServer_Config_ProtocolVersion_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion int64

// IsYANGGoEnum ensures that OpenconfigSystem_System_SshServer_Config_ProtocolVersion implements the yang.GoEnum
// interface. This ensures that OpenconfigSystem_System_SshServer_Config_ProtocolVersion can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSystem_System_SshServer_Config_ProtocolVersion.
func (E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigSystem_System_SshServer_Config_ProtocolVersion_UNSET corresponds to the value UNSET of OpenconfigSystem_System_SshServer_Config_ProtocolVersion
	OpenconfigSystem_System_SshServer_Config_ProtocolVersion_UNSET E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion = 0
	// OpenconfigSystem_System_SshServer_Config_ProtocolVersion_V2 corresponds to the value V2 of OpenconfigSystem_System_SshServer_Config_ProtocolVersion
	OpenconfigSystem_System_SshServer_Config_ProtocolVersion_V2 E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion = 1
	// OpenconfigSystem_System_SshServer_Config_ProtocolVersion_V1 corresponds to the value V1 of OpenconfigSystem_System_SshServer_Config_ProtocolVersion
	OpenconfigSystem_System_SshServer_Config_ProtocolVersion_V1 E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion = 2
	// OpenconfigSystem_System_SshServer_Config_ProtocolVersion_V1_V2 corresponds to the value V1_V2 of OpenconfigSystem_System_SshServer_Config_ProtocolVersion
	OpenconfigSystem_System_SshServer_Config_ProtocolVersion_V1_V2 E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion = 3
)

// E_OpenconfigTerminalDevice_AdminStateType is a derived int64 type which is used to represent
// the enumerated node OpenconfigTerminalDevice_AdminStateType. An additional value named
// OpenconfigTerminalDevice_AdminStateType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigTerminalDevice_AdminStateType int64

// IsYANGGoEnum ensures that OpenconfigTerminalDevice_AdminStateType implements the yang.GoEnum
// interface. This ensures that OpenconfigTerminalDevice_AdminStateType can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigTerminalDevice_AdminStateType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigTerminalDevice_AdminStateType.
func (E_OpenconfigTerminalDevice_AdminStateType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigTerminalDevice_AdminStateType_UNSET corresponds to the value UNSET of OpenconfigTerminalDevice_AdminStateType
	OpenconfigTerminalDevice_AdminStateType_UNSET E_OpenconfigTerminalDevice_AdminStateType = 0
	// OpenconfigTerminalDevice_AdminStateType_ENABLED corresponds to the value ENABLED of OpenconfigTerminalDevice_AdminStateType
	OpenconfigTerminalDevice_AdminStateType_ENABLED E_OpenconfigTerminalDevice_AdminStateType = 1
	// OpenconfigTerminalDevice_AdminStateType_DISABLED corresponds to the value DISABLED of OpenconfigTerminalDevice_AdminStateType
	OpenconfigTerminalDevice_AdminStateType_DISABLED E_OpenconfigTerminalDevice_AdminStateType = 2
	// OpenconfigTerminalDevice_AdminStateType_MAINT corresponds to the value MAINT of OpenconfigTerminalDevice_AdminStateType
	OpenconfigTerminalDevice_AdminStateType_MAINT E_OpenconfigTerminalDevice_AdminStateType = 3
)

// E_OpenconfigTerminalDevice_LoopbackModeType is a derived int64 type which is used to represent
// the enumerated node OpenconfigTerminalDevice_LoopbackModeType. An additional value named
// OpenconfigTerminalDevice_LoopbackModeType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigTerminalDevice_LoopbackModeType int64

// IsYANGGoEnum ensures that OpenconfigTerminalDevice_LoopbackModeType implements the yang.GoEnum
// interface. This ensures that OpenconfigTerminalDevice_LoopbackModeType can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigTerminalDevice_LoopbackModeType) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigTerminalDevice_LoopbackModeType.
func (E_OpenconfigTerminalDevice_LoopbackModeType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigTerminalDevice_LoopbackModeType_UNSET corresponds to the value UNSET of OpenconfigTerminalDevice_LoopbackModeType
	OpenconfigTerminalDevice_LoopbackModeType_UNSET E_OpenconfigTerminalDevice_LoopbackModeType = 0
	// OpenconfigTerminalDevice_LoopbackModeType_NONE corresponds to the value NONE of OpenconfigTerminalDevice_LoopbackModeType
	OpenconfigTerminalDevice_LoopbackModeType_NONE E_OpenconfigTerminalDevice_LoopbackModeType = 1
	// OpenconfigTerminalDevice_LoopbackModeType_FACILITY corresponds to the value FACILITY of OpenconfigTerminalDevice_LoopbackModeType
	OpenconfigTerminalDevice_LoopbackModeType_FACILITY E_OpenconfigTerminalDevice_LoopbackModeType = 2
	// OpenconfigTerminalDevice_LoopbackModeType_TERMINAL corresponds to the value TERMINAL of OpenconfigTerminalDevice_LoopbackModeType
	OpenconfigTerminalDevice_LoopbackModeType_TERMINAL E_OpenconfigTerminalDevice_LoopbackModeType = 3
)

// E_OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType is a derived int64 type which is used to represent
// the enumerated node OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType. An additional value named
// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType int64

// IsYANGGoEnum ensures that OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType implements the yang.GoEnum
// interface. This ensures that OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType) IsYANGGoEnum() {
}

// ΛMap returns the value lookup map associated with  OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType.
func (E_OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType_UNSET corresponds to the value UNSET of OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType
	OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType_UNSET E_OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType = 0
	// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType_LOGICAL_CHANNEL corresponds to the value LOGICAL_CHANNEL of OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType
	OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType_LOGICAL_CHANNEL E_OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType = 1
	// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType_OPTICAL_CHANNEL corresponds to the value OPTICAL_CHANNEL of OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType
	OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType_OPTICAL_CHANNEL E_OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType = 2
)

// E_OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState is a derived int64 type which is used to represent
// the enumerated node OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState. An additional value named
// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState int64

// IsYANGGoEnum ensures that OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState implements the yang.GoEnum
// interface. This ensures that OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState) IsYANGGoEnum() {
}

// ΛMap returns the value lookup map associated with  OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState.
func (E_OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState_UNSET corresponds to the value UNSET of OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState
	OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState_UNSET E_OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState = 0
	// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState_UP corresponds to the value UP of OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState
	OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState_UP E_OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState = 1
	// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState_DOWN corresponds to the value DOWN of OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState
	OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState_DOWN E_OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState = 2
	// OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState_TESTING corresponds to the value TESTING of OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState
	OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState_TESTING E_OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState = 3
)

// E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigTransportTypes_ETHERNET_PMD_TYPE. An additional value named
// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE int64

// IsYANGGoEnum ensures that OpenconfigTransportTypes_ETHERNET_PMD_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigTransportTypes_ETHERNET_PMD_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigTransportTypes_ETHERNET_PMD_TYPE.
func (E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_UNSET corresponds to the value UNSET of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_UNSET E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 0
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_CLR4 corresponds to the value ETH_100GBASE_CLR4 of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_CLR4 E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 1
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_CR4 corresponds to the value ETH_100GBASE_CR4 of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_CR4 E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 2
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_CWDM4 corresponds to the value ETH_100GBASE_CWDM4 of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_CWDM4 E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 3
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_ER4 corresponds to the value ETH_100GBASE_ER4 of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_ER4 E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 4
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_LR4 corresponds to the value ETH_100GBASE_LR4 of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_LR4 E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 5
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_PSM4 corresponds to the value ETH_100GBASE_PSM4 of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_PSM4 E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 6
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_SR10 corresponds to the value ETH_100GBASE_SR10 of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_SR10 E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 7
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_SR4 corresponds to the value ETH_100GBASE_SR4 of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100GBASE_SR4 E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 8
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100G_ACC corresponds to the value ETH_100G_ACC of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100G_ACC E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 9
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100G_AOC corresponds to the value ETH_100G_AOC of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_100G_AOC E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 10
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_10GBASE_ER corresponds to the value ETH_10GBASE_ER of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_10GBASE_ER E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 11
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_10GBASE_LR corresponds to the value ETH_10GBASE_LR of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_10GBASE_LR E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 12
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_10GBASE_LRM corresponds to the value ETH_10GBASE_LRM of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_10GBASE_LRM E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 13
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_10GBASE_SR corresponds to the value ETH_10GBASE_SR of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_10GBASE_SR E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 14
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_10GBASE_ZR corresponds to the value ETH_10GBASE_ZR of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_10GBASE_ZR E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 15
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_40GBASE_CR4 corresponds to the value ETH_40GBASE_CR4 of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_40GBASE_CR4 E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 16
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_40GBASE_ER4 corresponds to the value ETH_40GBASE_ER4 of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_40GBASE_ER4 E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 17
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_40GBASE_LR4 corresponds to the value ETH_40GBASE_LR4 of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_40GBASE_LR4 E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 18
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_40GBASE_PSM4 corresponds to the value ETH_40GBASE_PSM4 of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_40GBASE_PSM4 E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 19
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_40GBASE_SR4 corresponds to the value ETH_40GBASE_SR4 of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_40GBASE_SR4 E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 20
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_4X10GBASE_LR corresponds to the value ETH_4X10GBASE_LR of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_4X10GBASE_LR E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 21
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_4X10GBASE_SR corresponds to the value ETH_4X10GBASE_SR of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_4X10GBASE_SR E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 22
	// OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_UNDEFINED corresponds to the value ETH_UNDEFINED of OpenconfigTransportTypes_ETHERNET_PMD_TYPE
	OpenconfigTransportTypes_ETHERNET_PMD_TYPE_ETH_UNDEFINED E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE = 23
)

// E_OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE. An additional value named
// OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE int64

// IsYANGGoEnum ensures that OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE.
func (E_OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE_UNSET corresponds to the value UNSET of OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE
	OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE_UNSET E_OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE = 0
	// OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE_LC_CONNECTOR corresponds to the value LC_CONNECTOR of OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE
	OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE_LC_CONNECTOR E_OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE = 1
	// OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE_MPO_CONNECTOR corresponds to the value MPO_CONNECTOR of OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE
	OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE_MPO_CONNECTOR E_OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE = 2
	// OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE_SC_CONNECTOR corresponds to the value SC_CONNECTOR of OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE
	OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE_SC_CONNECTOR E_OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE = 3
)

// E_OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL is a derived int64 type which is used to represent
// the enumerated node OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL. An additional value named
// OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL int64

// IsYANGGoEnum ensures that OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL implements the yang.GoEnum
// interface. This ensures that OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL.
func (E_OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL_UNSET corresponds to the value UNSET of OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL
	OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL_UNSET E_OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL = 0
	// OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL_AMP corresponds to the value AMP of OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL
	OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL_AMP E_OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL = 1
	// OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL_BMP corresponds to the value BMP of OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL
	OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL_BMP E_OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL = 2
	// OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL_CBR corresponds to the value CBR of OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL
	OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL_CBR E_OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL = 3
	// OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL_GFP_F corresponds to the value GFP_F of OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL
	OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL_GFP_F E_OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL = 4
	// OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL_GFP_T corresponds to the value GFP_T of OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL
	OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL_GFP_T E_OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL = 5
	// OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL_GMP corresponds to the value GMP of OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL
	OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL_GMP E_OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL = 6
)

// E_OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE. An additional value named
// OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE int64

// IsYANGGoEnum ensures that OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE.
func (E_OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE_UNSET corresponds to the value UNSET of OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE
	OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE_UNSET E_OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE = 0
	// OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE_PROT_ETHERNET corresponds to the value PROT_ETHERNET of OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE
	OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE_PROT_ETHERNET E_OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE = 1
	// OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE_PROT_OTN corresponds to the value PROT_OTN of OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE
	OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE_PROT_OTN E_OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE = 2
)

// E_OpenconfigTransportTypes_OTN_APPLICATION_CODE is a derived int64 type which is used to represent
// the enumerated node OpenconfigTransportTypes_OTN_APPLICATION_CODE. An additional value named
// OpenconfigTransportTypes_OTN_APPLICATION_CODE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigTransportTypes_OTN_APPLICATION_CODE int64

// IsYANGGoEnum ensures that OpenconfigTransportTypes_OTN_APPLICATION_CODE implements the yang.GoEnum
// interface. This ensures that OpenconfigTransportTypes_OTN_APPLICATION_CODE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigTransportTypes_OTN_APPLICATION_CODE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigTransportTypes_OTN_APPLICATION_CODE.
func (E_OpenconfigTransportTypes_OTN_APPLICATION_CODE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigTransportTypes_OTN_APPLICATION_CODE_UNSET corresponds to the value UNSET of OpenconfigTransportTypes_OTN_APPLICATION_CODE
	OpenconfigTransportTypes_OTN_APPLICATION_CODE_UNSET E_OpenconfigTransportTypes_OTN_APPLICATION_CODE = 0
	// OpenconfigTransportTypes_OTN_APPLICATION_CODE_OTN_UNDEFINED corresponds to the value OTN_UNDEFINED of OpenconfigTransportTypes_OTN_APPLICATION_CODE
	OpenconfigTransportTypes_OTN_APPLICATION_CODE_OTN_UNDEFINED E_OpenconfigTransportTypes_OTN_APPLICATION_CODE = 1
	// OpenconfigTransportTypes_OTN_APPLICATION_CODE_P1L1_2D1 corresponds to the value P1L1_2D1 of OpenconfigTransportTypes_OTN_APPLICATION_CODE
	OpenconfigTransportTypes_OTN_APPLICATION_CODE_P1L1_2D1 E_OpenconfigTransportTypes_OTN_APPLICATION_CODE = 2
	// OpenconfigTransportTypes_OTN_APPLICATION_CODE_P1L1_2D2 corresponds to the value P1L1_2D2 of OpenconfigTransportTypes_OTN_APPLICATION_CODE
	OpenconfigTransportTypes_OTN_APPLICATION_CODE_P1L1_2D2 E_OpenconfigTransportTypes_OTN_APPLICATION_CODE = 3
	// OpenconfigTransportTypes_OTN_APPLICATION_CODE_P1S1_2D2 corresponds to the value P1S1_2D2 of OpenconfigTransportTypes_OTN_APPLICATION_CODE
	OpenconfigTransportTypes_OTN_APPLICATION_CODE_P1S1_2D2 E_OpenconfigTransportTypes_OTN_APPLICATION_CODE = 4
)

// E_OpenconfigTransportTypes_SONET_APPLICATION_CODE is a derived int64 type which is used to represent
// the enumerated node OpenconfigTransportTypes_SONET_APPLICATION_CODE. An additional value named
// OpenconfigTransportTypes_SONET_APPLICATION_CODE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigTransportTypes_SONET_APPLICATION_CODE int64

// IsYANGGoEnum ensures that OpenconfigTransportTypes_SONET_APPLICATION_CODE implements the yang.GoEnum
// interface. This ensures that OpenconfigTransportTypes_SONET_APPLICATION_CODE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigTransportTypes_SONET_APPLICATION_CODE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigTransportTypes_SONET_APPLICATION_CODE.
func (E_OpenconfigTransportTypes_SONET_APPLICATION_CODE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigTransportTypes_SONET_APPLICATION_CODE_UNSET corresponds to the value UNSET of OpenconfigTransportTypes_SONET_APPLICATION_CODE
	OpenconfigTransportTypes_SONET_APPLICATION_CODE_UNSET E_OpenconfigTransportTypes_SONET_APPLICATION_CODE = 0
	// OpenconfigTransportTypes_SONET_APPLICATION_CODE_SONET_UNDEFINED corresponds to the value SONET_UNDEFINED of OpenconfigTransportTypes_SONET_APPLICATION_CODE
	OpenconfigTransportTypes_SONET_APPLICATION_CODE_SONET_UNDEFINED E_OpenconfigTransportTypes_SONET_APPLICATION_CODE = 1
	// OpenconfigTransportTypes_SONET_APPLICATION_CODE_VSR2000_3R2 corresponds to the value VSR2000_3R2 of OpenconfigTransportTypes_SONET_APPLICATION_CODE
	OpenconfigTransportTypes_SONET_APPLICATION_CODE_VSR2000_3R2 E_OpenconfigTransportTypes_SONET_APPLICATION_CODE = 2
	// OpenconfigTransportTypes_SONET_APPLICATION_CODE_VSR2000_3R3 corresponds to the value VSR2000_3R3 of OpenconfigTransportTypes_SONET_APPLICATION_CODE
	OpenconfigTransportTypes_SONET_APPLICATION_CODE_VSR2000_3R3 E_OpenconfigTransportTypes_SONET_APPLICATION_CODE = 3
	// OpenconfigTransportTypes_SONET_APPLICATION_CODE_VSR2000_3R5 corresponds to the value VSR2000_3R5 of OpenconfigTransportTypes_SONET_APPLICATION_CODE
	OpenconfigTransportTypes_SONET_APPLICATION_CODE_VSR2000_3R5 E_OpenconfigTransportTypes_SONET_APPLICATION_CODE = 4
)

// E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE. An additional value named
// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE int64

// IsYANGGoEnum ensures that OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE.
func (E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_UNSET corresponds to the value UNSET of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_UNSET E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 0
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_CFP corresponds to the value CFP of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_CFP E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 1
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_CFP2 corresponds to the value CFP2 of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_CFP2 E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 2
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_CFP2_ACO corresponds to the value CFP2_ACO of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_CFP2_ACO E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 3
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_CFP4 corresponds to the value CFP4 of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_CFP4 E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 4
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_CPAK corresponds to the value CPAK of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_CPAK E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 5
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_NON_PLUGGABLE corresponds to the value NON_PLUGGABLE of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_NON_PLUGGABLE E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 6
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_OTHER corresponds to the value OTHER of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_OTHER E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 7
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_QSFP corresponds to the value QSFP of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_QSFP E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 8
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_QSFP28 corresponds to the value QSFP28 of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_QSFP28 E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 9
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_QSFP_PLUS corresponds to the value QSFP_PLUS of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_QSFP_PLUS E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 10
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_SFP corresponds to the value SFP of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_SFP E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 11
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_SFP_PLUS corresponds to the value SFP_PLUS of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_SFP_PLUS E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 12
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_X2 corresponds to the value X2 of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_X2 E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 13
	// OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_XFP corresponds to the value XFP of OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE
	OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE_XFP E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE = 14
)

// E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE. An additional value named
// OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE int64

// IsYANGGoEnum ensures that OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE.
func (E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_UNSET corresponds to the value UNSET of OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE
	OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_UNSET E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE = 0
	// OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_100GE corresponds to the value PROT_100GE of OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE
	OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_100GE E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE = 1
	// OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_100G_MLG corresponds to the value PROT_100G_MLG of OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE
	OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_100G_MLG E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE = 2
	// OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_10GE_LAN corresponds to the value PROT_10GE_LAN of OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE
	OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_10GE_LAN E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE = 3
	// OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_10GE_WAN corresponds to the value PROT_10GE_WAN of OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE
	OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_10GE_WAN E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE = 4
	// OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_1GE corresponds to the value PROT_1GE of OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE
	OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_1GE E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE = 5
	// OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_40GE corresponds to the value PROT_40GE of OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE
	OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_40GE E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE = 6
	// OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_OC192 corresponds to the value PROT_OC192 of OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE
	OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_OC192 E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE = 7
	// OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_OC48 corresponds to the value PROT_OC48 of OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE
	OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_OC48 E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE = 8
	// OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_OC768 corresponds to the value PROT_OC768 of OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE
	OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_OC768 E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE = 9
	// OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_ODU2 corresponds to the value PROT_ODU2 of OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE
	OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_ODU2 E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE = 10
	// OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_ODU2E corresponds to the value PROT_ODU2E of OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE
	OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_ODU2E E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE = 11
	// OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_ODU3 corresponds to the value PROT_ODU3 of OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE
	OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_ODU3 E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE = 12
	// OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_ODU4 corresponds to the value PROT_ODU4 of OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE
	OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_ODU4 E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE = 13
	// OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_ODUCN corresponds to the value PROT_ODUCN of OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE
	OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_ODUCN E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE = 14
	// OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_OTU1E corresponds to the value PROT_OTU1E of OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE
	OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_OTU1E E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE = 15
	// OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_OTU2 corresponds to the value PROT_OTU2 of OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE
	OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_OTU2 E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE = 16
	// OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_OTU2E corresponds to the value PROT_OTU2E of OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE
	OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_OTU2E E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE = 17
	// OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_OTU3 corresponds to the value PROT_OTU3 of OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE
	OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_OTU3 E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE = 18
	// OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_OTU4 corresponds to the value PROT_OTU4 of OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE
	OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_OTU4 E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE = 19
	// OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_OTUCN corresponds to the value PROT_OTUCN of OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE
	OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_OTUCN E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE = 20
	// OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_STM16 corresponds to the value PROT_STM16 of OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE
	OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_STM16 E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE = 21
	// OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_STM256 corresponds to the value PROT_STM256 of OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE
	OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_STM256 E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE = 22
	// OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_STM64 corresponds to the value PROT_STM64 of OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE
	OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE_PROT_STM64 E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE = 23
)

// E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE is a derived int64 type which is used to represent
// the enumerated node OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE. An additional value named
// OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE int64

// IsYANGGoEnum ensures that OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE implements the yang.GoEnum
// interface. This ensures that OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE.
func (E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_UNSET corresponds to the value UNSET of OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE
	OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_UNSET E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE = 0
	// OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_1000G corresponds to the value TRIB_RATE_1000G of OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE
	OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_1000G E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE = 1
	// OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_100G corresponds to the value TRIB_RATE_100G of OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE
	OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_100G E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE = 2
	// OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_10G corresponds to the value TRIB_RATE_10G of OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE
	OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_10G E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE = 3
	// OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_1100G corresponds to the value TRIB_RATE_1100G of OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE
	OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_1100G E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE = 4
	// OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_150G corresponds to the value TRIB_RATE_150G of OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE
	OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_150G E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE = 5
	// OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_1G corresponds to the value TRIB_RATE_1G of OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE
	OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_1G E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE = 6
	// OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_2_5G corresponds to the value TRIB_RATE_2_5G of OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE
	OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_2_5G E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE = 7
	// OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_200G corresponds to the value TRIB_RATE_200G of OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE
	OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_200G E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE = 8
	// OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_250G corresponds to the value TRIB_RATE_250G of OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE
	OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_250G E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE = 9
	// OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_300G corresponds to the value TRIB_RATE_300G of OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE
	OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_300G E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE = 10
	// OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_400G corresponds to the value TRIB_RATE_400G of OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE
	OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_400G E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE = 11
	// OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_40G corresponds to the value TRIB_RATE_40G of OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE
	OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_40G E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE = 12
	// OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_500G corresponds to the value TRIB_RATE_500G of OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE
	OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_500G E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE = 13
	// OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_600G corresponds to the value TRIB_RATE_600G of OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE
	OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_600G E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE = 14
	// OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_700G corresponds to the value TRIB_RATE_700G of OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE
	OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_700G E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE = 15
	// OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_800G corresponds to the value TRIB_RATE_800G of OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE
	OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_800G E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE = 16
	// OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_900G corresponds to the value TRIB_RATE_900G of OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE
	OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE_TRIB_RATE_900G E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE = 17
)

// E_OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY is a derived int64 type which is used to represent
// the enumerated node OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY. An additional value named
// OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY int64

// IsYANGGoEnum ensures that OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY implements the yang.GoEnum
// interface. This ensures that OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY.
func (E_OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY) ΛMap() map[string]map[int64]ygot.EnumDefinition {
	return ΛEnum
}

const (
	// OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY_UNSET corresponds to the value UNSET of OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY
	OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY_UNSET E_OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY = 0
	// OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY_TRIB_SLOT_1_25G corresponds to the value TRIB_SLOT_1_25G of OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY
	OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY_TRIB_SLOT_1_25G E_OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY = 1
	// OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY_TRIB_SLOT_2_5G corresponds to the value TRIB_SLOT_2_5G of OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY
	OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY_TRIB_SLOT_2_5G E_OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY = 2
	// OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY_TRIB_SLOT_5G corresponds to the value TRIB_SLOT_5G of OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY
	OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY_TRIB_SLOT_5G E_OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY = 3
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_IETFInterfaces_InterfaceType": {
		1:   {Name: "a12MppSwitch", DefiningModule: "iana-if-type"},
		2:   {Name: "aal2", DefiningModule: "iana-if-type"},
		3:   {Name: "aal5", DefiningModule: "iana-if-type"},
		4:   {Name: "actelisMetaLOOP", DefiningModule: "iana-if-type"},
		5:   {Name: "adsl", DefiningModule: "iana-if-type"},
		6:   {Name: "adsl2", DefiningModule: "iana-if-type"},
		7:   {Name: "adsl2plus", DefiningModule: "iana-if-type"},
		8:   {Name: "aflane8023", DefiningModule: "iana-if-type"},
		9:   {Name: "aflane8025", DefiningModule: "iana-if-type"},
		10:  {Name: "aluELP", DefiningModule: "iana-if-type"},
		11:  {Name: "aluEpon", DefiningModule: "iana-if-type"},
		12:  {Name: "aluEponLogicalLink", DefiningModule: "iana-if-type"},
		13:  {Name: "aluEponOnu", DefiningModule: "iana-if-type"},
		14:  {Name: "aluEponPhysicalUni", DefiningModule: "iana-if-type"},
		15:  {Name: "aluGponOnu", DefiningModule: "iana-if-type"},
		16:  {Name: "aluGponPhysicalUni", DefiningModule: "iana-if-type"},
		17:  {Name: "arap", DefiningModule: "iana-if-type"},
		18:  {Name: "arcnet", DefiningModule: "iana-if-type"},
		19:  {Name: "arcnetPlus", DefiningModule: "iana-if-type"},
		20:  {Name: "async", DefiningModule: "iana-if-type"},
		21:  {Name: "atm", DefiningModule: "iana-if-type"},
		22:  {Name: "atmDxi", DefiningModule: "iana-if-type"},
		23:  {Name: "atmFuni", DefiningModule: "iana-if-type"},
		24:  {Name: "atmIma", DefiningModule: "iana-if-type"},
		25:  {Name: "atmLogical", DefiningModule: "iana-if-type"},
		26:  {Name: "atmRadio", DefiningModule: "iana-if-type"},
		27:  {Name: "atmSubInterface", DefiningModule: "iana-if-type"},
		28:  {Name: "atmVciEndPt", DefiningModule: "iana-if-type"},
		29:  {Name: "atmVirtual", DefiningModule: "iana-if-type"},
		30:  {Name: "atmbond", DefiningModule: "iana-if-type"},
		31:  {Name: "aviciOpticalEther", DefiningModule: "iana-if-type"},
		32:  {Name: "basicISDN", DefiningModule: "iana-if-type"},
		33:  {Name: "bgppolicyaccounting", DefiningModule: "iana-if-type"},
		34:  {Name: "bits", DefiningModule: "iana-if-type"},
		35:  {Name: "bridge", DefiningModule: "iana-if-type"},
		36:  {Name: "bsc", DefiningModule: "iana-if-type"},
		37:  {Name: "cableDownstreamRfPort", DefiningModule: "iana-if-type"},
		38:  {Name: "capwapDot11Bss", DefiningModule: "iana-if-type"},
		39:  {Name: "capwapDot11Profile", DefiningModule: "iana-if-type"},
		40:  {Name: "capwapWtpVirtualRadio", DefiningModule: "iana-if-type"},
		41:  {Name: "cblVectaStar", DefiningModule: "iana-if-type"},
		42:  {Name: "cctEmul", DefiningModule: "iana-if-type"},
		43:  {Name: "ces", DefiningModule: "iana-if-type"},
		44:  {Name: "channel", DefiningModule: "iana-if-type"},
		45:  {Name: "ciscoISLvlan", DefiningModule: "iana-if-type"},
		46:  {Name: "cnr", DefiningModule: "iana-if-type"},
		47:  {Name: "coffee", DefiningModule: "iana-if-type"},
		48:  {Name: "compositeLink", DefiningModule: "iana-if-type"},
		49:  {Name: "dcn", DefiningModule: "iana-if-type"},
		50:  {Name: "ddnX25", DefiningModule: "iana-if-type"},
		51:  {Name: "digitalPowerline", DefiningModule: "iana-if-type"},
		52:  {Name: "digitalWrapperOverheadChannel", DefiningModule: "iana-if-type"},
		53:  {Name: "dlsw", DefiningModule: "iana-if-type"},
		54:  {Name: "docsCableDownstream", DefiningModule: "iana-if-type"},
		55:  {Name: "docsCableMCmtsDownstream", DefiningModule: "iana-if-type"},
		56:  {Name: "docsCableMaclayer", DefiningModule: "iana-if-type"},
		57:  {Name: "docsCableUpstream", DefiningModule: "iana-if-type"},
		58:  {Name: "docsCableUpstreamChannel", DefiningModule: "iana-if-type"},
		59:  {Name: "docsCableUpstreamRfPort", DefiningModule: "iana-if-type"},
		60:  {Name: "ds0", DefiningModule: "iana-if-type"},
		61:  {Name: "ds0Bundle", DefiningModule: "iana-if-type"},
		62:  {Name: "ds1", DefiningModule: "iana-if-type"},
		63:  {Name: "ds1FDL", DefiningModule: "iana-if-type"},
		64:  {Name: "ds3", DefiningModule: "iana-if-type"},
		65:  {Name: "dtm", DefiningModule: "iana-if-type"},
		66:  {Name: "dvbAsiIn", DefiningModule: "iana-if-type"},
		67:  {Name: "dvbAsiOut", DefiningModule: "iana-if-type"},
		68:  {Name: "dvbRccDownstream", DefiningModule: "iana-if-type"},
		69:  {Name: "dvbRccMacLayer", DefiningModule: "iana-if-type"},
		70:  {Name: "dvbRccUpstream", DefiningModule: "iana-if-type"},
		71:  {Name: "dvbRcsMacLayer", DefiningModule: "iana-if-type"},
		72:  {Name: "dvbRcsTdma", DefiningModule: "iana-if-type"},
		73:  {Name: "dvbTdm", DefiningModule: "iana-if-type"},
		74:  {Name: "e1", DefiningModule: "iana-if-type"},
		75:  {Name: "econet", DefiningModule: "iana-if-type"},
		76:  {Name: "eon", DefiningModule: "iana-if-type"},
		77:  {Name: "eplrs", DefiningModule: "iana-if-type"},
		78:  {Name: "escon", DefiningModule: "iana-if-type"},
		79:  {Name: "ethernet3Mbit", DefiningModule: "iana-if-type"},
		80:  {Name: "ethernetCsmacd", DefiningModule: "iana-if-type"},
		81:  {Name: "fast", DefiningModule: "iana-if-type"},
		82:  {Name: "fastEther", DefiningModule: "iana-if-type"},
		83:  {Name: "fastEtherFX", DefiningModule: "iana-if-type"},
		84:  {Name: "fcipLink", DefiningModule: "iana-if-type"},
		85:  {Name: "fddi", DefiningModule: "iana-if-type"},
		86:  {Name: "fibreChannel", DefiningModule: "iana-if-type"},
		87:  {Name: "frDlciEndPt", DefiningModule: "iana-if-type"},
		88:  {Name: "frForward", DefiningModule: "iana-if-type"},
		89:  {Name: "frameRelay", DefiningModule: "iana-if-type"},
		90:  {Name: "frameRelayInterconnect", DefiningModule: "iana-if-type"},
		91:  {Name: "frameRelayMPI", DefiningModule: "iana-if-type"},
		92:  {Name: "frameRelayService", DefiningModule: "iana-if-type"},
		93:  {Name: "frf16MfrBundle", DefiningModule: "iana-if-type"},
		94:  {Name: "g703at2mb", DefiningModule: "iana-if-type"},
		95:  {Name: "g703at64k", DefiningModule: "iana-if-type"},
		96:  {Name: "g9981", DefiningModule: "iana-if-type"},
		97:  {Name: "g9982", DefiningModule: "iana-if-type"},
		98:  {Name: "g9983", DefiningModule: "iana-if-type"},
		99:  {Name: "gfp", DefiningModule: "iana-if-type"},
		100: {Name: "gigabitEthernet", DefiningModule: "iana-if-type"},
		101: {Name: "gpon", DefiningModule: "iana-if-type"},
		102: {Name: "gr303IDT", DefiningModule: "iana-if-type"},
		103: {Name: "gr303RDT", DefiningModule: "iana-if-type"},
		104: {Name: "gtp", DefiningModule: "iana-if-type"},
		105: {Name: "h323Gatekeeper", DefiningModule: "iana-if-type"},
		106: {Name: "h323Proxy", DefiningModule: "iana-if-type"},
		107: {Name: "hdh1822", DefiningModule: "iana-if-type"},
		108: {Name: "hdlc", DefiningModule: "iana-if-type"},
		109: {Name: "hdsl2", DefiningModule: "iana-if-type"},
		110: {Name: "hiperlan2", DefiningModule: "iana-if-type"},
		111: {Name: "hippi", DefiningModule: "iana-if-type"},
		112: {Name: "hippiInterface", DefiningModule: "iana-if-type"},
		113: {Name: "homepna", DefiningModule: "iana-if-type"},
		114: {Name: "hostPad", DefiningModule: "iana-if-type"},
		115: {Name: "hssi", DefiningModule: "iana-if-type"},
		116: {Name: "hyperchannel", DefiningModule: "iana-if-type"},
		117: {Name: "iana-interface-type", DefiningModule: "iana-if-type"},
		118: {Name: "ibm370parChan", DefiningModule: "iana-if-type"},
		119: {Name: "idsl", DefiningModule: "iana-if-type"},
		120: {Name: "ieee1394", DefiningModule: "iana-if-type"},
		121: {Name: "ieee80211", DefiningModule: "iana-if-type"},
		122: {Name: "ieee80212", DefiningModule: "iana-if-type"},
		123: {Name: "ieee802154", DefiningModule: "iana-if-type"},
		124: {Name: "ieee80216WMAN", DefiningModule: "iana-if-type"},
		125: {Name: "ieee8023adLag", DefiningModule: "iana-if-type"},
		126: {Name: "if-gsn", DefiningModule: "iana-if-type"},
		127: {Name: "ifPwType", DefiningModule: "iana-if-type"},
		128: {Name: "ifVfiType", DefiningModule: "iana-if-type"},
		129: {Name: "ilan", DefiningModule: "iana-if-type"},
		130: {Name: "imt", DefiningModule: "iana-if-type"},
		131: {Name: "infiniband", DefiningModule: "iana-if-type"},
		132: {Name: "interleave", DefiningModule: "iana-if-type"},
		133: {Name: "ip", DefiningModule: "iana-if-type"},
		134: {Name: "ipForward", DefiningModule: "iana-if-type"},
		135: {Name: "ipOverAtm", DefiningModule: "iana-if-type"},
		136: {Name: "ipOverCdlc", DefiningModule: "iana-if-type"},
		137: {Name: "ipOverClaw", DefiningModule: "iana-if-type"},
		138: {Name: "ipSwitch", DefiningModule: "iana-if-type"},
		139: {Name: "isdn", DefiningModule: "iana-if-type"},
		140: {Name: "isdns", DefiningModule: "iana-if-type"},
		141: {Name: "isdnu", DefiningModule: "iana-if-type"},
		142: {Name: "iso88022llc", DefiningModule: "iana-if-type"},
		143: {Name: "iso88023Csmacd", DefiningModule: "iana-if-type"},
		144: {Name: "iso88024TokenBus", DefiningModule: "iana-if-type"},
		145: {Name: "iso88025CRFPInt", DefiningModule: "iana-if-type"},
		146: {Name: "iso88025Dtr", DefiningModule: "iana-if-type"},
		147: {Name: "iso88025Fiber", DefiningModule: "iana-if-type"},
		148: {Name: "iso88025TokenRing", DefiningModule: "iana-if-type"},
		149: {Name: "iso88026Man", DefiningModule: "iana-if-type"},
		150: {Name: "isup", DefiningModule: "iana-if-type"},
		151: {Name: "l2vlan", DefiningModule: "iana-if-type"},
		152: {Name: "l3ipvlan", DefiningModule: "iana-if-type"},
		153: {Name: "l3ipxvlan", DefiningModule: "iana-if-type"},
		154: {Name: "lapb", DefiningModule: "iana-if-type"},
		155: {Name: "lapd", DefiningModule: "iana-if-type"},
		156: {Name: "lapf", DefiningModule: "iana-if-type"},
		157: {Name: "linegroup", DefiningModule: "iana-if-type"},
		158: {Name: "lmp", DefiningModule: "iana-if-type"},
		159: {Name: "localTalk", DefiningModule: "iana-if-type"},
		160: {Name: "macSecControlledIF", DefiningModule: "iana-if-type"},
		161: {Name: "macSecUncontrolledIF", DefiningModule: "iana-if-type"},
		162: {Name: "mediaMailOverIp", DefiningModule: "iana-if-type"},
		163: {Name: "mfSigLink", DefiningModule: "iana-if-type"},
		164: {Name: "miox25", DefiningModule: "iana-if-type"},
		165: {Name: "mocaVersion1", DefiningModule: "iana-if-type"},
		166: {Name: "modem", DefiningModule: "iana-if-type"},
		167: {Name: "mpc", DefiningModule: "iana-if-type"},
		168: {Name: "mpegTransport", DefiningModule: "iana-if-type"},
		169: {Name: "mpls", DefiningModule: "iana-if-type"},
		170: {Name: "mplsTunnel", DefiningModule: "iana-if-type"},
		171: {Name: "msdsl", DefiningModule: "iana-if-type"},
		172: {Name: "mvl", DefiningModule: "iana-if-type"},
		173: {Name: "myrinet", DefiningModule: "iana-if-type"},
		174: {Name: "nfas", DefiningModule: "iana-if-type"},
		175: {Name: "nsip", DefiningModule: "iana-if-type"},
		176: {Name: "opticalChannel", DefiningModule: "iana-if-type"},
		177: {Name: "opticalChannelGroup", DefiningModule: "iana-if-type"},
		178: {Name: "opticalTransport", DefiningModule: "iana-if-type"},
		179: {Name: "other", DefiningModule: "iana-if-type"},
		180: {Name: "otnOdu", DefiningModule: "iana-if-type"},
		181: {Name: "otnOtu", DefiningModule: "iana-if-type"},
		182: {Name: "para", DefiningModule: "iana-if-type"},
		183: {Name: "pdnEtherLoop1", DefiningModule: "iana-if-type"},
		184: {Name: "pdnEtherLoop2", DefiningModule: "iana-if-type"},
		185: {Name: "pip", DefiningModule: "iana-if-type"},
		186: {Name: "plc", DefiningModule: "iana-if-type"},
		187: {Name: "pon155", DefiningModule: "iana-if-type"},
		188: {Name: "pon622", DefiningModule: "iana-if-type"},
		189: {Name: "pos", DefiningModule: "iana-if-type"},
		190: {Name: "ppp", DefiningModule: "iana-if-type"},
		191: {Name: "pppMultilinkBundle", DefiningModule: "iana-if-type"},
		192: {Name: "primaryISDN", DefiningModule: "iana-if-type"},
		193: {Name: "propAtm", DefiningModule: "iana-if-type"},
		194: {Name: "propBWAp2Mp", DefiningModule: "iana-if-type"},
		195: {Name: "propCnls", DefiningModule: "iana-if-type"},
		196: {Name: "propDocsWirelessDownstream", DefiningModule: "iana-if-type"},
		197: {Name: "propDocsWirelessMaclayer", DefiningModule: "iana-if-type"},
		198: {Name: "propDocsWirelessUpstream", DefiningModule: "iana-if-type"},
		199: {Name: "propMultiplexor", DefiningModule: "iana-if-type"},
		200: {Name: "propPointToPointSerial", DefiningModule: "iana-if-type"},
		201: {Name: "propVirtual", DefiningModule: "iana-if-type"},
		202: {Name: "propWirelessP2P", DefiningModule: "iana-if-type"},
		203: {Name: "proteon10Mbit", DefiningModule: "iana-if-type"},
		204: {Name: "proteon80Mbit", DefiningModule: "iana-if-type"},
		205: {Name: "q2931", DefiningModule: "iana-if-type"},
		206: {Name: "qam", DefiningModule: "iana-if-type"},
		207: {Name: "qllc", DefiningModule: "iana-if-type"},
		208: {Name: "radioMAC", DefiningModule: "iana-if-type"},
		209: {Name: "radsl", DefiningModule: "iana-if-type"},
		210: {Name: "reachDSL", DefiningModule: "iana-if-type"},
		211: {Name: "regular1822", DefiningModule: "iana-if-type"},
		212: {Name: "rfc1483", DefiningModule: "iana-if-type"},
		213: {Name: "rfc877x25", DefiningModule: "iana-if-type"},
		214: {Name: "rpr", DefiningModule: "iana-if-type"},
		215: {Name: "rs232", DefiningModule: "iana-if-type"},
		216: {Name: "rsrb", DefiningModule: "iana-if-type"},
		217: {Name: "sdlc", DefiningModule: "iana-if-type"},
		218: {Name: "sdsl", DefiningModule: "iana-if-type"},
		219: {Name: "shdsl", DefiningModule: "iana-if-type"},
		220: {Name: "sip", DefiningModule: "iana-if-type"},
		221: {Name: "sipSig", DefiningModule: "iana-if-type"},
		222: {Name: "sipTg", DefiningModule: "iana-if-type"},
		223: {Name: "sixToFour", DefiningModule: "iana-if-type"},
		224: {Name: "slip", DefiningModule: "iana-if-type"},
		225: {Name: "smdsDxi", DefiningModule: "iana-if-type"},
		226: {Name: "smdsIcip", DefiningModule: "iana-if-type"},
		227: {Name: "softwareLoopback", DefiningModule: "iana-if-type"},
		228: {Name: "sonet", DefiningModule: "iana-if-type"},
		229: {Name: "sonetOverheadChannel", DefiningModule: "iana-if-type"},
		230: {Name: "sonetPath", DefiningModule: "iana-if-type"},
		231: {Name: "sonetVT", DefiningModule: "iana-if-type"},
		232: {Name: "srp", DefiningModule: "iana-if-type"},
		233: {Name: "ss7SigLink", DefiningModule: "iana-if-type"},
		234: {Name: "stackToStack", DefiningModule: "iana-if-type"},
		235: {Name: "starLan", DefiningModule: "iana-if-type"},
		236: {Name: "tdlc", DefiningModule: "iana-if-type"},
		237: {Name: "teLink", DefiningModule: "iana-if-type"},
		238: {Name: "termPad", DefiningModule: "iana-if-type"},
		239: {Name: "tr008", DefiningModule: "iana-if-type"},
		240: {Name: "transpHdlc", DefiningModule: "iana-if-type"},
		241: {Name: "tunnel", DefiningModule: "iana-if-type"},
		242: {Name: "ultra", DefiningModule: "iana-if-type"},
		243: {Name: "usb", DefiningModule: "iana-if-type"},
		244: {Name: "v11", DefiningModule: "iana-if-type"},
		245: {Name: "v35", DefiningModule: "iana-if-type"},
		246: {Name: "v36", DefiningModule: "iana-if-type"},
		247: {Name: "v37", DefiningModule: "iana-if-type"},
		248: {Name: "vdsl", DefiningModule: "iana-if-type"},
		249: {Name: "vdsl2", DefiningModule: "iana-if-type"},
		250: {Name: "virtualIpAddress", DefiningModule: "iana-if-type"},
		251: {Name: "virtualTg", DefiningModule: "iana-if-type"},
		252: {Name: "vmwareNicTeam", DefiningModule: "iana-if-type"},
		253: {Name: "vmwareVirtualNic", DefiningModule: "iana-if-type"},
		254: {Name: "voiceDID", DefiningModule: "iana-if-type"},
		255: {Name: "voiceEBS", DefiningModule: "iana-if-type"},
		256: {Name: "voiceEM", DefiningModule: "iana-if-type"},
		257: {Name: "voiceEMFGD", DefiningModule: "iana-if-type"},
		258: {Name: "voiceEncap", DefiningModule: "iana-if-type"},
		259: {Name: "voiceFGDEANA", DefiningModule: "iana-if-type"},
		260: {Name: "voiceFGDOS", DefiningModule: "iana-if-type"},
		261: {Name: "voiceFXO", DefiningModule: "iana-if-type"},
		262: {Name: "voiceFXS", DefiningModule: "iana-if-type"},
		263: {Name: "voiceOverAtm", DefiningModule: "iana-if-type"},
		264: {Name: "voiceOverCable", DefiningModule: "iana-if-type"},
		265: {Name: "voiceOverFrameRelay", DefiningModule: "iana-if-type"},
		266: {Name: "voiceOverIp", DefiningModule: "iana-if-type"},
		267: {Name: "wwanPP", DefiningModule: "iana-if-type"},
		268: {Name: "wwanPP2", DefiningModule: "iana-if-type"},
		269: {Name: "x213", DefiningModule: "iana-if-type"},
		270: {Name: "x25huntGroup", DefiningModule: "iana-if-type"},
		271: {Name: "x25mlp", DefiningModule: "iana-if-type"},
		272: {Name: "x25ple", DefiningModule: "iana-if-type"},
		273: {Name: "x86Laps", DefiningModule: "iana-if-type"},
	},
	"E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE": {
		1: {Name: "AAA_ACCOUNTING_EVENT_COMMAND", DefiningModule: "openconfig-aaa-types"},
		2: {Name: "AAA_ACCOUNTING_EVENT_LOGIN", DefiningModule: "openconfig-aaa-types"},
	},
	"E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE": {
		1: {Name: "AAA_AUTHORIZATION_EVENT_COMMAND", DefiningModule: "openconfig-aaa-types"},
		2: {Name: "AAA_AUTHORIZATION_EVENT_CONFIG", DefiningModule: "openconfig-aaa-types"},
	},
	"E_OpenconfigAaaTypes_AAA_METHOD_TYPE": {
		1: {Name: "LOCAL", DefiningModule: "openconfig-aaa-types"},
		2: {Name: "RADIUS_ALL", DefiningModule: "openconfig-aaa-types"},
		3: {Name: "TACACS_ALL", DefiningModule: "openconfig-aaa-types"},
	},
	"E_OpenconfigAaaTypes_AAA_SERVER_TYPE": {
		1: {Name: "RADIUS", DefiningModule: "openconfig-aaa"},
		2: {Name: "TACACS", DefiningModule: "openconfig-aaa"},
	},
	"E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES": {
		1: {Name: "SYSTEM_ROLE_ADMIN", DefiningModule: "openconfig-aaa-types"},
	},
	"E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY": {
		1: {Name: "CRITICAL", DefiningModule: "openconfig-alarm-types"},
		2: {Name: "MAJOR", DefiningModule: "openconfig-alarm-types"},
		3: {Name: "MINOR", DefiningModule: "openconfig-alarm-types"},
		4: {Name: "UNKNOWN", DefiningModule: "openconfig-alarm-types"},
		5: {Name: "WARNING", DefiningModule: "openconfig-alarm-types"},
	},
	"E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID": {
		1: {Name: "AIS", DefiningModule: "openconfig-alarm-types"},
		2: {Name: "EQPT", DefiningModule: "openconfig-alarm-types"},
		3: {Name: "LOS", DefiningModule: "openconfig-alarm-types"},
		4: {Name: "OTS", DefiningModule: "openconfig-alarm-types"},
	},
	"E_OpenconfigIfEthernet_ETHERNET_SPEED": {
		1:  {Name: "SPEED_100GB", DefiningModule: "openconfig-if-ethernet"},
		2:  {Name: "SPEED_100MB", DefiningModule: "openconfig-if-ethernet"},
		3:  {Name: "SPEED_10GB", DefiningModule: "openconfig-if-ethernet"},
		4:  {Name: "SPEED_10MB", DefiningModule: "openconfig-if-ethernet"},
		5:  {Name: "SPEED_1GB", DefiningModule: "openconfig-if-ethernet"},
		6:  {Name: "SPEED_2500MB", DefiningModule: "openconfig-if-ethernet"},
		7:  {Name: "SPEED_25GB", DefiningModule: "openconfig-if-ethernet"},
		8:  {Name: "SPEED_40GB", DefiningModule: "openconfig-if-ethernet"},
		9:  {Name: "SPEED_50GB", DefiningModule: "openconfig-if-ethernet"},
		10: {Name: "SPEED_5GB", DefiningModule: "openconfig-if-ethernet"},
		11: {Name: "SPEED_UNKNOWN", DefiningModule: "openconfig-if-ethernet"},
	},
	"E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls": {
		1: {Name: "NONE"},
		2: {Name: "LASER_SHUTDOWN"},
		3: {Name: "ETHERNET"},
	},
	"E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec": {
		1: {Name: "ENABLED"},
		2: {Name: "DISABLED"},
		3: {Name: "AUTO"},
	},
	"E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode": {
		1: {Name: "FULL"},
		2: {Name: "HALF"},
	},
	"E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode": {
		1: {Name: "FULL"},
		2: {Name: "HALF"},
	},
	"E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus": {
		1: {Name: "UP"},
		2: {Name: "DOWN"},
		3: {Name: "TESTING"},
	},
	"E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus": {
		2: {Name: "UP"},
		3: {Name: "DOWN"},
		4: {Name: "TESTING"},
		5: {Name: "UNKNOWN"},
		6: {Name: "DORMANT"},
		7: {Name: "NOT_PRESENT"},
		8: {Name: "LOWER_LAYER_DOWN"},
	},
	"E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY": {
		1:  {Name: "C_VLAN", DefiningModule: "openconfig-lldp-types"},
		2:  {Name: "DOCSIS_CABLE_DEVICE", DefiningModule: "openconfig-lldp-types"},
		3:  {Name: "MAC_BRIDGE", DefiningModule: "openconfig-lldp-types"},
		4:  {Name: "OTHER", DefiningModule: "openconfig-lldp-types"},
		5:  {Name: "REPEATER", DefiningModule: "openconfig-lldp-types"},
		6:  {Name: "ROUTER", DefiningModule: "openconfig-lldp-types"},
		7:  {Name: "STATION_ONLY", DefiningModule: "openconfig-lldp-types"},
		8:  {Name: "S_VLAN", DefiningModule: "openconfig-lldp-types"},
		9:  {Name: "TELEPHONE", DefiningModule: "openconfig-lldp-types"},
		10: {Name: "TWO_PORT_MAC_RELAY", DefiningModule: "openconfig-lldp-types"},
		11: {Name: "WLAN_ACCESS_POINT", DefiningModule: "openconfig-lldp-types"},
	},
	"E_OpenconfigLldpTypes_LLDP_TLV": {
		1: {Name: "CHASSIS_ID", DefiningModule: "openconfig-lldp-types"},
		2: {Name: "MANAGEMENT_ADDRESS", DefiningModule: "openconfig-lldp-types"},
		3: {Name: "PORT_DESCRIPTION", DefiningModule: "openconfig-lldp-types"},
		4: {Name: "PORT_ID", DefiningModule: "openconfig-lldp-types"},
		5: {Name: "SYSTEM_CAPABILITIES", DefiningModule: "openconfig-lldp-types"},
		6: {Name: "SYSTEM_DESCRIPTION", DefiningModule: "openconfig-lldp-types"},
		7: {Name: "SYSTEM_NAME", DefiningModule: "openconfig-lldp-types"},
	},
	"E_OpenconfigLldp_ChassisIdType": {
		1: {Name: "CHASSIS_COMPONENT"},
		2: {Name: "INTERFACE_ALIAS"},
		3: {Name: "PORT_COMPONENT"},
		4: {Name: "MAC_ADDRESS"},
		5: {Name: "NETWORK_ADDRESS"},
		6: {Name: "INTERFACE_NAME"},
		7: {Name: "LOCAL"},
	},
	"E_OpenconfigLldp_PortIdType": {
		1: {Name: "INTERFACE_ALIAS"},
		2: {Name: "PORT_COMPONENT"},
		3: {Name: "MAC_ADDRESS"},
		4: {Name: "NETWORK_ADDRESS"},
		5: {Name: "INTERFACE_NAME"},
		6: {Name: "AGENT_CIRCUIT_ID"},
		7: {Name: "LOCAL"},
	},
	"E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS": {
		1: {Name: "ACTIVE", DefiningModule: "openconfig-platform-types"},
		2: {Name: "DISABLED", DefiningModule: "openconfig-platform-types"},
		3: {Name: "INACTIVE", DefiningModule: "openconfig-platform-types"},
	},
	"E_OpenconfigPlatformTypes_FEC_MODE_TYPE": {
		1: {Name: "FEC_AUTO", DefiningModule: "openconfig-platform-types"},
		2: {Name: "FEC_DISABLED", DefiningModule: "openconfig-platform-types"},
		3: {Name: "FEC_ENABLED", DefiningModule: "openconfig-platform-types"},
	},
	"E_OpenconfigPlatformTypes_FEC_STATUS_TYPE": {
		1: {Name: "FEC_STATUS_LOCKED", DefiningModule: "openconfig-platform-types"},
		2: {Name: "FEC_STATUS_UNLOCKED", DefiningModule: "openconfig-platform-types"},
	},
	"E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT": {
		1:  {Name: "BACKPLANE", DefiningModule: "openconfig-platform-types"},
		2:  {Name: "CHASSIS", DefiningModule: "openconfig-platform-types"},
		3:  {Name: "CONTROLLER_CARD", DefiningModule: "openconfig-platform-types"},
		4:  {Name: "CPU", DefiningModule: "openconfig-platform-types"},
		5:  {Name: "FABRIC", DefiningModule: "openconfig-platform-types"},
		6:  {Name: "FAN", DefiningModule: "openconfig-platform-types"},
		7:  {Name: "FRU", DefiningModule: "openconfig-platform-types"},
		8:  {Name: "INTEGRATED_CIRCUIT", DefiningModule: "openconfig-platform-types"},
		9:  {Name: "LINECARD", DefiningModule: "openconfig-platform-types"},
		10: {Name: "OPTICAL_CHANNEL", DefiningModule: "openconfig-transport-types"},
		11: {Name: "PORT", DefiningModule: "openconfig-platform-types"},
		12: {Name: "POWER_SUPPLY", DefiningModule: "openconfig-platform-types"},
		13: {Name: "SENSOR", DefiningModule: "openconfig-platform-types"},
		14: {Name: "STORAGE", DefiningModule: "openconfig-platform-types"},
		15: {Name: "TRANSCEIVER", DefiningModule: "openconfig-platform-types"},
	},
	"E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT": {
		1: {Name: "OPERATING_SYSTEM", DefiningModule: "openconfig-platform-types"},
	},
	"E_OpenconfigPlatform_Components_Component_Transceiver_State_Present": {
		1: {Name: "PRESENT"},
		2: {Name: "NOT_PRESENT"},
	},
	"E_OpenconfigSystemLogging_SYSLOG_FACILITY": {
		1:  {Name: "ALL", DefiningModule: "openconfig-system-logging"},
		2:  {Name: "AUDIT", DefiningModule: "openconfig-system-logging"},
		3:  {Name: "AUTH", DefiningModule: "openconfig-system-logging"},
		4:  {Name: "AUTHPRIV", DefiningModule: "openconfig-system-logging"},
		5:  {Name: "CONSOLE", DefiningModule: "openconfig-system-logging"},
		6:  {Name: "KERNEL", DefiningModule: "openconfig-system-logging"},
		7:  {Name: "LOCAL0", DefiningModule: "openconfig-system-logging"},
		8:  {Name: "LOCAL1", DefiningModule: "openconfig-system-logging"},
		9:  {Name: "LOCAL2", DefiningModule: "openconfig-system-logging"},
		10: {Name: "LOCAL3", DefiningModule: "openconfig-system-logging"},
		11: {Name: "LOCAL4", DefiningModule: "openconfig-system-logging"},
		12: {Name: "LOCAL5", DefiningModule: "openconfig-system-logging"},
		13: {Name: "LOCAL6", DefiningModule: "openconfig-system-logging"},
		14: {Name: "LOCAL7", DefiningModule: "openconfig-system-logging"},
		15: {Name: "MAIL", DefiningModule: "openconfig-system-logging"},
		16: {Name: "NTP", DefiningModule: "openconfig-system-logging"},
		17: {Name: "SYSLOG", DefiningModule: "openconfig-system-logging"},
		18: {Name: "SYSTEM_DAEMON", DefiningModule: "openconfig-system-logging"},
		19: {Name: "USER", DefiningModule: "openconfig-system-logging"},
	},
	"E_OpenconfigSystemLogging_SyslogSeverity": {
		1: {Name: "EMERGENCY"},
		2: {Name: "ALERT"},
		3: {Name: "CRITICAL"},
		4: {Name: "ERROR"},
		5: {Name: "WARNING"},
		6: {Name: "NOTICE"},
		7: {Name: "INFORMATIONAL"},
		8: {Name: "DEBUG"},
	},
	"E_OpenconfigSystem_NTP_AUTH_TYPE": {
		1: {Name: "NTP_AUTH_MD5", DefiningModule: "openconfig-system"},
	},
	"E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record": {
		1: {Name: "START_STOP"},
		2: {Name: "STOP"},
	},
	"E_OpenconfigSystem_System_Cpus_Cpu_State_Index": {
		1: {Name: "ALL"},
	},
	"E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses": {
		1: {Name: "ANY"},
	},
	"E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType": {
		1: {Name: "SERVER"},
		2: {Name: "PEER"},
		3: {Name: "POOL"},
	},
	"E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion": {
		1: {Name: "V2"},
		2: {Name: "V1"},
		3: {Name: "V1_V2"},
	},
	"E_OpenconfigTerminalDevice_AdminStateType": {
		1: {Name: "ENABLED"},
		2: {Name: "DISABLED"},
		3: {Name: "MAINT"},
	},
	"E_OpenconfigTerminalDevice_LoopbackModeType": {
		1: {Name: "NONE"},
		2: {Name: "FACILITY"},
		3: {Name: "TERMINAL"},
	},
	"E_OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType": {
		1: {Name: "LOGICAL_CHANNEL"},
		2: {Name: "OPTICAL_CHANNEL"},
	},
	"E_OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState": {
		1: {Name: "UP"},
		2: {Name: "DOWN"},
		3: {Name: "TESTING"},
	},
	"E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE": {
		1:  {Name: "ETH_100GBASE_CLR4", DefiningModule: "openconfig-transport-types"},
		2:  {Name: "ETH_100GBASE_CR4", DefiningModule: "openconfig-transport-types"},
		3:  {Name: "ETH_100GBASE_CWDM4", DefiningModule: "openconfig-transport-types"},
		4:  {Name: "ETH_100GBASE_ER4", DefiningModule: "openconfig-transport-types"},
		5:  {Name: "ETH_100GBASE_LR4", DefiningModule: "openconfig-transport-types"},
		6:  {Name: "ETH_100GBASE_PSM4", DefiningModule: "openconfig-transport-types"},
		7:  {Name: "ETH_100GBASE_SR10", DefiningModule: "openconfig-transport-types"},
		8:  {Name: "ETH_100GBASE_SR4", DefiningModule: "openconfig-transport-types"},
		9:  {Name: "ETH_100G_ACC", DefiningModule: "openconfig-transport-types"},
		10: {Name: "ETH_100G_AOC", DefiningModule: "openconfig-transport-types"},
		11: {Name: "ETH_10GBASE_ER", DefiningModule: "openconfig-transport-types"},
		12: {Name: "ETH_10GBASE_LR", DefiningModule: "openconfig-transport-types"},
		13: {Name: "ETH_10GBASE_LRM", DefiningModule: "openconfig-transport-types"},
		14: {Name: "ETH_10GBASE_SR", DefiningModule: "openconfig-transport-types"},
		15: {Name: "ETH_10GBASE_ZR", DefiningModule: "openconfig-transport-types"},
		16: {Name: "ETH_40GBASE_CR4", DefiningModule: "openconfig-transport-types"},
		17: {Name: "ETH_40GBASE_ER4", DefiningModule: "openconfig-transport-types"},
		18: {Name: "ETH_40GBASE_LR4", DefiningModule: "openconfig-transport-types"},
		19: {Name: "ETH_40GBASE_PSM4", DefiningModule: "openconfig-transport-types"},
		20: {Name: "ETH_40GBASE_SR4", DefiningModule: "openconfig-transport-types"},
		21: {Name: "ETH_4X10GBASE_LR", DefiningModule: "openconfig-transport-types"},
		22: {Name: "ETH_4X10GBASE_SR", DefiningModule: "openconfig-transport-types"},
		23: {Name: "ETH_UNDEFINED", DefiningModule: "openconfig-transport-types"},
	},
	"E_OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE": {
		1: {Name: "LC_CONNECTOR", DefiningModule: "openconfig-transport-types"},
		2: {Name: "MPO_CONNECTOR", DefiningModule: "openconfig-transport-types"},
		3: {Name: "SC_CONNECTOR", DefiningModule: "openconfig-transport-types"},
	},
	"E_OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL": {
		1: {Name: "AMP", DefiningModule: "openconfig-transport-types"},
		2: {Name: "BMP", DefiningModule: "openconfig-transport-types"},
		3: {Name: "CBR", DefiningModule: "openconfig-transport-types"},
		4: {Name: "GFP_F", DefiningModule: "openconfig-transport-types"},
		5: {Name: "GFP_T", DefiningModule: "openconfig-transport-types"},
		6: {Name: "GMP", DefiningModule: "openconfig-transport-types"},
	},
	"E_OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE": {
		1: {Name: "PROT_ETHERNET", DefiningModule: "openconfig-transport-types"},
		2: {Name: "PROT_OTN", DefiningModule: "openconfig-transport-types"},
	},
	"E_OpenconfigTransportTypes_OTN_APPLICATION_CODE": {
		1: {Name: "OTN_UNDEFINED", DefiningModule: "openconfig-transport-types"},
		2: {Name: "P1L1_2D1", DefiningModule: "openconfig-transport-types"},
		3: {Name: "P1L1_2D2", DefiningModule: "openconfig-transport-types"},
		4: {Name: "P1S1_2D2", DefiningModule: "openconfig-transport-types"},
	},
	"E_OpenconfigTransportTypes_SONET_APPLICATION_CODE": {
		1: {Name: "SONET_UNDEFINED", DefiningModule: "openconfig-transport-types"},
		2: {Name: "VSR2000_3R2", DefiningModule: "openconfig-transport-types"},
		3: {Name: "VSR2000_3R3", DefiningModule: "openconfig-transport-types"},
		4: {Name: "VSR2000_3R5", DefiningModule: "openconfig-transport-types"},
	},
	"E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE": {
		1:  {Name: "CFP", DefiningModule: "openconfig-transport-types"},
		2:  {Name: "CFP2", DefiningModule: "openconfig-transport-types"},
		3:  {Name: "CFP2_ACO", DefiningModule: "openconfig-transport-types"},
		4:  {Name: "CFP4", DefiningModule: "openconfig-transport-types"},
		5:  {Name: "CPAK", DefiningModule: "openconfig-transport-types"},
		6:  {Name: "NON_PLUGGABLE", DefiningModule: "openconfig-transport-types"},
		7:  {Name: "OTHER", DefiningModule: "openconfig-transport-types"},
		8:  {Name: "QSFP", DefiningModule: "openconfig-transport-types"},
		9:  {Name: "QSFP28", DefiningModule: "openconfig-transport-types"},
		10: {Name: "QSFP_PLUS", DefiningModule: "openconfig-transport-types"},
		11: {Name: "SFP", DefiningModule: "openconfig-transport-types"},
		12: {Name: "SFP_PLUS", DefiningModule: "openconfig-transport-types"},
		13: {Name: "X2", DefiningModule: "openconfig-transport-types"},
		14: {Name: "XFP", DefiningModule: "openconfig-transport-types"},
	},
	"E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE": {
		1:  {Name: "PROT_100GE", DefiningModule: "openconfig-transport-types"},
		2:  {Name: "PROT_100G_MLG", DefiningModule: "openconfig-transport-types"},
		3:  {Name: "PROT_10GE_LAN", DefiningModule: "openconfig-transport-types"},
		4:  {Name: "PROT_10GE_WAN", DefiningModule: "openconfig-transport-types"},
		5:  {Name: "PROT_1GE", DefiningModule: "openconfig-transport-types"},
		6:  {Name: "PROT_40GE", DefiningModule: "openconfig-transport-types"},
		7:  {Name: "PROT_OC192", DefiningModule: "openconfig-transport-types"},
		8:  {Name: "PROT_OC48", DefiningModule: "openconfig-transport-types"},
		9:  {Name: "PROT_OC768", DefiningModule: "openconfig-transport-types"},
		10: {Name: "PROT_ODU2", DefiningModule: "openconfig-transport-types"},
		11: {Name: "PROT_ODU2E", DefiningModule: "openconfig-transport-types"},
		12: {Name: "PROT_ODU3", DefiningModule: "openconfig-transport-types"},
		13: {Name: "PROT_ODU4", DefiningModule: "openconfig-transport-types"},
		14: {Name: "PROT_ODUCN", DefiningModule: "openconfig-transport-types"},
		15: {Name: "PROT_OTU1E", DefiningModule: "openconfig-transport-types"},
		16: {Name: "PROT_OTU2", DefiningModule: "openconfig-transport-types"},
		17: {Name: "PROT_OTU2E", DefiningModule: "openconfig-transport-types"},
		18: {Name: "PROT_OTU3", DefiningModule: "openconfig-transport-types"},
		19: {Name: "PROT_OTU4", DefiningModule: "openconfig-transport-types"},
		20: {Name: "PROT_OTUCN", DefiningModule: "openconfig-transport-types"},
		21: {Name: "PROT_STM16", DefiningModule: "openconfig-transport-types"},
		22: {Name: "PROT_STM256", DefiningModule: "openconfig-transport-types"},
		23: {Name: "PROT_STM64", DefiningModule: "openconfig-transport-types"},
	},
	"E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE": {
		1:  {Name: "TRIB_RATE_1000G", DefiningModule: "openconfig-transport-types"},
		2:  {Name: "TRIB_RATE_100G", DefiningModule: "openconfig-transport-types"},
		3:  {Name: "TRIB_RATE_10G", DefiningModule: "openconfig-transport-types"},
		4:  {Name: "TRIB_RATE_1100G", DefiningModule: "openconfig-transport-types"},
		5:  {Name: "TRIB_RATE_150G", DefiningModule: "openconfig-transport-types"},
		6:  {Name: "TRIB_RATE_1G", DefiningModule: "openconfig-transport-types"},
		7:  {Name: "TRIB_RATE_2.5G", DefiningModule: "openconfig-transport-types"},
		8:  {Name: "TRIB_RATE_200G", DefiningModule: "openconfig-transport-types"},
		9:  {Name: "TRIB_RATE_250G", DefiningModule: "openconfig-transport-types"},
		10: {Name: "TRIB_RATE_300G", DefiningModule: "openconfig-transport-types"},
		11: {Name: "TRIB_RATE_400G", DefiningModule: "openconfig-transport-types"},
		12: {Name: "TRIB_RATE_40G", DefiningModule: "openconfig-transport-types"},
		13: {Name: "TRIB_RATE_500G", DefiningModule: "openconfig-transport-types"},
		14: {Name: "TRIB_RATE_600G", DefiningModule: "openconfig-transport-types"},
		15: {Name: "TRIB_RATE_700G", DefiningModule: "openconfig-transport-types"},
		16: {Name: "TRIB_RATE_800G", DefiningModule: "openconfig-transport-types"},
		17: {Name: "TRIB_RATE_900G", DefiningModule: "openconfig-transport-types"},
	},
	"E_OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY": {
		1: {Name: "TRIB_SLOT_1.25G", DefiningModule: "openconfig-transport-types"},
		2: {Name: "TRIB_SLOT_2.5G", DefiningModule: "openconfig-transport-types"},
		3: {Name: "TRIB_SLOT_5G", DefiningModule: "openconfig-transport-types"},
	},
}

var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0xfd, 0x6b, 0x6f, 0xe3, 0xba,
		0x92, 0xf7, 0x0d, 0xbf, 0xef, 0x4f, 0x11, 0x18, 0xf3, 0x62, 0x06, 0xd7, 0xf2, 0x4a, 0xec, 0x9c,
		0x1b, 0x78, 0xf0, 0xc0, 0x89, 0x9d, 0x6e, 0xdf, 0x2b, 0x8e, 0x3d, 0xb1, 0xbb, 0x7b, 0xed, 0x6b,
		0xef, 0x9e, 0x80, 0x96, 0x68, 0x87, 0x77, 0x4b, 0x94, 0x16, 0x45, 0xe7, 0x30, 0x1b, 0xeb, 0xbb,
		0xdf, 0xf0, 0x31, 0xce, 0x59, 0x22, 0x29, 0xdb, 0xa5, 0xfc, 0x07, 0x83, 0xbd, 0x92, 0xb4, 0x45,
		0x8b, 0x87, 0xaa, 0xfa, 0x55, 0xb1, 0x58, 0xfc, 0xf7, 0xa7, 0xad, 0xad, 0xad, 0xad, 0xd2, 0x05,
		0x0b, 0x79, 0xe9, 0xf3, 0x56, 0xc9, 0xe7, 0x37, 0xc2, 0xe3, 0xa5, 0xdf, 0xa6, 0x7f, 0xfd, 0x43,
		0x48, 0xbf, 0xf4, 0x79, 0xab, 0x32, 0xfb, 0xf5, 0x34, 0x92, 0x03, 0x31, 0x2c, 0x7d, 0xde, 0xda,
		0x99, 0xfd, 0xa1, 0x2e, 0x54, 0xe9, 0xf3, 0xd6, 0xb4, 0x89, 0xc9, 0x1f, 0xbc, 0x28, 0x8c, 0x23,
		0xc9, 0xa5, 0x4e, 0x1e, 0xfd, 0xfd, 0xd1, 0x57, 0x2c, 0x7d, 0xe6, 0xb7, 0xc7, 0x9f, 0x78, 0xfc,
		0x75, 0x8b, 0x3f, 0x3f, 0xfd, 0xda, 0xc5, 0x3f, 0x74, 0x14, 0x1f, 0x88, 0xbb, 0x67, 0xdf, 0xf4,
		0xe8, 0xdb, 0x22, 0xaf, 0x1c, 0x07, 0x4c, 0x0f, 0x22, 0x15, 0x3e, 0xf9, 0xba, 0xc9, 0xc7, 0xba,
		0xd1, 0x48, 0x79, 0xfc, 0xc5, 0x26, 0xa6, 0xaf, 0xc4, 0xef, 0x6f, 0x23, 0x35, 0x7e, 0xab, 0x52,
		0x3c, 0xfd, 0xb6, 0xdf, 0x5e, 0xfe, 0xe0, 0x57, 0x96, 0xd4, 0xd4, 0x70, 0x14, 0x72, 0xa9, 0x4b,
		0x9f, 0xb7, 0xb4, 0x1a, 0xf1, 0x57, 0x3e, 0xb8, 0xf4, 0xa9, 0x47, 0x2f, 0xf7, 0xec, 0xd3, 0x7f,
		0x3f, 0xfa, 0xcb, 0xdf, 0x4f, 0xfa, 0xfe, 0x74, 0xe8, 0x9f, 0x4f, 0xc1, 0xeb, 0x9d, 0x7a, 0x36,
		0x13, 0xaf, 0x75, 0xea, 0xe5, 0x09, 0x79, 0x77, 0x62, 0xd2, 0x4c, 0x50, 0xc6, 0x89, 0x4a, 0x3b,
		0x61, 0x99, 0x27, 0x2e, 0xf3, 0x04, 0x66, 0x9f, 0xc8, 0x97, 0x27, 0xf4, 0x95, 0x89, 0x7d, 0x77,
		0x82, 0x17, 0x1f, 0xe8, 0x33, 0xef, 0x57, 0x1c, 0x30, 0x99, 0x62, 0x30, 0xe6, 0x63, 0xfc, 0xf0,
		0xc8, 0x3b, 0x7d, 0x7b, 0x7b, 0xe2, 0x53, 0x2f, 0x80, 0x2c, 0x0b, 0xc1, 0x70, 0x41, 0x64, 0x5d,
		0x18, 0xc6, 0x0b, 0xc4, 0x78, 0xa1, 0x98, 0x2f, 0x98, 0xb7, 0x17, 0xce, 0x3b, 0x0b, 0x28, 0xf5,
		0x42, 0x5a, 0xd2, 0x1c, 0xb3, 0xd9, 0x4c, 0x39, 0x82, 0x0f, 0x6a, 0x64, 0xf2, 0x5c, 0xca, 0x51,
		0x48, 0xb7, 0xb4, 0x32, 0x2f, 0x31, 0x93, 0xa5, 0x66, 0xb9, 0xe4, 0x4c, 0x97, 0x9e, 0xf5, 0x12,
		0xb4, 0x5e, 0x8a, 0xf6, 0x4b, 0x32, 0xdd, 0xd2, 0x4c, 0xb9, 0x44, 0x1f, 0x5e, 0x47, 0xca, 0x48,
		0x33, 0x2d, 0x22, 0x99, 0x6d, 0xfe, 0x12, 0xef, 0x9a, 0x87, 0x2c, 0x66, 0xfa, 0x7a, 0xdc, 0x91,
		0xed, 0x28, 0xe6, 0x72, 0xba, 0x28, 0x17, 0x3d, 0xda, 0x7e, 0xa0, 0x8e, 0x87, 0x1f, 0xb7, 0x17,
		0xfa, 0x70, 0x3b, 0xd3, 0x1a, 0x9e, 0x7e, 0xa7, 0x56, 0x23, 0x4f, 0xcb, 0xd9, 0xca, 0x69, 0x2f,
		0xbe, 0xb2, 0x33, 0xfb, 0xc6, 0xab, 0xd3, 0xc5, 0x37, 0x3e, 0xfc, 0x78, 0x75, 0x32, 0xff, 0xc6,
		0xab, 0xd9, 0xc2, 0xfe, 0xe4, 0x66, 0x94, 0x53, 0x8c, 0x70, 0x29, 0xd1, 0x4c, 0xf3, 0xec, 0xe2,
		0x3d, 0x7d, 0x2c, 0x67, 0xe9, 0xae, 0x42, 0xba, 0x21, 0xdd, 0xb9, 0x49, 0x77, 0x96, 0x25, 0xec,
		0x44, 0xb8, 0xbb, 0x93, 0x2f, 0x74, 0x25, 0xdb, 0x56, 0xe6, 0x3f, 0xe3, 0xa8, 0xdb, 0x8f, 0x76,
		0x29, 0x95, 0x2a, 0xb2, 0x1a, 0xdf, 0xb7, 0x47, 0xf6, 0xf5, 0xf1, 0x7a, 0x63, 0xac, 0x4a, 0xde,
		0x35, 0x4b, 0x12, 0x91, 0xa4, 0x87, 0xe9, 0xf9, 0x03, 0x40, 0x69, 0xa0, 0x34, 0x50, 0x1a, 0xc6,
		0xf6, 0x63, 0x1b, 0xdb, 0x99, 0x36, 0x5c, 0x19, 0x48, 0x9f, 0x4e, 0xbf, 0x0f, 0x18, 0x0d, 0x8c,
		0x86, 0x64, 0xaf, 0x44, 0xb2, 0x57, 0x04, 0xd1, 0x73, 0xc1, 0xfe, 0x80, 0x08, 0x9d, 0x8e, 0x28,
		0xed, 0xc7, 0x36, 0x17, 0x7c, 0x4e, 0x47, 0x3c, 0xd9, 0x48, 0x07, 0xf0, 0xfc, 0x11, 0xe1, 0x79,
		0xb6, 0xaa, 0x33, 0xda, 0xd7, 0xc9, 0x53, 0xd9, 0xcc, 0xeb, 0x0e, 0xc0, 0x19, 0xe6, 0xf5, 0xe9,
		0xeb, 0xf4, 0xee, 0x63, 0x6e, 0x36, 0x73, 0x89, 0x56, 0x42, 0x66, 0x42, 0xdf, 0xb9, 0x7a, 0x3b,
		0xfa, 0x58, 0x66, 0x2e, 0xad, 0x8b, 0x60, 0x6a, 0xe5, 0x52, 0xb8, 0x04, 0x86, 0x46, 0x2e, 0x1e,
		0x65, 0xb0, 0x70, 0xf1, 0x08, 0xe6, 0x0d, 0xe6, 0x0d, 0xb1, 0x21, 0x98, 0xb8, 0x8f, 0xee, 0x41,
		0xc6, 0xa3, 0xd5, 0xc5, 0x85, 0xe2, 0x11, 0x62, 0x42, 0x88, 0x09, 0x41, 0xa2, 0x73, 0x97, 0xe8,
		0x55, 0xc5, 0x83, 0xe2, 0xd1, 0x87, 0x8c, 0x05, 0xbd, 0x4b, 0x8f, 0x76, 0x63, 0x9a, 0x07, 0x1e,
		0x0f, 0x58, 0x5f, 0x09, 0x2f, 0x3d, 0x21, 0xcf, 0x3e, 0x0f, 0x48, 0x06, 0x24, 0x03, 0x92, 0x61,
		0x52, 0x3f, 0xb6, 0x49, 0x9d, 0x2a, 0xc3, 0x95, 0x71, 0xf2, 0xd9, 0xe4, 0xeb, 0x80, 0xca, 0x40,
		0x65, 0xc8, 0xf5, 0x2a, 0xe4, 0x7a, 0x45, 0xb4, 0x3c, 0x13, 0xeb, 0x0f, 0x08, 0xcc, 0xa9, 0x60,
		0xd2, 0x7a, 0x64, 0xf3, 0xc1, 0x66, 0x99, 0x85, 0x99, 0x25, 0x80, 0x19, 0xc0, 0x0c, 0x60, 0x86,
		0x61, 0xfd, 0xf0, 0x86, 0x55, 0xae, 0x90, 0x96, 0x25, 0x50, 0x19, 0xa8, 0x0c, 0x89, 0xce, 0x5d,
		0xa2, 0x57, 0xc6, 0xc9, 0xf2, 0x63, 0x42, 0xb2, 0xcc, 0x93, 0x90, 0x65, 0x1e, 0x78, 0x2c, 0xa4,
		0xe6, 0x43, 0xc5, 0x34, 0xf7, 0xcb, 0x9e, 0x50, 0xde, 0x48, 0xe8, 0xf4, 0xb4, 0xfc, 0xc2, 0xb3,
		0x80, 0x67, 0xc0, 0x33, 0xe0, 0x19, 0xa6, 0xf6, 0x63, 0x9b, 0xda, 0xe7, 0x8a, 0x71, 0x65, 0x2c,
		0xdd, 0x5c, 0x7c, 0xf5, 0xe9, 0xf4, 0x9b, 0x41, 0xd6, 0x20, 0x6b, 0x88, 0xfb, 0xaa, 0xc5, 0x7d,
		0x45, 0xa0, 0xfd, 0x5c, 0xda, 0x3f, 0x20, 0x76, 0x67, 0xc6, 0x50, 0x97, 0x03, 0x9e, 0x07, 0x93,
		0xa7, 0x3a, 0xa2, 0x91, 0xe5, 0x68, 0x46, 0xca, 0x23, 0x19, 0xe0, 0x6e, 0x0a, 0xdc, 0x9d, 0xfa,
		0x08, 0xc5, 0x62, 0xe4, 0x03, 0xce, 0x06, 0x8a, 0x0f, 0xd2, 0x8c, 0xfa, 0xdc, 0xac, 0x1e, 0xa6,
		0xf8, 0x6c, 0x67, 0x26, 0xa9, 0xbf, 0xff, 0x3e, 0xa3, 0x9b, 0xed, 0xc9, 0x52, 0xcc, 0x41, 0x20,
		0xa2, 0x58, 0x0b, 0x8f, 0x05, 0x65, 0xef, 0x9a, 0x49, 0xc9, 0x83, 0xf4, 0xb2, 0xf1, 0xf4, 0x41,
		0x1a, 0xee, 0x69, 0x14, 0xeb, 0xb2, 0xe6, 0x05, 0x15, 0x93, 0x45, 0xe7, 0xe0, 0x9e, 0x6e, 0x90,
		0x7b, 0x9a, 0x61, 0xc9, 0x15, 0x8f, 0x57, 0xd3, 0x2f, 0xc9, 0x7c, 0x78, 0x35, 0xed, 0x52, 0x5d,
		0x3c, 0x30, 0x50, 0xfc, 0xaf, 0x11, 0x97, 0xde, 0x7d, 0xf6, 0xc1, 0x5f, 0xec, 0x74, 0x2f, 0x9a,
		0xc8, 0x38, 0x76, 0xd9, 0x4e, 0x77, 0x1a, 0x2f, 0x68, 0x9b, 0x85, 0xed, 0x68, 0x81, 0xdb, 0x2e,
		0x74, 0x67, 0x0b, 0xde, 0xd9, 0xc2, 0x77, 0x27, 0x00, 0xd9, 0x04, 0x21, 0xa3, 0x40, 0x64, 0x47,
		0x9d, 0xf7, 0x97, 0x79, 0x59, 0x8f, 0xdb, 0x32, 0x98, 0xfc, 0xd9, 0x7a, 0x3f, 0x32, 0x78, 0xf4,
		0x9b, 0x14, 0x93, 0x52, 0xcd, 0xa5, 0xd6, 0xd7, 0xff, 0x35, 0xf9, 0xea, 0x4b, 0x26, 0x87, 0xe3,
		0x5e, 0xfc, 0xd3, 0x68, 0x92, 0xcd, 0x16, 0xeb, 0xe4, 0x8b, 0x5b, 0x42, 0x1a, 0xaf, 0x76, 0x4b,
		0x45, 0xf1, 0xac, 0x99, 0xef, 0x2c, 0x18, 0x71, 0x07, 0xed, 0x9c, 0x29, 0xe6, 0x8d, 0x7d, 0xd1,
		0xba, 0x18, 0x4e, 0x67, 0x65, 0xc7, 0xb8, 0xbd, 0xbf, 0x7f, 0xb3, 0x18, 0x5a, 0x76, 0xb7, 0x71,
		0x43, 0x5b, 0x39, 0xda, 0xdb, 0x3b, 0x38, 0xdc, 0xdb, 0xdb, 0x39, 0xdc, 0x3d, 0xdc, 0x39, 0xde,
		0xdf, 0xaf, 0x1c, 0x54, 0xf6, 0x37, 0x68, 0xb4, 0x3f, 0xad, 0xe6, 0xa9, 0x9f, 0x9f, 0xf2, 0x69,
		0x3f, 0xc3, 0x6a, 0x29, 0x05, 0x42, 0xf2, 0x72, 0x1c, 0x29, 0x6d, 0x6e, 0xd8, 0x1f, 0x9a, 0x80,
		0x61, 0x87, 0x61, 0x2f, 0xac, 0x61, 0x4f, 0x1f, 0xd3, 0xb0, 0x89, 0x71, 0xbc, 0x1a, 0xf3, 0xd8,
		0x5e, 0x0a, 0xf8, 0x7c, 0x5e, 0x8a, 0x4a, 0xbe, 0xf8, 0xe7, 0x47, 0x7f, 0x7d, 0x3f, 0x46, 0xb2,
		0x1a, 0x55, 0x13, 0xc5, 0x5c, 0x4d, 0x82, 0xb3, 0x2c, 0x28, 0x87, 0x91, 0xcf, 0xcd, 0x35, 0xce,
		0xb3, 0x96, 0xa0, 0x78, 0xa0, 0x78, 0x0a, 0xab, 0x78, 0x46, 0x42, 0xea, 0xca, 0x81, 0x85, 0xde,
		0x39, 0x80, 0x27, 0x00, 0x4f, 0x60, 0x43, 0x3d, 0x81, 0x83, 0xfd, 0xfd, 0x5d, 0xa0, 0xff, 0x5a,
		0xec, 0xb1, 0x66, 0x6a, 0xc8, 0x75, 0x39, 0x1a, 0xe9, 0x78, 0xa4, 0xcb, 0x71, 0x74, 0xcb, 0x95,
		0xb9, 0x49, 0x7e, 0xa9, 0x31, 0x58, 0x65, 0x58, 0xe5, 0xc2, 0x5a, 0x65, 0x9f, 0x7b, 0x22, 0x64,
		0xc1, 0xc1, 0x9e, 0x8d, 0x43, 0x50, 0x35, 0x78, 0xf6, 0x99, 0xb6, 0xab, 0x7e, 0x54, 0xf3, 0x5e,
		0x85, 0x79, 0xcf, 0xcb, 0xbc, 0xef, 0x16, 0x70, 0x68, 0xa9, 0x9b, 0x76, 0xd2, 0x19, 0x6b, 0x4f,
		0xf2, 0x22, 0x56, 0x96, 0x9d, 0xda, 0x9e, 0x7e, 0xef, 0xe9, 0xf4, 0x6b, 0x91, 0x9a, 0xba, 0x8e,
		0xd4, 0x54, 0x6c, 0xf5, 0x53, 0xda, 0xea, 0xf7, 0xae, 0x55, 0x14, 0x32, 0x2d, 0xbc, 0xb2, 0x2f,
		0x92, 0x98, 0xab, 0x24, 0xab, 0x8e, 0xd8, 0x7a, 0x7c, 0xab, 0xce, 0x0b, 0xad, 0x99, 0x39, 0x06,
		0x15, 0x38, 0x06, 0x70, 0x0c, 0xf2, 0x76, 0x0c, 0xb2, 0x8a, 0xcb, 0xe2, 0x41, 0x76, 0x33, 0x34,
		0x9f, 0xae, 0xf9, 0xaa, 0x19, 0x37, 0x62, 0x38, 0xbe, 0x76, 0x71, 0x19, 0x63, 0x61, 0x71, 0x21,
		0x34, 0xaf, 0x0a, 0xcf, 0x7d, 0xcc, 0x93, 0x92, 0x05, 0x11, 0x5b, 0x4a, 0x91, 0x73, 0x69, 0x72,
		0x2e, 0x55, 0x6f, 0x4a, 0xd7, 0x64, 0xf4, 0x56, 0x8d, 0xcb, 0x86, 0xab, 0xc7, 0xd8, 0x1f, 0x77,
		0xea, 0x97, 0xbb, 0xf0, 0xcf, 0x9d, 0xfa, 0xe9, 0x8e, 0xfc, 0x75, 0x7b, 0xbf, 0xdd, 0xa9, 0xff,
		0xee, 0xd8, 0x8f, 0x77, 0xed, 0x74, 0xe6, 0xe1, 0x7c, 0x3a, 0xf0, 0xef, 0x9d, 0xfa, 0xf9, 0x8e,
		0xfd, 0x7d, 0x52, 0x53, 0xf0, 0x69, 0x3d, 0x4f, 0xff, 0x5c, 0x51, 0xfc, 0xc1, 0x60, 0x89, 0x95,
		0x84, 0x4c, 0x34, 0x93, 0xda, 0x1e, 0x60, 0xe6, 0x0d, 0x01, 0x62, 0x00, 0x31, 0x80, 0x18, 0x40,
		0x0c, 0x20, 0x06, 0x10, 0x03, 0x88, 0x01, 0xc4, 0xac, 0x06, 0x62, 0x34, 0x57, 0x37, 0x2c, 0x70,
		0x41, 0x31, 0xb3, 0x96, 0x80, 0x31, 0x63, 0x43, 0x0c, 0x84, 0x31, 0x45, 0x98, 0x0f, 0x8a, 0x2f,
		0x89, 0x66, 0xba, 0x6c, 0x29, 0x44, 0x5b, 0x76, 0x47, 0xa1, 0x16, 0x4d, 0x2c, 0x8e, 0x44, 0x49,
		0x26, 0xa3, 0x84, 0x7b, 0x91, 0xf4, 0xad, 0xd6, 0x72, 0xa1, 0x21, 0x66, 0x07, 0x10, 0xb3, 0x6e,
		0x88, 0x71, 0x3d, 0x05, 0xee, 0x8f, 0x5a, 0x81, 0x6b, 0x56, 0xcb, 0x35, 0xa1, 0xc5, 0x2a, 0x5b,
		0xa8, 0xe4, 0x71, 0x23, 0xa0, 0x19, 0x04, 0x65, 0x10, 0x94, 0x41, 0x50, 0x06, 0x41, 0x19, 0xf0,
		0x0c, 0x82, 0x32, 0x80, 0x97, 0x15, 0xc1, 0x4b, 0x59, 0x8b, 0x90, 0x3b, 0x21, 0x98, 0x69, 0x4b,
		0xc0, 0x18, 0x04, 0x65, 0x10, 0x94, 0xc9, 0xbc, 0x66, 0xc6, 0xb2, 0xa3, 0x85, 0xf7, 0x2b, 0x71,
		0x02, 0x30, 0x47, 0x40, 0x0e, 0x84, 0x50, 0x10, 0x42, 0x01, 0x85, 0xd0, 0xa0, 0x10, 0x0b, 0x41,
		0x7f, 0x00, 0x10, 0x21, 0xc1, 0x1e, 0x08, 0xa1, 0x20, 0x84, 0x82, 0x10, 0x0a, 0x42, 0x28, 0xe0,
		0x19, 0x84, 0x50, 0x00, 0x2f, 0xab, 0x82, 0x17, 0x57, 0x21, 0x94, 0x79, 0x4b, 0xc0, 0x18, 0x84,
		0x50, 0x10, 0x42, 0x41, 0x08, 0x05, 0x21, 0x14, 0x20, 0x07, 0x42, 0x28, 0x1f, 0x8f, 0x42, 0x72,
		0x3d, 0x42, 0x6d, 0x58, 0x5a, 0x64, 0xf1, 0xbc, 0xab, 0x12, 0x23, 0x93, 0x12, 0x1a, 0xdb, 0x0e,
		0x0a, 0x10, 0x6c, 0x39, 0x2b, 0x3f, 0x32, 0xb9, 0x2b, 0xeb, 0xea, 0x74, 0xfe, 0x4a, 0xf5, 0x87,
		0x37, 0xda, 0x80, 0x7a, 0x70, 0xb8, 0xe3, 0xc1, 0x2c, 0x10, 0x86, 0x12, 0x0f, 0x6f, 0xc4, 0xb9,
		0x70, 0xc7, 0x83, 0x63, 0x04, 0xc4, 0x1d, 0x0f, 0xa8, 0xec, 0x9a, 0x0b, 0x02, 0xe2, 0x8e, 0x87,
		0x3c, 0x9e, 0xda, 0x84, 0x42, 0xaf, 0x43, 0x15, 0x8d, 0xe2, 0xb2, 0xf0, 0xcd, 0xed, 0xfa, 0xa2,
		0x05, 0x98, 0x75, 0x98, 0xf5, 0x42, 0x17, 0x5a, 0xdf, 0xad, 0x5a, 0x98, 0xf3, 0x43, 0x98, 0x63,
		0x98, 0xe3, 0x0d, 0x35, 0xc7, 0x7b, 0xd5, 0xe3, 0xbd, 0xe3, 0x83, 0xc3, 0xea, 0x31, 0x8c, 0xf0,
		0x5a, 0x8c, 0xb0, 0x90, 0x0e, 0xaa, 0xac, 0x2f, 0x37, 0xf2, 0x31, 0x8a, 0x28, 0x6a, 0xc5, 0x64,
		0xe2, 0x71, 0x71, 0x93, 0xb9, 0xc7, 0x1f, 0xc3, 0x1a, 0x2f, 0x8f, 0x0f, 0x4a, 0x29, 0xa2, 0x94,
		0xe2, 0x4b, 0x22, 0x84, 0x6d, 0x4e, 0x53, 0xe1, 0x42, 0x96, 0x96, 0x2d, 0xbe, 0x20, 0x4b, 0x2b,
		0x17, 0xf0, 0x7e, 0x3a, 0xcc, 0xc8, 0xd2, 0x5a, 0x39, 0xa0, 0x3f, 0x9d, 0x02, 0x64, 0x69, 0xe5,
		0xfe, 0x34, 0x4a, 0x28, 0x02, 0x5e, 0x00, 0x2f, 0x80, 0x17, 0xc0, 0x0b, 0xe0, 0x05, 0xf0, 0x02,
		0x78, 0x01, 0xbc, 0x38, 0x83, 0x17, 0x94, 0x4e, 0x04, 0xbe, 0x00, 0x5f, 0x50, 0x3a, 0x71, 0xb9,
		0x09, 0x94, 0x4e, 0xcc, 0x5f, 0x63, 0x01, 0x62, 0x36, 0x77, 0x0a, 0x90, 0xb4, 0x4e, 0x9d, 0x6b,
		0x50, 0x3a, 0x11, 0x34, 0x03, 0x9a, 0x41, 0x30, 0x06, 0xc1, 0x18, 0x04, 0x63, 0x10, 0x8c, 0x01,
		0xb4, 0x50, 0x81, 0x16, 0x94, 0x4c, 0x04, 0xbe, 0x00, 0x5f, 0x70, 0xde, 0x1f, 0xa1, 0x13, 0x20,
		0x07, 0x42, 0x27, 0xa0, 0x90, 0x75, 0x50, 0x08, 0x4a, 0x26, 0x82, 0x3d, 0xc0, 0x1e, 0x08, 0x9d,
		0x20, 0x74, 0x82, 0xd0, 0x09, 0x42, 0x27, 0x80, 0x16, 0x22, 0xd0, 0x82, 0x52, 0x89, 0xc0, 0x17,
		0xe0, 0x0b, 0x42, 0x27, 0x08, 0x9d, 0x00, 0x39, 0x10, 0x3a, 0x01, 0x85, 0xd8, 0x52, 0xc8, 0x07,
		0x2a, 0x95, 0x68, 0x5e, 0x5d, 0x60, 0xcb, 0x71, 0x85, 0xc4, 0xe6, 0xf8, 0x4d, 0x3a, 0x93, 0x17,
		0xd9, 0x80, 0xd2, 0x0d, 0x01, 0x4b, 0xb8, 0x2a, 0xf7, 0x05, 0x4b, 0xca, 0xde, 0x48, 0x29, 0x6e,
		0x70, 0xca, 0x6b, 0x61, 0x17, 0x5f, 0x68, 0x0b, 0x85, 0x1c, 0xf2, 0xe7, 0x47, 0x14, 0x72, 0xb0,
		0xd0, 0x52, 0x28, 0xe4, 0x00, 0x27, 0x0c, 0x4e, 0x18, 0x41, 0x27, 0x0c, 0x31, 0x64, 0x72, 0x0e,
		0x1d, 0x62, 0xc8, 0x6b, 0x77, 0xe8, 0x10, 0x43, 0x2e, 0x8e, 0xf7, 0x86, 0x42, 0x0e, 0x80, 0x17,
		0xc0, 0x0b, 0xe0, 0x05, 0xf0, 0x02, 0x78, 0x01, 0xbc, 0x00, 0x5e, 0x8a, 0x0f, 0x2f, 0x28, 0xe4,
		0x00, 0x7c, 0x01, 0xbe, 0xa0, 0x90, 0xc3, 0x72, 0x13, 0x28, 0xe4, 0x90, 0xbf, 0xc6, 0x02, 0xc4,
		0x6c, 0xee, 0x14, 0x60, 0x4b, 0x9d, 0x3a, 0xd7, 0xa0, 0x90, 0x03, 0x68, 0x06, 0x34, 0x83, 0x60,
		0x0c, 0x82, 0x31, 0x08, 0xc6, 0x20, 0x18, 0x03, 0x68, 0xa1, 0x02, 0x2d, 0x28, 0xe4, 0x00, 0x7c,
		0x01, 0xbe, 0xe0, 0x34, 0x02, 0x42, 0x27, 0x40, 0x0e, 0x84, 0x4e, 0x40, 0x21, 0xeb, 0xa0, 0x10,
		0x14, 0x72, 0x00, 0x7b, 0x80, 0x3d, 0x10, 0x3a, 0x41, 0xe8, 0x04, 0xa1, 0x13, 0x84, 0x4e, 0x00,
		0x2d, 0x44, 0xa0, 0x05, 0x85, 0x1c, 0x80, 0x2f, 0xc0, 0x17, 0x84, 0x4e, 0x10, 0x3a, 0x01, 0x72,
		0x20, 0x74, 0x02, 0x0a, 0xb1, 0xa5, 0x90, 0x0f, 0x54, 0xc8, 0xc1, 0xba, 0xc8, 0xc0, 0x96, 0xe3,
		0x7a, 0x0e, 0xe7, 0xe3, 0x17, 0x3a, 0x11, 0x2c, 0x39, 0x9d, 0xbd, 0xce, 0x26, 0x54, 0x75, 0x10,
		0x92, 0x97, 0xe3, 0x48, 0xd9, 0x14, 0x73, 0x58, 0x34, 0x61, 0x56, 0xc3, 0x61, 0x87, 0x58, 0x0d,
		0x87, 0x28, 0xd6, 0x65, 0xcd, 0x55, 0x88, 0x02, 0x0e, 0x2f, 0xf0, 0xe1, 0x62, 0x70, 0x36, 0x4c,
		0x35, 0x19, 0xa3, 0xe0, 0xc3, 0x32, 0xe7, 0x6c, 0xa0, 0xf8, 0xc0, 0x64, 0xd6, 0xe7, 0x71, 0xab,
		0x43, 0x83, 0x67, 0x3b, 0x0b, 0x6d, 0xe8, 0x2d, 0xb4, 0xe0, 0xe7, 0x25, 0x2d, 0xf8, 0xe2, 0x9f,
		0x1f, 0xfd, 0x75, 0xa2, 0xbb, 0x36, 0x40, 0xd5, 0x44, 0x31, 0x57, 0x13, 0xe3, 0xc0, 0x82, 0x72,
		0x18, 0xf9, 0xdc, 0x5c, 0xe3, 0x3c, 0x6b, 0x09, 0x8a, 0x07, 0x8a, 0xa7, 0xb0, 0x8a, 0x67, 0x24,
		0xa4, 0xae, 0x1c, 0x58, 0xe8, 0x9d, 0x03, 0x83, 0x47, 0xed, 0xdc, 0x4c, 0x0b, 0x8f, 0xdb, 0x85,
		0x5b, 0xe9, 0xc8, 0x97, 0x71, 0xe5, 0x46, 0xba, 0x74, 0x54, 0x2c, 0xdc, 0x46, 0x27, 0xee, 0xa2,
		0xeb, 0xa1, 0x3d, 0xd8, 0xdf, 0xdf, 0xdd, 0xdf, 0xa0, 0xe1, 0x5d, 0x91, 0x1f, 0xf6, 0x73, 0x13,
		0xec, 0xf1, 0x48, 0x3f, 0x54, 0xba, 0x33, 0xb7, 0xc5, 0xcb, 0xad, 0xa0, 0x88, 0x1b, 0x4c, 0x31,
		0x8a, 0xb8, 0xbd, 0xba, 0x76, 0x50, 0xc4, 0x0d, 0x1b, 0x30, 0xd6, 0xc2, 0x85, 0xfc, 0x11, 0x5b,
		0x76, 0x41, 0xfe, 0x48, 0x2e, 0xd4, 0xfd, 0x74, 0x98, 0x91, 0x3f, 0xb2, 0x72, 0x3a, 0x7f, 0x3a,
		0x05, 0xc8, 0x1f, 0xc9, 0xfd, 0x69, 0x14, 0x71, 0x03, 0xbc, 0x00, 0x5e, 0x00, 0x2f, 0x80, 0x17,
		0xc0, 0x0b, 0xe0, 0x05, 0xf0, 0x02, 0x78, 0x71, 0x06, 0x2f, 0x28, 0xe2, 0x06, 0x7c, 0x01, 0xbe,
		0xa0, 0x88, 0xdb, 0x72, 0x13, 0x28, 0xe2, 0x96, 0xbf, 0xc6, 0x02, 0xc4, 0x6c, 0xee, 0x14, 0x20,
		0x9d, 0x96, 0x3a, 0xd7, 0xa0, 0x88, 0x1b, 0x68, 0x06, 0x34, 0x83, 0x60, 0x0c, 0x82, 0x31, 0x08,
		0xc6, 0x20, 0x18, 0x03, 0x68, 0xa1, 0x02, 0x2d, 0x28, 0xe2, 0x06, 0x7c, 0x01, 0xbe, 0xe0, 0x24,
		0x32, 0x42, 0x27, 0x40, 0x0e, 0x84, 0x4e, 0x40, 0x21, 0xeb, 0xa0, 0x10, 0x14, 0x71, 0x03, 0x7b,
		0x80, 0x3d, 0x10, 0x3a, 0x41, 0xe8, 0x04, 0xa1, 0x13, 0x84, 0x4e, 0x00, 0x2d, 0x44, 0xa0, 0x05,
		0x45, 0xdc, 0x80, 0x2f, 0xc0, 0x17, 0x84, 0x4e, 0x10, 0x3a, 0x01, 0x72, 0x20, 0x74, 0x02, 0x0a,
		0xb1, 0xa5, 0x90, 0x0f, 0x54, 0xc4, 0xcd, 0xa2, 0xbc, 0xc0, 0x96, 0xe3, 0xf2, 0x6d, 0xed, 0xc9,
		0xab, 0x74, 0x26, 0x6f, 0xb2, 0x01, 0xe5, 0x1b, 0xe2, 0x28, 0x60, 0x4a, 0xfc, 0xef, 0x64, 0xa6,
		0xca, 0x3e, 0x8f, 0xb9, 0xf4, 0xb9, 0xd4, 0xe5, 0x20, 0x4a, 0x12, 0xf3, 0x6a, 0x0e, 0x6f, 0x35,
		0xfa, 0x31, 0x8a, 0x3b, 0xa0, 0xc8, 0xd2, 0x1b, 0xe0, 0xb8, 0xa9, 0x45, 0x96, 0x50, 0xd6, 0x01,
		0x2e, 0x19, 0x5c, 0x32, 0x82, 0x2e, 0x19, 0x22, 0xca, 0xe4, 0xdc, 0x3b, 0x44, 0x94, 0xd7, 0xee,
		0xde, 0x21, 0xa2, 0x5c, 0x1c, 0x5f, 0x0e, 0x65, 0x1d, 0x00, 0x2f, 0x80, 0x17, 0xc0, 0x0b, 0xe0,
		0x05, 0xf0, 0x02, 0x78, 0x01, 0xbc, 0x14, 0x1f, 0x5e, 0x50, 0xd6, 0x01, 0xf8, 0x02, 0x7c, 0x41,
		0x59, 0x87, 0xe5, 0x26, 0x50, 0xd6, 0x21, 0x7f, 0x8d, 0x05, 0x88, 0xd9, 0xdc, 0x29, 0xc0, 0x06,
		0x3b, 0x75, 0xae, 0x41, 0x59, 0x07, 0xd0, 0x0c, 0x68, 0x06, 0xc1, 0x18, 0x04, 0x63, 0x10, 0x8c,
		0x41, 0x30, 0x06, 0xd0, 0x42, 0x05, 0x5a, 0x50, 0xd6, 0x01, 0xf8, 0x02, 0x7c, 0xc1, 0xd9, 0x04,
		0x84, 0x4e, 0x80, 0x1c, 0x08, 0x9d, 0x80, 0x42, 0xd6, 0x41, 0x21, 0x28, 0xeb, 0x00, 0xf6, 0x00,
		0x7b, 0x20, 0x74, 0x82, 0xd0, 0x09, 0x42, 0x27, 0x08, 0x9d, 0x00, 0x5a, 0x88, 0x40, 0x0b, 0xca,
		0x3a, 0x00, 0x5f, 0x80, 0x2f, 0x08, 0x9d, 0x20, 0x74, 0x02, 0xe4, 0x40, 0xe8, 0x04, 0x14, 0x62,
		0x4b, 0x21, 0x1f, 0xa8, 0xac, 0x83, 0xbb, 0x3a, 0x03, 0x5b, 0x8e, 0xab, 0x3c, 0x74, 0x96, 0xde,
		0xac, 0x3e, 0x7f, 0xb1, 0xf3, 0xf1, 0x7b, 0x6d, 0x5a, 0xcd, 0x87, 0x30, 0xf2, 0x79, 0xd9, 0x17,
		0x49, 0xcc, 0x55, 0x62, 0x32, 0xad, 0x2f, 0x17, 0x7d, 0x78, 0xda, 0x2a, 0xaa, 0x3e, 0xe4, 0xcc,
		0x9b, 0xa8, 0xfa, 0x60, 0xaa, 0xd2, 0x50, 0xf5, 0x61, 0x33, 0x3c, 0xb6, 0xc9, 0xfa, 0x80, 0xd7,
		0x66, 0x23, 0x5d, 0x08, 0x3c, 0xdb, 0xb2, 0x31, 0x02, 0xcf, 0x2b, 0xf1, 0x02, 0x11, 0x78, 0x5e,
		0xbb, 0x17, 0x88, 0xc0, 0x73, 0x71, 0x5c, 0x3e, 0x54, 0x7f, 0x00, 0xc4, 0x00, 0x62, 0x00, 0x31,
		0x80, 0x18, 0x40, 0x0c, 0x20, 0x06, 0x10, 0xf3, 0x71, 0x20, 0x06, 0x55, 0x20, 0x72, 0xc1, 0x18,
		0x20, 0x8c, 0x29, 0xc2, 0xa0, 0x0a, 0x04, 0xaa, 0x40, 0x50, 0x82, 0x18, 0xec, 0xc7, 0xaf, 0x1d,
		0x62, 0xb0, 0x1f, 0x0f, 0xae, 0x79, 0x3c, 0xcc, 0xa8, 0x02, 0x81, 0xa0, 0x0c, 0x82, 0x32, 0x08,
		0xca, 0x20, 0x28, 0x83, 0xa0, 0x0c, 0x82, 0x32, 0x08, 0xca, 0x50, 0x83, 0x17, 0x54, 0x83, 0x40,
		0x50, 0x06, 0x41, 0x19, 0x1c, 0x69, 0x40, 0x08, 0x05, 0xc8, 0x81, 0x10, 0x0a, 0x28, 0x64, 0x1d,
		0x14, 0x82, 0x6a, 0x10, 0x08, 0xa1, 0x20, 0x84, 0x82, 0x10, 0x0a, 0x42, 0x28, 0x08, 0xa1, 0x20,
		0x84, 0x02, 0x78, 0x21, 0x06, 0x2f, 0xa8, 0x0a, 0x81, 0x10, 0x0a, 0x42, 0x28, 0x08, 0xa1, 0x20,
		0x84, 0x02, 0xe4, 0x40, 0x08, 0x05, 0x14, 0x62, 0x4b, 0x21, 0x1f, 0xb5, 0x2a, 0x84, 0x5d, 0x21,
		0x82, 0xad, 0x1c, 0xcb, 0x42, 0xb4, 0x22, 0x9f, 0xd7, 0x1f, 0x5e, 0x6c, 0x03, 0xea, 0x42, 0x4c,
		0x73, 0x25, 0xcb, 0x91, 0xf2, 0xb9, 0x2a, 0xe7, 0x53, 0x24, 0x22, 0xfd, 0x57, 0xa0, 0x62, 0x44,
		0xce, 0x2c, 0x8a, 0x8a, 0x11, 0xa6, 0xea, 0x0e, 0x15, 0x23, 0x10, 0x94, 0xa6, 0xef, 0xd1, 0x21,
		0x28, 0x8d, 0xa0, 0x34, 0x1d, 0x0f, 0x11, 0x41, 0xe9, 0xb5, 0x7b, 0x88, 0x08, 0x4a, 0x17, 0xc7,
		0x1d, 0x44, 0xc5, 0x08, 0x40, 0x0c, 0x20, 0x06, 0x10, 0x03, 0x88, 0x01, 0xc4, 0x00, 0x62, 0x00,
		0x31, 0x1f, 0x07, 0x62, 0x50, 0x31, 0x22, 0x17, 0x8c, 0x01, 0xc2, 0x98, 0x22, 0x0c, 0x2a, 0x46,
		0xa0, 0x62, 0x04, 0x25, 0x88, 0xc1, 0x5e, 0xfd, 0xda, 0x21, 0x06, 0x7b, 0xf5, 0xe0, 0x9a, 0xc7,
		0xc3, 0x8c, 0x8a, 0x11, 0x08, 0xca, 0x20, 0x28, 0x83, 0xa0, 0x0c, 0x82, 0x32, 0x08, 0xca, 0x20,
		0x28, 0x83, 0xa0, 0x0c, 0x35, 0x78, 0x41, 0xc5, 0x08, 0x04, 0x65, 0x10, 0x94, 0xc1, 0x71, 0x07,
		0x84, 0x50, 0x80, 0x1c, 0x08, 0xa1, 0x80, 0x42, 0xd6, 0x41, 0x21, 0xa8, 0x18, 0x81, 0x10, 0x0a,
		0x42, 0x28, 0x08, 0xa1, 0x20, 0x84, 0x82, 0x10, 0x0a, 0x42, 0x28, 0x80, 0x17, 0x62, 0xf0, 0x82,
		0x8a, 0x11, 0x08, 0xa1, 0x20, 0x84, 0x82, 0x10, 0x0a, 0x42, 0x28, 0x40, 0x0e, 0x84, 0x50, 0x40,
		0x21, 0xb6, 0x14, 0xf2, 0x81, 0x2a, 0x46, 0xe4, 0x55, 0x95, 0x60, 0xcb, 0x71, 0xf9, 0x88, 0xee,
		0xe4, 0x3d, 0xdb, 0xe3, 0xd7, 0xdc, 0xec, 0x4a, 0x12, 0x9a, 0xa9, 0x21, 0xd7, 0xe5, 0x68, 0xa4,
		0xe3, 0x91, 0x2e, 0xc7, 0xd1, 0x2d, 0x57, 0xe6, 0x35, 0x23, 0x5e, 0x6a, 0xcc, 0xac, 0x3a, 0xc4,
		0x0e, 0xaa, 0x43, 0xac, 0x9c, 0x37, 0x3f, 0x5c, 0x75, 0x08, 0x63, 0x94, 0x74, 0x12, 0x01, 0xb3,
		0x89, 0x7c, 0x39, 0x89, 0x78, 0x59, 0x62, 0xa7, 0x05, 0x81, 0xbb, 0xc0, 0x4c, 0x47, 0x11, 0x2d,
		0x57, 0x58, 0xe9, 0x12, 0x5c, 0x2c, 0x30, 0xd2, 0x09, 0x3e, 0x3a, 0x8a, 0x54, 0x6d, 0xe4, 0xd0,
		0xae, 0x88, 0xc9, 0x7e, 0xe6, 0x65, 0xda, 0x3f, 0x39, 0x5c, 0x40, 0xa6, 0x6c, 0xe7, 0x96, 0xe9,
		0x4a, 0x59, 0xea, 0x5e, 0x39, 0x23, 0xb4, 0x74, 0xb6, 0xe8, 0xfd, 0xe1, 0x7e, 0xfb, 0x13, 0xef,
		0x4c, 0x44, 0xd6, 0x09, 0x70, 0x35, 0xf0, 0x29, 0x86, 0xdc, 0xc9, 0x50, 0xbf, 0x3d, 0xc8, 0xaf,
		0x0f, 0xdd, 0x1b, 0xc3, 0x56, 0x8a, 0x23, 0xf5, 0x7e, 0x65, 0x83, 0x85, 0x81, 0x9e, 0x7c, 0xfa,
		0x9d, 0x49, 0x48, 0x57, 0x90, 0x2c, 0x35, 0x62, 0x66, 0x41, 0xca, 0x65, 0x84, 0x9c, 0xcf, 0x60,
		0x9a, 0xc9, 0xc9, 0x88, 0x8c, 0xc6, 0x88, 0x68, 0x8c, 0x84, 0x4f, 0x11, 0x70, 0xd1, 0xb9, 0x9c,
		0x05, 0x2a, 0x6d, 0xc1, 0xaf, 0x52, 0x5f, 0x71, 0xf6, 0x2b, 0x1a, 0xe9, 0x89, 0xdf, 0x98, 0x7e,
		0x20, 0xe7, 0xf3, 0xf5, 0xf8, 0xf1, 0x94, 0x63, 0x92, 0xad, 0xf2, 0x5d, 0x66, 0x9f, 0xc6, 0xc4,
		0x97, 0x79, 0xb4, 0x00, 0xdf, 0x97, 0x15, 0x17, 0x7e, 0x8b, 0xb5, 0xbf, 0x62, 0xed, 0xa7, 0x3c,
		0x5b, 0x9c, 0xe3, 0x8e, 0xaf, 0xc9, 0x04, 0x67, 0xad, 0x50, 0x57, 0xf2, 0xe6, 0xab, 0xc2, 0xd0,
		0x47, 0x9f, 0x3d, 0xff, 0x31, 0x8a, 0x36, 0x66, 0x5c, 0xd2, 0x1f, 0xc7, 0x25, 0xcf, 0xb6, 0xe4,
		0x57, 0xe3, 0x8e, 0x1b, 0x17, 0x6b, 0x9c, 0x51, 0x4d, 0x39, 0x89, 0x39, 0xf7, 0xed, 0xf7, 0x55,
		0x1f, 0x37, 0x87, 0xcd, 0x55, 0x0b, 0x41, 0x72, 0x25, 0x50, 0xce, 0x05, 0xcb, 0xb9, 0x80, 0xb9,
		0x15, 0x34, 0x4b, 0x77, 0x75, 0xed, 0x5b, 0xab, 0xc2, 0xe7, 0x52, 0x0b, 0x7d, 0xaf, 0xf8, 0xc0,
		0x45, 0x6e, 0x98, 0xc5, 0xe6, 0x52, 0xa9, 0x39, 0x7b, 0x95, 0x13, 0x96, 0x38, 0x58, 0x7f, 0xf3,
		0x0e, 0x36, 0x7a, 0x5f, 0x1b, 0x97, 0x17, 0x8d, 0xde, 0x55, 0xb7, 0xd3, 0x68, 0xd4, 0x4b, 0x2e,
		0x02, 0x25, 0x89, 0xf5, 0x06, 0xf0, 0x96, 0x93, 0x4d, 0xe0, 0x47, 0xfd, 0x9c, 0x74, 0xef, 0xaa,
		0xba, 0xff, 0xe5, 0xa4, 0xb4, 0x09, 0xbb, 0xa3, 0xb9, 0xf4, 0xae, 0xb2, 0xb3, 0x53, 0xe4, 0xee,
		0x55, 0xf7, 0x77, 0x76, 0x5a, 0xc5, 0x9e, 0xbe, 0x62, 0x77, 0xaf, 0xc8, 0x8b, 0xf3, 0xdb, 0xc5,
		0x1f, 0x17, 0xed, 0x1f, 0x17, 0xc5, 0xed, 0xe0, 0x7e, 0xa1, 0xa7, 0xaf, 0x52, 0x6c, 0xbb, 0x50,
		0x64, 0xbd, 0xb2, 0x57, 0xe8, 0x85, 0xe9, 0x06, 0x58, 0xac, 0x5a, 0xf8, 0xb9, 0xf1, 0x9b, 0x54,
		0x26, 0xe9, 0xcb, 0x72, 0x14, 0xce, 0x77, 0x11, 0x12, 0x7b, 0x57, 0xfb, 0x51, 0x6b, 0xf0, 0xb4,
		0xe1, 0x69, 0xc3, 0xd3, 0xce, 0xb8, 0x62, 0x46, 0x42, 0xea, 0x23, 0x07, 0x3e, 0xf6, 0x3e, 0xd2,
		0x97, 0x9d, 0xea, 0x95, 0x97, 0x7d, 0x7c, 0xa4, 0x2f, 0x6f, 0xc2, 0x14, 0x54, 0xf7, 0x91, 0xad,
		0xec, 0x08, 0x57, 0x90, 0xad, 0x3c, 0x4d, 0xb0, 0x18, 0x1b, 0x9f, 0xed, 0x47, 0x9b, 0xc2, 0xdb,
		0x46, 0x1b, 0x6d, 0x5b, 0xe6, 0xa9, 0x17, 0x9d, 0x48, 0xe9, 0xab, 0x93, 0xd9, 0x2b, 0xb4, 0x22,
		0x9f, 0x5f, 0xcd, 0xd0, 0x66, 0x13, 0xee, 0xab, 0x9b, 0xa4, 0xdc, 0x98, 0xdf, 0x45, 0x97, 0x31,
		0x4f, 0x68, 0xcb, 0xc5, 0x96, 0x65, 0x15, 0x5b, 0x96, 0x6b, 0xe5, 0x3c, 0x6c, 0x59, 0xa6, 0x5f,
		0x37, 0xd8, 0xb2, 0x84, 0x23, 0x05, 0x47, 0xca, 0x6a, 0xc5, 0x60, 0xcb, 0x32, 0x3b, 0x4b, 0x63,
		0xcb, 0x72, 0x4d, 0xbd, 0xc3, 0x96, 0x25, 0xf5, 0xe9, 0xc3, 0x96, 0x25, 0xd5, 0xde, 0x61, 0xcb,
		0x92, 0xf6, 0xe2, 0xc4, 0x96, 0x25, 0xd5, 0xde, 0x61, 0xcb, 0x32, 0xe7, 0xe8, 0x21, 0xb6, 0x2c,
		0xdf, 0x9f, 0x2c, 0x6c, 0x59, 0xc2, 0xd3, 0x86, 0xa7, 0x6d, 0xb3, 0x62, 0xb0, 0x65, 0xb9, 0xf4,
		0x22, 0xd8, 0xb2, 0x5c, 0xb7, 0x31, 0xc7, 0x96, 0xe5, 0x7a, 0xa1, 0x03, 0x5b, 0x96, 0x1b, 0xb3,
		0x65, 0x69, 0xb2, 0xcf, 0xb6, 0xe5, 0x72, 0xc7, 0x32, 0xc3, 0xd1, 0xfc, 0xec, 0x93, 0x43, 0xbb,
		0x76, 0xc2, 0xf3, 0xe9, 0xca, 0xbf, 0x70, 0xc2, 0xb3, 0x09, 0x72, 0x56, 0x35, 0x21, 0xc5, 0x19,
		0xf7, 0x8c, 0x07, 0x5d, 0xcd, 0x0e, 0xb8, 0x6e, 0xfc, 0x99, 0xec, 0xf4, 0x45, 0x01, 0x6c, 0x71,
		0x7a, 0x03, 0xcf, 0x65, 0xa7, 0x2e, 0x1a, 0x50, 0x20, 0x11, 0xcf, 0x9c, 0x36, 0x62, 0x23, 0xdb,
		0x59, 0x32, 0x44, 0xdc, 0x48, 0x75, 0xb6, 0x4c, 0x10, 0xa3, 0x0c, 0x10, 0x63, 0x99, 0xae, 0x42,
		0xa6, 0x21, 0xd3, 0x79, 0xc8, 0xf4, 0x8a, 0xea, 0x1c, 0x4d, 0x44, 0xfa, 0x03, 0x56, 0x37, 0x4a,
		0x19, 0x7f, 0xb2, 0x18, 0xd5, 0x7c, 0x0a, 0x19, 0xdd, 0x72, 0x55, 0x4e, 0x46, 0x71, 0x1c, 0xdc,
		0x67, 0x29, 0x68, 0xb4, 0xf4, 0x14, 0x0a, 0x1b, 0xa1, 0xb0, 0x11, 0xb0, 0x19, 0x26, 0xf6, 0xa3,
		0x9b, 0xd8, 0x07, 0x95, 0xb8, 0x42, 0x7c, 0xbe, 0xe5, 0xaa, 0x3b, 0xf9, 0x4e, 0x50, 0x34, 0x28,
		0x1a, 0x22, 0xbe, 0x3a, 0x11, 0x5f, 0x19, 0x4d, 0x3f, 0x48, 0xf8, 0x87, 0x84, 0xea, 0xd4, 0xa0,
		0xe9, 0x66, 0x90, 0x73, 0x61, 0x6c, 0x15, 0xc5, 0x5c, 0x69, 0xc1, 0x93, 0x0c, 0x84, 0xfd, 0xf0,
		0x0c, 0xf8, 0x1a, 0x7c, 0xfd, 0xca, 0x92, 0xba, 0xcf, 0x6e, 0x7d, 0x17, 0x4f, 0x82, 0xb1, 0x61,
		0x80, 0x2d, 0x0d, 0x30, 0xca, 0x86, 0xba, 0x5a, 0xd2, 0x8e, 0x96, 0xb6, 0xed, 0x12, 0x77, 0xb6,
		0xd4, 0x9d, 0x2d, 0x79, 0x77, 0x4b, 0x3f, 0x9b, 0x08, 0x64, 0x14, 0x05, 0x63, 0x91, 0x58, 0x3c,
		0x38, 0x63, 0x16, 0xdb, 0xbc, 0x40, 0x86, 0x9b, 0x18, 0xed, 0xc5, 0xc7, 0x95, 0x18, 0x39, 0x17,
		0x27, 0xe7, 0x62, 0xe5, 0x5e, 0xbc, 0xcc, 0xc4, 0xcc, 0x50, 0xdc, 0x16, 0xaf, 0xef, 0x2e, 0x2f,
		0x30, 0xd1, 0x4a, 0xc8, 0xa1, 0x8b, 0xc3, 0x77, 0x47, 0x1b, 0x9c, 0x8d, 0x7c, 0x33, 0xcb, 0xe8,
		0xb2, 0x54, 0x37, 0xd3, 0x66, 0xa0, 0x6f, 0xa0, 0x6f, 0xa0, 0x6f, 0x0c, 0x57, 0xce, 0x48, 0x9a,
		0xdd, 0x13, 0xf8, 0x4c, 0xdd, 0x1c, 0x5b, 0xb4, 0x31, 0xeb, 0xce, 0xda, 0xf3, 0x90, 0x9d, 0x29,
		0x61, 0x47, 0xca, 0xd8, 0x72, 0x99, 0xe4, 0x30, 0x32, 0xfd, 0x28, 0x0a, 0x38, 0x93, 0x2e, 0x87,
		0xa6, 0x52, 0x90, 0xa1, 0x11, 0x52, 0x5b, 0xdd, 0xa1, 0xfc, 0x74, 0x60, 0xf6, 0x1c, 0x34, 0xe5,
		0x26, 0xc3, 0xdf, 0xdd, 0x60, 0x2d, 0x5e, 0xcc, 0x65, 0xc6, 0xbf, 0xa5, 0xa3, 0xfd, 0x6e, 0xb3,
		0xf3, 0xf4, 0xf3, 0xe3, 0x6a, 0x75, 0x77, 0xf7, 0xb0, 0xba, 0xb3, 0x7b, 0x70, 0xb4, 0xbf, 0x77,
		0x78, 0xb8, 0x7f, 0xb4, 0x73, 0xe4, 0xf8, 0x9b, 0x72, 0x48, 0x4b, 0x77, 0x24, 0x27, 0x8f, 0x27,
		0xcf, 0xe1, 0x59, 0x01, 0x47, 0x38, 0x66, 0x30, 0x79, 0x87, 0x84, 0x26, 0xef, 0xd3, 0x66, 0xb4,
		0xf2, 0xb3, 0x20, 0xaa, 0x7a, 0xe4, 0x5a, 0x57, 0x1f, 0x41, 0x57, 0x6f, 0x96, 0xb8, 0xef, 0x40,
		0x33, 0x53, 0x99, 0xaa, 0xfc, 0xee, 0xd1, 0x87, 0x6a, 0xa6, 0xa7, 0x9a, 0x6d, 0x2e, 0x93, 0x7e,
		0x15, 0x08, 0xab, 0x0e, 0xda, 0x72, 0x71, 0xd9, 0x34, 0x74, 0xbe, 0xef, 0x66, 0xe0, 0xa0, 0xf3,
		0x57, 0xa3, 0xf3, 0x77, 0x31, 0x55, 0x05, 0x51, 0xf0, 0x38, 0x5f, 0xbc, 0x9e, 0xf3, 0xc5, 0x8b,
		0x3c, 0xaa, 0xf9, 0x8f, 0xf7, 0xab, 0xaf, 0x89, 0xbc, 0x78, 0x87, 0xf9, 0x8f, 0xf7, 0x1b, 0x54,
		0x15, 0xd9, 0x68, 0xe3, 0xd9, 0x66, 0xc3, 0xd9, 0x90, 0x67, 0x91, 0x8f, 0x81, 0x7c, 0x8c, 0xec,
		0x7a, 0xc7, 0x78, 0xa3, 0x66, 0x31, 0xf3, 0x01, 0x67, 0x03, 0xb3, 0x72, 0xac, 0x0b, 0xfc, 0x35,
		0x88, 0x74, 0x95, 0x3a, 0x33, 0x55, 0xf7, 0xfb, 0xef, 0x33, 0x7d, 0xb5, 0x3d, 0x11, 0x35, 0x94,
		0x51, 0x37, 0x52, 0x19, 0x55, 0xa8, 0x0c, 0xa8, 0x8c, 0x94, 0xaf, 0x69, 0x5e, 0x4e, 0x7d, 0xb2,
		0xda, 0x46, 0x8a, 0xf5, 0x03, 0x07, 0xb9, 0x15, 0x8f, 0x5a, 0x43, 0x8a, 0x05, 0x52, 0x2c, 0xd6,
		0x26, 0x6e, 0x76, 0x3e, 0xcc, 0xfa, 0x53, 0x2c, 0xec, 0xf7, 0xcc, 0x2d, 0xf7, 0xca, 0x57, 0x54,
		0x61, 0x12, 0x19, 0xa4, 0x50, 0x37, 0x50, 0x37, 0xc8, 0x20, 0x45, 0x06, 0x29, 0xf4, 0x0d, 0xf4,
		0xcd, 0x87, 0xd1, 0x37, 0xc8, 0x20, 0xcd, 0x43, 0x09, 0x3b, 0x52, 0xc6, 0x96, 0xcb, 0x24, 0x87,
		0x91, 0x41, 0x06, 0xe9, 0xab, 0x43, 0x83, 0x0c, 0xd2, 0x0c, 0x2f, 0x86, 0x0c, 0xd2, 0x97, 0xbe,
		0x09, 0x7b, 0xd6, 0xc8, 0x20, 0x75, 0x07, 0x17, 0xee, 0x5b, 0x41, 0x06, 0xe9, 0x2b, 0xab, 0x16,
		0x19, 0xa4, 0x1b, 0x26, 0xee, 0xc8, 0x26, 0x22, 0x33, 0x55, 0xc8, 0x20, 0x85, 0x6a, 0x46, 0x06,
		0xe9, 0x07, 0xd2, 0xf9, 0xc8, 0x20, 0x45, 0x06, 0x29, 0x14, 0xfc, 0x8a, 0x15, 0x3c, 0x32, 0x48,
		0x37, 0x26, 0x83, 0x74, 0xd5, 0x57, 0xd4, 0xbc, 0x90, 0x40, 0x4a, 0xe8, 0x92, 0x9a, 0x3f, 0xf8,
		0x7d, 0xc6, 0x9d, 0xe5, 0xd2, 0xb9, 0x48, 0x74, 0x4d, 0xeb, 0x8c, 0xe5, 0xc5, 0x5a, 0x42, 0x36,
		0x02, 0x1e, 0x8e, 0x47, 0xaf, 0xf4, 0x79, 0x4b, 0x8e, 0x82, 0x20, 0x43, 0x5a, 0x5b, 0x8b, 0xdd,
		0x99, 0x3f, 0xdc, 0x56, 0x3e, 0x57, 0xdc, 0x3f, 0xb9, 0x9f, 0x3d, 0x4a, 0xbb, 0xce, 0xe9, 0xf3,
		0x15, 0xbf, 0x82, 0x42, 0xa7, 0xcf, 0xd7, 0xf8, 0x07, 0x2b, 0x75, 0x9a, 0xb6, 0xe2, 0xa7, 0x93,
		0x41, 0xce, 0xa3, 0xce, 0x69, 0xba, 0xc4, 0xd0, 0x4c, 0x89, 0xa0, 0x99, 0xab, 0x9b, 0x56, 0x51,
		0xdd, 0x34, 0x85, 0x42, 0xd9, 0xf0, 0xea, 0xa6, 0x2c, 0x08, 0x22, 0x8f, 0x69, 0xee, 0x97, 0x27,
		0xf5, 0x7f, 0xb3, 0x17, 0x39, 0x7d, 0xda, 0x40, 0xb6, 0x5a, 0xa7, 0x3b, 0xa8, 0x75, 0x8a, 0x5a,
		0xa7, 0x4f, 0x5f, 0x27, 0xf3, 0x7e, 0xfd, 0xa3, 0x50, 0xf5, 0x6e, 0x35, 0xcb, 0xa4, 0xcd, 0xd6,
		0x61, 0x86, 0xed, 0x0d, 0xc3, 0x30, 0x84, 0x01, 0x46, 0xdb, 0x84, 0x15, 0x6c, 0x13, 0x76, 0x2c,
		0x7d, 0x4f, 0x17, 0x3e, 0xa6, 0x49, 0xaa, 0x94, 0x8d, 0x7b, 0xef, 0x6a, 0xc8, 0xf6, 0xaa, 0xc7,
		0x7b, 0xc7, 0x07, 0x87, 0xd5, 0xe3, 0xfd, 0x35, 0x8e, 0x5d, 0x4e, 0xde, 0xca, 0xcf, 0x15, 0xde,
		0x79, 0xe1, 0xf3, 0xc4, 0x53, 0x22, 0xce, 0x04, 0xe3, 0x4b, 0x91, 0xd1, 0x87, 0x87, 0x61, 0x92,
		0x60, 0x92, 0xd6, 0x66, 0x92, 0x32, 0x67, 0x47, 0x65, 0xcc, 0x82, 0x72, 0x23, 0x6b, 0x3c, 0x8c,
		0x4d, 0x2a, 0xdc, 0x4f, 0x1f, 0x4b, 0x5b, 0xc2, 0x9c, 0x0f, 0xd8, 0x28, 0x98, 0xcc, 0xe8, 0x80,
		0x05, 0x09, 0x87, 0x5c, 0x42, 0x2e, 0xd7, 0x27, 0x97, 0xd9, 0x73, 0xf3, 0x32, 0xe6, 0xe0, 0x39,
		0x12, 0xcc, 0xbf, 0x46, 0x22, 0x1e, 0x0f, 0x78, 0x79, 0xc0, 0x44, 0x30, 0x52, 0x06, 0x97, 0x40,
		0x3d, 0x6f, 0xe2, 0x63, 0x0b, 0x2c, 0x0b, 0x98, 0x0a, 0x93, 0x0f, 0x29, 0xae, 0xb3, 0xae, 0x43,
		0x58, 0xf3, 0x16, 0xd6, 0x50, 0x24, 0x21, 0xd3, 0xde, 0xb5, 0x8d, 0xb4, 0x2e, 0xda, 0x80, 0xb8,
		0x42, 0x5c, 0x21, 0xae, 0xee, 0xc5, 0x75, 0x20, 0x54, 0x78, 0xcb, 0x14, 0x2f, 0xdf, 0x70, 0x95,
		0x18, 0x79, 0x99, 0xcf, 0x5a, 0x00, 0xd2, 0x02, 0x69, 0xe1, 0x6a, 0xbe, 0xf9, 0x9d, 0xd7, 0x4c,
		0xf9, 0x76, 0x52, 0xf7, 0xac, 0x05, 0x48, 0x1d, 0xa4, 0x0e, 0x52, 0xf7, 0xe6, 0x77, 0x0a, 0x3f,
		0xbb, 0x9c, 0x09, 0x1f, 0x92, 0x05, 0xc9, 0x82, 0x64, 0xbd, 0xfd, 0x9d, 0x93, 0xed, 0x6f, 0x23,
		0x3b, 0xb6, 0x78, 0x12, 0x52, 0x06, 0x29, 0x83, 0x94, 0xbd, 0xf9, 0x9d, 0x21, 0x0f, 0x23, 0x65,
		0xb0, 0x43, 0x31, 0x7b, 0x0e, 0x37, 0xf0, 0x42, 0xc2, 0x2c, 0x25, 0x2c, 0xf3, 0x0d, 0xbc, 0xec,
		0x86, 0x89, 0xc0, 0xa8, 0x40, 0xdd, 0x43, 0x72, 0xd5, 0xa2, 0x09, 0xd4, 0x7d, 0xcd, 0x69, 0xa1,
		0x3b, 0x5b, 0xf0, 0xce, 0x16, 0xbe, 0x3b, 0x01, 0xc8, 0x26, 0x08, 0x19, 0x05, 0xc2, 0xdc, 0xf4,
		0x3c, 0x9b, 0x79, 0xe3, 0x13, 0xc6, 0x16, 0x27, 0x8a, 0x2d, 0x4f, 0x93, 0x59, 0x14, 0x93, 0x71,
		0x71, 0x5a, 0xcc, 0xd1, 0x31, 0x53, 0x57, 0x47, 0x8c, 0x5c, 0x1e, 0x29, 0xb2, 0x38, 0xed, 0xe5,
		0xe4, 0x74, 0x97, 0xeb, 0xa1, 0x75, 0x7f, 0x62, 0xd7, 0xe9, 0x68, 0xaf, 0xe8, 0xc0, 0xd2, 0xcf,
		0x0d, 0xa8, 0xa6, 0x3c, 0xd2, 0x22, 0x10, 0xff, 0xcb, 0x7d, 0x73, 0x7b, 0xbc, 0x68, 0x01, 0xe6,
		0x18, 0xe6, 0x18, 0xe6, 0x18, 0xe6, 0x18, 0xe6, 0x18, 0xe6, 0x18, 0xe6, 0x38, 0x2f, 0x97, 0x7b,
		0xd5, 0xa7, 0x31, 0x27, 0xc7, 0xe4, 0xb6, 0x33, 0x85, 0x8c, 0xb6, 0xcc, 0x4f, 0x08, 0x4e, 0x8e,
		0x15, 0x5f, 0xb5, 0xa6, 0xdf, 0xb6, 0xca, 0x50, 0xda, 0x60, 0x58, 0xf6, 0xb3, 0xdc, 0x2b, 0xf1,
		0x10, 0x4c, 0x9b, 0x3f, 0x89, 0x80, 0x35, 0xc2, 0x69, 0x96, 0xb2, 0x6d, 0x1e, 0xb0, 0xf6, 0xb3,
		0x15, 0x04, 0x78, 0x08, 0x57, 0x67, 0x78, 0xa6, 0xc3, 0xb4, 0xe6, 0x4a, 0x66, 0xe6, 0x91, 0xd2,
		0xff, 0xfc, 0x73, 0xa7, 0x7c, 0xfc, 0xf3, 0xdf, 0x7b, 0x7f, 0xff, 0xeb, 0x5f, 0xe5, 0xe9, 0x8f,
		0xd5, 0xe5, 0x1f, 0xff, 0xa3, 0xb4, 0x91, 0x47, 0x6d, 0xc6, 0x82, 0x9d, 0xa9, 0xa6, 0xfd, 0x23,
		0x95, 0x90, 0xa5, 0xda, 0x00, 0x54, 0x02, 0x54, 0x82, 0x7b, 0x95, 0x40, 0x63, 0x0f, 0xcb, 0x4c,
		0xc2, 0x20, 0x5d, 0x90, 0x2e, 0x48, 0xd7, 0xfb, 0xd2, 0x15, 0xc5, 0x5c, 0x95, 0xc7, 0x04, 0x3f,
		0x4a, 0xb2, 0x0b, 0xd9, 0xf2, 0xc3, 0x90, 0x35, 0xc8, 0xda, 0xda, 0x64, 0x4d, 0xf8, 0x5c, 0x6a,
		0xa1, 0xef, 0xb3, 0x5d, 0x83, 0xb8, 0x10, 0xb8, 0x0c, 0xa1, 0x8c, 0x52, 0x73, 0xf6, 0x55, 0x27,
		0x2c, 0xb1, 0xd8, 0xa2, 0x3e, 0x6d, 0xb7, 0x3a, 0xed, 0x8b, 0xc6, 0x45, 0xef, 0xaa, 0xdd, 0x69,
		0x5c, 0x5e, 0x75, 0x7b, 0xb5, 0xde, 0xb7, 0x6e, 0xd6, 0xf9, 0x9f, 0x04, 0x67, 0x12, 0xa3, 0xe8,
		0x9f, 0xe5, 0xa5, 0x28, 0xf5, 0x66, 0xb7, 0x76, 0x72, 0xde, 0xa8, 0x97, 0x56, 0x51, 0x9e, 0xc0,
		0xf2, 0x5d, 0x6b, 0xa7, 0xbd, 0xe6, 0xf7, 0x06, 0x85, 0x37, 0x6d, 0x5e, 0x18, 0xbf, 0xeb, 0xa7,
		0x7c, 0xc2, 0x58, 0x7f, 0xaf, 0xd0, 0x12, 0xc5, 0x4c, 0x4d, 0x55, 0x51, 0x46, 0x23, 0x34, 0x7b,
		0x0e, 0xf6, 0x07, 0xf6, 0x67, 0x6d, 0xf6, 0x27, 0xfb, 0x15, 0xbc, 0x26, 0x57, 0xef, 0x2e, 0x5f,
		0xb9, 0x6b, 0x72, 0xeb, 0xae, 0x33, 0x39, 0xd5, 0x65, 0x19, 0x19, 0x09, 0xea, 0xe4, 0x41, 0x48,
		0x2a, 0x24, 0x15, 0x5e, 0xd9, 0x9b, 0xdf, 0xa9, 0x78, 0x18, 0xdd, 0x64, 0x4a, 0x82, 0x5c, 0x74,
		0xf0, 0xe1, 0x51, 0xc8, 0x19, 0xe4, 0x6c, 0x6d, 0x72, 0x46, 0xe4, 0x30, 0x73, 0xc2, 0x95, 0x60,
		0x81, 0x91, 0x39, 0x7b, 0x78, 0x14, 0x82, 0x06, 0x41, 0x83, 0x41, 0x7b, 0x5b, 0xce, 0xa2, 0x81,
		0xb6, 0x3b, 0xbe, 0xfc, 0xac, 0x05, 0x48, 0x1d, 0xa4, 0x0e, 0x52, 0xf7, 0xe6, 0x77, 0x6a, 0x1e,
		0xc6, 0x5c, 0x31, 0x6d, 0x54, 0x00, 0x6b, 0xf9, 0x61, 0x1c, 0x04, 0x83, 0xac, 0x59, 0xca, 0x5a,
		0xf6, 0x83, 0x60, 0x01, 0x53, 0x61, 0x39, 0xe1, 0x37, 0x5c, 0x89, 0x0c, 0x55, 0x16, 0x9f, 0x4d,
		0xfc, 0x93, 0x76, 0x90, 0x83, 0x9e, 0xd3, 0x92, 0x77, 0xb6, 0xf4, 0x9d, 0x89, 0x80, 0x3b, 0x51,
		0xc8, 0x26, 0x12, 0x19, 0x45, 0xc3, 0xdc, 0x1c, 0x3d, 0x9b, 0x79, 0xb3, 0x7d, 0xb0, 0x67, 0xfa,
		0xdb, 0x20, 0xb5, 0xd7, 0x6e, 0x5f, 0xec, 0x59, 0x47, 0xda, 0x9d, 0xc6, 0xc5, 0x69, 0xfb, 0xe2,
		0xac, 0xf9, 0xe5, 0xaa, 0x76, 0x5e, 0xbb, 0x6c, 0x5d, 0x75, 0x1b, 0xdf, 0x1b, 0x97, 0xcd, 0xde,
		0x3f, 0x4a, 0x36, 0x65, 0xa6, 0x13, 0xab, 0x6b, 0xd0, 0x2c, 0x33, 0xb2, 0xe7, 0x5d, 0xfb, 0x51,
		0xbb, 0xbc, 0x68, 0x5e, 0x7c, 0x29, 0xad, 0x23, 0xb7, 0xdc, 0x51, 0x17, 0x4e, 0x2f, 0x9b, 0xbd,
		0xe6, 0x69, 0xed, 0x9c, 0x72, 0x1f, 0xbe, 0x5d, 0xfc, 0x71, 0xd1, 0xfe, 0x71, 0x41, 0xb9, 0x0b,
		0xad, 0xe6, 0x45, 0xfb, 0x92, 0x74, 0x07, 0x6a, 0xff, 0x8f, 0x55, 0x07, 0x8c, 0x9e, 0xfc, 0xb9,
		0x31, 0x65, 0xe1, 0xb3, 0x9c, 0xc2, 0x9b, 0x51, 0x4c, 0xb6, 0x44, 0x9d, 0xd7, 0x58, 0x28, 0x4b,
		0xc6, 0x0e, 0x48, 0x08, 0x24, 0x44, 0x90, 0x84, 0xb2, 0xc7, 0x9f, 0x9f, 0x51, 0x50, 0x65, 0x63,
		0xc4, 0x5e, 0x5f, 0x2b, 0x9e, 0x5c, 0x47, 0x81, 0x6f, 0x2b, 0xf9, 0x0f, 0x0d, 0x41, 0xf8, 0x21,
		0xfc, 0x85, 0x3e, 0x8a, 0x9b, 0xe9, 0x42, 0xa3, 0xa7, 0xeb, 0xfc, 0x10, 0x47, 0x71, 0xb7, 0xcc,
		0xdd, 0x2c, 0x1c, 0xc5, 0xcd, 0x73, 0x68, 0x6d, 0x2f, 0x4a, 0xca, 0x65, 0x8c, 0x3f, 0x50, 0x3d,
		0x0c, 0x76, 0x33, 0xb4, 0x29, 0x4d, 0x35, 0xfc, 0x60, 0xa6, 0xb7, 0xac, 0xef, 0x63, 0x9e, 0xc0,
		0x00, 0xbf, 0x61, 0x80, 0x67, 0x43, 0x54, 0x38, 0x33, 0xec, 0x73, 0x4f, 0x84, 0x2c, 0xb0, 0x2a,
		0x8a, 0x51, 0x31, 0xb8, 0xc9, 0xff, 0xb9, 0x66, 0xab, 0x7c, 0x54, 0x7b, 0x5e, 0x85, 0x3d, 0xcf,
		0xcb, 0x9e, 0xef, 0x16, 0x70, 0x68, 0x3f, 0x90, 0x19, 0x17, 0x32, 0xd1, 0x2c, 0xc3, 0x79, 0x83,
		0x67, 0xda, 0x6d, 0xde, 0x00, 0xcc, 0x39, 0xcc, 0x39, 0xcc, 0x39, 0xcc, 0x39, 0xcc, 0x39, 0xcc,
		0x39, 0xcc, 0xf9, 0xfa, 0xcc, 0xb9, 0xe6, 0xea, 0x86, 0x05, 0x36, 0xf6, 0x7c, 0xd6, 0xc2, 0xc7,
		0x30, 0xe8, 0xb0, 0xe3, 0xaf, 0xd9, 0xf1, 0x82, 0x9a, 0xef, 0x44, 0x33, 0x5d, 0x36, 0x5c, 0xe4,
		0x5b, 0x96, 0x65, 0x2a, 0xbf, 0xc9, 0xa9, 0x2e, 0x2b, 0x49, 0x26, 0xa3, 0x84, 0x7b, 0x91, 0xf4,
		0x8d, 0xd6, 0x1e, 0x62, 0xec, 0x30, 0xe2, 0xab, 0x18, 0x5a, 0x94, 0xbb, 0xdc, 0x14, 0xbb, 0x1e,
		0x1a, 0xac, 0x8e, 0x87, 0x32, 0x6b, 0xec, 0x0e, 0xee, 0x39, 0xcc, 0x3a, 0xdc, 0x73, 0xb8, 0xe7,
		0x70, 0xcf, 0xe1, 0x9e, 0xc3, 0x3d, 0x5f, 0xa7, 0x19, 0x2f, 0x6b, 0x11, 0x72, 0x2b, 0x5b, 0x3e,
		0x6d, 0x01, 0xee, 0x39, 0xdc, 0xf3, 0x02, 0x9a, 0xef, 0xf1, 0xda, 0xd6, 0xc2, 0xfb, 0x95, 0xe0,
		0x0e, 0x09, 0x38, 0xd5, 0x70, 0xaa, 0x61, 0x8d, 0xf3, 0xb4, 0xc6, 0x06, 0x82, 0xf7, 0x60, 0x88,
		0x85, 0x84, 0x53, 0x0d, 0x63, 0x0c, 0xa7, 0x1a, 0x4e, 0x35, 0x9c, 0x6a, 0x38, 0xd5, 0x70, 0xaa,
		0xd7, 0x69, 0xc6, 0x6d, 0x9d, 0xea, 0x79, 0x0b, 0x70, 0xaa, 0xe1, 0x54, 0xc3, 0xa9, 0x86, 0x53,
		0x0d, 0xa7, 0x1a, 0x4e, 0x35, 0xac, 0x71, 0xc6, 0x4f, 0x6e, 0xf6, 0xc5, 0x8c, 0xd9, 0xeb, 0xb8,
		0x6d, 0xd9, 0xde, 0xce, 0xd8, 0x5b, 0xfa, 0xca, 0x55, 0x96, 0xbb, 0xcb, 0x62, 0x2f, 0x1e, 0x6c,
		0xc4, 0xf8, 0x29, 0x14, 0x93, 0x44, 0x81, 0x3b, 0x4b, 0xe9, 0x36, 0x2f, 0x26, 0x39, 0x92, 0xe9,
		0xeb, 0x99, 0x3e, 0x0a, 0x2c, 0x1c, 0x67, 0x78, 0x66, 0xf6, 0x7a, 0xd9, 0x78, 0x04, 0xa5, 0xc8,
		0x1e, 0x95, 0x22, 0xfb, 0x5a, 0xbb, 0xac, 0xff, 0xa8, 0x5d, 0x36, 0xae, 0x16, 0xd7, 0xf7, 0xd0,
		0x2f, 0x47, 0xd6, 0x69, 0x5f, 0xf6, 0x28, 0xd7, 0x90, 0xea, 0xf6, 0xda, 0x97, 0xb5, 0x2f, 0x0d,
		0xd2, 0xe5, 0xd4, 0xda, 0x17, 0xbd, 0xcb, 0xf6, 0xf9, 0x79, 0xe3, 0xf2, 0xea, 0xb4, 0x76, 0x59,
		0xa7, 0xdc, 0x95, 0xf3, 0xe6, 0x45, 0x83, 0x7a, 0x1f, 0x4e, 0xbf, 0xd6, 0xba, 0xdd, 0x66, 0x97,
		0x72, 0x17, 0x4e, 0x6a, 0xa7, 0x7f, 0x74, 0xce, 0x6b, 0x17, 0xa4, 0xc5, 0xa2, 0xdb, 0xb8, 0xe8,
		0xd2, 0xae, 0x6f, 0x77, 0x56, 0x3b, 0xb9, 0x6c, 0x9e, 0x52, 0xee, 0x41, 0xef, 0xb2, 0x76, 0xd1,
		0x3d, 0x6d, 0x34, 0xbf, 0x37, 0x48, 0x4f, 0x44, 0xbb, 0x33, 0xa9, 0x57, 0x79, 0x75, 0xfa, 0xb5,
		0x76, 0x71, 0xd1, 0x20, 0x5d, 0xb7, 0xb2, 0x79, 0xd1, 0x6b, 0x7c, 0xb9, 0xac, 0xf5, 0x1a, 0xf5,
		0xab, 0xd3, 0xe6, 0xe5, 0xe9, 0xb7, 0x26, 0x69, 0xeb, 0x7d, 0xda, 0xf9, 0x46, 0x5b, 0xc0, 0x49,
		0x17, 0x10, 0x3d, 0xbb, 0x24, 0x3d, 0xfa, 0x9d, 0xf6, 0x8f, 0xc6, 0xe5, 0x55, 0xf7, 0x5b, 0xa7,
		0x73, 0xfe, 0x8f, 0xc2, 0x55, 0x11, 0xfd, 0x0d, 0x8e, 0x9a, 0xb9, 0xa3, 0xd6, 0x6d, 0x9f, 0xf5,
		0x8a, 0xe6, 0xa8, 0xb5, 0x3b, 0x8d, 0xcb, 0x5a, 0xaf, 0x79, 0xf1, 0xe5, 0xaa, 0xfb, 0x8f, 0x6e,
		0xaf, 0xd1, 0xfa, 0xb8, 0x75, 0x73, 0x7f, 0xae, 0x30, 0xa6, 0x38, 0x4a, 0xb8, 0x5f, 0x8e, 0xa3,
		0x5b, 0xae, 0xb2, 0x47, 0x16, 0x97, 0x9e, 0x45, 0x7c, 0x11, 0xf1, 0x45, 0x3b, 0x4d, 0x6f, 0x13,
		0x5f, 0xcc, 0x5a, 0x0e, 0xd3, 0xa0, 0x0c, 0xa6, 0xe1, 0x86, 0xa7, 0x81, 0xdd, 0xb2, 0xd9, 0xe0,
		0xb4, 0xdc, 0x7d, 0xb3, 0xdd, 0xd0, 0x74, 0xb1, 0xb5, 0x66, 0x80, 0x5d, 0x56, 0x1b, 0x97, 0xae,
		0x86, 0xcc, 0xb6, 0x6c, 0xa5, 0x93, 0xb1, 0xdb, 0x74, 0x83, 0xf4, 0xc9, 0x62, 0xe6, 0xb3, 0x6e,
		0x2f, 0xda, 0x6d, 0x2b, 0x96, 0xd2, 0x5c, 0xfa, 0x66, 0xbe, 0x85, 0xf8, 0xb6, 0x92, 0x7d, 0x7d,
		0x9c, 0xde, 0x18, 0xa3, 0x52, 0xa2, 0x23, 0xc5, 0x86, 0xef, 0xeb, 0xd0, 0xa5, 0x8a, 0x09, 0xd3,
		0x07, 0xde, 0x19, 0xf7, 0x74, 0xb7, 0x5e, 0xa5, 0x36, 0xd6, 0x59, 0x8c, 0xb4, 0xa1, 0x71, 0xce,
		0x6a, 0x94, 0x8d, 0x8d, 0xb1, 0xb1, 0x11, 0x36, 0x37, 0xbe, 0x76, 0x32, 0x94, 0xf6, 0x96, 0xaa,
		0x92, 0x37, 0x9f, 0xcd, 0x8c, 0x4c, 0x38, 0x7b, 0x0e, 0x17, 0xaa, 0x81, 0x07, 0x2d, 0x79, 0x70,
		0xf5, 0xd9, 0x24, 0x13, 0x6d, 0xb8, 0x9d, 0x69, 0x05, 0x5b, 0xd9, 0x81, 0xc9, 0xf7, 0x5d, 0xcd,
		0x16, 0xf5, 0x2a, 0x2f, 0x2b, 0x9d, 0x58, 0xa0, 0xec, 0x37, 0x94, 0xa6, 0xb4, 0x8b, 0x56, 0x92,
		0x5d, 0x85, 0x64, 0x43, 0xb2, 0x73, 0x92, 0xec, 0x2c, 0x0b, 0xd8, 0x81, 0x60, 0xa7, 0x00, 0xbd,
		0xe2, 0xa1, 0x73, 0x1a, 0xa2, 0xb4, 0x1f, 0xdb, 0x5c, 0xf0, 0x79, 0xd4, 0x7f, 0xe8, 0x53, 0x06,
		0x88, 0x7e, 0xf4, 0x18, 0x50, 0x1a, 0x28, 0xfd, 0xd6, 0xc2, 0x32, 0xb0, 0xba, 0xcb, 0x4f, 0x03,
		0xab, 0x61, 0x7c, 0x2d, 0x8d, 0x6f, 0xe6, 0x7b, 0x8a, 0x33, 0x7a, 0x82, 0x76, 0x1e, 0xa1, 0xe1,
		0x12, 0x36, 0x5e, 0xca, 0x36, 0x4b, 0xda, 0xd1, 0xd2, 0xb6, 0x5d, 0xe2, 0xce, 0x96, 0xba, 0xb3,
		0x25, 0xef, 0x6e, 0xe9, 0x1b, 0x06, 0x36, 0x33, 0xce, 0x7d, 0x56, 0x91, 0x58, 0x3c, 0x38, 0xa3,
		0x17, 0xcb, 0x7d, 0xdd, 0x49, 0x2b, 0xbf, 0xad, 0x25, 0x78, 0x6d, 0x2a, 0x2e, 0x2e, 0xc4, 0xc6,
		0xb1, 0xf8, 0xb8, 0x12, 0x23, 0xe7, 0xe2, 0xe4, 0x5c, 0xac, 0xdc, 0x8b, 0x97, 0x99, 0x98, 0x19,
		0x8a, 0xdb, 0xe2, 0xf5, 0x8d, 0x8f, 0x3f, 0x3e, 0x5b, 0x39, 0x01, 0x67, 0x03, 0xb3, 0xf4, 0x8e,
		0x67, 0xf6, 0xe6, 0xd0, 0xa2, 0x8d, 0xce, 0xcc, 0x5f, 0xfa, 0xfd, 0xf7, 0xed, 0xe5, 0xff, 0x7f,
		0x70, 0x8f, 0xa6, 0xa6, 0x70, 0x7b, 0x22, 0xf0, 0x2b, 0x3a, 0x39, 0x96, 0xaf, 0xe6, 0x34, 0xf4,
		0xe4, 0xed, 0xfd, 0xcc, 0x65, 0xa7, 0xeb, 0xd1, 0x6f, 0xdb, 0x46, 0xb8, 0x61, 0xe3, 0x91, 0x2e,
		0xbf, 0xca, 0xa3, 0xdf, 0x32, 0x45, 0xf6, 0xb2, 0xcf, 0x57, 0x96, 0x93, 0xf4, 0x46, 0x86, 0xca,
		0xc6, 0x40, 0xe1, 0x42, 0x55, 0xf0, 0xdb, 0xca, 0xb4, 0x90, 0xfd, 0x39, 0x7a, 0x73, 0x03, 0x62,
		0x63, 0x38, 0x96, 0x0d, 0x86, 0xb1, 0x69, 0xc8, 0x47, 0x61, 0x64, 0xdb, 0x22, 0x78, 0x1e, 0xb4,
		0xc8, 0x18, 0x69, 0x75, 0xe2, 0xf2, 0x55, 0xa1, 0x32, 0xa0, 0x32, 0xe0, 0xf2, 0xc1, 0xe5, 0x83,
		0xcb, 0x07, 0x97, 0x0f, 0x2e, 0xdf, 0xc7, 0x71, 0xf9, 0x4c, 0x68, 0x23, 0x1f, 0x8f, 0x2f, 0xc3,
		0x96, 0xaf, 0x01, 0xbf, 0x39, 0xdd, 0x07, 0xf8, 0x83, 0xdf, 0x67, 0xb4, 0x44, 0xa5, 0x73, 0x91,
		0xe8, 0x9a, 0xd6, 0x19, 0xf7, 0x0f, 0x5a, 0x42, 0x36, 0x02, 0x1e, 0xce, 0x76, 0x55, 0xe5, 0x28,
		0x08, 0x32, 0x70, 0x68, 0x8b, 0xdd, 0x99, 0x3f, 0xdc, 0x56, 0x3e, 0x57, 0xdc, 0x3f, 0xb9, 0x9f,
		0x3d, 0x4a, 0x3b, 0x89, 0xe1, 0xd5, 0xf5, 0xbf, 0x82, 0x8c, 0x86, 0x57, 0x57, 0xfc, 0x07, 0x4b,
		0x6f, 0xc8, 0xb0, 0xd7, 0xef, 0x6a, 0xb8, 0xf3, 0x48, 0x75, 0xd0, 0x8a, 0xc9, 0xc4, 0xe3, 0xe2,
		0x26, 0xc5, 0xa9, 0x9f, 0x87, 0x3a, 0x42, 0x4b, 0x0f, 0xd1, 0x48, 0x73, 0x48, 0xff, 0xc6, 0x5b,
		0x24, 0x33, 0x1d, 0x96, 0xfb, 0x87, 0xbc, 0x61, 0x87, 0x3e, 0x8f, 0x6d, 0x82, 0x43, 0xb6, 0x85,
		0x67, 0xeb, 0xc6, 0x6c, 0x5e, 0x8e, 0x43, 0xa6, 0x85, 0x99, 0x0f, 0xde, 0x64, 0x4e, 0x73, 0xe0,
		0x92, 0xf5, 0x03, 0xee, 0x9b, 0xc7, 0xbc, 0xe6, 0x0d, 0x7c, 0x90, 0x52, 0xb3, 0x46, 0x4b, 0xfc,
		0xe3, 0x04, 0xbe, 0x8c, 0x44, 0x80, 0x4a, 0xb8, 0xbc, 0x1f, 0x45, 0x01, 0x67, 0xd2, 0x26, 0x5c,
		0x5e, 0xd9, 0x80, 0x20, 0x37, 0xd7, 0xd7, 0x5c, 0x49, 0xae, 0xcb, 0x71, 0xe8, 0x97, 0x63, 0xc5,
		0xc7, 0x36, 0xc8, 0x42, 0xfe, 0x5f, 0x6a, 0x0d, 0xca, 0x00, 0xca, 0xa0, 0xe0, 0xca, 0xa0, 0x30,
		0xf5, 0x35, 0x1a, 0xbd, 0xaf, 0x8d, 0xcb, 0x8b, 0x46, 0xef, 0xaa, 0xd3, 0xaa, 0x5f, 0xf5, 0xfe,
		0xd1, 0x69, 0xd0, 0xaf, 0xa9, 0xd1, 0xe8, 0x7d, 0xbd, 0xaa, 0xec, 0xec, 0x7c, 0x39, 0xa9, 0x75,
		0x1b, 0x57, 0xe7, 0x97, 0x7b, 0x94, 0xab, 0xe1, 0x8c, 0xfb, 0xb2, 0x37, 0xeb, 0x4a, 0xa7, 0xdb,
		0x22, 0xdf, 0x97, 0xca, 0x62, 0x5a, 0x8a, 0x32, 0x2b, 0x45, 0x58, 0x60, 0x7f, 0xce, 0xa7, 0xa5,
		0x4b, 0x7e, 0x5a, 0xbe, 0x5d, 0xd4, 0x1b, 0x67, 0xcd, 0x8b, 0x46, 0xbd, 0x28, 0x92, 0xf2, 0x7f,
		0x2f, 0x8b, 0x23, 0xf3, 0x2d, 0xfa, 0x5d, 0xd9, 0xf9, 0x72, 0x55, 0x6b, 0x9f, 0x16, 0xa1, 0x1f,
		0x93, 0x39, 0x39, 0x2d, 0x90, 0x7d, 0xec, 0x16, 0xa7, 0x2b, 0x8d, 0xcb, 0xc2, 0x58, 0xfa, 0xc6,
		0x65, 0x61, 0x84, 0xa5, 0x7b, 0x59, 0xd9, 0x29, 0x4c, 0x67, 0x1a, 0x45, 0xe2, 0x96, 0xf3, 0xc2,
		0x18, 0xc9, 0x6e, 0x91, 0xc4, 0x65, 0xaf, 0x38, 0x76, 0xb2, 0x48, 0x7d, 0xf9, 0x51, 0x6f, 0xed,
		0x15, 0x83, 0xc4, 0x4e, 0x8b, 0x43, 0x62, 0x45, 0xf0, 0xee, 0xf7, 0x9c, 0x48, 0x0b, 0xf1, 0x42,
		0xa6, 0x59, 0x82, 0xf1, 0x03, 0xee, 0x95, 0xc3, 0xc8, 0xb7, 0x48, 0x3a, 0x5f, 0xb4, 0x80, 0xa0,
		0x7b, 0x8a, 0x96, 0x10, 0x74, 0x77, 0x28, 0x11, 0x08, 0xba, 0x9b, 0x76, 0xe4, 0xac, 0x71, 0x7a,
		0xd5, 0x6a, 0xd7, 0x1b, 0x05, 0x09, 0xb8, 0x8f, 0xbb, 0x53, 0xfb, 0xd6, 0x6b, 0x93, 0xae, 0x9a,
		0xdf, 0x38, 0xbd, 0x6a, 0x5c, 0xd4, 0x4e, 0xce, 0x69, 0x47, 0x0e, 0xc7, 0xdd, 0xa8, 0x37, 0xbb,
		0xb6, 0xfd, 0xf8, 0x48, 0x26, 0x38, 0x52, 0x61, 0x79, 0xc0, 0x3c, 0x1d, 0x29, 0xfb, 0xed, 0xf0,
		0x97, 0x1a, 0x83, 0x61, 0x86, 0x61, 0x86, 0x61, 0xa6, 0x61, 0x98, 0x97, 0x6e, 0x46, 0xba, 0x3a,
		0x6b, 0x5f, 0xb6, 0xae, 0xce, 0x6a, 0xa7, 0xbd, 0xf6, 0x65, 0x41, 0xec, 0xf4, 0x7f, 0x77, 0xcf,
		0x3a, 0xa4, 0xef, 0x0e, 0x3b, 0xeb, 0x5c, 0x75, 0xce, 0xbf, 0x91, 0xbe, 0xc4, 0xed, 0xa2, 0x7d,
		0x31, 0xee, 0xc3, 0x97, 0x2f, 0x63, 0x13, 0x4d, 0xb9, 0x23, 0xff, 0x5d, 0x84, 0xd9, 0x38, 0xa5,
		0x2d, 0x10, 0xed, 0xde, 0x57, 0xda, 0xdb, 0x2b, 0x7f, 0x56, 0x89, 0xaf, 0x9e, 0x3d, 0xda, 0xf7,
		0xb4, 0xd5, 0xfe, 0x20, 0xbd, 0x7a, 0x68, 0x4b, 0xef, 0xe9, 0x59, 0x87, 0xfa, 0xf2, 0xaf, 0x5e,
		0xd5, 0x4e, 0xdb, 0xc4, 0x91, 0x82, 0xba, 0x11, 0xae, 0x1e, 0x7d, 0x60, 0x47, 0x9f, 0xf4, 0xe9,
		0xd6, 0x25, 0x9f, 0x70, 0x65, 0x05, 0xf8, 0x7b, 0x0f, 0xdf, 0xb9, 0x86, 0x22, 0xfc, 0xf1, 0xf5,
		0x7d, 0x22, 0x3c, 0x16, 0x94, 0xbd, 0x6b, 0x26, 0x25, 0x0f, 0x92, 0xec, 0x67, 0xe6, 0x9e, 0x37,
		0x81, 0xe3, 0x73, 0x38, 0x3e, 0xe7, 0x44, 0xfe, 0xb3, 0x57, 0x09, 0x9e, 0x2e, 0x41, 0x8b, 0x32,
		0xc1, 0xb3, 0x06, 0x3e, 0x46, 0x9d, 0x60, 0xc4, 0x08, 0xc9, 0xc6, 0x08, 0x8d, 0x4b, 0x47, 0x19,
		0x16, 0xd2, 0x7e, 0x2e, 0x29, 0xa6, 0x15, 0x2e, 0x2d, 0x04, 0xc6, 0x5a, 0x70, 0x5c, 0x08, 0x90,
		0x7b, 0x41, 0x72, 0x25, 0x50, 0xce, 0x05, 0xcb, 0xb9, 0x80, 0xe5, 0x22, 0x68, 0x76, 0xec, 0x6c,
		0x5a, 0x44, 0xca, 0x54, 0x00, 0x17, 0x0d, 0xf8, 0x3c, 0xf1, 0x94, 0x88, 0x8d, 0x6b, 0x18, 0xbd,
		0xb8, 0x16, 0x97, 0x1b, 0xb5, 0x9c, 0x22, 0xbb, 0x0a, 0x6f, 0xce, 0x44, 0xd5, 0xa5, 0xc8, 0xe6,
		0x27, 0xba, 0xae, 0x45, 0x38, 0x37, 0x51, 0xce, 0x4d, 0xa4, 0x73, 0x15, 0x6d, 0x3b, 0x11, 0x77,
		0x10, 0x1e, 0xd8, 0x72, 0x52, 0x37, 0xee, 0xd9, 0xfa, 0x4b, 0xb4, 0x12, 0x72, 0xe8, 0x62, 0xdd,
		0xcd, 0x0d, 0xea, 0xd1, 0xa7, 0xf5, 0x8c, 0xaf, 0xc5, 0xd8, 0x96, 0x84, 0xf4, 0xf9, 0x9d, 0x3b,
		0x1d, 0x38, 0x6d, 0x0e, 0xda, 0x0f, 0xda, 0x0f, 0xda, 0x6f, 0xa3, 0xb5, 0xdf, 0x48, 0x48, 0x5d,
		0x39, 0x70, 0xa8, 0xfd, 0x0e, 0x1c, 0x34, 0x65, 0x76, 0xc3, 0xfa, 0x6b, 0xff, 0xe7, 0x46, 0x0e,
		0xb6, 0x6c, 0x6f, 0x64, 0xcf, 0x59, 0xcd, 0x3d, 0x6b, 0xd6, 0xf2, 0x06, 0xf7, 0x57, 0xdb, 0x75,
		0x70, 0x3b, 0x79, 0x4e, 0xe2, 0xf1, 0x78, 0xaa, 0xd8, 0x5d, 0x6e, 0x53, 0xb5, 0x8b, 0xa9, 0xfa,
		0xfb, 0xd3, 0x66, 0xb4, 0xf2, 0x93, 0x20, 0x6b, 0x69, 0xa6, 0x86, 0x5c, 0x97, 0xa3, 0x91, 0x8e,
		0x47, 0xba, 0x1c, 0x47, 0xb7, 0x5c, 0xb9, 0x23, 0xaf, 0x97, 0x1a, 0x07, 0x87, 0x81, 0xc3, 0xc0,
		0x61, 0x1b, 0xcd, 0x61, 0x3e, 0xf7, 0x44, 0xc8, 0x82, 0x83, 0x3d, 0x97, 0x8e, 0x68, 0xd5, 0x41,
		0x5b, 0xcf, 0x6c, 0x48, 0x15, 0x80, 0x67, 0x36, 0x1d, 0x55, 0x50, 0x03, 0x00, 0x0f, 0x80, 0xf7,
		0x11, 0x00, 0xef, 0xae, 0x1c, 0xb0, 0xc4, 0x29, 0xd5, 0xcd, 0x5b, 0x04, 0xca, 0x01, 0xe5, 0x80,
		0x72, 0x1b, 0x8d, 0x72, 0xe6, 0x35, 0x71, 0x5f, 0x05, 0xb9, 0xca, 0xba, 0x94, 0xe0, 0x4a, 0xb7,
		0x73, 0x2d, 0x2f, 0x94, 0x59, 0xb4, 0xe3, 0x22, 0xf5, 0xf0, 0x59, 0x46, 0xdd, 0xf6, 0xec, 0x87,
		0x6d, 0xab, 0xa4, 0x8b, 0x2d, 0x37, 0x49, 0x8a, 0x9d, 0xd9, 0xdb, 0x9d, 0xce, 0x5e, 0xee, 0x6a,
		0xf6, 0x83, 0xd1, 0x45, 0xa3, 0xe6, 0x93, 0x6d, 0x30, 0xd1, 0x96, 0x1b, 0x4d, 0x4e, 0x36, 0x98,
		0x8a, 0x76, 0x71, 0x1a, 0x32, 0x5f, 0x36, 0xc0, 0x9a, 0xe1, 0xfa, 0x34, 0x57, 0xd7, 0xa7, 0xcd,
		0x2e, 0x4a, 0x9b, 0x4a, 0xf8, 0x06, 0x6b, 0x32, 0xb3, 0x9b, 0x51, 0x9f, 0x4d, 0x80, 0xe9, 0x9d,
		0x65, 0x5b, 0x2e, 0x73, 0xf8, 0xaa, 0xd0, 0x64, 0xd0, 0x64, 0x6b, 0xd1, 0x64, 0xc8, 0xe1, 0x83,
		0xcb, 0x0d, 0x97, 0x1b, 0x2e, 0xb7, 0xa5, 0x0d, 0x45, 0x0e, 0x1f, 0x72, 0xf8, 0xa0, 0xfd, 0xa0,
		0xfd, 0x3e, 0xa2, 0xf6, 0x43, 0x0e, 0x5f, 0x96, 0x17, 0x43, 0x0e, 0x1f, 0xb6, 0x78, 0xb1, 0xc5,
		0xbb, 0x85, 0x2d, 0x5e, 0x4b, 0xd6, 0xca, 0x21, 0x77, 0x6f, 0xb9, 0x51, 0x37, 0xdc, 0x55, 0x01,
		0x77, 0x81, 0xbb, 0xc0, 0x5d, 0x2e, 0x02, 0x4d, 0x8b, 0x86, 0xd8, 0xcd, 0xd0, 0xdd, 0x0a, 0x99,
		0xaf, 0xe5, 0x71, 0xa3, 0x8e, 0xa6, 0xd0, 0x2d, 0x8b, 0x38, 0x53, 0x01, 0x79, 0xa8, 0x82, 0x17,
		0x55, 0xc2, 0x7d, 0xcc, 0x93, 0x92, 0x43, 0x0a, 0x71, 0xac, 0x14, 0x72, 0x57, 0x0e, 0xb9, 0x2b,
		0x89, 0x57, 0x95, 0xc5, 0x64, 0xe4, 0x37, 0x0d, 0x4f, 0x1c, 0xad, 0x5a, 0x67, 0x6e, 0xdb, 0xb3,
		0x35, 0xeb, 0x32, 0xf5, 0xf7, 0x99, 0xfd, 0x77, 0x98, 0x74, 0x9a, 0x4b, 0x2a, 0x70, 0x4e, 0xfe,
		0xa2, 0x7b, 0xbf, 0x31, 0x57, 0xff, 0xf1, 0xe9, 0xb4, 0x39, 0x4e, 0x15, 0xce, 0xdb, 0x49, 0x59,
		0x85, 0xb3, 0x92, 0x83, 0x7f, 0x99, 0xab, 0x9f, 0x99, 0xb3, 0xbf, 0x59, 0xa8, 0x29, 0xfd, 0xb4,
		0x99, 0xad, 0xfd, 0xdc, 0x10, 0xff, 0xd8, 0xc1, 0x92, 0x2f, 0x09, 0x99, 0x68, 0x36, 0xb1, 0xd4,
		0x8e, 0xc1, 0x75, 0xde, 0x30, 0xe0, 0x15, 0xf0, 0x0a, 0x78, 0x05, 0xbc, 0x02, 0x5e, 0x01, 0xaf,
		0x20, 0x1d, 0xc0, 0x2b, 0xe0, 0x15, 0xf0, 0xea, 0x0e, 0x5e, 0x35, 0x57, 0x37, 0x2c, 0xc8, 0x83,
		0x5e, 0x67, 0x2d, 0x03, 0x5f, 0x81, 0xaf, 0xc0, 0xd7, 0x0f, 0x87, 0xaf, 0x89, 0x66, 0xba, 0xec,
		0x58, 0x09, 0x2c, 0x2b, 0x82, 0x23, 0x87, 0x4d, 0x7e, 0x93, 0x53, 0x1b, 0x56, 0x92, 0x4c, 0x46,
		0x09, 0xf7, 0x22, 0xe9, 0x3b, 0x95, 0x35, 0x40, 0x6c, 0x7e, 0x99, 0x3c, 0x80, 0xd8, 0xf5, 0x43,
		0x6c, 0xde, 0x53, 0x5a, 0x39, 0xda, 0xdb, 0x3b, 0x38, 0xdc, 0xdb, 0xdb, 0x39, 0xdc, 0x3d, 0xdc,
		0x39, 0xde, 0xdf, 0xaf, 0x1c, 0x98, 0x5c, 0xde, 0x07, 0xae, 0xfd, 0x38, 0x5c, 0x1b, 0x3a, 0x5c,
		0xf5, 0x0b, 0x93, 0x36, 0x6e, 0x14, 0x34, 0x0b, 0x9a, 0x05, 0xcd, 0x7e, 0x38, 0x9a, 0x45, 0x30,
		0x16, 0x1c, 0xfb, 0x64, 0xda, 0x10, 0x8c, 0x2d, 0x1c, 0xc7, 0x22, 0x18, 0x0b, 0x68, 0x5d, 0x2f,
		0xb4, 0x96, 0xb5, 0x08, 0x79, 0x2e, 0xe4, 0x3a, 0x6d, 0x19, 0xf8, 0x0a, 0x7c, 0x05, 0xbe, 0x7e,
		0x38, 0x7c, 0x1d, 0xcb, 0xbe, 0x16, 0xde, 0xaf, 0x24, 0x17, 0x80, 0x3d, 0x02, 0x62, 0xe6, 0xc3,
		0x23, 0x08, 0x95, 0x16, 0x0e, 0x31, 0x11, 0x2a, 0x05, 0x75, 0x6e, 0x18, 0x75, 0x3a, 0x54, 0x64,
		0x0f, 0xc0, 0x29, 0x24, 0x58, 0x13, 0xac, 0x09, 0xd6, 0xfc, 0x78, 0xac, 0x89, 0x50, 0x29, 0x38,
		0xf6, 0xc9, 0xb4, 0x21, 0x54, 0x5a, 0x38, 0x8e, 0x45, 0xa8, 0x14, 0xd0, 0xba, 0x5e, 0x68, 0xcd,
		0x2b, 0x54, 0x3a, 0x6f, 0x19, 0xf8, 0x0a, 0x7c, 0x05, 0xbe, 0x7e, 0x38, 0x7c, 0x45, 0xa8, 0x94,
		0x24, 0x62, 0x22, 0x54, 0x5a, 0x38, 0xc4, 0x44, 0xa8, 0x14, 0xd4, 0xe9, 0x90, 0x3a, 0xd7, 0x5a,
		0x22, 0xcb, 0xd1, 0x05, 0x3c, 0x8b, 0xf6, 0xf2, 0xbd, 0x88, 0x67, 0x72, 0x71, 0xc2, 0xb6, 0xbb,
		0x9a, 0x79, 0x5b, 0x39, 0xdf, 0xcd, 0xd3, 0x1d, 0xbf, 0xef, 0x55, 0x73, 0xfc, 0xbe, 0x9d, 0xc9,
		0xeb, 0x12, 0x2c, 0x7b, 0x38, 0xb9, 0x84, 0xae, 0xdc, 0x17, 0x2c, 0x29, 0x7b, 0x23, 0xa5, 0xb8,
		0x83, 0x8a, 0x12, 0x0f, 0x37, 0x91, 0x3c, 0x6f, 0x1b, 0x45, 0x10, 0x53, 0x79, 0x2f, 0x28, 0x82,
		0x88, 0x22, 0x88, 0xe9, 0x7a, 0x86, 0x22, 0x88, 0x08, 0x68, 0x20, 0xa0, 0x81, 0x80, 0xc6, 0xc6,
		0x05, 0x34, 0xb0, 0x1f, 0x87, 0x60, 0xc9, 0x93, 0x69, 0xc3, 0x7e, 0x5c, 0xe1, 0x82, 0x25, 0xd8,
		0x8f, 0x43, 0x64, 0x64, 0x7d, 0x4b, 0x1e, 0x45, 0x10, 0x01, 0xaf, 0x80, 0x57, 0xc0, 0x2b, 0xe0,
		0x15, 0xf0, 0x0a, 0x78, 0x05, 0xbc, 0x02, 0x5e, 0x01, 0xaf, 0x94, 0xe0, 0x15, 0x45, 0x10, 0x81,
		0xaf, 0xc0, 0x57, 0xe0, 0xab, 0xeb, 0x35, 0x8b, 0x22, 0x88, 0x80, 0xd8, 0x3c, 0x35, 0x38, 0x20,
		0x76, 0x73, 0x20, 0x16, 0xe9, 0x6a, 0xe0, 0xda, 0xcd, 0xe2, 0x5a, 0x14, 0x41, 0x04, 0xcd, 0x82,
		0x66, 0x41, 0xb3, 0xae, 0xd6, 0x2c, 0x82, 0xb1, 0xe0, 0xd8, 0x27, 0xd3, 0x86, 0x60, 0x6c, 0xe1,
		0x38, 0x16, 0xc1, 0x58, 0x40, 0xeb, 0x7a, 0xa1, 0x15, 0x45, 0x10, 0x81, 0xaf, 0xc0, 0x57, 0xe0,
		0xab, 0xe3, 0x35, 0x8b, 0x93, 0xbd, 0x24, 0x11, 0x13, 0xa1, 0xd2, 0xc2, 0x21, 0x26, 0x42, 0xa5,
		0xa0, 0xce, 0x0d, 0xa3, 0x4e, 0x14, 0x41, 0x04, 0x6b, 0x82, 0x35, 0xc1, 0x9a, 0x8e, 0xd6, 0x2c,
		0x42, 0xa5, 0xe0, 0xd8, 0x27, 0xd3, 0x86, 0x50, 0x69, 0xe1, 0x38, 0x16, 0xa1, 0x52, 0x40, 0xeb,
		0x7a, 0xa1, 0x15, 0x45, 0x10, 0x81, 0xaf, 0xc0, 0x57, 0xe0, 0xab, 0xe3, 0x35, 0x8b, 0x50, 0x29,
		0x49, 0xc4, 0x44, 0xa8, 0xb4, 0x70, 0x88, 0x89, 0x50, 0x29, 0xa8, 0xd3, 0x21, 0x75, 0xa2, 0x08,
		0x62, 0xc6, 0x22, 0x88, 0xce, 0x4b, 0xe7, 0x6d, 0xad, 0xa4, 0x16, 0xe2, 0xf9, 0xf8, 0xb5, 0x4f,
		0x04, 0x4b, 0x4e, 0x67, 0x2f, 0x4d, 0xb0, 0x22, 0x62, 0x34, 0xd2, 0xf1, 0x48, 0x97, 0x07, 0x8a,
		0xff, 0x35, 0xe2, 0xd2, 0xbb, 0x77, 0x57, 0x0f, 0xf1, 0x59, 0xcb, 0x6e, 0xaa, 0x21, 0xee, 0xa0,
		0x1a, 0xe2, 0x1a, 0x9d, 0x18, 0x54, 0x43, 0xdc, 0x20, 0x55, 0xef, 0xcc, 0x35, 0x59, 0xac, 0xbf,
		0x85, 0xb0, 0x4e, 0x7c, 0x3a, 0x17, 0xeb, 0xcf, 0x9d, 0x37, 0xf2, 0x70, 0x76, 0xae, 0xf5, 0xf5,
		0x7f, 0x5d, 0xbc, 0x9a, 0x5b, 0xaf, 0xc6, 0xa1, 0x83, 0x98, 0x87, 0x17, 0x93, 0x13, 0xea, 0xe6,
		0xe5, 0xb5, 0xe4, 0xc9, 0xb1, 0x0e, 0xbd, 0x94, 0x5c, 0xbc, 0x93, 0xbc, 0xa7, 0x2a, 0x7f, 0x6f,
		0x24, 0xd7, 0xd9, 0xdb, 0x10, 0xca, 0xff, 0x49, 0x17, 0xf6, 0xa6, 0xd5, 0xc6, 0x5d, 0x83, 0x9e,
		0x8b, 0x1a, 0xe6, 0x28, 0x79, 0x0d, 0xc8, 0x03, 0xe4, 0x3d, 0xea, 0x19, 0x4a, 0x5e, 0xaf, 0x57,
		0x05, 0xe4, 0xa1, 0x0a, 0x5e, 0x54, 0x09, 0xd8, 0xbe, 0xca, 0x59, 0x49, 0xbc, 0xaa, 0x2c, 0xb0,
		0x7d, 0x65, 0xb2, 0x66, 0x91, 0x7d, 0x85, 0xad, 0xb1, 0x27, 0xd3, 0x86, 0xec, 0xab, 0x55, 0x38,
		0x9d, 0xb9, 0x3a, 0x9f, 0x4f, 0xa7, 0x14, 0xd9, 0x57, 0x39, 0x2b, 0x7a, 0xf7, 0xad, 0xa1, 0xe4,
		0x75, 0x0a, 0xeb, 0x85, 0x92, 0xd7, 0x80, 0x57, 0xc0, 0x2b, 0xe0, 0x15, 0xf0, 0x0a, 0x78, 0x05,
		0xbc, 0x02, 0x5e, 0x01, 0xaf, 0x80, 0x57, 0xf7, 0xf0, 0x8a, 0x92, 0xd7, 0xc0, 0x57, 0xe0, 0x2b,
		0xf0, 0xd5, 0xf5, 0x9a, 0x45, 0xc9, 0x6b, 0x40, 0x6c, 0x9e, 0x1a, 0x1c, 0x10, 0xbb, 0x39, 0x10,
		0x8b, 0xc3, 0x09, 0xe0, 0xda, 0xcd, 0xe2, 0x5a, 0x94, 0xbc, 0x06, 0xcd, 0x82, 0x66, 0x41, 0xb3,
		0xae, 0xd6, 0x2c, 0x82, 0xb1, 0xe0, 0xd8, 0x27, 0xd3, 0x86, 0x60, 0x6c, 0xe1, 0x38, 0x16, 0xc1,
		0x58, 0x40, 0xeb, 0x7a, 0xa1, 0x15, 0x25, 0xaf, 0x81, 0xaf, 0xc0, 0x57, 0xe0, 0xab, 0xe3, 0x35,
		0x8b, 0x3a, 0x2e, 0x24, 0x11, 0x13, 0xa1, 0xd2, 0xc2, 0x21, 0x26, 0x42, 0xa5, 0xa0, 0xce, 0x0d,
		0xa3, 0x4e, 0x94, 0xbc, 0x06, 0x6b, 0x82, 0x35, 0xc1, 0x9a, 0x8e, 0xd6, 0x2c, 0x42, 0xa5, 0xe0,
		0xd8, 0x27, 0xd3, 0x86, 0x50, 0x69, 0xe1, 0x38, 0x16, 0xa1, 0x52, 0x40, 0xeb, 0x7a, 0xa1, 0x15,
		0x25, 0xaf, 0x81, 0xaf, 0xc0, 0x57, 0xe0, 0xab, 0xe3, 0x35, 0x8b, 0x50, 0x29, 0x49, 0xc4, 0x44,
		0xa8, 0xb4, 0x70, 0x88, 0x89, 0x50, 0x29, 0xa8, 0xd3, 0x21, 0x75, 0xa2, 0xe4, 0x75, 0xc6, 0x92,
		0xd7, 0x0e, 0x8b, 0xe6, 0x6d, 0xad, 0xa4, 0xd8, 0x75, 0x7b, 0xf2, 0xc2, 0x9d, 0xc9, 0xfb, 0x12,
		0x2c, 0x7d, 0xa8, 0x99, 0x1a, 0x72, 0x5d, 0xce, 0xa7, 0x02, 0xe2, 0x4b, 0x8d, 0xa3, 0xda, 0x75,
		0x2a, 0x0f, 0x06, 0x85, 0x10, 0x51, 0x08, 0x71, 0xc5, 0x5e, 0x49, 0x2e, 0xc1, 0x74, 0x97, 0x41,
		0xf4, 0x5c, 0x82, 0xe7, 0x1f, 0xb3, 0xdc, 0x75, 0x15, 0xe5, 0xae, 0xa9, 0x94, 0xbb, 0xde, 0xc5,
		0x54, 0xa1, 0xb6, 0xb5, 0x05, 0xe0, 0xdd, 0x95, 0x27, 0xd7, 0xc8, 0x38, 0xa4, 0xba, 0x79, 0x8b,
		0x40, 0x39, 0xa0, 0x1c, 0x50, 0x6e, 0xa3, 0x51, 0xae, 0x1f, 0x45, 0x01, 0x67, 0xd2, 0x25, 0xc8,
		0x55, 0xd6, 0xa5, 0x04, 0x3f, 0xad, 0x70, 0x4a, 0x5c, 0xc5, 0x4e, 0x56, 0x11, 0x33, 0xb1, 0x98,
		0xdc, 0xdc, 0xc3, 0x23, 0x66, 0x12, 0x99, 0x7d, 0xaa, 0xb3, 0x3d, 0x91, 0x71, 0x51, 0x8c, 0x75,
		0xe4, 0xb4, 0xba, 0x90, 0xcf, 0xb3, 0xaa, 0xc7, 0xd2, 0xb9, 0x48, 0x74, 0x4d, 0x6b, 0x33, 0xfb,
		0x3b, 0xf6, 0x01, 0x1a, 0x01, 0x1f, 0x6b, 0xbb, 0x31, 0x51, 0xc9, 0x51, 0x10, 0xfc, 0xf6, 0xc9,
		0x84, 0x4e, 0xed, 0x1b, 0x69, 0x2b, 0x9f, 0x2b, 0xee, 0x9f, 0xdc, 0xcf, 0x9a, 0xc8, 0x75, 0xc0,
		0x2d, 0xa5, 0x2f, 0x5f, 0xa9, 0x33, 0x90, 0xb7, 0x1c, 0xe5, 0x2c, 0x9b, 0x84, 0xa5, 0x97, 0x93,
		0x74, 0x9f, 0x4c, 0x39, 0xb1, 0xa6, 0x13, 0x9a, 0xcf, 0x44, 0x66, 0x98, 0xc0, 0x1c, 0x26, 0x2e,
		0xdd, 0x84, 0xbd, 0x3f, 0xfc, 0x29, 0x86, 0xbe, 0x34, 0xb5, 0x0f, 0x69, 0x47, 0xfc, 0x51, 0x19,
		0xa5, 0xb4, 0x66, 0x25, 0xe3, 0xd5, 0x34, 0x0f, 0xb8, 0x9e, 0x32, 0x04, 0x61, 0x82, 0xe5, 0xf6,
		0xf8, 0x6d, 0x8a, 0xd9, 0xd6, 0x38, 0x6d, 0x8d, 0xcd, 0x4e, 0xf0, 0xd8, 0xad, 0xf0, 0x67, 0xbd,
		0xaa, 0xa5, 0xe4, 0x45, 0x52, 0x72, 0x4f, 0x47, 0x6a, 0x7a, 0xdd, 0x5e, 0xe6, 0x49, 0x98, 0x4f,
		0xff, 0x93, 0x76, 0xb2, 0x5a, 0x7d, 0x23, 0xff, 0xd4, 0xd8, 0x1f, 0xb5, 0xf1, 0x3f, 0xdd, 0xf9,
		0x9b, 0xb6, 0xfe, 0xa5, 0x33, 0x7f, 0xd2, 0x99, 0xff, 0xe8, 0xd4, 0x5f, 0xcc, 0x97, 0x33, 0x8d,
		0xfd, 0xbf, 0x87, 0x02, 0x98, 0x3e, 0x97, 0x5a, 0xe8, 0x7b, 0xc5, 0x07, 0x26, 0x93, 0x3f, 0xd7,
		0xe5, 0x06, 0x29, 0x09, 0xa5, 0xe6, 0xec, 0xab, 0x4f, 0x58, 0x62, 0xb1, 0x7c, 0xe6, 0x1d, 0x39,
		0x6b, 0x9e, 0x34, 0x2e, 0xaf, 0x4e, 0xdb, 0x17, 0x17, 0x8d, 0xd3, 0x5e, 0xfb, 0xf2, 0xaa, 0xf7,
		0x8f, 0x4e, 0xc3, 0x74, 0x25, 0x4d, 0x22, 0x9e, 0x89, 0x55, 0x88, 0xdf, 0x51, 0xe8, 0xac, 0x7b,
		0xfa, 0xd0, 0xa5, 0xd2, 0x3a, 0xc2, 0x81, 0x8e, 0xfa, 0xd1, 0xea, 0xb4, 0x8b, 0xd1, 0x91, 0x73,
		0x37, 0x13, 0xf2, 0x69, 0x35, 0xd1, 0xe4, 0xbf, 0xf3, 0x62, 0xfd, 0x0c, 0x60, 0xe4, 0x33, 0xcd,
		0xcb, 0x5e, 0xe4, 0x5b, 0x98, 0xe5, 0x87, 0x26, 0x60, 0x91, 0x61, 0x91, 0x0b, 0x6e, 0x91, 0x27,
		0x8b, 0x9d, 0x49, 0xdf, 0x34, 0xbf, 0x7f, 0x61, 0x93, 0x0d, 0xb2, 0x78, 0x4b, 0x1d, 0xa6, 0x35,
		0x57, 0xd2, 0xd8, 0xf4, 0x95, 0xfe, 0xe7, 0x9f, 0x3b, 0xe5, 0xe3, 0x9f, 0xff, 0xde, 0xfb, 0xfb,
		0x5f, 0xff, 0x2a, 0x4f, 0x7f, 0xac, 0x2e, 0xff, 0xd8, 0x9b, 0xff, 0xf0, 0xf9, 0xd9, 0x0f, 0xff,
		0xf9, 0xaf, 0x7f, 0xfd, 0x3e, 0xf9, 0xf9, 0xff, 0xfc, 0xd7, 0xff, 0xff, 0xff, 0xfe, 0xf3, 0xff,
		0x94, 0x7f, 0x3e, 0xfb, 0xc4, 0x7f, 0x64, 0x9f, 0xec, 0x9f, 0x1b, 0xa0, 0x00, 0xb9, 0x64, 0xfd,
		0x80, 0xfb, 0xe6, 0xea, 0x6f, 0xde, 0x00, 0x94, 0x1f, 0x94, 0x5f, 0xc1, 0x95, 0x9f, 0xf9, 0xf6,
		0x93, 0xe1, 0x76, 0x53, 0x4e, 0x22, 0xaf, 0xaf, 0xb9, 0x92, 0x5c, 0x97, 0xe3, 0xd0, 0x46, 0xee,
		0x97, 0x5b, 0x81, 0xf0, 0x43, 0xf8, 0x11, 0x8b, 0xa0, 0x11, 0x8b, 0x68, 0xf4, 0xbe, 0x36, 0x2e,
		0x2f, 0x1a, 0xbd, 0xab, 0x4e, 0xab, 0x5e, 0x90, 0x40, 0x44, 0xa3, 0xf7, 0xf5, 0xaa, 0xb2, 0xb3,
		0xf3, 0xe5, 0xa4, 0xd6, 0x6d, 0x5c, 0x9d, 0x5f, 0xee, 0x51, 0xf6, 0xe1, 0xc7, 0x7d, 0xd9, 0x9b,
		0x75, 0xa5, 0xd3, 0x6d, 0x91, 0xef, 0x4b, 0x65, 0x31, 0x2d, 0x45, 0x99, 0x95, 0x22, 0x2c, 0xb0,
		0x3f, 0xe7, 0xd3, 0xd2, 0x25, 0x3f, 0x2d, 0xdf, 0x2e, 0xea, 0x8d, 0xb3, 0xe6, 0x45, 0xa3, 0x5e,
		0x14, 0x49, 0xf9, 0xbf, 0x97, 0xc5, 0x91, 0xf9, 0x16, 0xfd, 0xae, 0xec, 0x7c, 0xb9, 0xaa, 0xb5,
		0x4f, 0x8b, 0xd0, 0x8f, 0xc9, 0x9c, 0x9c, 0x16, 0xc8, 0x3e, 0x76, 0x8b, 0xd3, 0x95, 0xc6, 0x65,
		0x61, 0x2c, 0x7d, 0xe3, 0xb2, 0x30, 0xc2, 0xd2, 0xbd, 0xac, 0xec, 0x14, 0xa6, 0x33, 0x8d, 0x22,
		0x71, 0xcb, 0x79, 0x61, 0x8c, 0x64, 0xb7, 0x48, 0xe2, 0xb2, 0x57, 0x1c, 0x3b, 0x59, 0xa4, 0xbe,
		0xfc, 0xa8, 0xb7, 0xf6, 0x8a, 0x41, 0x62, 0xa7, 0xc5, 0x21, 0xb1, 0x22, 0x78, 0xf7, 0x7b, 0x4e,
		0xa4, 0xe5, 0x03, 0x25, 0x1c, 0x2c, 0x87, 0xcd, 0xcb, 0xb1, 0xe2, 0x5e, 0x24, 0x07, 0x6e, 0x82,
		0xf0, 0x8b, 0xd6, 0x10, 0x8c, 0x4f, 0xd1, 0x12, 0x82, 0xf1, 0x0e, 0x25, 0x05, 0xc1, 0x78, 0x0b,
		0x1d, 0x8a, 0x60, 0x3c, 0x0d, 0x13, 0x87, 0x60, 0xfc, 0x26, 0xce, 0x0a, 0x82, 0xf1, 0x1b, 0xd5,
		0x17, 0x04, 0xe3, 0x37, 0x58, 0xe6, 0x11, 0x8c, 0x47, 0x30, 0x3e, 0x3f, 0x4d, 0x8c, 0x60, 0xfc,
		0x26, 0x4a, 0x3d, 0x82, 0xf1, 0x9b, 0xd9, 0x19, 0x04, 0xe3, 0x37, 0x52, 0x5c, 0x10, 0x8c, 0xdf,
		0x4c, 0x3b, 0x89, 0x60, 0xfc, 0x26, 0x92, 0x18, 0x82, 0xf1, 0x1b, 0x89, 0x2f, 0x08, 0xc6, 0xa7,
		0x1c, 0xbc, 0x01, 0x1b, 0x05, 0xba, 0xec, 0x45, 0xd2, 0x17, 0x46, 0xd5, 0x59, 0x16, 0xa3, 0xff,
		0xb4, 0x21, 0x84, 0xe0, 0x53, 0xb4, 0x84, 0x10, 0xbc, 0x43, 0xf9, 0xc0, 0x61, 0x18, 0x43, 0x15,
		0xc0, 0xbd, 0xb2, 0x17, 0x29, 0xc5, 0x3d, 0xcd, 0xfd, 0x72, 0x7f, 0x5a, 0xeb, 0xd3, 0x54, 0x0b,
		0x3c, 0x6f, 0x0b, 0x8a, 0x00, 0x8a, 0xa0, 0xe0, 0x8a, 0xc0, 0x8b, 0x46, 0x52, 0x73, 0x65, 0x54,
		0x5f, 0xdb, 0xe2, 0x4e, 0x1f, 0xcb, 0x4a, 0xd7, 0x16, 0x45, 0x10, 0x5d, 0x54, 0xb2, 0x76, 0x55,
		0x2e, 0xd6, 0x51, 0xf9, 0x63, 0x97, 0xe5, 0x8e, 0x6d, 0xca, 0xfb, 0xba, 0xa8, 0x3c, 0xed, 0x7a,
		0x68, 0xdd, 0xdf, 0x71, 0xe3, 0x74, 0xb4, 0x57, 0x54, 0x92, 0xf2, 0xe7, 0xe6, 0xd9, 0xea, 0x7b,
		0xcd, 0xdd, 0x19, 0xeb, 0x49, 0x63, 0xb0, 0xd6, 0xb0, 0xd6, 0xb0, 0xd6, 0xb0, 0xd6, 0xb0, 0xd6,
		0xb0, 0xd6, 0xb0, 0xd6, 0x0e, 0xac, 0x75, 0x68, 0x55, 0x59, 0x6b, 0xd1, 0x02, 0xec, 0x32, 0xec,
		0x32, 0x32, 0x5a, 0xd3, 0x84, 0xd4, 0x36, 0xa0, 0xd4, 0x65, 0xe3, 0xf4, 0xaa, 0xd5, 0xae, 0x37,
		0x0a, 0x92, 0xcd, 0x3a, 0xee, 0x4e, 0xed, 0x5b, 0xaf, 0x4d, 0x79, 0x6f, 0x68, 0xdc, 0x87, 0xc6,
		0x45, 0xed, 0xe4, 0x9c, 0x76, 0x5a, 0xde, 0xb8, 0x1b, 0xf5, 0x66, 0xd7, 0xb6, 0x1f, 0x1f, 0x69,
		0x7f, 0x8b, 0x7b, 0xe5, 0x44, 0x33, 0x3d, 0xb2, 0xf4, 0x93, 0x67, 0x6d, 0xc0, 0x0c, 0xc3, 0x0c,
		0xc3, 0x0c, 0xd3, 0x31, 0xc3, 0xdd, 0x5e, 0xad, 0xf7, 0xad, 0x5b, 0x20, 0x43, 0x3c, 0xeb, 0xd0,
		0x79, 0xfb, 0xf4, 0x0f, 0xfa, 0xa6, 0x6c, 0xd6, 0x99, 0x6f, 0x17, 0xd6, 0xdd, 0xf9, 0x60, 0x16,
		0x6d, 0x24, 0x67, 0x71, 0x5b, 0xd6, 0x0f, 0x78, 0xb9, 0x1f, 0x44, 0xde, 0x2f, 0x4b, 0xfb, 0xf6,
		0x62, 0x8b, 0xb0, 0x76, 0xb0, 0x76, 0x08, 0x06, 0xbf, 0xbb, 0xe0, 0x11, 0x0c, 0xb6, 0x8c, 0x58,
		0x22, 0x18, 0x9c, 0xdb, 0xd0, 0x22, 0x18, 0xbc, 0xb5, 0x41, 0xc1, 0xe0, 0xc7, 0x56, 0x76, 0xac,
		0xf6, 0x9d, 0x9a, 0xed, 0x69, 0x83, 0xb0, 0xda, 0xb0, 0xda, 0xb0, 0xda, 0xb0, 0xda, 0xb0, 0xda,
		0xb0, 0xda, 0xb0, 0xda, 0xb6, 0x56, 0x3b, 0x52, 0x61, 0x79, 0xc0, 0x3c, 0x1d, 0x29, 0x0b, 0x4b,
		0xbd, 0xd4, 0x08, 0xac, 0x33, 0xac, 0x33, 0x22, 0xc8, 0x29, 0x96, 0xfc, 0x06, 0x44, 0x90, 0x7b,
		0x97, 0xb5, 0x8b, 0xee, 0x69, 0xa3, 0xf9, 0xbd, 0x71, 0x79, 0x75, 0xd6, 0xbe, 0x6c, 0x5d, 0x9d,
		0xd5, 0x0a, 0x74, 0x77, 0xe1, 0x7f, 0x77, 0xcf, 0x3a, 0x94, 0x23, 0xc8, 0xdd, 0xb3, 0xce, 0x55,
		0xe7, 0xfc, 0x5b, 0x97, 0x72, 0x1f, 0x2e, 0xda, 0x17, 0xe3, 0x3e, 0x7c, 0xf9, 0x52, 0x3b, 0x39,
		0x6f, 0x50, 0xee, 0xc8, 0x7f, 0x17, 0x61, 0x36, 0x4e, 0x69, 0x0b, 0x44, 0xbb, 0xf7, 0x95, 0x76,
		0xad, 0x8b, 0x3f, 0xab, 0xc4, 0x57, 0x0f, 0xe9, 0xf3, 0xd3, 0xa7, 0x9d, 0xda, 0x1f, 0xa4, 0x57,
		0x0f, 0x6d, 0xe9, 0x3d, 0x3d, 0xeb, 0x50, 0x5f, 0xfe, 0xd5, 0xab, 0xda, 0x69, 0x9b, 0x38, 0x52,
		0x50, 0x37, 0xc2, 0xd5, 0x23, 0x6c, 0xa3, 0x67, 0x74, 0xec, 0xed, 0x8b, 0x10, 0xbf, 0xd4, 0x18,
		0x1c, 0x7d, 0x38, 0xfa, 0x70, 0xf4, 0xe1, 0xe8, 0xc3, 0xd1, 0x87, 0xa3, 0x0f, 0x47, 0x1f, 0x8e,
		0x3e, 0x1c, 0x7d, 0x38, 0xfa, 0x70, 0xf4, 0xe1, 0xe8, 0xc3, 0xd1, 0x87, 0xa3, 0x0f, 0x47, 0x7f,
		0x75, 0x8e, 0xbe, 0x90, 0xf1, 0x48, 0x97, 0xe3, 0xe8, 0x96, 0x5b, 0xec, 0xe0, 0x2f, 0x37, 0x62,
		0xe6, 0xd8, 0x57, 0xe0, 0xd8, 0xc3, 0xb1, 0x5f, 0x8d, 0x63, 0x5f, 0x17, 0xca, 0x6c, 0xfa, 0xd9,
		0xcd, 0xd0, 0xde, 0x97, 0x1e, 0x37, 0x62, 0x38, 0xc4, 0x76, 0x59, 0x54, 0xc6, 0x22, 0xe3, 0x42,
		0x74, 0x5e, 0x14, 0xa1, 0xfb, 0x38, 0x73, 0x45, 0x25, 0x97, 0x42, 0xe4, 0x5c, 0x98, 0x9c, 0x0b,
		0xd5, 0xab, 0xc2, 0x35, 0x19, 0xb9, 0x55, 0x27, 0xa8, 0x19, 0xae, 0x1a, 0xe3, 0x38, 0xda, 0xb3,
		0x35, 0xe3, 0x73, 0x4f, 0x84, 0x2c, 0x30, 0x4a, 0x6b, 0x7d, 0x66, 0x6f, 0xaa, 0x16, 0x6d, 0x3c,
		0x4b, 0x16, 0xb4, 0x69, 0xcc, 0x2e, 0x69, 0xd6, 0x0d, 0x39, 0x6d, 0xb9, 0x4a, 0xa2, 0x7d, 0x3a,
		0xcc, 0xd5, 0xdf, 0xdc, 0x34, 0xe7, 0x28, 0xa9, 0xf6, 0xf5, 0x19, 0xdc, 0xb1, 0x6e, 0xf7, 0xef,
		0xdf, 0x1c, 0x4c, 0x81, 0x83, 0x64, 0xdb, 0xa7, 0x53, 0xb0, 0xfb, 0x81, 0xa6, 0xe0, 0xd3, 0x7a,
		0x9e, 0xfe, 0xb9, 0xa2, 0x8c, 0x5f, 0x83, 0x25, 0x56, 0x12, 0x32, 0xd1, 0x6c, 0x62, 0x39, 0x2c,
		0xc1, 0x65, 0xde, 0x10, 0xe0, 0x05, 0xf0, 0x02, 0x78, 0x01, 0xbc, 0x00, 0x5e, 0x00, 0x2f, 0x80,
		0x17, 0xc0, 0x4b, 0xbe, 0xf0, 0xa2, 0xb9, 0xba, 0x61, 0x81, 0x0b, 0x7a, 0x99, 0xb5, 0x04, 0x7c,
		0x01, 0xbe, 0x00, 0x5f, 0x32, 0xaf, 0x99, 0x44, 0x33, 0x5d, 0xb6, 0x14, 0xa2, 0x2d, 0xbb, 0xe3,
		0xc5, 0x8b, 0x26, 0xbe, 0xc9, 0xa9, 0xce, 0x2d, 0x49, 0x26, 0xa3, 0x84, 0x7b, 0x91, 0xf4, 0xad,
		0xd6, 0x72, 0xa1, 0x21, 0x66, 0x07, 0x10, 0xb3, 0x6e, 0x88, 0x71, 0x3d, 0x05, 0xee, 0x8f, 0x3f,
		0x83, 0x6b, 0x56, 0xcb, 0x35, 0xa1, 0xc5, 0x2a, 0x5b, 0xa8, 0xe4, 0x71, 0x23, 0xa0, 0x19, 0xd0,
		0x0c, 0x68, 0x06, 0xc1, 0x18, 0x04, 0x63, 0xc0, 0x31, 0x08, 0xc6, 0x00, 0x5a, 0x72, 0x86, 0x96,
		0xb2, 0x16, 0x21, 0x77, 0x42, 0x2e, 0xd3, 0x96, 0x80, 0x2f, 0xc0, 0x17, 0xe0, 0x4b, 0xe6, 0x35,
		0x33, 0x96, 0x1d, 0x2d, 0xbc, 0x5f, 0x89, 0x13, 0x80, 0x39, 0x02, 0x72, 0x20, 0x74, 0x82, 0xd0,
		0x09, 0x28, 0x84, 0x06, 0x85, 0x58, 0x08, 0xfa, 0x03, 0x80, 0x08, 0x09, 0xf6, 0x00, 0x7b, 0x80,
		0x3d, 0x10, 0x3a, 0x41, 0xe8, 0x04, 0x1c, 0x83, 0xd0, 0x09, 0xa0, 0x25, 0x6f, 0x68, 0x71, 0x15,
		0x3a, 0x99, 0xb7, 0x04, 0x7c, 0x01, 0xbe, 0x00, 0x5f, 0x10, 0x3a, 0x41, 0xe8, 0x04, 0xc8, 0x81,
		0xd0, 0xc9, 0xc7, 0xa3, 0x90, 0x5c, 0x8f, 0x48, 0xd7, 0xa4, 0x8c, 0x34, 0x1b, 0x4f, 0x89, 0xd9,
		0x49, 0xe9, 0xc4, 0xbb, 0xe6, 0x21, 0x8b, 0x99, 0xbe, 0x1e, 0xeb, 0xdc, 0xed, 0x28, 0xe6, 0xd2,
		0x9b, 0x90, 0x43, 0x39, 0x0e, 0x98, 0x1e, 0x44, 0x2a, 0xdc, 0xf6, 0xa2, 0x30, 0x8e, 0x24, 0x97,
		0x3a, 0x79, 0xf8, 0x71, 0x7b, 0xe9, 0xd4, 0xf8, 0x76, 0xa2, 0x99, 0xe6, 0xdb, 0xe6, 0x95, 0x05,
		0xa6, 0x2f, 0xa2, 0xd5, 0xc8, 0xd3, 0x72, 0x5e, 0x18, 0x68, 0xf1, 0x1e, 0x9d, 0xd9, 0x6b, 0x5c,
		0x9d, 0x2e, 0x5e, 0xe3, 0xe1, 0xc7, 0xab, 0xde, 0xc3, 0x6b, 0x5c, 0x75, 0xc7, 0xaf, 0x71, 0xd5,
		0x1c, 0xbf, 0x46, 0x67, 0xf2, 0x16, 0x1b, 0x50, 0xb3, 0x21, 0x60, 0x09, 0x57, 0xe5, 0xbe, 0x60,
		0x49, 0xd9, 0x1b, 0x29, 0xc5, 0x0d, 0x8e, 0x77, 0x2d, 0x0c, 0xe2, 0x0b, 0x6d, 0xa1, 0x82, 0x43,
		0xfe, 0xe0, 0x88, 0x0a, 0x0e, 0x16, 0xea, 0x09, 0x15, 0x1c, 0xe0, 0x7d, 0xc1, 0xfb, 0x22, 0xe8,
		0x7d, 0x21, 0x78, 0x4c, 0xce, 0x93, 0x43, 0xf0, 0x78, 0xed, 0x9e, 0x1c, 0x82, 0xc7, 0xc5, 0x71,
		0xdb, 0x50, 0xc1, 0x01, 0xf0, 0x02, 0x78, 0x01, 0xbc, 0x00, 0x5e, 0x00, 0x2f, 0x80, 0x17, 0xc0,
		0x4b, 0xf1, 0xe1, 0x05, 0x15, 0x1c, 0x80, 0x2f, 0xc0, 0x17, 0x54, 0x70, 0x58, 0x6e, 0x02, 0x15,
		0x1c, 0xf2, 0xd7, 0x58, 0x80, 0x98, 0xcd, 0x9d, 0x02, 0xec, 0xa5, 0x53, 0xe7, 0x1a, 0x54, 0x70,
		0x00, 0xcd, 0x80, 0x66, 0x10, 0x8c, 0x41, 0x30, 0x06, 0xc1, 0x18, 0x04, 0x63, 0x00, 0x2d, 0x54,
		0xa0, 0x05, 0x15, 0x1c, 0x80, 0x2f, 0xc0, 0x17, 0x1c, 0x43, 0x40, 0xe8, 0x04, 0xc8, 0x81, 0xd0,
		0x09, 0x28, 0x64, 0x1d, 0x14, 0x82, 0x0a, 0x0e, 0x60, 0x0f, 0xb0, 0x07, 0x42, 0x27, 0x08, 0x9d,
		0x20, 0x74, 0x82, 0xd0, 0x09, 0xa0, 0x85, 0x08, 0xb4, 0xa0, 0x82, 0x03, 0xf0, 0x05, 0xf8, 0x82,
		0xd0, 0x09, 0x42, 0x27, 0x40, 0x0e, 0x84, 0x4e, 0x40, 0x21, 0xb6, 0x14, 0xf2, 0x41, 0x2a, 0x38,
		0x58, 0x17, 0x18, 0xd8, 0x72, 0x59, 0xc8, 0xe1, 0x7c, 0xfc, 0x36, 0x27, 0x82, 0x25, 0xa7, 0xb3,
		0x77, 0xd9, 0x80, 0x72, 0x0e, 0x91, 0x96, 0xe5, 0xf1, 0x08, 0x06, 0x82, 0x49, 0x8f, 0x97, 0xbd,
		0xc8, 0xe7, 0xe6, 0xf5, 0x1c, 0x5e, 0x6a, 0xcc, 0xac, 0xa0, 0xc3, 0x0e, 0x0a, 0x3a, 0xac, 0x83,
		0x1f, 0x3f, 0x62, 0x41, 0x07, 0x63, 0x3a, 0x7c, 0x38, 0x1d, 0xe0, 0x73, 0xa9, 0x85, 0xbe, 0x57,
		0x7c, 0x60, 0x32, 0xf9, 0xf3, 0x70, 0x96, 0x81, 0x3d, 0x2c, 0x35, 0x67, 0x5f, 0x7d, 0xc2, 0x12,
		0x07, 0xee, 0x61, 0xbb, 0x77, 0x71, 0x55, 0xeb, 0x74, 0xce, 0x9b, 0xa7, 0xb5, 0x5e, 0xb3, 0x7d,
		0x71, 0x75, 0xda, 0xae, 0x37, 0x4c, 0x57, 0xd2, 0xc4, 0xf0, 0x27, 0x56, 0x84, 0x6a, 0xe9, 0x54,
		0xcd, 0x7b, 0xd5, 0xa9, 0x9c, 0x57, 0xae, 0xaa, 0xf5, 0x8a, 0x85, 0xbb, 0xf2, 0xdb, 0x86, 0xf4,
		0xa1, 0x4a, 0xbb, 0x0f, 0x5d, 0xf2, 0x7d, 0x18, 0x4b, 0xc8, 0xb7, 0x8b, 0x7a, 0xe3, 0xac, 0x79,
		0xd1, 0xa8, 0xaf, 0xda, 0xff, 0xfd, 0x99, 0xb7, 0xe6, 0xcc, 0x87, 0x30, 0x46, 0xfa, 0xa1, 0x8c,
		0x96, 0x39, 0x5a, 0x2c, 0xb7, 0x82, 0x22, 0x51, 0x60, 0x0a, 0x14, 0x89, 0x7a, 0x75, 0xed, 0xa0,
		0x48, 0x14, 0x02, 0xbc, 0xd6, 0xc2, 0x85, 0xfd, 0x69, 0xdb, 0x10, 0x1a, 0xf6, 0xa7, 0x9f, 0x47,
		0x2a, 0xb1, 0x3f, 0x6d, 0x15, 0x58, 0xc4, 0xfe, 0xf4, 0xda, 0xa7, 0x00, 0xfb, 0xd3, 0xcf, 0x86,
		0x19, 0x45, 0xa2, 0x00, 0x2f, 0x80, 0x17, 0xc0, 0x0b, 0xe0, 0x05, 0xf0, 0x02, 0x78, 0x01, 0xbc,
		0x10, 0x83, 0x17, 0x14, 0x89, 0x02, 0xbe, 0x00, 0x5f, 0x50, 0x24, 0x6a, 0xb9, 0x09, 0x14, 0x89,
		0xca, 0x5f, 0x63, 0x01, 0x62, 0x36, 0x77, 0x0a, 0x90, 0xae, 0x47, 0x9d, 0x6b, 0x50, 0x24, 0x0a,
		0x34, 0x03, 0x9a, 0x41, 0x30, 0x06, 0xc1, 0x18, 0x04, 0x63, 0x10, 0x8c, 0x01, 0xb4, 0x50, 0x81,
		0x16, 0x14, 0x89, 0x02, 0xbe, 0x00, 0x5f, 0x70, 0xd2, 0x11, 0xa1, 0x13, 0x20, 0x07, 0x42, 0x27,
		0xa0, 0x90, 0x75, 0x50, 0x08, 0x8a, 0x44, 0x81, 0x3d, 0xc0, 0x1e, 0x08, 0x9d, 0x20, 0x74, 0x82,
		0xd0, 0x09, 0x42, 0x27, 0x80, 0x16, 0x22, 0xd0, 0x82, 0x22, 0x51, 0xc0, 0x17, 0xe0, 0x0b, 0x42,
		0x27, 0x08, 0x9d, 0x00, 0x39, 0x10, 0x3a, 0x01, 0x85, 0xd8, 0x52, 0xc8, 0x07, 0x29, 0x12, 0x65,
		0x51, 0x5a, 0x60, 0xcb, 0x65, 0x79, 0xa8, 0xf6, 0xe4, 0x3d, 0x3a, 0x93, 0xd7, 0xd8, 0x80, 0xba,
		0x0d, 0x71, 0x94, 0xe8, 0xf2, 0x80, 0x7b, 0xe5, 0xbe, 0x4d, 0xdd, 0x86, 0x47, 0xad, 0xa0, 0x6e,
		0x43, 0xfe, 0xb8, 0x88, 0xba, 0x0d, 0x16, 0x4a, 0x09, 0x75, 0x1b, 0x36, 0xc3, 0xe7, 0x8a, 0x62,
		0x0d, 0xbf, 0xcb, 0x58, 0xc0, 0x1e, 0x46, 0x0f, 0xa1, 0x63, 0x0b, 0x61, 0x72, 0x1b, 0x3a, 0xae,
		0xc0, 0x91, 0x7b, 0x65, 0x9c, 0x11, 0x3b, 0x5e, 0xbb, 0x23, 0x87, 0xd8, 0x71, 0x71, 0xbc, 0x36,
		0x14, 0x70, 0x00, 0xc5, 0x80, 0x62, 0x40, 0x31, 0xa0, 0x18, 0x50, 0x0c, 0x28, 0x06, 0x14, 0xf3,
		0x81, 0x28, 0x06, 0x95, 0x1c, 0x72, 0xe1, 0x18, 0x30, 0x8c, 0x29, 0xc3, 0xa0, 0x92, 0x03, 0x2a,
		0x39, 0x50, 0x82, 0x18, 0xec, 0xa9, 0xaf, 0x1d, 0x62, 0xb0, 0xa7, 0x0e, 0xae, 0x79, 0x3c, 0xcc,
		0xa8, 0xe4, 0x80, 0xa8, 0x0c, 0xa2, 0x32, 0x88, 0xca, 0x20, 0x2a, 0x83, 0xa8, 0x0c, 0xa2, 0x32,
		0x88, 0xca, 0x90, 0xa3, 0x17, 0x94, 0x74, 0x40, 0x54, 0x06, 0x51, 0x19, 0x9c, 0x4b, 0x40, 0x0c,
		0x05, 0xc8, 0x81, 0x18, 0x0a, 0x28, 0x64, 0x1d, 0x14, 0x82, 0x92, 0x0e, 0x88, 0xa1, 0x20, 0x86,
		0x82, 0x18, 0x0a, 0x62, 0x28, 0x88, 0xa1, 0x20, 0x86, 0x82, 0x18, 0x0a, 0x35, 0x7a, 0x41, 0x6d,
		0x07, 0xc4, 0x50, 0x10, 0x43, 0x41, 0x0c, 0x05, 0x31, 0x14, 0x20, 0x07, 0x62, 0x28, 0xa0, 0x10,
		0x5b, 0x0a, 0xf9, 0x20, 0xb5, 0x1d, 0x2c, 0xca, 0x0f, 0x6c, 0xb9, 0xac, 0xed, 0xd0, 0x89, 0x12,
		0x7d, 0xc6, 0xbd, 0x93, 0x0d, 0x29, 0xed, 0xa0, 0xb8, 0x83, 0xca, 0x0e, 0x4b, 0x8d, 0xa0, 0xb0,
		0x43, 0xfe, 0xac, 0x88, 0xc2, 0x0e, 0x16, 0x1a, 0x09, 0x85, 0x1d, 0x10, 0x38, 0xa6, 0xef, 0x74,
		0x21, 0x70, 0x8c, 0xc0, 0x31, 0x21, 0x2f, 0x0e, 0x81, 0xe3, 0xb5, 0x7b, 0x71, 0x08, 0x1c, 0x17,
		0xc7, 0x65, 0x43, 0x61, 0x07, 0x50, 0x0c, 0x28, 0x06, 0x14, 0x03, 0x8a, 0x01, 0xc5, 0x80, 0x62,
		0x40, 0x31, 0x1f, 0x88, 0x62, 0x50, 0xd8, 0x21, 0x17, 0x8e, 0x01, 0xc3, 0x98, 0x32, 0x0c, 0x0a,
		0x3b, 0xa0, 0xb0, 0x03, 0x25, 0x88, 0xc1, 0x86, 0xfa, 0xda, 0x21, 0x06, 0x1b, 0xea, 0xe0, 0x9a,
		0xc7, 0xc3, 0x8c, 0xc2, 0x0e, 0x88, 0xca, 0x20, 0x2a, 0x83, 0xa8, 0x0c, 0xa2, 0x32, 0x88, 0xca,
		0x20, 0x2a, 0x83, 0xa8, 0x0c, 0x39, 0x7a, 0x41, 0x61, 0x07, 0x44, 0x65, 0x10, 0x95, 0xc1, 0xa1,
		0x04, 0xc4, 0x50, 0x80, 0x1c, 0x88, 0xa1, 0x80, 0x42, 0xd6, 0x41, 0x21, 0x28, 0xec, 0x80, 0x18,
		0x0a, 0x62, 0x28, 0x88, 0xa1, 0x20, 0x86, 0x82, 0x18, 0x0a, 0x62, 0x28, 0x88, 0xa1, 0x50, 0xa3,
		0x17, 0x14, 0x76, 0x40, 0x0c, 0x05, 0x31, 0x14, 0xc4, 0x50, 0x10, 0x43, 0x01, 0x72, 0x20, 0x86,
		0x02, 0x0a, 0xb1, 0xa5, 0x90, 0x8f, 0x52, 0xd8, 0xc1, 0xb8, 0xfa, 0xc0, 0x96, 0xd3, 0xba, 0x0e,
		0x8a, 0x6f, 0x54, 0x59, 0x87, 0x84, 0x1b, 0x9c, 0xf6, 0x5a, 0x2e, 0xe9, 0x30, 0x69, 0xc0, 0xac,
		0x9c, 0xc3, 0x0e, 0xca, 0x39, 0xac, 0x83, 0x0c, 0x3f, 0x62, 0x39, 0x07, 0x63, 0xee, 0x5b, 0xcc,
		0x3f, 0x97, 0xa3, 0x90, 0xab, 0xa9, 0x2a, 0x33, 0x98, 0xfc, 0x79, 0xa4, 0x6a, 0xcf, 0xe0, 0xd9,
		0x86, 0x1c, 0x85, 0xe3, 0x97, 0xff, 0x7b, 0x03, 0x54, 0x46, 0xc2, 0x95, 0x60, 0x41, 0x59, 0x46,
		0xe6, 0x4a, 0xe3, 0xa1, 0x09, 0xa8, 0x0d, 0xa8, 0x8d, 0x82, 0xab, 0x8d, 0x44, 0x2b, 0x21, 0x87,
		0x36, 0x1a, 0xc3, 0xc0, 0x35, 0x2c, 0x9d, 0x73, 0x39, 0x9c, 0x20, 0x93, 0x99, 0x4f, 0x68, 0xe1,
		0x1e, 0xbb, 0xf0, 0x01, 0x1d, 0x39, 0x1e, 0x0f, 0x0e, 0x87, 0x65, 0x3b, 0x0e, 0xbd, 0x0a, 0x0b,
		0x1f, 0xcf, 0x89, 0x6f, 0xe7, 0x7c, 0x68, 0x0f, 0x36, 0x68, 0x6c, 0x57, 0xe4, 0x31, 0xfd, 0xdc,
		0x04, 0x33, 0x1c, 0x49, 0xae, 0xcb, 0x89, 0x7f, 0x5d, 0x1e, 0xfb, 0x3c, 0x81, 0x60, 0xd2, 0xe3,
		0x65, 0x2f, 0xf2, 0xb9, 0x85, 0x59, 0x7e, 0xb5, 0x49, 0x98, 0x69, 0x98, 0xe9, 0x82, 0x9b, 0x69,
		0xe1, 0x73, 0xa9, 0x85, 0xbe, 0x57, 0x7c, 0x60, 0x63, 0xab, 0x0d, 0xe2, 0x58, 0xa5, 0xe6, 0xec,
		0xab, 0x4f, 0x58, 0xe2, 0x60, 0x5b, 0xa7, 0xdb, 0xbe, 0x68, 0xf4, 0xae, 0x6a, 0x9d, 0xce, 0x79,
		0xf3, 0xb4, 0xd6, 0x6b, 0xb6, 0x2f, 0xae, 0x4e, 0xdb, 0xf5, 0x86, 0xe9, 0x5a, 0x9a, 0xa8, 0xf9,
		0xc4, 0x2a, 0xb6, 0x6c, 0x69, 0xaf, 0xe6, 0xfd, 0xfa, 0xde, 0xbd, 0xac, 0xee, 0xec, 0xec, 0x5c,
		0xed, 0x5e, 0xee, 0x97, 0xd6, 0x61, 0x7d, 0x9d, 0x77, 0x63, 0x97, 0x72, 0x37, 0xa6, 0xab, 0xec,
		0xdb, 0x45, 0xbd, 0x71, 0xd6, 0xbc, 0x68, 0xd4, 0x8b, 0x31, 0x23, 0xd5, 0x55, 0x6f, 0x62, 0xfd,
		0xcc, 0x5b, 0x8d, 0xe6, 0x82, 0x1e, 0x37, 0x5c, 0xfa, 0x91, 0x45, 0x19, 0xd8, 0xd9, 0xf3, 0x80,
		0x0a, 0x40, 0x05, 0x7c, 0x7f, 0xf8, 0xfe, 0xf0, 0xfd, 0xe1, 0xfb, 0xc3, 0xf7, 0xcf, 0x6e, 0x80,
		0xcb, 0x31, 0x53, 0xda, 0xd6, 0x0a, 0x4f, 0x1b, 0x81, 0x29, 0x86, 0x29, 0x86, 0x29, 0x86, 0x29,
		0x86, 0x29, 0x86, 0x29, 0x86, 0x29, 0x36, 0x30, 0xc5, 0x8a, 0xdf, 0x58, 0x5b, 0xe2, 0x71, 0x1b,
		0x30, 0xc4, 0x30, 0xc4, 0x30, 0xc4, 0x30, 0xc4, 0x30, 0xc4, 0x54, 0x0d, 0x71, 0x15, 0x76, 0xd8,
		0x99, 0x1d, 0xfe, 0xe4, 0x70, 0x01, 0x99, 0x26, 0x22, 0xbb, 0x4b, 0x40, 0x2e, 0x65, 0xd9, 0xdd,
		0x77, 0x93, 0x6c, 0x9c, 0xce, 0x7a, 0xbc, 0x3f, 0xce, 0x6f, 0x7f, 0xe2, 0x9d, 0x19, 0xc8, 0x3a,
		0xf2, 0x2e, 0x46, 0x3c, 0xc5, 0x58, 0xdb, 0x8f, 0xf1, 0xdb, 0xa3, 0xfb, 0xfa, 0x98, 0xbd, 0xfc,
		0x2f, 0xaf, 0x8c, 0xe2, 0x98, 0x56, 0xa6, 0x25, 0x6b, 0x5f, 0x3d, 0xa9, 0x57, 0x3a, 0x17, 0x89,
		0xae, 0x69, 0xfd, 0xf6, 0x96, 0xcc, 0xd8, 0x10, 0x35, 0x02, 0x3e, 0xc6, 0x8c, 0xb1, 0x5a, 0x91,
		0xa3, 0x20, 0xf8, 0xed, 0xd3, 0x5b, 0xaa, 0x35, 0xfd, 0x87, 0xdb, 0xca, 0xe7, 0x8a, 0xfb, 0x27,
		0xf7, 0xb3, 0x8f, 0x66, 0xea, 0x5f, 0xca, 0xd5, 0x61, 0xba, 0x2a, 0xde, 0x58, 0x09, 0x66, 0x2b,
		0xe0, 0xe5, 0x59, 0x7f, 0x3e, 0xa7, 0x8f, 0xff, 0xf2, 0xa4, 0xf7, 0xef, 0xf5, 0x3a, 0x5b, 0x6f,
		0x5f, 0xe8, 0x63, 0x96, 0xbe, 0x3d, 0xee, 0xd1, 0xc3, 0x7b, 0x2f, 0xbd, 0xf3, 0xb4, 0x0c, 0xfa,
		0x80, 0x79, 0x93, 0x5c, 0x80, 0xc7, 0xef, 0xfb, 0xb8, 0x54, 0xfa, 0xf4, 0x33, 0x4f, 0x7a, 0xfb,
		0xf2, 0xed, 0x8d, 0xaf, 0xfa, 0x21, 0x6f, 0xf9, 0x19, 0xcb, 0x7e, 0x84, 0x78, 0x29, 0x55, 0xe3,
		0x3d, 0xf7, 0x20, 0x35, 0xfe, 0xa7, 0xc6, 0xfb, 0xa7, 0xf8, 0x2e, 0x06, 0xa5, 0x8c, 0xab, 0xe1,
		0xb5, 0xbb, 0x06, 0x1f, 0x86, 0xf4, 0xf5, 0xee, 0x3c, 0x1b, 0xfd, 0xd7, 0xba, 0xf3, 0xf6, 0x15,
		0x9a, 0xef, 0x3a, 0x85, 0x69, 0x9c, 0xbf, 0x77, 0x27, 0x27, 0xab, 0x0f, 0x97, 0xd9, 0x57, 0xcb,
		0xec, 0x93, 0xa5, 0x99, 0x3c, 0x33, 0xc5, 0xfd, 0xde, 0x05, 0x92, 0x25, 0x6f, 0x3e, 0xe2, 0xef,
		0x8c, 0xc1, 0x7c, 0x50, 0x67, 0x9f, 0x7f, 0xa7, 0x3f, 0xe9, 0x6e, 0x4a, 0x4d, 0x1d, 0x03, 0xc8,
		0xe2, 0xf3, 0xa7, 0x9e, 0x7e, 0x53, 0x57, 0xde, 0xd8, 0x75, 0x37, 0x76, 0xd5, 0xb3, 0x2c, 0x0f,
		0x37, 0xb4, 0x94, 0xf6, 0xde, 0xd1, 0x92, 0xcf, 0x13, 0x4f, 0x89, 0x38, 0x13, 0xd1, 0x2e, 0x15,
		0x5f, 0x79, 0x78, 0x38, 0xe5, 0x48, 0x64, 0x73, 0x94, 0x32, 0x07, 0x99, 0x4c, 0x82, 0x4b, 0x99,
		0x17, 0x9c, 0x6d, 0x0c, 0xc9, 0x3a, 0x76, 0x64, 0x1d, 0x33, 0x32, 0x59, 0x90, 0xf9, 0x38, 0x54,
		0x99, 0x43, 0x41, 0xe6, 0x21, 0xa0, 0x87, 0xd0, 0x8f, 0x2b, 0x87, 0x26, 0x85, 0x6e, 0xe2, 0x92,
		0xf5, 0x03, 0xee, 0x67, 0x97, 0xad, 0xf9, 0x83, 0x29, 0xc7, 0xb1, 0xce, 0x07, 0x6c, 0x14, 0x4c,
		0xe6, 0x73, 0xbc, 0x1c, 0x20, 0x8e, 0x10, 0xc7, 0xd5, 0x8a, 0x63, 0x3f, 0x8a, 0x02, 0xce, 0xa4,
		0x89, 0x3c, 0x56, 0x56, 0x28, 0x8f, 0x41, 0x14, 0xc5, 0x7d, 0xe6, 0xfd, 0x2a, 0x87, 0x59, 0x4e,
		0x39, 0x2c, 0x7a, 0xf9, 0xf8, 0xf1, 0xec, 0xb2, 0x39, 0x60, 0x41, 0x02, 0xe1, 0x84, 0x70, 0x42,
		0x38, 0x5f, 0xfa, 0xce, 0x50, 0x8f, 0xb2, 0x8b, 0xe4, 0xf8, 0x21, 0x08, 0x14, 0x04, 0x6a, 0xa5,
		0x02, 0x35, 0x12, 0x52, 0x57, 0x0e, 0x0c, 0xe4, 0x29, 0x43, 0x86, 0x85, 0x61, 0x45, 0x26, 0x83,
		0x5d, 0x55, 0x9b, 0xdd, 0x45, 0xdb, 0x0a, 0x6e, 0x96, 0x15, 0x95, 0x5c, 0x6c, 0x75, 0x99, 0x54,
		0xd0, 0xb3, 0xd9, 0x35, 0x74, 0x35, 0x64, 0x07, 0xfb, 0xfb, 0xbb, 0xfb, 0x6b, 0x1c, 0xb6, 0x9c,
		0x76, 0xec, 0x7e, 0xae, 0xd0, 0xe2, 0xcc, 0x42, 0xdb, 0x19, 0x4d, 0xce, 0x1b, 0xdb, 0x28, 0xb0,
		0x39, 0xb0, 0x39, 0x1f, 0x3a, 0xe0, 0xa1, 0xb3, 0xf4, 0xef, 0xa1, 0x0c, 0xe2, 0xf8, 0x29, 0x48,
		0x14, 0x24, 0x6a, 0xa5, 0x12, 0x65, 0x76, 0x5c, 0xdb, 0xe4, 0x98, 0xb6, 0xdd, 0xf1, 0xec, 0xe7,
		0xdb, 0x73, 0xe5, 0x0c, 0x02, 0xf3, 0x98, 0x1b, 0xcc, 0x8e, 0x61, 0xdb, 0xde, 0x7f, 0xcd, 0x24,
		0x2b, 0x5b, 0xbd, 0xbc, 0x8b, 0x4e, 0xd8, 0x75, 0xe6, 0x59, 0xa7, 0xfc, 0xc8, 0x4b, 0x4e, 0x59,
		0x3f, 0xe0, 0x2d, 0xe6, 0x05, 0xec, 0xde, 0x24, 0xcd, 0xd2, 0x82, 0x40, 0x5d, 0x77, 0xe6, 0xa6,
		0x7f, 0xe9, 0x79, 0xdf, 0xe2, 0x44, 0x2b, 0xce, 0x42, 0xca, 0x3d, 0x09, 0xaa, 0x37, 0x01, 0x93,
		0x94, 0x7b, 0x20, 0x92, 0xe8, 0xe8, 0x68, 0xa7, 0xba, 0xdf, 0x8b, 0x7e, 0x71, 0x79, 0x39, 0xb6,
		0xf9, 0x84, 0x3b, 0x73, 0x13, 0x09, 0x8f, 0x9f, 0xfd, 0xd9, 0xa5, 0xdc, 0x87, 0x81, 0x3a, 0x8b,
		0xd4, 0x2d, 0x53, 0x3e, 0xe5, 0x4e, 0x30, 0x1d, 0x9e, 0x47, 0x43, 0xe1, 0xb1, 0x80, 0x72, 0x2f,
		0xa2, 0x58, 0x8f, 0xbb, 0x30, 0x49, 0xa0, 0x8b, 0x23, 0xa5, 0x89, 0xcf, 0xc8, 0x77, 0xa1, 0xf4,
		0x88, 0xf6, 0x8c, 0x0c, 0x14, 0x0b, 0xf9, 0x25, 0x0f, 0xd8, 0x7d, 0x97, 0xab, 0x1b, 0xe1, 0x71,
		0xd2, 0xaa, 0x77, 0xd0, 0xb9, 0x9d, 0xf0, 0x24, 0xe1, 0x3e, 0x78, 0x2c, 0xbe, 0x65, 0xf1, 0x0f,
		0x1d, 0xcf, 0x16, 0xd7, 0x25, 0xf3, 0x45, 0x44, 0x7a, 0x52, 0x38, 0xe7, 0x47, 0x3b, 0xd5, 0x4a,
		0x95, 0x72, 0x27, 0xd4, 0xc0, 0xab, 0xec, 0x1d, 0xed, 0x16, 0x80, 0x4b, 0x0e, 0x5a, 0xb4, 0xf1,
		0x2a, 0x11, 0x77, 0xbd, 0xe8, 0x2c, 0x1a, 0x91, 0xe6, 0xf5, 0x20, 0x8c, 0x29, 0xbf, 0xfe, 0xf0,
		0xf8, 0xf8, 0xa8, 0x4a, 0x7b, 0x11, 0xc5, 0x5d, 0x41, 0x1a, 0xcc, 0xef, 0xaa, 0xfb, 0x61, 0x10,
		0x13, 0xef, 0xc1, 0xf5, 0x48, 0xea, 0x2f, 0x2a, 0x1a, 0x91, 0xee, 0x87, 0x2f, 0x86, 0x42, 0xb3,
		0xa0, 0x13, 0xdd, 0x72, 0x15, 0x08, 0xc9, 0x8b, 0x41, 0x83, 0x4d, 0xa9, 0xb9, 0xf2, 0x22, 0x29,
		0xb9, 0xa7, 0x89, 0x47, 0x46, 0x6a, 0x89, 0x68, 0x92, 0x36, 0x79, 0x71, 0x24, 0x2b, 0xfb, 0xa4,
		0x2b, 0x1e, 0x8a, 0xb8, 0x7b, 0x2b, 0xb4, 0x77, 0x4d, 0xb9, 0x0f, 0xda, 0x0f, 0x3c, 0xf2, 0xa1,
		0x9c, 0x46, 0xeb, 0xec, 0x4b, 0x9d, 0x38, 0x88, 0x1f, 0x1d, 0x1e, 0xde, 0x55, 0xf7, 0x8b, 0xe0,
		0x12, 0xed, 0xef, 0x51, 0xee, 0x45, 0x3f, 0xf1, 0x8a, 0x10, 0xa7, 0x3d, 0xbd, 0x3c, 0xeb, 0x34,
		0x25, 0x69, 0x23, 0x77, 0xbd, 0x5b, 0xdd, 0xed, 0xa8, 0xe8, 0xee, 0x9e, 0xbc, 0x7e, 0x6a, 0xdf,
		0x70, 0x35, 0xd9, 0x95, 0x21, 0x1e, 0x19, 0xac, 0xdf, 0x09, 0xea, 0x0b, 0xea, 0x0b, 0xd3, 0xfc,
		0x17, 0xe7, 0x31, 0xed, 0x9d, 0xb1, 0xe1, 0x80, 0xb4, 0x73, 0x11, 0xec, 0x8a, 0x98, 0xfe, 0x86,
		0x18, 0x6d, 0x07, 0x2f, 0x64, 0x5e, 0x97, 0x7b, 0xa7, 0x91, 0xd4, 0x2a, 0x0a, 0x02, 0xee, 0x37,
		0xcf, 0x48, 0xbb, 0x78, 0x9e, 0x88, 0xcf, 0x85, 0xfc, 0x45, 0x5a, 0xc1, 0xfa, 0x49, 0x50, 0x8d,
		0x83, 0x51, 0x42, 0x5a, 0x2c, 0x88, 0x8b, 0x35, 0x53, 0x9e, 0xe4, 0xa4, 0xb1, 0x69, 0x72, 0xd9,
		0x49, 0x87, 0x69, 0xd2, 0x6e, 0x29, 0x0b, 0x46, 0x8d, 0xf3, 0x0e, 0x69, 0xf0, 0xdb, 0x3d, 0x20,
		0x3d, 0x01, 0x2c, 0x20, 0xed, 0x8c, 0x6a, 0xae, 0xc2, 0x0e, 0x23, 0x9d, 0x1c, 0x31, 0x54, 0xbb,
		0x3b, 0xbb, 0x97, 0xf5, 0x1e, 0x69, 0xca, 0xb8, 0x21, 0x9d, 0x47, 0xb0, 0x48, 0xa7, 0x9b, 0x27,
		0xa1, 0x9d, 0x5e, 0x33, 0x29, 0x39, 0xe9, 0x3e, 0x25, 0x2a, 0x26, 0x2f, 0x15, 0x4d, 0xda, 0x52,
		0x31, 0x60, 0x89, 0x6e, 0xe8, 0x6b, 0xae, 0xce, 0xfe, 0xa4, 0x9e, 0x2b, 0xe4, 0x89, 0x86, 0xf4,
		0x3b, 0xb4, 0xe3, 0x4c, 0xf7, 0x31, 0x57, 0x1e, 0x7d, 0xc1, 0x8e, 0x55, 0xa4, 0x79, 0x24, 0x8f,
		0x76, 0x5a, 0x7d, 0xa1, 0x69, 0xa3, 0xd3, 0x61, 0xa1, 0x8c, 0x46, 0x21, 0xe2, 0x97, 0x35, 0x1d,
		0x16, 0x21, 0x2e, 0x7e, 0x26, 0xfa, 0xb4, 0x43, 0x7f, 0xb3, 0x8e, 0xec, 0x4d, 0x12, 0xb1, 0x4f,
		0x68, 0x07, 0x0b, 0x62, 0x25, 0x42, 0xa6, 0xee, 0x9b, 0xdd, 0xfa, 0x45, 0x11, 0x36, 0xbe, 0x0e,
		0x7e, 0xb4, 0x6a, 0xa4, 0x3b, 0x12, 0xfb, 0x72, 0x82, 0x25, 0xe7, 0x51, 0x14, 0x93, 0xce, 0x84,
		0xf2, 0x44, 0xe2, 0x45, 0xcd, 0xee, 0x39, 0xf5, 0x20, 0x33, 0x1b, 0x04, 0x4c, 0x8e, 0xd7, 0x16,
		0xed, 0x1c, 0xcd, 0x7e, 0xb8, 0x7b, 0xb8, 0x13, 0x33, 0x35, 0xf6, 0x9e, 0x48, 0x73, 0xbb, 0xe8,
		0x2b, 0x5e, 0x00, 0x17, 0x50, 0xf3, 0x22, 0xc4, 0xca, 0x0b, 0x81, 0x55, 0x4d, 0xda, 0x1b, 0x79,
		0x42, 0xf2, 0x21, 0xf9, 0x54, 0xc7, 0xa4, 0x42, 0x3c, 0x52, 0x5b, 0xa5, 0xbf, 0x11, 0xf9, 0x4d,
		0x7a, 0x05, 0xd9, 0x8a, 0x9c, 0x1e, 0x75, 0xa9, 0x47, 0xba, 0x52, 0x39, 0x49, 0x88, 0xe3, 0x79,
		0x14, 0xb7, 0x46, 0x81, 0x16, 0x71, 0xc0, 0xef, 0x22, 0x45, 0x7e, 0x53, 0xec, 0x7b, 0x8f, 0xfe,
		0xa1, 0xd5, 0x2f, 0xf5, 0x76, 0xb7, 0x50, 0xc1, 0x91, 0xcb, 0x41, 0x87, 0xfa, 0x91, 0x49, 0x4f,
		0xf3, 0x40, 0x24, 0x2d, 0xae, 0xd9, 0x79, 0xbb, 0x4d, 0x7a, 0xd3, 0x52, 0x10, 0xc7, 0xaa, 0x30,
		0xf2, 0x79, 0x58, 0x80, 0x93, 0xe9, 0x6d, 0xda, 0x69, 0xf1, 0x93, 0x7c, 0x47, 0xe2, 0x89, 0xe5,
		0x2c, 0x18, 0x7d, 0x89, 0x23, 0xd9, 0x96, 0x23, 0xca, 0xbd, 0xe0, 0xfa, 0x9a, 0x2b, 0xc9, 0xf5,
		0x69, 0x12, 0x32, 0x8f, 0x76, 0xa9, 0x80, 0xe4, 0x5e, 0x92, 0x5e, 0x50, 0x71, 0x4c, 0xda, 0x4b,
		0xba, 0x8e, 0x42, 0x1e, 0x4b, 0x46, 0xfc, 0x7c, 0x24, 0x69, 0xe3, 0x36, 0xe8, 0x8a, 0x21, 0xf5,
		0xc0, 0xcd, 0x5f, 0xd5, 0xe3, 0xdd, 0x0a, 0x6d, 0xc4, 0xf0, 0xd8, 0x77, 0xae, 0x12, 0x11, 0xc9,
		0x0a, 0x6d, 0x2b, 0x4d, 0xda, 0xc9, 0xe6, 0x09, 0xf1, 0xcc, 0x89, 0xb3, 0x91, 0x14, 0xb4, 0x0f,
		0xd5, 0x0e, 0x2a, 0x07, 0xad, 0x81, 0x3a, 0x19, 0x49, 0x9f, 0xf6, 0xc1, 0x96, 0x58, 0x45, 0x31,
		0xf5, 0xdd, 0x6d, 0x39, 0x10, 0x52, 0xf4, 0x99, 0x24, 0x8d, 0x78, 0xbe, 0x2f, 0xff, 0xa4, 0x7d,
		0x04, 0x32, 0xd1, 0x4c, 0x9d, 0xd3, 0xde, 0xe3, 0x1a, 0x1e, 0xee, 0xec, 0x32, 0x5d, 0x0d, 0xfb,
		0x94, 0x3b, 0x21, 0x07, 0x8c, 0xb4, 0x7d, 0xb8, 0x09, 0x6f, 0x99, 0xe2, 0x17, 0xc2, 0xeb, 0x11,
		0x4f, 0x1f, 0x1a, 0xeb, 0xd6, 0x02, 0xd4, 0x13, 0x9b, 0x25, 0xdd, 0x54, 0x03, 0xda, 0x31, 0x8d,
		0x45, 0xde, 0x29, 0x7d, 0x05, 0x75, 0xb0, 0x47, 0xda, 0x0d, 0xe2, 0x89, 0x17, 0x49, 0xda, 0x75,
		0x6e, 0x2a, 0xa4, 0x73, 0x52, 0x14, 0xf5, 0x0c, 0x02, 0xee, 0x45, 0xc4, 0x0f, 0xaa, 0xfd, 0x55,
		0x80, 0xcc, 0xd8, 0xc6, 0x49, 0x97, 0x78, 0xea, 0xc3, 0x59, 0xfd, 0x9c, 0xfe, 0x79, 0xcd, 0x0e,
		0xf1, 0x53, 0xb3, 0xf3, 0xbd, 0xdd, 0x46, 0xed, 0xa2, 0x46, 0x5a, 0xab, 0xc6, 0x8a, 0xfc, 0x09,
		0xec, 0x22, 0x6c, 0xf7, 0xec, 0x52, 0x3f, 0x02, 0x92, 0x84, 0x7e, 0x42, 0xbc, 0xda, 0x48, 0x10,
		0x79, 0x2c, 0xe8, 0xb1, 0x80, 0x34, 0xa7, 0x8e, 0x02, 0xad, 0x48, 0xef, 0xf9, 0xdc, 0x54, 0x2a,
		0xb4, 0x0d, 0xf4, 0x0e, 0xe9, 0xcd, 0x92, 0x84, 0x7a, 0x42, 0x49, 0xcc, 0x87, 0x85, 0xa8, 0xeb,
		0x1e, 0xec, 0x8a, 0xf8, 0x8e, 0x7e, 0xcd, 0x1d, 0x5f, 0xd2, 0xde, 0x43, 0x4f, 0x34, 0xf1, 0xa2,
		0x04, 0x71, 0x94, 0x90, 0xbf, 0x52, 0x26, 0x69, 0x31, 0xef, 0x9c, 0xfa, 0xe5, 0x38, 0x8c, 0xfa,
		0x79, 0x4c, 0x9f, 0x76, 0x66, 0xd5, 0xcd, 0x34, 0xaa, 0xdd, 0x8c, 0x6b, 0xbe, 0xaf, 0x38, 0xed,
		0x44, 0xef, 0x30, 0x26, 0x1d, 0xd6, 0xd6, 0x6a, 0x67, 0xe7, 0x88, 0x74, 0x36, 0x43, 0x3f, 0xf8,
		0xce, 0x3d, 0xcd, 0xba, 0x9a, 0xa9, 0x02, 0x64, 0x7e, 0x06, 0xec, 0x96, 0xf8, 0x26, 0xae, 0xf7,
		0xab, 0x17, 0x75, 0xc7, 0xff, 0x21, 0xbd, 0x51, 0x12, 0xd3, 0xde, 0x62, 0x08, 0xef, 0x95, 0x20,
		0x1e, 0xe2, 0x96, 0xc4, 0x53, 0x0e, 0x93, 0x80, 0xf6, 0xfb, 0x2f, 0x4e, 0x9b, 0xd4, 0xa3, 0x5b,
		0x49, 0xbf, 0x18, 0xc7, 0x94, 0x5e, 0x7b, 0x7e, 0xc8, 0x0a, 0x50, 0xb2, 0x9d, 0xfe, 0xfd, 0x0b,
		0xed, 0x91, 0x26, 0x3f, 0x0f, 0xf5, 0x26, 0xe9, 0xc2, 0xf9, 0x01, 0x8b, 0x49, 0xbb, 0xd3, 0x7a,
		0x44, 0xbe, 0x9c, 0x5c, 0x24, 0xb9, 0x1e, 0x63, 0xdf, 0x35, 0x67, 0x7e, 0x01, 0x6a, 0x23, 0x44,
		0x5a, 0xb6, 0x35, 0x69, 0xcf, 0x74, 0xe0, 0xfb, 0x82, 0xf6, 0x01, 0xea, 0x47, 0x06, 0x9b, 0xfe,
		0x01, 0xd1, 0xe9, 0x3d, 0xc6, 0xc5, 0x40, 0x10, 0xc5, 0x7c, 0x11, 0xb5, 0x6a, 0xa7, 0xa4, 0x1d,
		0x0b, 0xee, 0x0b, 0xd6, 0x62, 0x22, 0xa0, 0x5f, 0x80, 0xe3, 0xae, 0xba, 0x1f, 0xd3, 0xcf, 0xbe,
		0x3f, 0xf9, 0x51, 0x8b, 0xab, 0xad, 0x98, 0xf6, 0x25, 0xad, 0xe5, 0x61, 0x22, 0x0b, 0x50, 0x3e,
		0xb2, 0x42, 0xbe, 0x7c, 0x24, 0x0b, 0x46, 0x8d, 0x38, 0x92, 0x9d, 0xeb, 0xfb, 0x44, 0x78, 0x2c,
		0xf8, 0x46, 0xfb, 0x9c, 0x4d, 0x1c, 0xc9, 0x83, 0x6a, 0xb5, 0x08, 0xa5, 0x17, 0xeb, 0x5a, 0x11,
		0x77, 0x35, 0xfa, 0xb4, 0xcf, 0x08, 0x69, 0xae, 0x02, 0xce, 0x6e, 0x38, 0x75, 0x3c, 0xf7, 0x49,
		0xe3, 0xb9, 0xe7, 0xe9, 0x46, 0x38, 0x0a, 0xa8, 0x6f, 0xde, 0xd1, 0xce, 0xb7, 0x24, 0x9e, 0x96,
		0xe2, 0xdf, 0xf4, 0x7b, 0x3e, 0x69, 0x3f, 0xe2, 0xf6, 0x96, 0xc9, 0x4e, 0xa7, 0x4a, 0x9d, 0x5c,
		0xeb, 0x91, 0x97, 0xfc, 0x10, 0x8a, 0x07, 0x3c, 0x49, 0x5a, 0xcc, 0x0b, 0xa8, 0x67, 0x15, 0x88,
		0x50, 0x13, 0x4f, 0x8a, 0xe8, 0x47, 0xb4, 0x0f, 0xc1, 0x8a, 0xc1, 0xf7, 0x81, 0xe8, 0xdd, 0xc7,
		0x9c, 0x76, 0xda, 0x22, 0xe9, 0xc3, 0x41, 0x43, 0x31, 0x64, 0x7d, 0x31, 0x3d, 0x2a, 0x47, 0x7c,
		0x07, 0x72, 0x7a, 0x92, 0x74, 0x76, 0x04, 0xf3, 0x42, 0xd0, 0xbe, 0xdb, 0x34, 0x3e, 0x8b, 0xd4,
		0x2d, 0x53, 0x3e, 0xed, 0xcb, 0x0d, 0x48, 0x9f, 0x70, 0x57, 0x89, 0x22, 0xed, 0x05, 0x8d, 0x12,
		0xd2, 0xaf, 0x9f, 0x5c, 0x53, 0x27, 0x57, 0x4f, 0x12, 0x07, 0x8c, 0xee, 0xa8, 0xdf, 0x1c, 0xbb,
		0xd2, 0x03, 0xe6, 0x91, 0x0f, 0xbc, 0xce, 0xd1, 0xb5, 0x53, 0x25, 0x5d, 0xb6, 0x72, 0x78, 0x7c,
		0x7c, 0x54, 0xa1, 0x9f, 0x12, 0x21, 0x3d, 0x46, 0xbb, 0x44, 0x9c, 0x7f, 0x5d, 0x39, 0xa2, 0x1d,
		0xab, 0xd4, 0x93, 0xb3, 0x1e, 0x5f, 0x89, 0xd7, 0xae, 0x0c, 0xe3, 0x20, 0xe9, 0x91, 0xcf, 0x2c,
		0xb8, 0xa1, 0x7e, 0x1a, 0x33, 0xa1, 0x7e, 0x42, 0xbf, 0x2f, 0x74, 0x52, 0x80, 0x1a, 0xae, 0x05,
		0xd9, 0x09, 0xba, 0x4e, 0x12, 0xd2, 0xef, 0xef, 0x8b, 0xa1, 0xd0, 0x2c, 0xf8, 0xa1, 0x58, 0x1c,
		0x73, 0x55, 0xa0, 0x94, 0xa1, 0xe5, 0x6b, 0x93, 0x2a, 0x85, 0x48, 0x97, 0x6d, 0x9d, 0x86, 0x3a,
		0x29, 0x46, 0xc2, 0xca, 0xd2, 0x75, 0x0c, 0x1d, 0x15, 0x0d, 0x04, 0xed, 0x6c, 0x09, 0xea, 0xe7,
		0x69, 0x9f, 0xc6, 0xcc, 0x8b, 0xb1, 0xc6, 0x66, 0x67, 0xc1, 0x7a, 0xc3, 0x42, 0xdc, 0x35, 0x46,
		0x3a, 0x3e, 0xd5, 0x57, 0xc2, 0x1f, 0x92, 0x16, 0x71, 0x4e, 0xfb, 0xd4, 0xce, 0x35, 0x71, 0xdf,
		0x69, 0x71, 0x33, 0xd7, 0x99, 0x62, 0x21, 0xbf, 0xe4, 0x01, 0xbb, 0xa7, 0x7f, 0x24, 0x8f, 0x78,
		0x79, 0xdb, 0x69, 0x02, 0x6d, 0x21, 0x4e, 0x6d, 0x57, 0xaa, 0xad, 0x38, 0xee, 0xde, 0x0a, 0xed,
		0x5d, 0x93, 0xa6, 0xaa, 0x28, 0x8c, 0xa3, 0x44, 0xd0, 0xbf, 0x48, 0x30, 0xa6, 0xad, 0xad, 0xa2,
		0x58, 0x8f, 0x3d, 0xdb, 0x02, 0x38, 0x51, 0xb3, 0xac, 0xcd, 0xf3, 0x68, 0x38, 0xee, 0x10, 0xf9,
		0xfb, 0x29, 0x75, 0xd8, 0xa4, 0x7d, 0x4a, 0xef, 0x5a, 0xc4, 0x5c, 0x05, 0x4c, 0x56, 0xe9, 0x67,
		0x19, 0x15, 0x20, 0x79, 0x76, 0x97, 0xfe, 0x05, 0x3e, 0x49, 0x72, 0x58, 0x80, 0xfb, 0x4b, 0x9e,
		0x3a, 0xb0, 0x45, 0xb8, 0xe3, 0x7f, 0xa8, 0x69, 0x9f, 0x81, 0x39, 0x3a, 0x38, 0x67, 0x31, 0xe9,
		0x40, 0xf5, 0x5f, 0xc4, 0x0b, 0x8b, 0x2b, 0x3e, 0x1c, 0x05, 0x4c, 0x51, 0xdf, 0xfd, 0xe3, 0xb4,
		0xa3, 0xb7, 0xc4, 0x2b, 0x42, 0x71, 0x3e, 0xb9, 0xe9, 0x9e, 0xf9, 0xe7, 0x8c, 0x74, 0x20, 0x2d,
		0xa6, 0x5d, 0x33, 0x63, 0xa0, 0xea, 0x81, 0x27, 0x1a, 0xd2, 0xef, 0x68, 0xda, 0x71, 0x28, 0xe2,
		0xbb, 0xc7, 0xec, 0x46, 0x78, 0xa2, 0x3d, 0xf5, 0xef, 0xc8, 0x5f, 0xda, 0x10, 0x33, 0xda, 0x65,
		0x64, 0x93, 0xd0, 0x4f, 0x9a, 0x1e, 0x75, 0xc1, 0x2e, 0x42, 0x40, 0xd3, 0x93, 0x8a, 0xba, 0x95,
		0xab, 0xec, 0x1e, 0xef, 0x51, 0x4f, 0x2f, 0x22, 0x0d, 0x4a, 0x41, 0x72, 0x4b, 0x3d, 0xdd, 0x71,
		0x97, 0xf8, 0x55, 0xb8, 0xad, 0x51, 0xa0, 0x45, 0x20, 0xe4, 0x2f, 0xfa, 0xf7, 0x07, 0x32, 0x45,
		0x3b, 0x6d, 0x33, 0x56, 0x51, 0x7c, 0x2a, 0x83, 0xa4, 0x00, 0xd1, 0x63, 0xe2, 0xb7, 0x75, 0x8f,
		0x67, 0xa2, 0x13, 0x09, 0xa9, 0x7b, 0xd1, 0xe4, 0x3f, 0x5d, 0xae, 0x04, 0x23, 0x5e, 0x4d, 0x89,
		0x38, 0xb8, 0x7a, 0xf4, 0x77, 0x56, 0x42, 0x11, 0xdd, 0xd1, 0x4e, 0xea, 0x78, 0x20, 0xd7, 0x56,
		0xa7, 0x49, 0x3a, 0x3b, 0x85, 0x25, 0xc2, 0x6b, 0x76, 0xeb, 0x17, 0xc4, 0xf7, 0xb6, 0x2e, 0x99,
		0x2f, 0xa2, 0x02, 0xd8, 0x8b, 0x02, 0xc4, 0xcb, 0xc8, 0xdf, 0x6f, 0x42, 0x1f, 0x00, 0x13, 0x11,
		0xd3, 0x4e, 0xfd, 0xbb, 0x16, 0x71, 0x2c, 0x0a, 0x71, 0xa8, 0x6d, 0xc0, 0x12, 0xda, 0xf7, 0x5e,
		0x11, 0xcf, 0x9e, 0x0b, 0x58, 0x3c, 0x28, 0x4e, 0x3e, 0xcd, 0x17, 0x15, 0x8d, 0x68, 0xd7, 0xef,
		0x8e, 0x06, 0xfa, 0x96, 0x29, 0x7e, 0x1e, 0x45, 0x71, 0x9f, 0x78, 0x39, 0x7b, 0x1e, 0x07, 0x2a,
		0xa1, 0x7d, 0x74, 0xbe, 0xba, 0x5b, 0xa5, 0xbd, 0xcb, 0xcb, 0xbc, 0xeb, 0x7a, 0x97, 0xf4, 0x7d,
		0xa1, 0xfd, 0x61, 0x1c, 0x47, 0x81, 0xf0, 0xee, 0x99, 0xe7, 0x45, 0x23, 0xa9, 0x85, 0x1c, 0xd2,
		0xce, 0xc3, 0x1c, 0x0c, 0x38, 0x27, 0xcf, 0x1e, 0x16, 0x1d, 0x30, 0x7a, 0xf2, 0xe7, 0xa7, 0x15,
		0x0c, 0x94, 0xd9, 0x00, 0xbd, 0x70, 0x18, 0xcb, 0xb8, 0xae, 0xd4, 0x1a, 0x5e, 0x7a, 0x92, 0xa9,
		0x6d, 0x9e, 0x14, 0xb5, 0xfa, 0x37, 0x0e, 0xaa, 0x66, 0xb7, 0xe2, 0xad, 0xfe, 0x4d, 0xe7, 0x75,
		0x34, 0x7b, 0xd1, 0x2f, 0x2e, 0x2f, 0x8d, 0x14, 0xd7, 0xea, 0x5f, 0x7a, 0x7a, 0xb3, 0xf1, 0x9f,
		0x5d, 0x0a, 0xef, 0x3a, 0x50, 0xc6, 0xf5, 0x85, 0x56, 0xff, 0xb2, 0x4c, 0x87, 0xb3, 0x5c, 0x69,
		0x0a, 0x6f, 0x3b, 0xe3, 0x6a, 0x8b, 0xab, 0x34, 0xd7, 0x32, 0xc2, 0xb3, 0xba, 0x59, 0x34, 0x16,
		0xef, 0x3c, 0x46, 0xda, 0xe5, 0xea, 0x46, 0x98, 0xb8, 0xf1, 0x6b, 0x50, 0x69, 0x83, 0xce, 0xad,
		0x59, 0xad, 0xbb, 0xd5, 0xbf, 0xeb, 0xf4, 0x20, 0xf1, 0x0f, 0x1d, 0xcf, 0x16, 0x85, 0x61, 0x0c,
		0x74, 0x0d, 0x83, 0x3c, 0x0b, 0x14, 0x56, 0x29, 0xbc, 0xac, 0x1a, 0x78, 0x95, 0x3d, 0x93, 0xdd,
		0xed, 0xb5, 0xd9, 0xe3, 0x83, 0x16, 0x0d, 0x7c, 0x48, 0xc4, 0x5d, 0x2f, 0x3a, 0x8b, 0x46, 0x24,
		0x38, 0x32, 0x08, 0x63, 0x0a, 0xaf, 0x39, 0x3c, 0x3e, 0x3e, 0xaa, 0xd2, 0x98, 0xfc, 0xb8, 0x2b,
		0x48, 0x00, 0xe3, 0x5d, 0x75, 0x3f, 0x0c, 0x62, 0x22, 0x6f, 0x7a, 0x3d, 0x92, 0xda, 0x30, 0x48,
		0xb8, 0x06, 0xdf, 0x6c, 0x5a, 0x7f, 0xa5, 0x13, 0xdd, 0x72, 0x15, 0x08, 0xc9, 0x69, 0x51, 0xcd,
		0x64, 0x7b, 0xc2, 0x8b, 0xa4, 0xe4, 0x9e, 0x26, 0xe2, 0x09, 0xd7, 0x12, 0xd1, 0x24, 0x61, 0x1a,
		0xe2, 0x48, 0x56, 0xf6, 0xf7, 0x49, 0xd8, 0x5c, 0xe3, 0xb3, 0xd3, 0xab, 0x7f, 0x57, 0x6d, 0xb4,
		0x97, 0xb3, 0x26, 0x17, 0xbd, 0xd1, 0x3a, 0xfb, 0x52, 0x27, 0x02, 0x88, 0x47, 0x87, 0x87, 0x46,
		0x09, 0x2d, 0xeb, 0x43, 0xef, 0xfd, 0x3d, 0x0a, 0x6f, 0xdb, 0x4f, 0x3c, 0x4a, 0x71, 0xb0, 0xd3,
		0xcb, 0xb3, 0x4e, 0x53, 0x92, 0x30, 0x06, 0xd7, 0xbb, 0xd5, 0xdd, 0x8e, 0x8a, 0xee, 0xee, 0xc9,
		0xe8, 0x83, 0xc9, 0x45, 0xde, 0xac, 0x1f, 0x70, 0x22, 0x91, 0x9a, 0xfa, 0x9d, 0xa0, 0xb2, 0x10,
		0xbe, 0x30, 0xcd, 0x7f, 0x71, 0x1e, 0xd3, 0x88, 0xe8, 0x0f, 0x07, 0x24, 0xe0, 0x36, 0xd8, 0x15,
		0x31, 0x9d, 0x40, 0x3e, 0x0d, 0x87, 0x21, 0x64, 0x5e, 0x97, 0x7b, 0xa7, 0x91, 0xd4, 0x2a, 0x0a,
		0x02, 0xee, 0x37, 0xcf, 0x48, 0xb8, 0x0c, 0x9e, 0x88, 0xcd, 0xaa, 0x0c, 0xac, 0x41, 0x71, 0xf9,
		0x49, 0x50, 0x8d, 0x83, 0x51, 0x42, 0x62, 0xd9, 0x12, 0x11, 0x2f, 0xa6, 0x3c, 0xa3, 0xba, 0xbb,
		0x6b, 0x88, 0xca, 0x44, 0x92, 0xeb, 0x0e, 0xd3, 0x24, 0xdc, 0x19, 0x16, 0x8c, 0x1a, 0xe7, 0x1d,
		0x12, 0x00, 0xb3, 0x7b, 0x40, 0x62, 0x40, 0x59, 0x40, 0xc2, 0x89, 0xd1, 0x5c, 0x85, 0x1d, 0x46,
		0x62, 0x53, 0x74, 0xa8, 0x76, 0x77, 0x76, 0x2f, 0xeb, 0x3d, 0x12, 0xd6, 0xf5, 0x86, 0xc4, 0xbe,
		0xe2, 0x22, 0x0d, 0x65, 0x9e, 0xd4, 0x61, 0x5c, 0x6b, 0x6c, 0x0d, 0xfa, 0x55, 0xc5, 0x64, 0x56,
		0x6d, 0x93, 0xc6, 0xaa, 0x1d, 0xb0, 0x64, 0x7a, 0x2f, 0xd6, 0xd9, 0x9f, 0x54, 0xf6, 0xf0, 0x8d,
		0x8b, 0x59, 0xac, 0xc1, 0x3d, 0xbc, 0x8f, 0xb9, 0xf2, 0xe8, 0x08, 0xd8, 0xec, 0xce, 0xe8, 0x23,
		0xc3, 0x3b, 0xa3, 0xd7, 0x81, 0x06, 0x87, 0x24, 0x95, 0x2e, 0xa9, 0xb8, 0x91, 0x51, 0xb5, 0xd9,
		0xf5, 0xc5, 0x11, 0xcf, 0x44, 0x9f, 0x46, 0x28, 0x66, 0xf6, 0xc2, 0x7b, 0x93, 0x04, 0xc0, 0x13,
		0x1a, 0x4e, 0x63, 0xac, 0x44, 0xc8, 0xd4, 0xbd, 0xd9, 0x99, 0xc7, 0xf5, 0x05, 0xec, 0x0f, 0x7e,
		0xb4, 0x6a, 0x24, 0x5e, 0x78, 0xf9, 0xee, 0x09, 0x12, 0x99, 0x08, 0x9e, 0x48, 0xbc, 0xa8, 0xd9,
		0x3d, 0xa7, 0x12, 0xac, 0x5b, 0x94, 0xc5, 0xa7, 0x91, 0x93, 0xd4, 0x0f, 0x77, 0x0f, 0x77, 0x62,
		0xa6, 0xc6, 0x94, 0x4e, 0x82, 0x27, 0x45, 0x5f, 0x71, 0x42, 0x2e, 0x85, 0x69, 0xc5, 0xeb, 0xf5,
		0xc4, 0x16, 0x49, 0x61, 0x43, 0x93, 0xc6, 0x46, 0x83, 0x90, 0x7c, 0x48, 0x26, 0xe5, 0x27, 0xa9,
		0x10, 0x89, 0x84, 0x55, 0xe9, 0x6c, 0x88, 0x7c, 0x93, 0x1e, 0xb1, 0x2d, 0x91, 0xa5, 0x3b, 0x90,
		0x4e, 0x12, 0x22, 0xd8, 0x18, 0x4d, 0x4b, 0x44, 0xc5, 0x01, 0xbf, 0x8b, 0x14, 0x99, 0x60, 0xfe,
		0xf7, 0x1e, 0x9d, 0x43, 0x39, 0x5f, 0xea, 0xed, 0x2e, 0x49, 0x67, 0xf8, 0x72, 0xd0, 0xa1, 0x72,
		0x84, 0xc4, 0xd3, 0x3c, 0x10, 0x49, 0x8b, 0x6b, 0x76, 0xde, 0x6e, 0x93, 0xd8, 0x3c, 0x11, 0x44,
		0xb0, 0x21, 0x8c, 0x7c, 0x1e, 0x12, 0x3a, 0x01, 0xd7, 0xa6, 0x91, 0x5e, 0x39, 0xc9, 0xfb, 0x21,
		0x92, 0xb8, 0x38, 0xbb, 0xde, 0xd3, 0xa8, 0xe8, 0xdb, 0xea, 0xdf, 0x96, 0x8f, 0xdd, 0x74, 0xc9,
		0xb5, 0xe9, 0x4d, 0x0e, 0x6b, 0x18, 0xdf, 0xe4, 0x5e, 0x92, 0x58, 0x08, 0x71, 0x4c, 0x82, 0xc6,
		0xaf, 0xa3, 0x90, 0xc7, 0x92, 0x11, 0x39, 0x2f, 0x42, 0xc2, 0x08, 0x0c, 0x8c, 0xaf, 0x14, 0x59,
		0xfd, 0xcb, 0xfe, 0x55, 0x3d, 0xde, 0xad, 0xd0, 0x30, 0xad, 0x1e, 0xfb, 0xce, 0x55, 0x22, 0x22,
		0x59, 0xa1, 0x61, 0xb5, 0x48, 0x38, 0x61, 0x3c, 0x21, 0xb2, 0x63, 0x7a, 0x36, 0x92, 0x82, 0xc6,
		0xe1, 0xa0, 0x41, 0xe5, 0xa0, 0x35, 0x50, 0xa6, 0x15, 0xe4, 0xd6, 0xe3, 0xd6, 0x52, 0xd9, 0x1d,
		0x93, 0x03, 0x21, 0x45, 0x9f, 0x49, 0x12, 0xa8, 0xe2, 0xfb, 0xf2, 0x4f, 0x1a, 0x47, 0x42, 0x12,
		0xcd, 0xd4, 0x39, 0x8d, 0xd8, 0xfc, 0xf0, 0x70, 0x67, 0x97, 0xe9, 0x6a, 0xd8, 0xa7, 0xf0, 0xb2,
		0x72, 0xc0, 0x48, 0xe8, 0xd7, 0x9b, 0xf0, 0x96, 0x29, 0x7e, 0x21, 0xbc, 0x1e, 0x91, 0x6d, 0xfd,
		0xb1, 0xce, 0x22, 0x54, 0x07, 0x63, 0xb6, 0x49, 0x5e, 0x0d, 0x68, 0xf8, 0xb0, 0x8b, 0x7c, 0x2a,
		0x3a, 0x0a, 0xe1, 0x60, 0x8f, 0x04, 0x6e, 0xf3, 0xc4, 0x8b, 0x24, 0x8d, 0x73, 0xe4, 0x15, 0x12,
		0x7b, 0xcb, 0x8a, 0xca, 0x8e, 0x22, 0xf7, 0x22, 0x22, 0x07, 0x00, 0xfe, 0x22, 0x94, 0xd9, 0xd5,
		0x38, 0xe9, 0x12, 0xd9, 0xf2, 0x3c, 0xab, 0x9f, 0xd3, 0x39, 0xa7, 0xd2, 0x21, 0x72, 0xfa, 0x67,
		0xbe, 0x67, 0xd4, 0xa8, 0x5d, 0xd4, 0x48, 0x68, 0xab, 0x58, 0x91, 0x39, 0x01, 0x46, 0x29, 0x7c,
		0xbd, 0x4b, 0x25, 0xd5, 0x37, 0x09, 0xfd, 0x84, 0xc8, 0xa9, 0xe0, 0x20, 0xf2, 0x58, 0xd0, 0x63,
		0x01, 0x09, 0xae, 0x1a, 0x05, 0x5a, 0x91, 0x88, 0x61, 0xdf, 0x54, 0x2a, 0x34, 0x0c, 0xd6, 0x0e,
		0x89, 0xa0, 0x70, 0x42, 0x65, 0x63, 0x38, 0xe6, 0x43, 0x52, 0x75, 0x26, 0x83, 0x5d, 0x11, 0xdf,
		0xd1, 0x39, 0xbb, 0xee, 0x4b, 0x1a, 0x7b, 0x6d, 0x89, 0x26, 0x72, 0x68, 0x31, 0x8e, 0x12, 0x32,
		0xa5, 0x9d, 0x93, 0x16, 0xf3, 0xce, 0xa9, 0x14, 0xa3, 0x66, 0x54, 0xce, 0xa1, 0xf8, 0x34, 0x32,
		0x18, 0x6e, 0xa6, 0x51, 0xc0, 0x66, 0x5c, 0xf3, 0x7d, 0xc5, 0x69, 0x24, 0x12, 0x86, 0x31, 0x89,
		0x30, 0xa0, 0x56, 0x3b, 0x3b, 0x47, 0x24, 0x76, 0x31, 0xfb, 0xc1, 0x77, 0xee, 0x69, 0xd6, 0xd5,
		0x4c, 0x11, 0xca, 0x68, 0x0a, 0xd8, 0x2d, 0x91, 0xcd, 0x21, 0xef, 0x57, 0x2f, 0xea, 0x6a, 0xa3,
		0xbb, 0x5a, 0xd6, 0x10, 0x10, 0x8e, 0x69, 0x84, 0x58, 0xc3, 0x7b, 0x25, 0x88, 0x84, 0x04, 0x25,
		0x91, 0xd4, 0x9b, 0x24, 0xa0, 0xf1, 0x9e, 0x8b, 0xec, 0xe1, 0x7a, 0x74, 0x2b, 0xe9, 0x1c, 0xa6,
		0x9d, 0xd2, 0x56, 0xcf, 0x0f, 0x19, 0xa1, 0x12, 0x92, 0x74, 0xea, 0xb2, 0xb6, 0x47, 0x9a, 0xcc,
		0xb8, 0xd6, 0x9b, 0x24, 0x0a, 0x73, 0x06, 0x2c, 0x26, 0xe1, 0x6e, 0xe9, 0x11, 0x99, 0xf2, 0x25,
		0x91, 0xe4, 0x7a, 0x8c, 0x2f, 0xd7, 0x9c, 0xf9, 0x84, 0xce, 0x48, 0x46, 0x5a, 0xb6, 0x35, 0x09,
		0x8f, 0x66, 0xe0, 0xfb, 0x82, 0xc6, 0x01, 0xae, 0x47, 0x06, 0x8c, 0xce, 0x01, 0x98, 0xe9, 0x7d,
		0x50, 0xb4, 0x4c, 0xaf, 0x62, 0xbe, 0x88, 0x5a, 0xb5, 0x53, 0x12, 0x60, 0xcb, 0x7d, 0xc1, 0x5a,
		0x4c, 0x04, 0x74, 0x0e, 0xd0, 0xde, 0x55, 0xf7, 0x63, 0x3a, 0xd9, 0x9a, 0x27, 0x3f, 0x6a, 0x71,
		0xb5, 0x15, 0xd3, 0xb8, 0x4c, 0xa7, 0x3c, 0x4c, 0x24, 0xa1, 0xb2, 0x41, 0x15, 0x32, 0x65, 0x83,
		0x66, 0xd7, 0x85, 0x77, 0xae, 0xef, 0x13, 0xe1, 0xb1, 0xe0, 0x1b, 0x8d, 0xfc, 0xe8, 0x38, 0x92,
		0x07, 0xd5, 0x2a, 0xa5, 0x52, 0x3c, 0x75, 0xad, 0x88, 0xa0, 0x6e, 0x9f, 0x46, 0x0e, 0xb7, 0xe6,
		0x2a, 0xe0, 0xec, 0x86, 0x53, 0xc1, 0x46, 0x9f, 0x04, 0x36, 0x7a, 0x9e, 0x6e, 0x84, 0xa3, 0x80,
		0xca, 0xe6, 0x02, 0x8d, 0xfc, 0x22, 0x22, 0xdb, 0xcb, 0xfe, 0x4d, 0xbf, 0xe7, 0x93, 0xe0, 0xd8,
		0xdb, 0x5b, 0x26, 0x3b, 0x9d, 0x2a, 0x15, 0xd2, 0xaa, 0x47, 0x5e, 0xf2, 0x43, 0x28, 0x1e, 0xf0,
		0x24, 0xa1, 0x74, 0xe5, 0xad, 0x08, 0xa9, 0xdc, 0x66, 0xd9, 0x8f, 0x68, 0x1c, 0xe6, 0x11, 0x83,
		0xef, 0x03, 0x41, 0xe5, 0x5a, 0x48, 0x3f, 0x21, 0x91, 0xbc, 0x3d, 0x14, 0x43, 0xd6, 0x17, 0xd3,
		0xa3, 0x06, 0x44, 0x76, 0x42, 0xa6, 0x27, 0x65, 0x66, 0x47, 0x4f, 0x2e, 0x04, 0x8d, 0xbb, 0x69,
		0x62, 0x42, 0x57, 0x08, 0xdf, 0xec, 0x92, 0x38, 0x31, 0xa7, 0x12, 0x45, 0x82, 0xb6, 0x47, 0x09,
		0x89, 0xd7, 0x4c, 0xae, 0xa9, 0x90, 0x96, 0x27, 0x89, 0x18, 0xd6, 0xee, 0xa8, 0x3f, 0xb9, 0x9e,
		0x70, 0xc0, 0x3c, 0x32, 0x81, 0xad, 0x39, 0x6a, 0x75, 0xaa, 0x1d, 0x2a, 0x37, 0xad, 0x56, 0xe8,
		0x6c, 0x85, 0x4a, 0x8f, 0xd1, 0x28, 0x49, 0xe2, 0x5f, 0x57, 0x8e, 0x68, 0xc4, 0x88, 0xf4, 0x24,
		0xa7, 0xf7, 0x2b, 0x91, 0xda, 0x44, 0x61, 0x1c, 0x24, 0x3d, 0x32, 0x3b, 0x8d, 0x37, 0x54, 0x4e,
		0xa1, 0x24, 0x54, 0x4e, 0xf6, 0xf5, 0x85, 0x4e, 0x08, 0xd5, 0xd0, 0x22, 0x16, 0xd9, 0xbe, 0x4e,
		0x12, 0x41, 0xe8, 0xca, 0xe5, 0x1f, 0x8a, 0xc5, 0x31, 0x57, 0x04, 0xb7, 0xf2, 0x97, 0xcb, 0x8b,
		0x57, 0x48, 0xa5, 0x7b, 0xb5, 0x4e, 0x43, 0x9d, 0xd0, 0xda, 0x78, 0x5e, 0x2a, 0xd3, 0xda, 0x51,
		0xd1, 0x40, 0xd0, 0xd8, 0x25, 0xa5, 0x72, 0x2e, 0xe8, 0x69, 0x8c, 0x91, 0xd6, 0xda, 0x98, 0xe5,
		0xde, 0xf7, 0x86, 0xa4, 0x6a, 0xe6, 0x93, 0x88, 0x2f, 0xf4, 0x95, 0xf0, 0x87, 0x24, 0x44, 0x8d,
		0xd3, 0xc8, 0xb6, 0xbe, 0xa6, 0x74, 0xf1, 0xf9, 0xd8, 0x28, 0x9f, 0x29, 0x16, 0xf2, 0x4b, 0x1e,
		0xb0, 0x7b, 0x3a, 0x47, 0x1a, 0x88, 0x94, 0x11, 0x9b, 0x26, 0x80, 0x91, 0x3a, 0x35, 0x56, 0xa9,
		0xb6, 0xe2, 0xb8, 0x7b, 0x2b, 0xb4, 0x47, 0xe2, 0x5e, 0x4e, 0x2f, 0x0a, 0xe3, 0x28, 0x11, 0x74,
		0x2e, 0xa6, 0x88, 0x69, 0x68, 0x87, 0x28, 0xd6, 0x63, 0x8f, 0x88, 0x10, 0xac, 0xcf, 0xb2, 0x94,
		0xce, 0xa3, 0xe1, 0xf8, 0xc5, 0xc9, 0xdc, 0x53, 0xa2, 0xc3, 0x26, 0x8d, 0x53, 0x0e, 0xd7, 0x22,
		0xe6, 0x2a, 0x60, 0xb2, 0x4a, 0x67, 0xf7, 0x9f, 0x50, 0xf2, 0xd7, 0x2e, 0x9d, 0xc2, 0xd8, 0x49,
		0x72, 0x48, 0xa8, 0xee, 0xf0, 0x53, 0xc7, 0x87, 0xd2, 0x9d, 0x82, 0x43, 0x4d, 0x23, 0xa7, 0xf9,
		0xe8, 0xe0, 0x9c, 0xc5, 0x24, 0x02, 0x7e, 0x7f, 0x11, 0x29, 0x8c, 0xa8, 0xf8, 0x70, 0x14, 0x30,
		0x45, 0x65, 0x77, 0x82, 0xd3, 0x88, 0x8e, 0x11, 0xa9, 0x88, 0x30, 0xbd, 0x85, 0x71, 0x97, 0xf9,
		0xe7, 0x8c, 0x44, 0xc0, 0x23, 0xa6, 0x71, 0x16, 0x76, 0xa0, 0xea, 0x01, 0xa5, 0xdb, 0x90, 0xa9,
		0xec, 0x4a, 0xb1, 0x1b, 0xe1, 0x89, 0xf6, 0xd4, 0x5f, 0x20, 0x53, 0xcc, 0x35, 0x66, 0x34, 0xca,
		0x78, 0x25, 0xa1, 0x9f, 0x34, 0x3d, 0x2a, 0x02, 0x46, 0x29, 0x90, 0xe4, 0x49, 0x45, 0xc5, 0x1a,
		0x54, 0x76, 0x8f, 0xf7, 0xa8, 0x6c, 0xfb, 0x93, 0x00, 0x81, 0x20, 0xb9, 0xa5, 0x92, 0xf6, 0xb3,
		0x4b, 0xe4, 0x0a, 0xa2, 0xc9, 0x7d, 0x85, 0x81, 0x90, 0xbf, 0xe8, 0xdc, 0x47, 0xc1, 0x14, 0x8d,
		0x34, 0xa5, 0xb1, 0x0b, 0x7b, 0x2a, 0x83, 0x84, 0x50, 0x14, 0x8e, 0xc8, 0xad, 0x64, 0xe3, 0x91,
		0xed, 0x44, 0x42, 0xea, 0x5e, 0x34, 0xf9, 0x4f, 0x97, 0x2b, 0xc1, 0x88, 0x54, 0x19, 0x20, 0x02,
		0x5a, 0x1e, 0x9d, 0x08, 0x72, 0x28, 0xa2, 0x3b, 0x1a, 0x9b, 0xb6, 0x0f, 0xa4, 0xd5, 0xea, 0x34,
		0x49, 0xec, 0x32, 0xb3, 0x44, 0x78, 0xcd, 0x6e, 0xfd, 0x82, 0x48, 0x4c, 0xfe, 0x92, 0xf9, 0x22,
		0x22, 0xa4, 0x6f, 0x09, 0xc5, 0x35, 0xc8, 0xd4, 0x25, 0xa6, 0x03, 0x32, 0x89, 0x88, 0x69, 0xa4,
		0xc6, 0x5c, 0x8b, 0x38, 0x16, 0xa4, 0x0e, 0x0b, 0x0c, 0x58, 0x42, 0xa3, 0xde, 0x3b, 0x91, 0xac,
		0x93, 0x80, 0xc5, 0x03, 0x7a, 0xfb, 0xdf, 0x5f, 0x54, 0x34, 0xa2, 0x51, 0x97, 0x30, 0x1a, 0xe8,
		0x5b, 0xa6, 0xf8, 0x79, 0x14, 0xc5, 0x7d, 0x22, 0x65, 0x34, 0x79, 0x1c, 0xa8, 0x84, 0xc6, 0x51,
		0xbc, 0xea, 0x6e, 0x95, 0xc6, 0xee, 0x11, 0xf3, 0xae, 0xeb, 0x5d, 0x12, 0xf7, 0xc0, 0xf4, 0x87,
		0x71, 0x1c, 0x05, 0xc2, 0xbb, 0x67, 0x9e, 0x17, 0x8d, 0xa4, 0x16, 0x72, 0x48, 0x23, 0xef, 0x68,
		0x30, 0xe0, 0x9c, 0x8c, 0xcd, 0x35, 0x78, 0xd1, 0x4c, 0x4f, 0xfc, 0xfc, 0xe4, 0xb6, 0xdd, 0xf7,
		0x3f, 0xf5, 0xf6, 0x27, 0xde, 0x19, 0xe6, 0x52, 0xe3, 0x4e, 0x27, 0xa5, 0xcf, 0x5b, 0xff, 0xfc,
		0xe4, 0x66, 0xf0, 0x4b, 0x7f, 0xf0, 0xfb, 0xdb, 0x48, 0xf9, 0x13, 0xcb, 0xe1, 0x95, 0xf9, 0x9d,
		0xfe, 0xac, 0x79, 0xc0, 0x43, 0xae, 0xd5, 0x7d, 0x39, 0x92, 0xe5, 0xb1, 0x13, 0x3c, 0xe4, 0xa5,
		0x74, 0x73, 0x5f, 0xfa, 0xca, 0x92, 0x9a, 0x1a, 0x8e, 0x42, 0x2e, 0x75, 0xe9, 0xf3, 0xd6, 0x80,
		0x05, 0x09, 0x4f, 0xf9, 0xe4, 0xd2, 0x63, 0xa5, 0x92, 0xe5, 0x10, 0xfe, 0x7c, 0x67, 0x08, 0x6b,
		0x52, 0x46, 0x9a, 0x69, 0x11, 0xc9, 0xd2, 0xe7, 0x14, 0xc3, 0x54, 0x4a, 0xbc, 0x6b, 0x1e, 0xb2,
		0x98, 0xe9, 0xeb, 0xf1, 0xdb, 0x6d, 0x47, 0x31, 0x97, 0x5e, 0x24, 0x07, 0x62, 0x58, 0x16, 0x73,
		0x20, 0x4c, 0xb6, 0x5f, 0xfa, 0x71, 0x7b, 0xfa, 0xb1, 0x14, 0xa3, 0x57, 0x4a, 0xb4, 0x1a, 0x79,
		0x5a, 0xce, 0x56, 0x7e, 0x7b, 0xf1, 0x15, 0x0b, 0xe4, 0x4c, 0xae, 0x5e, 0xfa, 0xf1, 0xea, 0x74,
		0xfa, 0x0d, 0x9f, 0xcc, 0x46, 0xeb, 0x8d, 0xc5, 0xb6, 0xb8, 0x38, 0xe8, 0xdd, 0x31, 0x7a, 0x76,
		0xd5, 0xd0, 0x3b, 0xfd, 0x2d, 0xfd, 0x21, 0xe4, 0x78, 0xbd, 0x55, 0xde, 0xf9, 0xd8, 0xac, 0x6b,
		0x9f, 0xb7, 0x76, 0xde, 0xf9, 0x60, 0x47, 0xf1, 0x81, 0xb8, 0x4b, 0x37, 0x97, 0x0b, 0x4a, 0xf2,
		0xca, 0x5c, 0x5f, 0xa7, 0x99, 0x99, 0x6e, 0x34, 0x52, 0x1e, 0x4f, 0xd5, 0xfa, 0x53, 0x81, 0x8a,
		0xa7, 0x2f, 0x66, 0x24, 0x3c, 0x5a, 0x8d, 0x4c, 0x64, 0x67, 0xd6, 0xaf, 0x9c, 0x95, 0x50, 0x5d,
		0xa8, 0x74, 0xc3, 0xed, 0xcd, 0xe7, 0x30, 0xe5, 0xe0, 0x3d, 0x18, 0xa9, 0x94, 0x82, 0x93, 0x61,
		0x41, 0x65, 0x5e, 0x58, 0x26, 0x0b, 0xcc, 0x7c, 0xa1, 0x99, 0x2e, 0x38, 0xeb, 0x85, 0x67, 0xbd,
		0x00, 0xad, 0x16, 0x62, 0x46, 0xeb, 0x9a, 0x72, 0xc6, 0xd2, 0x2e, 0xd0, 0xc5, 0x03, 0x2c, 0x48,
		0xca, 0xfe, 0x64, 0x03, 0x38, 0xf3, 0xb8, 0x3f, 0x04, 0xb4, 0xe6, 0x4d, 0x64, 0x1c, 0xb6, 0x3a,
		0x1f, 0xb0, 0x51, 0x30, 0x19, 0xb5, 0x9d, 0xac, 0xcf, 0xce, 0x96, 0xfe, 0x4e, 0xc6, 0xc7, 0xb2,
		0x8a, 0x80, 0x8d, 0x28, 0xbc, 0x24, 0x12, 0x51, 0xac, 0xcb, 0x9a, 0xab, 0xb0, 0x94, 0x1d, 0x2a,
		0x4d, 0xe5, 0xc3, 0x99, 0x9c, 0x38, 0x93, 0x97, 0xd7, 0xe4, 0x66, 0x31, 0x38, 0x39, 0xa3, 0x6f,
		0x46, 0xa2, 0x2f, 0x4d, 0x4a, 0x3b, 0x59, 0xcd, 0xfc, 0x48, 0x48, 0xbd, 0x5b, 0x35, 0x99, 0xf4,
		0xd9, 0x3a, 0x3f, 0x34, 0x78, 0xf4, 0x72, 0x42, 0xb0, 0x69, 0x90, 0xd9, 0x9d, 0x0f, 0x33, 0xf9,
		0xe2, 0x96, 0x90, 0xc6, 0xab, 0xd4, 0x52, 0xc0, 0x9f, 0x35, 0xf3, 0x9d, 0x05, 0x23, 0xee, 0xa0,
		0x9d, 0x33, 0xc5, 0xbc, 0x31, 0x39, 0xd7, 0xc5, 0x50, 0x4c, 0x1c, 0x91, 0x1d, 0xe3, 0xf6, 0xfe,
		0xfe, 0xcd, 0x62, 0x68, 0xd9, 0xdd, 0xc6, 0x0d, 0xed, 0x5e, 0xf5, 0x78, 0xef, 0xf8, 0xe0, 0xb0,
		0x7a, 0xbc, 0xbf, 0x41, 0x63, 0xfc, 0x69, 0x35, 0x4f, 0xfd, 0xfc, 0x94, 0x4f, 0xfb, 0x19, 0xd6,
		0x48, 0x89, 0x8d, 0x74, 0x54, 0x96, 0x7c, 0x18, 0x69, 0xc1, 0x34, 0xb7, 0xb0, 0xe3, 0x8f, 0xdb,
		0x31, 0x37, 0xe6, 0x63, 0x8b, 0xf0, 0x41, 0xec, 0x79, 0x36, 0xc4, 0xfd, 0x38, 0xa6, 0x3c, 0x13,
		0x02, 0x53, 0xb1, 0xe2, 0xfd, 0x28, 0x0a, 0x38, 0x93, 0x16, 0x66, 0xbc, 0x52, 0xd9, 0x00, 0x7d,
		0xe1, 0x05, 0x82, 0x4b, 0x5d, 0x66, 0x41, 0x62, 0xae, 0x2b, 0x96, 0xda, 0x30, 0xd7, 0x13, 0x8d,
		0xde, 0xd7, 0xc6, 0xe5, 0x45, 0xa3, 0x07, 0xf6, 0x87, 0xc2, 0x28, 0x2e, 0xfb, 0x73, 0x39, 0x0a,
		0xb9, 0x9a, 0x86, 0x5d, 0x2d, 0x34, 0xc7, 0x9e, 0xc1, 0xb3, 0x0d, 0x39, 0x0a, 0xc7, 0x2f, 0xff,
		0xf7, 0xe6, 0x68, 0x9d, 0x01, 0xf7, 0xac, 0xb5, 0xce, 0xb8, 0x0d, 0x73, 0xad, 0x53, 0xfb, 0xd6,
		0x6b, 0x43, 0xe3, 0x40, 0xe3, 0x40, 0xe3, 0x14, 0x5c, 0xe3, 0xf8, 0xa3, 0x38, 0xe0, 0x77, 0xe5,
		0x30, 0xf2, 0x2d, 0x9c, 0xa2, 0xe5, 0x46, 0xe0, 0xd2, 0xc0, 0xa5, 0x81, 0xaa, 0x28, 0xa2, 0xaa,
		0xe0, 0x92, 0xf5, 0x03, 0x5e, 0x1e, 0x04, 0xd1, 0x6d, 0xd9, 0x8b, 0xa4, 0x56, 0x51, 0x60, 0xae,
		0x32, 0x5e, 0x6a, 0xcc, 0x1c, 0x57, 0x26, 0xc9, 0x04, 0x50, 0x3d, 0x50, 0x3d, 0x88, 0xa6, 0x6c,
		0x64, 0x34, 0x25, 0x64, 0x5e, 0x99, 0xf9, 0xbe, 0xe2, 0x89, 0x45, 0x38, 0x65, 0xb9, 0x11, 0x88,
		0x3a, 0x44, 0xbd, 0x60, 0xa2, 0x6e, 0xbe, 0xbc, 0x1f, 0x89, 0xfb, 0x91, 0xc1, 0xb3, 0x1d, 0xa6,
		0x35, 0x57, 0xd2, 0x78, 0x1b, 0xb4, 0xf4, 0x3f, 0xff, 0xdc, 0x29, 0x1f, 0xb3, 0xf2, 0xa0, 0x56,
		0x3e, 0xfb, 0xf9, 0xef, 0xea, 0xdf, 0xff, 0xf9, 0xf9, 0xf1, 0xef, 0xff, 0xf5, 0xef, 0xfd, 0xbf,
		0xff, 0xa3, 0x44, 0x72, 0xdf, 0x28, 0x8e, 0x94, 0x2e, 0x27, 0x31, 0xe7, 0xbe, 0xb9, 0xe2, 0x5a,
		0x6a, 0x03, 0x7a, 0x0b, 0x7a, 0xab, 0x60, 0x7a, 0x4b, 0xf8, 0x5c, 0x6a, 0xa1, 0xef, 0x15, 0x1f,
		0xd8, 0xe8, 0x2d, 0x83, 0x7d, 0xf1, 0x52, 0x73, 0xf6, 0xd5, 0x27, 0x2c, 0xb1, 0x58, 0x36, 0xf3,
		0x8e, 0xcc, 0x77, 0x5a, 0xae, 0xba, 0x9d, 0x46, 0xa3, 0x6e, 0xba, 0x76, 0x26, 0x1b, 0xfe, 0x89,
		0xb1, 0x2a, 0xdd, 0xb2, 0xca, 0x2a, 0x79, 0xd4, 0x9f, 0x49, 0x37, 0xae, 0xaa, 0xfb, 0x5f, 0x4e,
		0x4a, 0xeb, 0x48, 0xc3, 0x70, 0xda, 0x8b, 0xca, 0xce, 0x4e, 0x11, 0xba, 0x51, 0xdd, 0xdf, 0xd9,
		0x69, 0x15, 0x63, 0x3a, 0x8a, 0xd1, 0x8d, 0x22, 0x2c, 0xaa, 0x6f, 0x17, 0x7f, 0x5c, 0xb4, 0x7f,
		0x5c, 0xd0, 0xef, 0xc8, 0x7e, 0x21, 0xa6, 0xa3, 0x52, 0x0c, 0x7d, 0x5b, 0x04, 0xf9, 0xde, 0x2b,
		0xc4, 0x82, 0xb2, 0x33, 0xe0, 0x46, 0x4f, 0xfe, 0xcc, 0x9b, 0x52, 0xd7, 0x94, 0xf9, 0x9f, 0xf1,
		0x70, 0xd7, 0xe2, 0x39, 0xf3, 0x43, 0x5e, 0xf3, 0x63, 0x4f, 0xdb, 0x99, 0x0e, 0xad, 0x6c, 0xd9,
		0x9c, 0xfa, 0x9a, 0x5f, 0x07, 0x9b, 0xea, 0xf8, 0x57, 0xfa, 0x71, 0xfe, 0x3b, 0xd5, 0x41, 0xb5,
		0x2c, 0xc9, 0x95, 0x0f, 0xc7, 0xbb, 0x75, 0xfa, 0x5c, 0x4a, 0xe3, 0xf3, 0x3c, 0x55, 0x9c, 0xe7,
		0x71, 0xe9, 0xe3, 0x92, 0x3e, 0xcf, 0x83, 0x64, 0x60, 0xc4, 0x86, 0x10, 0x1b, 0xca, 0x3f, 0x36,
		0x54, 0x94, 0x64, 0xe0, 0x68, 0x34, 0xb6, 0xae, 0x36, 0xa9, 0xc0, 0xf3, 0x16, 0xcc, 0x84, 0xbc,
		0x02, 0x21, 0x87, 0x90, 0xe7, 0x23, 0xe4, 0x59, 0x8d, 0xe7, 0xe2, 0x41, 0x21, 0xcb, 0x47, 0x3b,
		0xd5, 0xca, 0x5f, 0xe5, 0x49, 0xd5, 0xbe, 0xc4, 0x3e, 0xfe, 0xfa, 0xb4, 0x41, 0xc3, 0x21, 0xb7,
		0x3b, 0xb8, 0x65, 0x2c, 0x3a, 0x2e, 0x44, 0xc8, 0x9d, 0x28, 0xb9, 0x12, 0x29, 0xe7, 0xa2, 0xe5,
		0x5c, 0xc4, 0x9c, 0x8a, 0x9a, 0x9d, 0xd7, 0x6c, 0x18, 0x30, 0x30, 0xb7, 0xb3, 0xaf, 0x99, 0x99,
		0x83, 0x3d, 0x9b, 0x25, 0x33, 0x13, 0xa0, 0x23, 0x8b, 0x26, 0xec, 0x4e, 0xd5, 0xba, 0x89, 0xa2,
		0x6c, 0xb9, 0x3a, 0x65, 0xeb, 0x48, 0xb3, 0x3c, 0x6b, 0xce, 0xd1, 0xa9, 0xdb, 0x45, 0x7b, 0x0e,
		0x4f, 0x86, 0x3a, 0x08, 0x81, 0x3d, 0x4c, 0x81, 0x83, 0xd3, 0xb8, 0x79, 0x4f, 0x41, 0xe5, 0x68,
		0x6f, 0xef, 0xe0, 0x70, 0x6f, 0x6f, 0xe7, 0x70, 0xf7, 0x70, 0xe7, 0x78, 0x7f, 0xbf, 0x72, 0x50,
		0xd9, 0xdf, 0xe0, 0x59, 0xf9, 0xb4, 0x9e, 0xa7, 0x7f, 0xae, 0xe8, 0xbc, 0xb0, 0xc1, 0xaa, 0x1b,
		0xc3, 0x43, 0x3f, 0x88, 0xbc, 0x5f, 0x65, 0xae, 0x54, 0xa4, 0xdc, 0xd0, 0xc8, 0xa3, 0x06, 0x41,
		0x23, 0xa0, 0x11, 0xd0, 0x08, 0x68, 0x04, 0x34, 0x02, 0x1a, 0x01, 0x8d, 0x80, 0x46, 0xde, 0xa3,
		0x11, 0x4f, 0x79, 0x2e, 0x59, 0x64, 0xa9, 0x39, 0x90, 0x08, 0x48, 0x04, 0x24, 0x02, 0x12, 0x01,
		0x89, 0x80, 0x44, 0x40, 0x22, 0x20, 0x91, 0xf7, 0x48, 0x64, 0xa0, 0xd8, 0x30, 0x9c, 0x94, 0x04,
		0x71, 0xb7, 0x51, 0xf3, 0xb4, 0x4d, 0x30, 0x09, 0x98, 0x04, 0x4c, 0x02, 0x26, 0x01, 0x93, 0x80,
		0x49, 0xc0, 0x24, 0x60, 0x92, 0xf7, 0x98, 0xe4, 0xff, 0x65, 0xfd, 0x3e, 0x57, 0x2e, 0x89, 0xe4,
		0x71, 0x8b, 0xe0, 0x11, 0xf0, 0x08, 0x78, 0x04, 0x3c, 0x02, 0x1e, 0x01, 0x8f, 0x80, 0x47, 0xc0,
		0x23, 0xef, 0xf1, 0x48, 0xc8, 0xbc, 0x79, 0x19, 0x32, 0x97, 0x50, 0xf2, 0x42, 0xb3, 0x20, 0x13,
		0x90, 0x09, 0xc8, 0x04, 0x64, 0x02, 0x32, 0x01, 0x99, 0x80, 0x4c, 0x40, 0x26, 0x69, 0xc8, 0x24,
		0x66, 0xa3, 0x84, 0xbb, 0xe6, 0x92, 0x47, 0x8d, 0x82, 0x4a, 0x40, 0x25, 0xa0, 0x12, 0x50, 0x09,
		0xa8, 0x04, 0x54, 0x02, 0x2a, 0x01, 0x95, 0xbc, 0x47, 0x25, 0xd1, 0x0d, 0x57, 0x89, 0xf8, 0x5f,
		0xa7, 0x50, 0xf2, 0xb4, 0x4d, 0x30, 0x09, 0x98, 0x04, 0x4c, 0x02, 0x26, 0x01, 0x93, 0x80, 0x49,
		0xc0, 0x24, 0x60, 0x92, 0xf7, 0x98, 0x64, 0x24, 0x7d, 0xf7, 0x50, 0xf2, 0xac, 0x51, 0x50, 0x09,
		0xa8, 0x04, 0x54, 0x02, 0x2a, 0x01, 0x95, 0x80, 0x4a, 0x40, 0x25, 0xa0, 0x92, 0x37, 0x87, 0x39,
		0x1a, 0x69, 0xc7, 0x45, 0xd2, 0x9e, 0xb5, 0x08, 0x1e, 0x01, 0x8f, 0x80, 0x47, 0xc0, 0x23, 0xe0,
		0x11, 0xf0, 0x08, 0x78, 0x04, 0x3c, 0xf2, 0x2e, 0x8f, 0xe4, 0x91, 0xea, 0xfa, 0x4a, 0xbb, 0x60,
		0x13, 0xb0, 0x09, 0xd8, 0x04, 0x6c, 0x02, 0x36, 0x01, 0x9b, 0x80, 0x4d, 0xc0, 0x26, 0xa9, 0xd8,
		0xc4, 0x6d, 0xb2, 0xeb, 0x8b, 0xad, 0x82, 0x4b, 0xc0, 0x25, 0xe0, 0x12, 0x70, 0x09, 0xb8, 0x04,
		0x5c, 0x02, 0x2e, 0xf9, 0x48, 0x5c, 0x92, 0xeb, 0x55, 0x3a, 0x86, 0xb7, 0x4b, 0x2e, 0x9e, 0x77,
		0x70, 0xcb, 0xe4, 0xe4, 0x26, 0xc5, 0x6d, 0xc3, 0xdb, 0xa6, 0xb6, 0x9c, 0xdc, 0x3a, 0xd9, 0x1d,
		0xbf, 0xc2, 0xd5, 0xe9, 0xfc, 0x15, 0x36, 0xe0, 0xfa, 0x2e, 0x7f, 0x14, 0x07, 0xfc, 0xae, 0x1c,
		0x46, 0xbe, 0xc5, 0x5d, 0x7f, 0xcb, 0x8d, 0xe0, 0xa6, 0xbe, 0xfc, 0xb8, 0x10, 0x97, 0x78, 0xad,
		0xe5, 0xa6, 0x3e, 0x2e, 0x47, 0x21, 0x57, 0x53, 0xe5, 0x65, 0x71, 0x5b, 0xdf, 0x9e, 0xc1, 0xb3,
		0x0d, 0x39, 0x0a, 0xc7, 0x2f, 0xff, 0xf7, 0x06, 0xa8, 0x0a, 0x2e, 0x59, 0x3f, 0xe0, 0xe5, 0x41,
		0x10, 0xdd, 0xce, 0x83, 0xd9, 0xe6, 0x2a, 0xe3, 0xa5, 0xc6, 0xcc, 0xef, 0x08, 0x1d, 0xb0, 0x20,
		0x81, 0xea, 0x81, 0xea, 0xc1, 0x25, 0xa1, 0xcf, 0xd5, 0xce, 0x26, 0x5c, 0x12, 0x7a, 0x7d, 0x3b,
		0x09, 0x34, 0x31, 0xdf, 0x57, 0x3c, 0xb1, 0xb8, 0x2a, 0xf4, 0x49, 0x3b, 0x10, 0x78, 0x08, 0x7c,
		0xc1, 0x04, 0xde, 0x7c, 0x79, 0x3f, 0x12, 0x7a, 0x83, 0x30, 0x52, 0xa9, 0xc3, 0xb4, 0xe6, 0x4a,
		0x1a, 0x07, 0x90, 0x4a, 0xff, 0xf3, 0xcf, 0x9d, 0xf2, 0x31, 0x2b, 0x0f, 0x6a, 0xe5, 0xb3, 0x9f,
		0xff, 0xae, 0xfe, 0xfd, 0x9f, 0x9f, 0x1f, 0xff, 0xfe, 0x5f, 0xff, 0xde, 0xff, 0xfb, 0x3f, 0xb2,
		0xcf, 0xd8, 0xcf, 0x0d, 0xd0, 0x5f, 0x4e, 0x94, 0x17, 0x34, 0x17, 0x34, 0x17, 0x34, 0x17, 0x34,
		0xd7, 0x4a, 0x35, 0x97, 0xe4, 0xc3, 0x48, 0x0b, 0xa6, 0xb9, 0x5f, 0x76, 0x12, 0xea, 0x79, 0xa5,
		0x3d, 0xe8, 0x33, 0xe8, 0x33, 0x44, 0x7d, 0x8a, 0x18, 0xf5, 0x59, 0x12, 0xf8, 0x38, 0x52, 0xba,
		0x9c, 0xc4, 0x9c, 0xfb, 0x4e, 0xf4, 0xc7, 0x52, 0x73, 0x50, 0x1f, 0x50, 0x1f, 0x05, 0x53, 0x1f,
		0xc2, 0xe7, 0x52, 0x0b, 0x7d, 0xaf, 0xf8, 0xc0, 0x46, 0x7d, 0x18, 0x6c, 0x88, 0x96, 0x9a, 0xb3,
		0xaf, 0x3e, 0x61, 0x09, 0xb7, 0xcf, 0x12, 0x6a, 0xf4, 0xbe, 0x36, 0x2e, 0x2f, 0x1a, 0xbd, 0xab,
		0x6e, 0xa7, 0xd1, 0xa8, 0x9b, 0xae, 0x9d, 0xc9, 0x9e, 0x6f, 0x62, 0x95, 0x9c, 0x60, 0x99, 0x4b,
		0x33, 0xef, 0xcf, 0xa4, 0x1b, 0x57, 0xd5, 0xfd, 0x2f, 0x27, 0x16, 0x99, 0x2a, 0xbf, 0x6d, 0x46,
		0x2f, 0x2a, 0x3b, 0x3b, 0x45, 0xe8, 0x46, 0x75, 0x7f, 0x67, 0xa7, 0x55, 0x8c, 0xe9, 0x28, 0x46,
		0x37, 0x8a, 0xb0, 0xa8, 0xbe, 0x5d, 0xfc, 0x71, 0xd1, 0xfe, 0x71, 0x41, 0xbf, 0x23, 0xfb, 0x85,
		0x98, 0x8e, 0x4a, 0x31, 0xf4, 0x6d, 0x11, 0xe4, 0x7b, 0xaf, 0x10, 0x0b, 0xca, 0xce, 0x80, 0x1b,
		0x3d, 0xf9, 0x33, 0x6f, 0x4a, 0xcd, 0xc5, 0x83, 0x73, 0xe1, 0xb6, 0xc1, 0x57, 0x83, 0xaf, 0x06,
		0x5f, 0x0d, 0xbe, 0x1a, 0x7c, 0x35, 0xf8, 0x6a, 0xf0, 0xd5, 0xe0, 0xab, 0xc1, 0x57, 0x83, 0xaf,
		0x06, 0x5f, 0x0d, 0xbe, 0x1a, 0x7c, 0x35, 0x57, 0x9f, 0x4c, 0x39, 0x55, 0xa6, 0x07, 0x69, 0x9c,
		0x1d, 0xa0, 0xc9, 0x00, 0x95, 0x8e, 0xce, 0xcb, 0xa4, 0x5b, 0x39, 0xef, 0x8f, 0xf2, 0xdb, 0x9f,
		0x78, 0x67, 0xfc, 0xb3, 0x8e, 0xbb, 0x83, 0xf1, 0x4e, 0x31, 0xd2, 0xd6, 0x23, 0xfc, 0xf6, 0xd8,
		0xbe, 0x3e, 0x62, 0x6f, 0x8c, 0x56, 0xe9, 0x3a, 0x0a, 0xfc, 0xb2, 0x16, 0xe1, 0xfb, 0xfe, 0xcc,
		0x43, 0x5e, 0xef, 0xe2, 0x91, 0x77, 0x66, 0x61, 0xee, 0x6a, 0xbd, 0xf3, 0xb1, 0xb4, 0xd1, 0x83,
		0x2c, 0xd1, 0x82, 0xe5, 0xe8, 0x80, 0x48, 0xe3, 0x27, 0x66, 0x0d, 0x06, 0x18, 0x3b, 0xff, 0xc6,
		0xce, 0xfe, 0x53, 0xe7, 0x5e, 0x0c, 0x4a, 0x39, 0x4b, 0x51, 0x5d, 0xa8, 0x74, 0x83, 0xed, 0xcd,
		0x67, 0x30, 0xe5, 0xd8, 0x3d, 0x9c, 0xc5, 0x9e, 0x3c, 0x97, 0xb2, 0xff, 0xe9, 0x96, 0x93, 0x71,
		0x50, 0xca, 0x24, 0x18, 0x95, 0x79, 0x99, 0xd9, 0xc6, 0x9e, 0xac, 0x63, 0x4e, 0xd6, 0xb1, 0x26,
		0x93, 0x65, 0x98, 0x8f, 0x71, 0x4d, 0xbb, 0x3c, 0x17, 0x0f, 0xf8, 0xd1, 0xad, 0xb4, 0x38, 0x37,
		0x39, 0x7e, 0xda, 0xfc, 0xd4, 0xd3, 0xce, 0x07, 0x89, 0xc5, 0x8a, 0x01, 0x42, 0xb1, 0x96, 0x62,
		0x42, 0x25, 0x12, 0x3b, 0x12, 0x52, 0xef, 0x56, 0x2d, 0x82, 0xb0, 0x87, 0x06, 0x8f, 0xda, 0xd5,
		0xcd, 0xb0, 0x28, 0x20, 0xe2, 0xa2, 0x4e, 0x86, 0xa3, 0xe2, 0x0c, 0xae, 0xea, 0x62, 0xb8, 0xac,
		0xbc, 0x60, 0xe1, 0xbd, 0x3a, 0xa9, 0x7f, 0xe1, 0x7a, 0x68, 0xf7, 0xaa, 0xc7, 0x7b, 0xc7, 0x07,
		0x87, 0xd5, 0xe3, 0xfd, 0x0d, 0x1a, 0xe3, 0x15, 0x55, 0x97, 0xd8, 0x84, 0x5c, 0xf8, 0x51, 0x6c,
		0x6e, 0xaa, 0x47, 0x31, 0x0c, 0x35, 0x0c, 0x35, 0x0c, 0x35, 0x0c, 0x35, 0x0c, 0x35, 0x0c, 0x35,
		0x0c, 0x75, 0x76, 0x43, 0xed, 0xd4, 0x51, 0x6f, 0xdc, 0xe9, 0x6c, 0x09, 0x0a, 0xe6, 0x31, 0x91,
		0xc8, 0x2b, 0xf3, 0x3b, 0xfd, 0x59, 0xf3, 0x80, 0x87, 0x5c, 0xab, 0xfb, 0x72, 0x24, 0xcb, 0xde,
		0xf5, 0x44, 0x13, 0x59, 0xc5, 0x49, 0x26, 0x35, 0x4b, 0x2c, 0x02, 0x25, 0xae, 0x63, 0x24, 0x3f,
		0x37, 0x76, 0x03, 0x62, 0x11, 0x1d, 0xde, 0xce, 0x14, 0xdd, 0xdb, 0xb2, 0x09, 0x90, 0x7f, 0x8d,
		0x02, 0xbf, 0x27, 0x42, 0x7e, 0x35, 0x63, 0x2a, 0x57, 0x7b, 0x10, 0xa9, 0x62, 0xfa, 0x4c, 0xf3,
		0xec, 0x91, 0xcf, 0x2c, 0xbb, 0x33, 0xc6, 0x81, 0xcf, 0x2a, 0x02, 0x9f, 0x08, 0x7c, 0x22, 0xf0,
		0x09, 0x7f, 0x0a, 0xfe, 0x14, 0xfc, 0x29, 0xf8, 0x53, 0xf0, 0xa7, 0xe0, 0x4f, 0x21, 0xf0, 0x09,
		0x43, 0x0d, 0x43, 0x0d, 0x43, 0x0d, 0x43, 0x0d, 0x43, 0x0d, 0x43, 0x0d, 0x43, 0x9d, 0xaf, 0xa3,
		0xbe, 0xce, 0xe8, 0xdb, 0xca, 0xf2, 0x7f, 0x17, 0xc1, 0xb7, 0x0f, 0x99, 0xff, 0x9b, 0x36, 0x19,
		0xd6, 0xc9, 0x10, 0xe7, 0x91, 0x00, 0x3c, 0x7b, 0x9b, 0x94, 0xb9, 0xbf, 0x93, 0x4f, 0xa7, 0x4b,
		0xfb, 0xdd, 0x41, 0xda, 0xaf, 0x0b, 0x6c, 0x5b, 0x7d, 0xda, 0x6f, 0x6a, 0xec, 0x5a, 0x8c, 0x76,
		0xc0, 0xd9, 0x20, 0xdd, 0x71, 0xdc, 0x45, 0x2c, 0x3b, 0x05, 0x58, 0x95, 0x3a, 0x33, 0x79, 0xfc,
		0xfd, 0xf7, 0xd9, 0x5e, 0xc2, 0xf6, 0x64, 0xf9, 0xe5, 0x20, 0x04, 0xe9, 0xa2, 0xf8, 0x99, 0xa2,
		0xf7, 0x99, 0xb3, 0xdf, 0xab, 0x10, 0x83, 0x8d, 0x12, 0x83, 0xd4, 0xd9, 0xef, 0xcc, 0x0f, 0x85,
		0x2c, 0x8f, 0xd7, 0xc4, 0x28, 0xc9, 0xbe, 0x13, 0xf4, 0xe8, 0xe9, 0x6c, 0x1b, 0x42, 0x3b, 0xc8,
		0x84, 0xc7, 0x86, 0x90, 0x91, 0xa3, 0x6c, 0x59, 0x37, 0xd3, 0xa4, 0x5e, 0x66, 0xc6, 0x3a, 0x99,
		0xc8, 0x2d, 0x48, 0xbd, 0xf4, 0x9c, 0xe7, 0x16, 0x38, 0xd9, 0x18, 0x5f, 0x5c, 0xdd, 0x65, 0x70,
		0x2a, 0x28, 0xd3, 0xa5, 0x5f, 0x38, 0x17, 0x04, 0x6d, 0x68, 0x64, 0xb8, 0x1f, 0x96, 0x2a, 0x53,
		0x4a, 0x70, 0x55, 0xd6, 0x8a, 0xc9, 0x44, 0x8c, 0x75, 0xa1, 0xc5, 0xc5, 0x01, 0x2f, 0x35, 0x86,
		0xb8, 0x3a, 0xe2, 0xea, 0x85, 0x8a, 0xab, 0xdb, 0x5c, 0xa2, 0x6b, 0x71, 0x79, 0x2e, 0x42, 0xeb,
		0x08, 0xad, 0xaf, 0x64, 0x68, 0xdd, 0x5f, 0x76, 0xfb, 0x01, 0x82, 0xec, 0x19, 0xb5, 0x50, 0x66,
		0x72, 0xb7, 0x13, 0xe3, 0x5c, 0x48, 0xde, 0x1d, 0xd1, 0x5b, 0x92, 0xbd, 0xd9, 0x24, 0xff, 0xcc,
		0x25, 0x81, 0x41, 0xc8, 0x72, 0x5f, 0x45, 0xcc, 0xf7, 0x58, 0xa2, 0xcb, 0xf1, 0x2f, 0x6d, 0x01,
		0x53, 0xcf, 0x9b, 0x02, 0x4a, 0x01, 0xa5, 0x80, 0x52, 0x40, 0x29, 0xa0, 0x14, 0x50, 0x0a, 0xf9,
		0x0a, 0x59, 0xed, 0xb2, 0x2f, 0x12, 0x8f, 0x29, 0xdf, 0xce, 0x22, 0x2f, 0x1a, 0x81, 0x2d, 0x86,
		0x2d, 0x86, 0x2d, 0x86, 0x2d, 0x86, 0x2d, 0x86, 0x2d, 0x86, 0x2d, 0xce, 0x6a, 0x8b, 0xb9, 0x52,
		0x91, 0xb2, 0xb3, 0xc4, 0xb3, 0x26, 0x60, 0x87, 0x61, 0x87, 0x61, 0x87, 0x61, 0x87, 0x61, 0x87,
		0x61, 0x87, 0x61, 0x87, 0xb3, 0xda, 0xe1, 0x81, 0x97, 0xb8, 0xb0, 0xc5, 0x4b, 0xcd, 0xc0, 0x1e,
		0xc3, 0x1e, 0xc3, 0x1e, 0xc3, 0x1e, 0xc3, 0x1e, 0xc3, 0x1e, 0xc3, 0x1e, 0x67, 0xb5, 0xc7, 0xe1,
		0x28, 0xd0, 0xc2, 0xcd, 0xde, 0xf1, 0x93, 0xa6, 0x60, 0x97, 0x61, 0x97, 0x61, 0x97, 0x61, 0x97,
		0x61, 0x97, 0x61, 0x97, 0x61, 0x97, 0xb3, 0xda, 0xe5, 0xc8, 0xd3, 0xdc, 0xd2, 0x1e, 0xcf, 0x9a,
		0x80, 0x1d, 0x86, 0x1d, 0x86, 0x1d, 0x86, 0x1d, 0x86, 0x1d, 0x86, 0x1d, 0x86, 0x1d, 0xce, 0x6a,
		0x87, 0xad, 0xbd, 0x62, 0xf8, 0xc2, 0xb0, 0xc1, 0xb0, 0xc1, 0xb0, 0xc1, 0xb0, 0xc1, 0xb0, 0xc1,
		0xb0, 0xc1, 0x46, 0x36, 0x78, 0x24, 0x1d, 0x45, 0xa8, 0x1f, 0x35, 0x04, 0x9b, 0x0c, 0x9b, 0x0c,
		0x9b, 0x0c, 0x9b, 0x0c, 0x9b, 0x0c, 0x9b, 0x0c, 0x9b, 0x9c, 0xdd, 0x26, 0xff, 0x92, 0xd1, 0xad,
		0x2c, 0xc7, 0x2a, 0xd2, 0x91, 0xad, 0x55, 0x7e, 0xd4, 0x14, 0xec, 0x32, 0xec, 0x32, 0xec, 0x32,
		0xec, 0x32, 0xec, 0x32, 0xec, 0x32, 0xec, 0x72, 0x26, 0xbb, 0x1c, 0x8c, 0x9d, 0x5b, 0x2f, 0xe0,
		0x4c, 0x99, 0x1b, 0xe4, 0xa5, 0x36, 0x60, 0x89, 0x61, 0x89, 0x0b, 0x65, 0x89, 0xb5, 0x08, 0xb9,
		0x16, 0xde, 0xaf, 0x04, 0xb6, 0x18, 0xb6, 0x18, 0xb6, 0x18, 0xb6, 0xd8, 0x48, 0x0f, 0xa1, 0x94,
		0xda, 0xbb, 0xf6, 0x83, 0x66, 0x29, 0xb5, 0x68, 0xa4, 0x9d, 0xd5, 0x52, 0x7b, 0xa1, 0x2d, 0xe0,
		0x14, 0x70, 0x0a, 0x81, 0x0d, 0xc0, 0x14, 0x60, 0x0a, 0x30, 0x85, 0xc0, 0x46, 0x66, 0xcb, 0x6c,
		0x5f, 0x4d, 0xed, 0x51, 0x2b, 0xb0, 0xc6, 0xb0, 0xc6, 0xb0, 0xc6, 0xb0, 0xc6, 0xb0, 0xc6, 0xb0,
		0xc6, 0xb0, 0xc6, 0x99, 0xad, 0xb1, 0x6d, 0x0d, 0x97, 0xa5, 0x36, 0x60, 0x89, 0x61, 0x89, 0x61,
		0x89, 0x61, 0x89, 0x61, 0x89, 0x61, 0x89, 0x61, 0x89, 0x33, 0x5b, 0x62, 0x57, 0x15, 0x5c, 0x5e,
		0x68, 0x0b, 0x96, 0x19, 0x96, 0x19, 0x96, 0x19, 0x96, 0x19, 0x96, 0x19, 0x96, 0x19, 0x96, 0x39,
		0xb3, 0x65, 0xb6, 0xad, 0xe1, 0xb2, 0xd4, 0x06, 0x2c, 0x31, 0x2c, 0x31, 0x2c, 0x31, 0x2c, 0x31,
		0x2c, 0x31, 0x2c, 0x31, 0x2c, 0x71, 0x66, 0x4b, 0x6c, 0xef, 0x19, 0xc3, 0x1f, 0x86, 0x15, 0x86,
		0x15, 0x86, 0x15, 0x86, 0x15, 0x86, 0x15, 0x86, 0x15, 0x36, 0xb3, 0xc2, 0x6e, 0xea, 0xb8, 0x3c,
		0x6b, 0x09, 0x56, 0x19, 0x56, 0x19, 0x56, 0x19, 0x56, 0x19, 0x56, 0x19, 0x56, 0x19, 0x56, 0x39,
		0xe5, 0x27, 0x53, 0xae, 0xa9, 0x52, 0x4d, 0xca, 0x48, 0xb3, 0xf1, 0xd0, 0x66, 0x5a, 0x46, 0xa5,
		0xc4, 0xbb, 0xe6, 0x21, 0x8b, 0x99, 0xbe, 0x1e, 0x6b, 0xb4, 0xed, 0x28, 0xe6, 0xd2, 0x9b, 0x58,
		0xd0, 0xb2, 0x18, 0xeb, 0xb6, 0x01, 0xf3, 0x78, 0xb2, 0xfd, 0xd2, 0x8f, 0xdb, 0x89, 0x66, 0x9a,
		0x6f, 0xcf, 0x74, 0x60, 0x16, 0xeb, 0x5e, 0x4a, 0xb4, 0x1a, 0x79, 0x5a, 0xce, 0xb4, 0x68, 0x7b,
		0xf1, 0x95, 0xcd, 0xc5, 0xd7, 0x5c, 0xbd, 0xf4, 0xe3, 0x55, 0x77, 0xfc, 0x8d, 0x57, 0xa7, 0xf3,
		0x6f, 0xfc, 0xe4, 0x66, 0x94, 0x53, 0x8c, 0x70, 0xc9, 0xe7, 0x89, 0xa7, 0x44, 0x9c, 0x69, 0x78,
		0x17, 0x66, 0x62, 0xf9, 0xe1, 0x94, 0xb3, 0x99, 0x4d, 0x90, 0x33, 0x33, 0x8f, 0x09, 0xeb, 0x18,
		0x33, 0x8e, 0x29, 0xdb, 0x58, 0x33, 0x8d, 0x35, 0xcb, 0xd8, 0x30, 0x8c, 0x5b, 0xe9, 0xce, 0xcc,
		0x2a, 0x8b, 0xd9, 0x4a, 0xb4, 0x12, 0x72, 0x98, 0x65, 0xba, 0x66, 0x6b, 0xaf, 0x72, 0xb4, 0x42,
		0xf9, 0xe2, 0x92, 0xf5, 0x03, 0xee, 0x67, 0x97, 0xad, 0xf9, 0x83, 0x29, 0xc7, 0xb1, 0xce, 0x07,
		0x6c, 0x14, 0x4c, 0xe6, 0x73, 0xbc, 0x1c, 0x20, 0x8e, 0x10, 0xc7, 0xd5, 0x8a, 0x63, 0x3f, 0x8a,
		0x02, 0xce, 0xa4, 0x89, 0x3c, 0x56, 0x56, 0x28, 0x8f, 0xd7, 0x4c, 0xf9, 0xb7, 0x4c, 0xf1, 0x72,
		0x1c, 0x29, 0x9d, 0x5d, 0x2a, 0x1f, 0x3f, 0x5e, 0x0c, 0x21, 0xcb, 0xd0, 0x95, 0x62, 0x89, 0xd9,
		0xa4, 0xe3, 0xe4, 0x04, 0x2d, 0xe0, 0x6c, 0xa0, 0xf8, 0xc0, 0x44, 0xd0, 0x0e, 0x33, 0x3c, 0xd3,
		0x59, 0x80, 0xb3, 0x57, 0x8e, 0x03, 0xa6, 0x07, 0x91, 0x0a, 0x3f, 0x7b, 0x51, 0x18, 0x47, 0x92,
		0x4b, 0x9d, 0xbc, 0xfc, 0xe7, 0x47, 0x7f, 0x9d, 0x60, 0xf0, 0x0a, 0x45, 0x5b, 0x0c, 0x84, 0xf4,
		0xf9, 0x5d, 0x76, 0xa1, 0x9e, 0x3f, 0x08, 0x9b, 0x09, 0x9b, 0xb9, 0x52, 0x51, 0x1e, 0x09, 0xa9,
		0x77, 0xab, 0x06, 0x92, 0x9c, 0x45, 0x90, 0xcd, 0x62, 0x6a, 0x06, 0xc1, 0x43, 0x9b, 0x18, 0x9a,
		0x65, 0x80, 0xc7, 0x36, 0x66, 0xe6, 0x22, 0x7a, 0x63, 0x10, 0x23, 0xb3, 0x8a, 0x8d, 0xb9, 0x1a,
		0xb2, 0xbd, 0xea, 0xf1, 0xde, 0xf1, 0xc1, 0x61, 0xf5, 0x78, 0x7f, 0x8d, 0x63, 0x97, 0x53, 0x24,
		0xea, 0xa7, 0x53, 0x41, 0xcf, 0x5c, 0x76, 0xc9, 0x5c, 0xa7, 0x3a, 0x2b, 0xb3, 0x64, 0x5f, 0x5e,
		0xc9, 0xb0, 0xac, 0x52, 0xba, 0x49, 0xfa, 0xe9, 0xc4, 0xf2, 0x4f, 0x2b, 0x46, 0x5e, 0xcf, 0x14,
		0x5d, 0x46, 0xeb, 0xbf, 0xfc, 0x30, 0x08, 0x00, 0x04, 0xb0, 0x52, 0x02, 0x30, 0xab, 0x07, 0x69,
		0xb0, 0xc5, 0x06, 0x0c, 0x00, 0x06, 0xbc, 0x39, 0x64, 0xee, 0xb6, 0xc4, 0x00, 0x04, 0x00, 0x82,
		0x75, 0x03, 0x41, 0x34, 0x14, 0x1e, 0x0b, 0x0c, 0x60, 0x60, 0xf6, 0x20, 0x40, 0x00, 0x20, 0xb0,
		0x52, 0x10, 0xc8, 0x3f, 0x7c, 0x0e, 0x9d, 0x46, 0x5d, 0xa7, 0x45, 0x71, 0x9f, 0x79, 0xbf, 0xca,
		0x61, 0xe4, 0x9b, 0xb8, 0x39, 0x8f, 0x1e, 0xcf, 0xbe, 0xab, 0x38, 0x19, 0x54, 0xe8, 0x45, 0xe8,
		0xc5, 0xa2, 0xe9, 0x45, 0x27, 0xc2, 0x19, 0xea, 0x51, 0x76, 0x91, 0x1c, 0x3f, 0x04, 0x81, 0x82,
		0x40, 0xad, 0x54, 0xa0, 0x46, 0x42, 0xea, 0xca, 0x81, 0x81, 0x3c, 0x1d, 0x20, 0xd8, 0x80, 0x60,
		0x83, 0xa3, 0x21, 0x3b, 0xd8, 0xdf, 0xdf, 0xfd, 0xb8, 0xd1, 0x05, 0x27, 0x16, 0x67, 0x96, 0x64,
		0x9a, 0xd1, 0xe4, 0x4c, 0x9e, 0x82, 0xcd, 0x81, 0xcd, 0x59, 0xa9, 0xcd, 0xa1, 0x91, 0xaa, 0x19,
		0xc5, 0x5c, 0x95, 0x13, 0xcd, 0xf4, 0x28, 0xc9, 0x2e, 0x58, 0xcb, 0x0f, 0x43, 0xbe, 0x20, 0x5f,
		0x2b, 0x95, 0x2f, 0x2e, 0x47, 0x21, 0x57, 0x2c, 0x43, 0x1e, 0xfe, 0x23, 0x21, 0xdb, 0xcb, 0xf0,
		0x4c, 0x43, 0x8e, 0xc2, 0xf1, 0x4b, 0xfe, 0x8d, 0xa0, 0xd3, 0x47, 0x08, 0x3a, 0xc5, 0xd7, 0xf7,
		0x89, 0xf0, 0x58, 0x30, 0x19, 0x22, 0xc9, 0x0d, 0x22, 0xea, 0xcf, 0x5a, 0x28, 0x86, 0x76, 0xd4,
		0x8a, 0xc9, 0xc4, 0xe3, 0xe2, 0x86, 0xab, 0x0f, 0xa9, 0x26, 0x97, 0xfb, 0x8f, 0x14, 0xda, 0x57,
		0x96, 0x98, 0x49, 0x0a, 0xed, 0x3f, 0x9f, 0xa6, 0xd0, 0xfe, 0xff, 0xbc, 0x91, 0x52, 0x5c, 0xea,
		0xff, 0xfc, 0xaf, 0xed, 0xdf, 0x7f, 0xdf, 0x7e, 0x3c, 0xf4, 0x9f, 0x97, 0x7e, 0xfe, 0xf9, 0xc6,
		0xbf, 0x3d, 0xfd, 0xa7, 0xa7, 0x42, 0x99, 0x3c, 0xfd, 0xc0, 0xec, 0xef, 0x4f, 0xff, 0x3c, 0xcd,
		0x93, 0x75, 0x3a, 0x8b, 0xe7, 0x22, 0xd1, 0x35, 0xad, 0xb3, 0xdd, 0x17, 0x3b, 0xf6, 0xfb, 0x1b,
		0x63, 0x05, 0x2e, 0x27, 0x76, 0x43, 0x8e, 0x82, 0x20, 0xc3, 0xbc, 0xb4, 0xd8, 0x9d, 0xf9, 0xc3,
		0x6d, 0xe5, 0x73, 0xc5, 0xfd, 0x93, 0xfb, 0xd9, 0xa3, 0x2b, 0x04, 0xd4, 0x65, 0x99, 0xcb, 0xac,
		0x87, 0xb3, 0x2b, 0x2c, 0xa8, 0x60, 0xa8, 0x60, 0xa8, 0xe0, 0x17, 0x55, 0x70, 0x1c, 0x29, 0xfd,
		0xf9, 0xd1, 0x59, 0xa0, 0x9f, 0x8f, 0x9a, 0x4a, 0x46, 0xfd, 0x57, 0xbe, 0x64, 0xf9, 0x5f, 0xd6,
		0x7a, 0x5a, 0x42, 0x67, 0x99, 0xba, 0x07, 0x2d, 0x32, 0x7e, 0x0a, 0xfe, 0x2d, 0xfc, 0xdb, 0x95,
		0x2a, 0x0b, 0xe1, 0x73, 0xa9, 0x85, 0xbe, 0x37, 0x54, 0x18, 0x19, 0x22, 0xcd, 0xa5, 0xe6, 0xec,
		0xab, 0x4e, 0x58, 0xc2, 0xcd, 0x2b, 0x04, 0x2d, 0x6a, 0x09, 0x94, 0x33, 0x08, 0xcc, 0xe3, 0x28,
		0xf9, 0x4a, 0x2f, 0xf8, 0x5d, 0xbc, 0x37, 0x93, 0xac, 0x6c, 0xf5, 0xf2, 0x2e, 0x3a, 0x61, 0xd7,
		0x99, 0x67, 0x9d, 0xf2, 0x23, 0x2f, 0x39, 0x65, 0xfd, 0x80, 0xb7, 0x98, 0x17, 0xb0, 0xfb, 0x2c,
		0xd6, 0xd2, 0x70, 0xa9, 0xe7, 0xd9, 0x99, 0x9b, 0xfe, 0xa5, 0xe7, 0x7d, 0x8b, 0x13, 0xad, 0x38,
		0x0b, 0x29, 0xf7, 0x24, 0xa8, 0xde, 0x04, 0x4c, 0x52, 0xee, 0x81, 0x48, 0xa2, 0xa3, 0xa3, 0x9d,
		0xea, 0x7e, 0x2f, 0xfa, 0xc5, 0xe5, 0xa5, 0x90, 0x43, 0xca, 0x9d, 0xb9, 0x89, 0x84, 0xc7, 0xcf,
		0xfe, 0xec, 0x52, 0xee, 0xc3, 0x40, 0x9d, 0x45, 0xea, 0x96, 0x29, 0x9f, 0x72, 0x27, 0x98, 0x0e,
		0xcf, 0x67, 0x59, 0xa8, 0x84, 0x7b, 0x11, 0xc5, 0x7a, 0xdc, 0x85, 0xde, 0xd8, 0x47, 0xc9, 0x76,
		0xce, 0x7a, 0x23, 0x67, 0xe4, 0xbb, 0x50, 0x7a, 0x44, 0x7b, 0x46, 0x06, 0x8a, 0x85, 0xfc, 0x92,
		0x07, 0xec, 0xbe, 0xcb, 0xd5, 0x8d, 0xf0, 0x38, 0x69, 0xd5, 0x3b, 0xe8, 0xdc, 0x4e, 0x78, 0x92,
		0x70, 0x1f, 0x3c, 0x16, 0xdf, 0xb2, 0xf8, 0x87, 0x8e, 0x67, 0x8b, 0xeb, 0x92, 0xf9, 0x22, 0x22,
		0x3d, 0x29, 0x9c, 0xf3, 0xa3, 0x9d, 0x6a, 0xa5, 0x4a, 0xb9, 0x13, 0x6a, 0xe0, 0x55, 0xf6, 0x8e,
		0x76, 0x0b, 0xc0, 0x25, 0x07, 0x2d, 0xda, 0x78, 0x95, 0x88, 0xbb, 0x5e, 0x74, 0x16, 0x8d, 0x48,
		0xf3, 0x7a, 0x10, 0xc6, 0x94, 0x5f, 0x7f, 0x78, 0x7c, 0x7c, 0x54, 0xa5, 0xbd, 0x88, 0xe2, 0xae,
		0x20, 0x0d, 0xe6, 0x77, 0xd5, 0xfd, 0x30, 0x88, 0x89, 0xf7, 0xe0, 0x7a, 0x24, 0xf5, 0x17, 0x15,
		0x8d, 0x48, 0xf7, 0xc3, 0x17, 0x43, 0xa1, 0x59, 0xd0, 0x89, 0x6e, 0xb9, 0x0a, 0x84, 0xe4, 0xc5,
		0xa0, 0xc1, 0x49, 0x15, 0x4a, 0x2f, 0x92, 0x92, 0x7b, 0x9a, 0x78, 0x64, 0xa4, 0x96, 0x88, 0x26,
		0x69, 0x93, 0x17, 0x47, 0xb2, 0xb2, 0xbf, 0x4f, 0x9a, 0x3d, 0xe2, 0xee, 0xad, 0xd0, 0xde, 0x35,
		0xe5, 0x3e, 0x68, 0x3f, 0xf0, 0xc8, 0x87, 0x72, 0x1a, 0xad, 0xb3, 0x2f, 0x75, 0xe2, 0x20, 0x7e,
		0x74, 0x78, 0x78, 0x57, 0xdd, 0x2f, 0x82, 0x4b, 0xb4, 0xbf, 0x47, 0xb9, 0x17, 0xfd, 0xc4, 0x2b,
		0x42, 0x9c, 0xf6, 0xf4, 0xf2, 0xac, 0xd3, 0x94, 0xa4, 0x8d, 0xdc, 0xf5, 0x6e, 0x75, 0xb7, 0xa3,
		0xa2, 0xbb, 0x7b, 0xf2, 0xfa, 0xa9, 0x7d, 0xc3, 0xd5, 0x64, 0x57, 0x86, 0x78, 0x64, 0xb0, 0x7e,
		0x27, 0xa8, 0x2f, 0xa8, 0x2f, 0x4c, 0xf3, 0x5f, 0x9c, 0xc7, 0xb4, 0x77, 0xc6, 0x86, 0x03, 0xd2,
		0xce, 0x45, 0xb0, 0x2b, 0x62, 0xfa, 0x1b, 0x62, 0xb4, 0x1d, 0xbc, 0x90, 0x79, 0x5d, 0xee, 0x9d,
		0x46, 0x52, 0xab, 0x28, 0x08, 0xb8, 0xdf, 0x3c, 0x23, 0xed, 0xe2, 0x79, 0x22, 0x3e, 0x17, 0xf2,
		0x17, 0x69, 0x05, 0xeb, 0x27, 0x41, 0x35, 0x0e, 0x46, 0x09, 0x69, 0xb1, 0x20, 0x2e, 0xd6, 0x4c,
		0x79, 0x92, 0x93, 0xc6, 0xa6, 0x24, 0x92, 0x5c, 0x4f, 0x72, 0x01, 0x29, 0x4f, 0x43, 0x30, 0x6a,
		0x9c, 0x77, 0x48, 0x83, 0xdf, 0xee, 0x01, 0xe9, 0x09, 0x60, 0x01, 0x69, 0x67, 0x54, 0x73, 0x15,
		0x76, 0x18, 0xe9, 0xe4, 0x88, 0xa1, 0xda, 0xdd, 0xd9, 0xbd, 0xac, 0xf7, 0x48, 0x53, 0xc6, 0x0d,
		0xe9, 0x3c, 0x82, 0x45, 0x3a, 0xdd, 0x3c, 0x09, 0xed, 0x74, 0x76, 0xb0, 0x8b, 0xb2, 0x7d, 0x50,
		0x31, 0x79, 0xa9, 0x68, 0xd2, 0x96, 0x8a, 0x01, 0x4b, 0x74, 0x43, 0x5f, 0x73, 0x75, 0xf6, 0x27,
		0xf5, 0x5c, 0x21, 0x4f, 0x34, 0xa4, 0xdf, 0xa1, 0x1d, 0x67, 0xba, 0x8f, 0xb9, 0xf2, 0xe8, 0x0b,
		0x76, 0xac, 0x22, 0xcd, 0x23, 0x79, 0xb4, 0xd3, 0xea, 0x0b, 0x4d, 0x1b, 0x9d, 0x0e, 0x0b, 0x65,
		0x34, 0x0a, 0x11, 0xbf, 0xac, 0xe9, 0xb0, 0x08, 0x71, 0xf1, 0x33, 0xd1, 0xa7, 0x1d, 0xfa, 0x9b,
		0x75, 0x64, 0x6f, 0x92, 0x88, 0x7d, 0x42, 0x3b, 0x58, 0x10, 0x2b, 0x11, 0x32, 0x75, 0xdf, 0xec,
		0xd6, 0x2f, 0x8a, 0xb0, 0xf1, 0x75, 0xf0, 0xa3, 0x55, 0x23, 0xdd, 0x91, 0xd8, 0x97, 0x13, 0x2c,
		0x39, 0x8f, 0xa2, 0x98, 0x74, 0x26, 0x94, 0x27, 0x12, 0x2f, 0x6a, 0x76, 0xcf, 0xa9, 0x07, 0x99,
		0xd9, 0x20, 0x60, 0x72, 0xbc, 0xb6, 0x68, 0xe7, 0x68, 0xf6, 0xc3, 0xdd, 0xc3, 0x9d, 0x98, 0xa9,
		0xb1, 0xf7, 0x44, 0x9a, 0xdb, 0x45, 0x5f, 0xf1, 0x02, 0xb8, 0x80, 0x9a, 0x17, 0x21, 0x56, 0x5e,
		0x08, 0xac, 0x6a, 0xd2, 0xde, 0xc8, 0x13, 0x92, 0x0f, 0xc9, 0xa7, 0x3a, 0x26, 0x15, 0xe2, 0x91,
		0xda, 0x2a, 0xfd, 0x8d, 0xc8, 0x6f, 0xd2, 0x2b, 0xc8, 0x56, 0xe4, 0xf4, 0xa8, 0x4b, 0x3d, 0xd2,
		0x95, 0xca, 0x49, 0x42, 0x1c, 0xcf, 0xa3, 0xb8, 0x35, 0x0a, 0xb4, 0x88, 0x03, 0x7e, 0x17, 0x29,
		0xf2, 0x9b, 0x62, 0xdf, 0x7b, 0xf4, 0x0f, 0xad, 0x7e, 0xa9, 0xb7, 0xbb, 0x85, 0x0a, 0x8e, 0x5c,
		0x0e, 0x3a, 0xd4, 0x8f, 0x4c, 0x7a, 0x9a, 0x07, 0x22, 0x69, 0x71, 0xcd, 0xce, 0xdb, 0x6d, 0xd2,
		0x9b, 0x96, 0x82, 0x38, 0x56, 0x85, 0x91, 0xcf, 0xc3, 0x02, 0x9c, 0x4c, 0x6f, 0xd3, 0x4e, 0x8b,
		0x9f, 0xe4, 0x3b, 0x12, 0x4f, 0x2c, 0x67, 0xc1, 0xe8, 0x4b, 0x1c, 0xc9, 0xb6, 0x1c, 0x51, 0xee,
		0x05, 0xd7, 0xd7, 0x5c, 0x49, 0xae, 0x4f, 0x93, 0x90, 0x79, 0xb4, 0x4b, 0x05, 0x24, 0xf7, 0x92,
		0xf4, 0x82, 0x8a, 0x63, 0xd2, 0x5e, 0xd2, 0x75, 0x14, 0xf2, 0x58, 0x32, 0xe2, 0xe7, 0x23, 0x49,
		0x1b, 0xb7, 0x41, 0x57, 0x0c, 0xa9, 0x07, 0x6e, 0xfe, 0xaa, 0x1e, 0xef, 0x56, 0x68, 0x23, 0x86,
		0xc7, 0xbe, 0x73, 0x95, 0x88, 0x48, 0x56, 0x68, 0x5b, 0x69, 0xd2, 0x4e, 0x36, 0x4f, 0x88, 0x67,
		0x4e, 0x9c, 0x8d, 0xa4, 0xa0, 0x7d, 0xa8, 0x76, 0x50, 0x39, 0x68, 0x0d, 0xd4, 0xc9, 0x48, 0xfa,
		0xb4, 0x0f, 0xb6, 0xc4, 0x2a, 0x8a, 0xa9, 0xef, 0x6e, 0xcb, 0x81, 0x90, 0xa2, 0xcf, 0x24, 0x69,
		0xc4, 0xf3, 0x7d, 0xf9, 0x27, 0xed, 0x23, 0x90, 0x89, 0x66, 0xea, 0x9c, 0xf6, 0x1e, 0xd7, 0xf0,
		0x70, 0x67, 0x97, 0xe9, 0x6a, 0xd8, 0xa7, 0xdc, 0x09, 0x39, 0x60, 0xa4, 0xed, 0xc3, 0x4d, 0x78,
		0xcb, 0x14, 0xbf, 0x10, 0x5e, 0x8f, 0x78, 0xfa, 0xd0, 0x58, 0xb7, 0x16, 0xa0, 0x9e, 0xd8, 0x2c,
		0xe9, 0xa6, 0x1a, 0xd0, 0x8e, 0x69, 0x2c, 0xf2, 0x4e, 0xe9, 0x2b, 0xa8, 0x83, 0x3d, 0xd2, 0x6e,
		0x10, 0x4f, 0xbc, 0x48, 0xd2, 0xae, 0x73, 0x53, 0x21, 0x9d, 0x93, 0xa2, 0xa8, 0x67, 0x10, 0x70,
		0x2f, 0x22, 0x7e, 0x50, 0xed, 0xaf, 0x02, 0x64, 0xc6, 0x36, 0x4e, 0xba, 0xc4, 0x53, 0x1f, 0xce,
		0xea, 0xe7, 0xf4, 0xcf, 0x6b, 0x76, 0x88, 0x9f, 0x9a, 0x9d, 0xef, 0xed, 0x36, 0x6a, 0x17, 0x35,
		0xd2, 0x5a, 0x35, 0x56, 0xe4, 0x4f, 0x60, 0x17, 0x61, 0xbb, 0x67, 0x97, 0xfa, 0x11, 0x90, 0x24,
		0xf4, 0x13, 0xe2, 0xd5, 0x46, 0x82, 0xc8, 0x63, 0x41, 0x8f, 0x05, 0xa4, 0x39, 0x75, 0x14, 0x68,
		0x45, 0x7a, 0xcf, 0xe7, 0xa6, 0x52, 0xa1, 0x6d, 0xa0, 0x77, 0x48, 0x6f, 0x96, 0x24, 0xd4, 0x13,
		0x4a, 0x62, 0x3e, 0x2c, 0x44, 0x5d, 0xf7, 0x60, 0x57, 0xc4, 0x77, 0xf4, 0x6b, 0xee, 0xf8, 0x92,
		0xf6, 0x1e, 0x7a, 0xa2, 0x89, 0x17, 0x25, 0x88, 0xa3, 0x84, 0xfc, 0x95, 0x32, 0x49, 0x8b, 0x79,
		0xe7, 0xd4, 0x2f, 0xc7, 0x61, 0xd4, 0xcf, 0x63, 0xfa, 0xb4, 0x33, 0xab, 0x6e, 0xa6, 0x51, 0xed,
		0x66, 0x5c, 0xf3, 0x7d, 0xc5, 0x69, 0x27, 0x7a, 0x87, 0x31, 0xe9, 0xb0, 0xb6, 0x56, 0x3b, 0x3b,
		0x47, 0xa4, 0xb3, 0x19, 0xfa, 0xc1, 0x77, 0xee, 0x69, 0xd6, 0xd5, 0x4c, 0x15, 0x20, 0xf3, 0x33,
		0x60, 0xb7, 0xc4, 0x37, 0x71, 0xbd, 0x5f, 0xbd, 0xa8, 0x3b, 0xfe, 0x0f, 0xe9, 0x8d, 0x92, 0x98,
		0xf6, 0x16, 0x43, 0x78, 0xaf, 0x04, 0xf1, 0x10, 0xb7, 0x24, 0x9e, 0x72, 0x98, 0x04, 0xb4, 0xdf,
		0x7f, 0x71, 0xda, 0xa4, 0x1e, 0xdd, 0x4a, 0xfa, 0xc5, 0x38, 0xa6, 0xf4, 0xda, 0xf3, 0x43, 0x56,
		0x80, 0x92, 0xed, 0xf4, 0xef, 0x5f, 0x68, 0x8f, 0x34, 0xf9, 0x79, 0xa8, 0x37, 0x49, 0x17, 0xce,
		0x0f, 0x58, 0x4c, 0xda, 0x9d, 0xd6, 0x23, 0xf2, 0xe5, 0xe4, 0x22, 0xc9, 0xf5, 0x18, 0xfb, 0xae,
		0x39, 0xf3, 0x0b, 0x50, 0x1b, 0x21, 0xd2, 0xb2, 0xad, 0x49, 0x7b, 0xa6, 0x03, 0xdf, 0x17, 0xb4,
		0x0f, 0x50, 0x3f, 0x32, 0xd8, 0xf4, 0x0f, 0x88, 0x4e, 0xef, 0x31, 0x2e, 0x06, 0x82, 0x28, 0xe6,
		0x8b, 0xa8, 0x55, 0x3b, 0x25, 0xed, 0x58, 0x70, 0x5f, 0xb0, 0x16, 0x13, 0x01, 0xfd, 0x02, 0x1c,
		0x77, 0xd5, 0xfd, 0x98, 0x7e, 0xf6, 0xfd, 0xc9, 0x8f, 0x5a, 0x5c, 0x6d, 0xc5, 0xb4, 0x2f, 0x69,
		0x2d, 0x0f, 0x13, 0x59, 0x80, 0xf2, 0x91, 0x15, 0xf2, 0xe5, 0x23, 0x59, 0x30, 0x6a, 0xc4, 0x91,
		0xec, 0x5c, 0xdf, 0x27, 0xc2, 0x63, 0xc1, 0x37, 0xda, 0xe7, 0x6c, 0xe2, 0x48, 0x1e, 0x54, 0xab,
		0x45, 0x28, 0xbd, 0x58, 0xd7, 0x8a, 0xb8, 0xab, 0xd1, 0xa7, 0x7d, 0x46, 0x48, 0x73, 0x15, 0x70,
		0x76, 0xc3, 0xa9, 0xe3, 0xb9, 0x4f, 0x1a, 0xcf, 0x3d, 0x4f, 0x37, 0xc2, 0x51, 0x40, 0x7d, 0xf3,
		0x8e, 0x76, 0xbe, 0x25, 0xf1, 0xb4, 0x14, 0xff, 0xa6, 0xdf, 0xf3, 0x49, 0xfb, 0x11, 0xb7, 0xb7,
		0x4c, 0x76, 0x3a, 0x55, 0xea, 0xe4, 0x5a, 0x8f, 0xbc, 0xe4, 0x87, 0x50, 0x3c, 0xe0, 0x49, 0xd2,
		0x62, 0x5e, 0x40, 0x3d, 0xab, 0x40, 0x84, 0x9a, 0x78, 0x52, 0x44, 0x3f, 0xa2, 0x7d, 0x08, 0x56,
		0x0c, 0xbe, 0x0f, 0x44, 0xef, 0x3e, 0xe6, 0xb4, 0xd3, 0x16, 0x49, 0x1f, 0x0e, 0x1a, 0x8a, 0x21,
		0xeb, 0x8b, 0xe9, 0x51, 0x39, 0xe2, 0x3b, 0x90, 0xd3, 0x93, 0xa4, 0xb3, 0x23, 0x98, 0x17, 0x82,
		0xf6, 0xdd, 0xa6, 0xf1, 0x59, 0xa4, 0x6e, 0x99, 0xf2, 0x69, 0x5f, 0x6e, 0x40, 0xfa, 0x84, 0xbb,
		0x4a, 0x14, 0x69, 0x2f, 0x68, 0x94, 0x90, 0x7e, 0xfd, 0xe4, 0x9a, 0x3a, 0xb9, 0x7a, 0x92, 0x38,
		0x60, 0x74, 0x47, 0xfd, 0xe6, 0xd8, 0x95, 0x1e, 0x30, 0x8f, 0x7c, 0xe0, 0x75, 0x8e, 0xae, 0x9d,
		0x2a, 0xe9, 0xb2, 0x95, 0xc3, 0xe3, 0xe3, 0xa3, 0x0a, 0xfd, 0x94, 0x08, 0xe9, 0x31, 0xda, 0x25,
		0xe2, 0xfc, 0xeb, 0xca, 0x11, 0xed, 0x58, 0xa5, 0x9e, 0x9c, 0xf5, 0xf8, 0x4a, 0xbc, 0x76, 0x65,
		0x18, 0x07, 0x49, 0x8f, 0x7c, 0x66, 0xc1, 0x0d, 0xf5, 0xd3, 0x98, 0x09, 0xf5, 0x13, 0xfa, 0x7d,
		0xa1, 0x93, 0x02, 0xd4, 0x70, 0x2d, 0xc8, 0x4e, 0xd0, 0x75, 0x92, 0x90, 0x7e, 0x7f, 0x5f, 0x0c,
		0x85, 0x66, 0xc1, 0x0f, 0xc5, 0xe2, 0x98, 0xab, 0x02, 0xa5, 0x0c, 0x2d, 0x5f, 0x9b, 0x54, 0x29,
		0x44, 0xba, 0x6c, 0xeb, 0x34, 0xd4, 0x49, 0x31, 0x12, 0x56, 0x96, 0xae, 0x63, 0xe8, 0xa8, 0x68,
		0x20, 0x68, 0x67, 0x4b, 0x50, 0x3f, 0x4f, 0xfb, 0x34, 0x66, 0x5e, 0x8c, 0x35, 0x36, 0x3b, 0x0b,
		0xd6, 0x1b, 0x16, 0xe2, 0xae, 0x31, 0xd2, 0xf1, 0xa9, 0xbe, 0x12, 0xfe, 0x90, 0xb4, 0x88, 0x73,
		0xda, 0xa7, 0x76, 0xae, 0x89, 0xfb, 0x4e, 0x8b, 0x9b, 0xb9, 0xce, 0x14, 0x0b, 0xf9, 0x25, 0x0f,
		0xd8, 0x3d, 0xfd, 0x23, 0x79, 0xc4, 0xcb, 0xdb, 0x4e, 0x13, 0x68, 0x0b, 0x71, 0x6a, 0xbb, 0x52,
		0x6d, 0xc5, 0x71, 0xf7, 0x56, 0x68, 0xef, 0x9a, 0x34, 0x55, 0x45, 0x61, 0x1c, 0x25, 0x82, 0xfe,
		0x45, 0x82, 0x31, 0x6d, 0x6d, 0x15, 0xc5, 0x7a, 0xec, 0xd9, 0x16, 0xc0, 0x89, 0x9a, 0x65, 0x6d,
		0x9e, 0x47, 0xc3, 0x71, 0x87, 0xc8, 0xdf, 0x4f, 0xa9, 0xc3, 0x26, 0xed, 0x53, 0x7a, 0xd7, 0x22,
		0xe6, 0x2a, 0x60, 0xb2, 0x4a, 0x3f, 0xcb, 0xa8, 0x00, 0xc9, 0xb3, 0xbb, 0xf4, 0x2f, 0xf0, 0x49,
		0x92, 0xc3, 0x02, 0xdc, 0x5f, 0xf2, 0xd4, 0x81, 0x2d, 0xc2, 0x1d, 0xff, 0x43, 0x4d, 0xfb, 0x0c,
		0xcc, 0xd1, 0xc1, 0x39, 0x8b, 0x49, 0x07, 0xaa, 0xff, 0x22, 0x5e, 0x58, 0x5c, 0xf1, 0xe1, 0x28,
		0x60, 0x8a, 0xfa, 0xee, 0x1f, 0xa7, 0x1d, 0xbd, 0x25, 0x5e, 0x11, 0x8a, 0xf3, 0xc9, 0x4d, 0xf7,
		0xcc, 0x3f, 0x67, 0xa4, 0x03, 0x69, 0x31, 0xed, 0x9a, 0x19, 0x03, 0x55, 0x0f, 0x3c, 0xd1, 0x90,
		0x7e, 0x47, 0xd3, 0x8e, 0x43, 0x11, 0xdf, 0x3d, 0x66, 0x37, 0xc2, 0x13, 0xed, 0xa9, 0x7f, 0x47,
		0xfe, 0xd2, 0x86, 0x98, 0xd1, 0x2e, 0x23, 0x9b, 0x84, 0x7e, 0xd2, 0xf4, 0xa8, 0x0b, 0x76, 0x11,
		0x02, 0x9a, 0x9e, 0x54, 0xd4, 0xad, 0x5c, 0x65, 0xf7, 0x78, 0x8f, 0x7a, 0x7a, 0x11, 0x69, 0x50,
		0x0a, 0x92, 0x5b, 0xea, 0xe9, 0x8e, 0xbb, 0xc4, 0xaf, 0xc2, 0x6d, 0x8d, 0x02, 0x2d, 0x02, 0x21,
		0x7f, 0xd1, 0xbf, 0x3f, 0x90, 0x29, 0xda, 0x69, 0x9b, 0xb1, 0x8a, 0xe2, 0x53, 0x19, 0x24, 0x05,
		0x88, 0x1e, 0x13, 0xbf, 0xad, 0x7b, 0x3c, 0x13, 0x9d, 0x48, 0x48, 0xdd, 0x8b, 0x26, 0xff, 0xe9,
		0x72, 0x25, 0x18, 0xf1, 0x6a, 0x4a, 0xc4, 0xc1, 0xd5, 0xa3, 0xbf, 0xb3, 0x12, 0x8a, 0xe8, 0x8e,
		0x76, 0x52, 0xc7, 0x03, 0xb9, 0xb6, 0x3a, 0x4d, 0xd2, 0xd9, 0x29, 0x2c, 0x11, 0x5e, 0xb3, 0x5b,
		0xbf, 0x20, 0xbe, 0xb7, 0x75, 0xc9, 0x7c, 0x11, 0x15, 0xc0, 0x5e, 0x14, 0x20, 0x5e, 0x46, 0xfe,
		0x7e, 0x13, 0xfa, 0x00, 0x98, 0x88, 0x98, 0x76, 0xea, 0xdf, 0xb5, 0x88, 0x63, 0x51, 0x88, 0x43,
		0x6d, 0x03, 0x96, 0xd0, 0xbe, 0xf7, 0x8a, 0x78, 0xf6, 0x5c, 0xc0, 0xe2, 0x41, 0x71, 0xf2, 0x69,
		0xbe, 0xa8, 0x68, 0x44, 0xbb, 0x7e, 0x77, 0x34, 0xd0, 0xb7, 0x4c, 0xf1, 0xf3, 0x28, 0x8a, 0xfb,
		0xc4, 0xcb, 0xd9, 0xf3, 0x38, 0x50, 0x09, 0xed, 0xa3, 0xf3, 0xd5, 0xdd, 0x2a, 0xed, 0x5d, 0x5e,
		0xe6, 0x5d, 0xd7, 0xbb, 0xa4, 0xef, 0x0b, 0xed, 0x0f, 0xe3, 0x38, 0x0a, 0x84, 0x77, 0xcf, 0x3c,
		0x2f, 0x1a, 0x49, 0x2d, 0xe4, 0x90, 0x76, 0x1e, 0xe6, 0x60, 0xc0, 0x39, 0x79, 0xf6, 0xb0, 0xe8,
		0x80, 0xd1, 0x93, 0x3f, 0x3f, 0xad, 0x60, 0xa0, 0xcc, 0x06, 0xe8, 0x85, 0xc3, 0x58, 0xc6, 0x75,
		0xa5, 0xd6, 0xf0, 0xd2, 0x93, 0x4c, 0x6d, 0xf3, 0xa4, 0xa8, 0xd5, 0xbf, 0x71, 0x50, 0x35, 0xbb,
		0x15, 0x6f, 0xf5, 0x6f, 0x3a, 0xaf, 0xa3, 0xd9, 0x8b, 0x7e, 0x71, 0x79, 0x69, 0xa4, 0xb8, 0x56,
		0xff, 0xd2, 0xd3, 0x9b, 0x8d, 0xff, 0xec, 0x52, 0x78, 0xd7, 0x81, 0x32, 0xae, 0x2f, 0xb4, 0xfa,
		0x97, 0x65, 0x3a, 0x9c, 0xe5, 0x4a, 0x53, 0x78, 0xdb, 0x19, 0x57, 0x5b, 0x5c, 0xa5, 0xb9, 0x96,
		0x11, 0x9e, 0xd5, 0xcd, 0xa2, 0xb1, 0x78, 0xe7, 0x31, 0xd2, 0x2e, 0x57, 0x37, 0xc2, 0xc4, 0x8d,
		0x5f, 0x83, 0x4a, 0x1b, 0x74, 0x6e, 0xcd, 0x6a, 0xdd, 0xad, 0xfe, 0x5d, 0xa7, 0x07, 0x89, 0x7f,
		0xe8, 0x78, 0xb6, 0x28, 0x0c, 0x63, 0xa0, 0x6b, 0x18, 0xe4, 0x59, 0xa0, 0xb0, 0x4a, 0xe1, 0x65,
		0xd5, 0xc0, 0xab, 0xec, 0x99, 0xec, 0x6e, 0xaf, 0xcd, 0x1e, 0x1f, 0xb4, 0x68, 0xe0, 0x43, 0x22,
		0xee, 0x7a, 0xd1, 0x59, 0x34, 0x22, 0xc1, 0x91, 0x41, 0x18, 0x53, 0x78, 0xcd, 0xe1, 0xf1, 0xf1,
		0x51, 0x95, 0xc6, 0xe4, 0xc7, 0x5d, 0x41, 0x02, 0x18, 0xef, 0xaa, 0xfb, 0x61, 0x10, 0x13, 0x79,
		0xd3, 0xeb, 0x91, 0xd4, 0x86, 0x41, 0xc2, 0x35, 0xf8, 0x66, 0xd3, 0xfa, 0x2b, 0x9d, 0xe8, 0x96,
		0xab, 0x40, 0x48, 0x4e, 0x8b, 0x6a, 0x26, 0xdb, 0x13, 0x5e, 0x24, 0x25, 0xf7, 0x34, 0x11, 0x4f,
		0xb8, 0x96, 0x88, 0x26, 0x09, 0xd3, 0x10, 0x47, 0xb2, 0xb2, 0xbf, 0x4f, 0xc2, 0xe6, 0x1a, 0x9f,
		0x9d, 0x5e, 0xfd, 0xbb, 0x6a, 0xa3, 0xbd, 0x9c, 0x35, 0xb9, 0xe8, 0x8d, 0xd6, 0xd9, 0x97, 0x3a,
		0x11, 0x40, 0x3c, 0x3a, 0x3c, 0x34, 0x4a, 0x68, 0x59, 0x1f, 0x7a, 0xef, 0xef, 0x51, 0x78, 0xdb,
		0x7e, 0xe2, 0x51, 0x8a, 0x83, 0x9d, 0x5e, 0x9e, 0x75, 0x9a, 0x92, 0x84, 0x31, 0xb8, 0xde, 0xad,
		0xee, 0x76, 0x54, 0x74, 0x77, 0x4f, 0x46, 0x1f, 0x4c, 0x2e, 0xf2, 0x66, 0xfd, 0x80, 0x13, 0x89,
		0xd4, 0xd4, 0xef, 0x04, 0x95, 0x85, 0xf0, 0x85, 0x69, 0xfe, 0x8b, 0xf3, 0x98, 0x46, 0x44, 0x7f,
		0x38, 0x20, 0x01, 0xb7, 0xc1, 0xae, 0x88, 0xe9, 0x04, 0xf2, 0x69, 0x38, 0x0c, 0x21, 0xf3, 0xba,
		0xdc, 0x3b, 0x8d, 0xa4, 0x56, 0x51, 0x10, 0x70, 0xbf, 0x79, 0x46, 0xc2, 0x65, 0xf0, 0x44, 0x6c,
		0x56, 0x65, 0x60, 0x0d, 0x8a, 0xcb, 0x4f, 0x82, 0x6a, 0x1c, 0x8c, 0x12, 0x12, 0xcb, 0x96, 0x88,
		0x78, 0x31, 0xe5, 0x19, 0xd5, 0xdd, 0x5d, 0x43, 0x54, 0x26, 0x92, 0x5c, 0x77, 0x98, 0x26, 0xe1,
		0xce, 0xb0, 0x60, 0xd4, 0x38, 0xef, 0x90, 0x00, 0x98, 0xdd, 0x03, 0x12, 0x03, 0xca, 0x02, 0x12,
		0x4e, 0x8c, 0xe6, 0x2a, 0xec, 0x30, 0x12, 0x9b, 0xa2, 0x43, 0xb5, 0xbb, 0xb3, 0x7b, 0x59, 0xef,
		0x91, 0xb0, 0xae, 0x37, 0x24, 0xf6, 0x15, 0x17, 0x69, 0x28, 0xf3, 0xa4, 0x0e, 0xe3, 0x5a, 0x63,
		0x6b, 0xd0, 0xaf, 0x2a, 0x26, 0xb3, 0x6a, 0x9b, 0x34, 0x56, 0xed, 0x80, 0x25, 0xd3, 0x7b, 0xb1,
		0xce, 0xfe, 0xa4, 0xb2, 0x87, 0x6f, 0x5c, 0xcc, 0x62, 0x0d, 0xee, 0xe1, 0x7d, 0xcc, 0x95, 0x47,
		0x47, 0xc0, 0x66, 0x77, 0x46, 0x1f, 0x19, 0xde, 0x19, 0xbd, 0x0e, 0x34, 0x38, 0x24, 0xa9, 0x74,
		0x49, 0xc5, 0x8d, 0x8c, 0xaa, 0xcd, 0xae, 0x2f, 0x8e, 0x78, 0x26, 0xfa, 0x34, 0x42, 0x31, 0xb3,
		0x17, 0xde, 0x9b, 0x24, 0x00, 0x9e, 0xd0, 0x70, 0x1a, 0x63, 0x25, 0x42, 0xa6, 0xee, 0xcd, 0xce,
		0x3c, 0xae, 0x2f, 0x60, 0x7f, 0xf0, 0xa3, 0x55, 0x23, 0xf1, 0xc2, 0xcb, 0x77, 0x4f, 0x90, 0xc8,
		0x44, 0xf0, 0x44, 0xe2, 0x45, 0xcd, 0xee, 0x39, 0x95, 0x60, 0xdd, 0xa2, 0x2c, 0x3e, 0x8d, 0x9c,
		0xa4, 0x7e, 0xb8, 0x7b, 0xb8, 0x13, 0x33, 0x35, 0xa6, 0x74, 0x12, 0x3c, 0x29, 0xfa, 0x8a, 0x13,
		0x72, 0x29, 0x4c, 0x2b, 0x5e, 0xaf, 0x27, 0xb6, 0x48, 0x0a, 0x1b, 0x9a, 0x34, 0x36, 0x1a, 0x84,
		0xe4, 0x43, 0x32, 0x29, 0x3f, 0x49, 0x85, 0x48, 0x24, 0xac, 0x4a, 0x67, 0x43, 0xe4, 0x9b, 0xf4,
		0x88, 0x6d, 0x89, 0x2c, 0xdd, 0x81, 0x74, 0x92, 0x10, 0xc1, 0xc6, 0x68, 0x5a, 0x22, 0x2a, 0x0e,
		0xf8, 0x5d, 0xa4, 0xc8, 0x04, 0xf3, 0xbf, 0xf7, 0xe8, 0x1c, 0xca, 0xf9, 0x52, 0x6f, 0x77, 0x49,
		0x3a, 0xc3, 0x97, 0x83, 0x0e, 0x95, 0x23, 0x24, 0x9e, 0xe6, 0x81, 0x48, 0x5a, 0x5c, 0xb3, 0xf3,
		0x76, 0x9b, 0xc4, 0xe6, 0x89, 0x20, 0x82, 0x0d, 0x61, 0xe4, 0xf3, 0x90, 0xd0, 0x09, 0xb8, 0x36,
		0x8d, 0xf4, 0xca, 0x49, 0xde, 0x0f, 0x91, 0xc4, 0xc5, 0xd9, 0xf5, 0x9e, 0x46, 0x45, 0xdf, 0x56,
		0xff, 0xb6, 0x7c, 0xec, 0xa6, 0x4b, 0xae, 0x4d, 0x6f, 0x72, 0x58, 0xc3, 0xf8, 0x26, 0xf7, 0x92,
		0xc4, 0x42, 0x88, 0x63, 0x12, 0x34, 0x7e, 0x1d, 0x85, 0x3c, 0x96, 0x8c, 0xc8, 0x79, 0x11, 0x12,
		0x46, 0x60, 0x60, 0x7c, 0xa5, 0xc8, 0xea, 0x5f, 0xf6, 0xaf, 0xea, 0xf1, 0x6e, 0x85, 0x86, 0x69,
		0xf5, 0xd8, 0x77, 0xae, 0x12, 0x11, 0xc9, 0x0a, 0x0d, 0xab, 0x45, 0xc2, 0x09, 0xe3, 0x09, 0x91,
		0x1d, 0xd3, 0xb3, 0x91, 0x14, 0x34, 0x0e, 0x07, 0x0d, 0x2a, 0x07, 0xad, 0x81, 0x32, 0xad, 0x20,
		0xb7, 0x1e, 0xb7, 0x96, 0xca, 0xee, 0x98, 0x1c, 0x08, 0x29, 0xfa, 0x4c, 0x92, 0x40, 0x15, 0xdf,
		0x97, 0x7f, 0xd2, 0x38, 0x12, 0x92, 0x68, 0xa6, 0xce, 0x69, 0xc4, 0xe6, 0x87, 0x87, 0x3b, 0xbb,
		0x4c, 0x57, 0xc3, 0x3e, 0x85, 0x97, 0x95, 0x03, 0x46, 0x42, 0xbf, 0xde, 0x84, 0xb7, 0x4c, 0xf1,
		0x0b, 0xe1, 0xf5, 0x88, 0x6c, 0xeb, 0x8f, 0x75, 0x16, 0xa1, 0x3a, 0x18, 0xb3, 0x4d, 0xf2, 0x6a,
		0x40, 0xc3, 0x87, 0x5d, 0xe4, 0x53, 0xd1, 0x51, 0x08, 0x07, 0x7b, 0x24, 0x70, 0x9b, 0x27, 0x5e,
		0x24, 0x69, 0x9c, 0x23, 0xaf, 0x90, 0xd8, 0x5b, 0x56, 0x54, 0x76, 0x14, 0xb9, 0x17, 0x11, 0x39,
		0x00, 0xf0, 0x17, 0xa1, 0xcc, 0xae, 0xc6, 0x49, 0x97, 0xc8, 0x96, 0xe7, 0x59, 0xfd, 0x9c, 0xce,
		0x39, 0x95, 0x0e, 0x91, 0xd3, 0x3f, 0xf3, 0x3d, 0xa3, 0x46, 0xed, 0xa2, 0x46, 0x42, 0x5b, 0xc5,
		0x8a, 0xcc, 0x09, 0x30, 0x4a, 0xe1, 0xeb, 0x5d, 0x2a, 0xa9, 0xbe, 0x49, 0xe8, 0x27, 0x44, 0x4e,
		0x05, 0x07, 0x91, 0xc7, 0x82, 0x1e, 0x0b, 0x48, 0x70, 0xd5, 0x28, 0xd0, 0x8a, 0x44, 0x0c, 0xfb,
		0xa6, 0x52, 0xa1, 0x61, 0xb0, 0x76, 0x48, 0x04, 0x85, 0x13, 0x2a, 0x1b, 0xc3, 0x31, 0x1f, 0x92,
		0xaa, 0x33, 0x19, 0xec, 0x8a, 0xf8, 0x8e, 0xce, 0xd9, 0x75, 0x5f, 0xd2, 0xd8, 0x6b, 0x4b, 0x34,
		0x91, 0x43, 0x8b, 0x71, 0x94, 0x90, 0x29, 0xed, 0x9c, 0xb4, 0x98, 0x77, 0x4e, 0xa5, 0x18, 0x35,
		0xa3, 0x72, 0x0e, 0xc5, 0xa7, 0x91, 0xc1, 0x70, 0x33, 0x8d, 0x02, 0x36, 0xe3, 0x9a, 0xef, 0x2b,
		0x4e, 0x23, 0x91, 0x30, 0x8c, 0x49, 0x84, 0x01, 0xb5, 0xda, 0xd9, 0x39, 0x22, 0xb1, 0x8b, 0xd9,
		0x0f, 0xbe, 0x73, 0x4f, 0xb3, 0xae, 0x66, 0x8a, 0x50, 0x46, 0x53, 0xc0, 0x6e, 0x89, 0x6c, 0x0e,
		0x79, 0xbf, 0x7a, 0x51, 0x57, 0x1b, 0xdd, 0xd5, 0xb2, 0x86, 0x80, 0x70, 0x4c, 0x23, 0xc4, 0x1a,
		0xde, 0x2b, 0x41, 0x24, 0x24, 0x28, 0x89, 0xa4, 0xde, 0x24, 0x01, 0x8d, 0xf7, 0x5c, 0x64, 0x0f,
		0xd7, 0xa3, 0x5b, 0x49, 0xe7, 0x30, 0xed, 0x94, 0xb6, 0x7a, 0x7e, 0xc8, 0x08, 0x95, 0x90, 0xa4,
		0x53, 0x97, 0xb5, 0x3d, 0xd2, 0x64, 0xc6, 0xb5, 0xde, 0x24, 0x51, 0x98, 0x33, 0x60, 0x31, 0x09,
		0x77, 0x4b, 0x8f, 0xc8, 0x94, 0x2f, 0x89, 0x24, 0xd7, 0x63, 0x7c, 0xb9, 0xe6, 0xcc, 0x27, 0x74,
		0x46, 0x32, 0xd2, 0xb2, 0xad, 0x49, 0x78, 0x34, 0x03, 0xdf, 0x17, 0x34, 0x0e, 0x70, 0x3d, 0x32,
		0x60, 0x74, 0x0e, 0xc0, 0x4c, 0xef, 0x83, 0xa2, 0x65, 0x7a, 0x15, 0xf3, 0x45, 0xd4, 0xaa, 0x9d,
		0x92, 0x00, 0x5b, 0xee, 0x0b, 0xd6, 0x62, 0x22, 0xa0, 0x73, 0x80, 0xf6, 0xae, 0xba, 0x1f, 0xd3,
		0xc9, 0xd6, 0x3c, 0xf9, 0x51, 0x8b, 0xab, 0xad, 0x98, 0xc6, 0x65, 0x3a, 0xe5, 0x61, 0x22, 0x09,
		0x95, 0x0d, 0xaa, 0x90, 0x29, 0x1b, 0x34, 0xbb, 0x2e, 0xbc, 0x73, 0x7d, 0x9f, 0x08, 0x8f, 0x05,
		0xdf, 0x68, 0xe4, 0x47, 0xc7, 0x91, 0x3c, 0xa8, 0x56, 0x29, 0x95, 0xe2, 0xa9, 0x6b, 0x45, 0x04,
		0x75, 0xfb, 0x34, 0x72, 0xb8, 0x35, 0x57, 0x01, 0x67, 0x37, 0x9c, 0x0a, 0x36, 0xfa, 0x24, 0xb0,
		0xd1, 0xf3, 0x74, 0x23, 0x1c, 0x05, 0x54, 0x36, 0x17, 0x68, 0xe4, 0x17, 0x11, 0xd9, 0x5e, 0xf6,
		0x6f, 0xfa, 0x3d, 0x9f, 0x04, 0xc7, 0xde, 0xde, 0x32, 0xd9, 0xe9, 0x54, 0xa9, 0x90, 0x56, 0x3d,
		0xf2, 0x92, 0x1f, 0x42, 0xf1, 0x80, 0x27, 0x09, 0xa5, 0x2b, 0x6f, 0x45, 0x48, 0xe5, 0x36, 0xcb,
		0x7e, 0x44, 0xe3, 0x30, 0x8f, 0x18, 0x7c, 0x1f, 0x08, 0x2a, 0xd7, 0x42, 0xfa, 0x09, 0x89, 0xe4,
		0xed, 0xa1, 0x18, 0xb2, 0xbe, 0x98, 0x1e, 0x35, 0x20, 0xb2, 0x13, 0x32, 0x3d, 0x29, 0x33, 0x3b,
		0x7a, 0x72, 0x21, 0x68, 0xdc, 0x4d, 0x13, 0x13, 0xba, 0x42, 0xf8, 0x66, 0x97, 0xc4, 0x89, 0x39,
		0x95, 0x28, 0x12, 0xb4, 0x3d, 0x4a, 0x48, 0xbc, 0x66, 0x72, 0x4d, 0x85, 0xb4, 0x3c, 0x49, 0xc4,
		0xb0, 0x76, 0x47, 0xfd, 0xc9, 0xf5, 0x84, 0x03, 0xe6, 0x91, 0x09, 0x6c, 0xcd, 0x51, 0xab, 0x53,
		0xed, 0x50, 0xb9, 0x69, 0xb5, 0x42, 0x67, 0x2b, 0x54, 0x7a, 0x8c, 0x46, 0x49, 0x12, 0xff, 0xba,
		0x72, 0x44, 0x23, 0x46, 0xa4, 0x27, 0x39, 0xbd, 0x5f, 0x89, 0xd4, 0x26, 0x0a, 0xe3, 0x20, 0xe9,
		0x91, 0xd9, 0x69, 0xbc, 0xa1, 0x72, 0x0a, 0x25, 0xa1, 0x72, 0xb2, 0xaf, 0x2f, 0x74, 0x42, 0xa8,
		0x86, 0x16, 0xb1, 0xc8, 0xf6, 0x75, 0x92, 0x08, 0x42, 0x57, 0x2e, 0xff, 0x50, 0x2c, 0x8e, 0xb9,
		0x22, 0xb8, 0x95, 0xbf, 0x5c, 0x5e, 0xbc, 0x42, 0x2a, 0xdd, 0xab, 0x75, 0x1a, 0xea, 0x84, 0xd6,
		0xc6, 0xf3, 0x52, 0x99, 0xd6, 0x8e, 0x8a, 0x06, 0x82, 0xc6, 0x2e, 0x29, 0x95, 0x73, 0x41, 0x4f,
		0x63, 0x8c, 0xb4, 0xd6, 0xc6, 0x2c, 0xf7, 0xbe, 0x37, 0x24, 0x55, 0x33, 0x9f, 0x44, 0x7c, 0xa1,
		0xaf, 0x84, 0x3f, 0x24, 0x21, 0x6a, 0x9c, 0x46, 0xb6, 0xf5, 0x35, 0xa5, 0x8b, 0xcf, 0xc7, 0x46,
		0xf9, 0x4c, 0xb1, 0x90, 0x5f, 0xf2, 0x80, 0xdd, 0xd3, 0x39, 0xd2, 0x40, 0xa4, 0x8c, 0xd8, 0x34,
		0x01, 0x8c, 0xd4, 0xa9, 0xb1, 0x4a, 0xb5, 0x15, 0xc7, 0xdd, 0x5b, 0xa1, 0x3d, 0x12, 0xf7, 0x72,
		0x7a, 0x51, 0x18, 0x47, 0x89, 0xa0, 0x73, 0x31, 0x45, 0x4c, 0x43, 0x3b, 0x44, 0xb1, 0x1e, 0x7b,
		0x44, 0x84, 0x60, 0x7d, 0x96, 0xa5, 0x74, 0x1e, 0x0d, 0xc7, 0x2f, 0x4e, 0xe6, 0x9e, 0x12, 0x1d,
		0x36, 0x69, 0x9c, 0x72, 0xb8, 0x16, 0x31, 0x57, 0x01, 0x93, 0x55, 0x3a, 0xbb, 0xff, 0x84, 0x92,
		0xbf, 0x76, 0xe9, 0x14, 0xc6, 0x4e, 0x92, 0x43, 0x42, 0x75, 0x87, 0x9f, 0x3a, 0x3e, 0x94, 0xee,
		0x14, 0x1c, 0x6a, 0x1a, 0x39, 0xcd, 0x47, 0x07, 0xe7, 0x2c, 0x26, 0x11, 0xf0, 0xfb, 0x8b, 0x48,
		0x61, 0x44, 0xc5, 0x87, 0xa3, 0x80, 0x29, 0x2a, 0xbb, 0x13, 0x9c, 0x46, 0x74, 0x8c, 0x48, 0x45,
		0x84, 0xe9, 0x2d, 0x8c, 0xbb, 0xcc, 0x3f, 0x67, 0x24, 0x02, 0x1e, 0x31, 0x8d, 0xb3, 0xb0, 0x03,
		0x55, 0x0f, 0x28, 0xdd, 0x86, 0x4c, 0x65, 0x57, 0x8a, 0xdd, 0x08, 0x4f, 0xb4, 0xa7, 0xfe, 0x02,
		0x99, 0x62, 0xae, 0x31, 0xa3, 0x51, 0xc6, 0x2b, 0x09, 0xfd, 0xa4, 0xe9, 0x51, 0x11, 0x30, 0x4a,
		0x81, 0x24, 0x4f, 0x2a, 0x2a, 0xd6, 0xa0, 0xb2, 0x7b, 0xbc, 0x47, 0x65, 0xdb, 0x9f, 0x04, 0x08,
		0x04, 0xc9, 0x2d, 0x95, 0xb4, 0x9f, 0x5d, 0x22, 0x57, 0x10, 0x4d, 0xee, 0x2b, 0x0c, 0x84, 0xfc,
		0x45, 0xe7, 0x3e, 0x0a, 0xa6, 0x68, 0xa4, 0x29, 0x8d, 0x5d, 0xd8, 0x53, 0x19, 0x24, 0x84, 0xa2,
		0x70, 0x44, 0x6e, 0x25, 0x1b, 0x8f, 0x6c, 0x27, 0x12, 0x52, 0xf7, 0xa2, 0xc9, 0x7f, 0xba, 0x5c,
		0x09, 0x46, 0xa4, 0xca, 0x00, 0x11, 0xd0, 0xf2, 0xe8, 0x44, 0x90, 0x43, 0x11, 0xdd, 0xd1, 0xd8,
		0xb4, 0x7d, 0x20, 0xad, 0x56, 0xa7, 0x49, 0x62, 0x97, 0x99, 0x25, 0xc2, 0x6b, 0x76, 0xeb, 0x17,
		0x44, 0x62, 0xf2, 0x97, 0xcc, 0x17, 0x11, 0x21, 0x7d, 0x4b, 0x28, 0xae, 0x41, 0xa6, 0x2e, 0x31,
		0x1d, 0x90, 0x49, 0x44, 0x4c, 0x23, 0x35, 0xe6, 0x5a, 0xc4, 0xb1, 0x20, 0x75, 0x58, 0x60, 0xc0,
		0x12, 0x1a, 0xf5, 0xde, 0x89, 0x64, 0x9d, 0x04, 0x2c, 0x1e, 0xd0, 0xdb, 0xff, 0xfe, 0xa2, 0xa2,
		0x11, 0x8d, 0xba, 0x84, 0xd1, 0x40, 0xdf, 0x32, 0xc5, 0xcf, 0xa3, 0x28, 0xee, 0x13, 0x29, 0xa3,
		0xc9, 0xe3, 0x40, 0x25, 0x34, 0x8e, 0xe2, 0x55, 0x77, 0xab, 0x34, 0x76, 0x8f, 0x98, 0x77, 0x5d,
		0xef, 0x92, 0xb8, 0x07, 0xa6, 0x3f, 0x8c, 0xe3, 0x28, 0x10, 0xde, 0x3d, 0xf3, 0xbc, 0x68, 0x24,
		0xb5, 0x90, 0x43, 0x1a, 0x79, 0x47, 0x83, 0x01, 0xe7, 0x64, 0x6c, 0xae, 0xc1, 0x8b, 0x66, 0x7a,
		0xe2, 0xe7, 0x27, 0xb7, 0xed, 0xbe, 0xff, 0xa9, 0xb7, 0x3f, 0xf1, 0xce, 0x30, 0x97, 0x6a, 0x52,
		0x46, 0x9a, 0x69, 0x11, 0xc9, 0xd2, 0xe7, 0x14, 0x03, 0x5c, 0x4a, 0xbc, 0x6b, 0x1e, 0xb2, 0x98,
		0xe9, 0xeb, 0xf1, 0x90, 0x6e, 0x47, 0x31, 0x97, 0x5e, 0x24, 0x07, 0x62, 0x58, 0x16, 0x73, 0x9a,
		0x49, 0xb6, 0x5f, 0xfa, 0x71, 0x3b, 0xd1, 0x4c, 0xf3, 0xd2, 0x6f, 0x29, 0xbe, 0x42, 0xab, 0x91,
		0xa7, 0xe5, 0x6c, 0xd6, 0xda, 0x8b, 0x6f, 0x58, 0xe0, 0x52, 0x72, 0xf5, 0xd2, 0x8f, 0x57, 0xdd,
		0xc9, 0x17, 0x7c, 0x32, 0x1b, 0xab, 0x37, 0xc6, 0xa9, 0x94, 0x8c, 0xfa, 0x0f, 0x3d, 0x7a, 0x77,
		0x98, 0x1e, 0x4c, 0xd0, 0xa3, 0xc7, 0xde, 0x99, 0x87, 0x3f, 0x84, 0xf4, 0x4b, 0x9f, 0xb7, 0x2a,
		0xef, 0x7c, 0xec, 0x74, 0x32, 0x12, 0xa5, 0xcf, 0x5b, 0x3b, 0xef, 0x7c, 0xb0, 0xa3, 0xf8, 0x40,
		0xdc, 0xa5, 0x9b, 0xd3, 0x85, 0xa9, 0xf7, 0xca, 0x62, 0x90, 0x66, 0x86, 0xba, 0xd1, 0x48, 0x79,
		0x3c, 0x55, 0xe3, 0xd3, 0xce, 0xf1, 0xfb, 0xdb, 0x48, 0xf9, 0xd3, 0x40, 0xd3, 0xe4, 0xbd, 0xd2,
		0x09, 0x7f, 0xe9, 0x2b, 0x4b, 0x6a, 0x6a, 0x38, 0x0a, 0xb9, 0xd4, 0xa5, 0xcf, 0x5b, 0x5a, 0x8d,
		0x78, 0xca, 0x07, 0x97, 0x9e, 0x9a, 0x75, 0x2b, 0x67, 0x39, 0xaa, 0x0b, 0x95, 0x52, 0x80, 0x96,
		0x56, 0x45, 0xfa, 0x11, 0x7c, 0x69, 0x4d, 0xa5, 0x1d, 0xc4, 0x74, 0x4b, 0x2b, 0xf3, 0x12, 0x33,
		0x59, 0x6a, 0xc6, 0x4b, 0xce, 0x74, 0xe9, 0x59, 0x2f, 0x41, 0xeb, 0xa5, 0x68, 0xb3, 0x24, 0x33,
		0x9a, 0x8a, 0x94, 0xf3, 0x95, 0x76, 0xa9, 0x2e, 0x1e, 0xf0, 0xe6, 0x2b, 0x22, 0xe3, 0x98, 0x3f,
		0x20, 0xc2, 0xe4, 0xf9, 0x8c, 0xe3, 0x95, 0x6d, 0xd9, 0x1a, 0x2f, 0x5f, 0x9b, 0x65, 0x6c, 0xbd,
		0x9c, 0x6d, 0x97, 0xb5, 0xb3, 0xe5, 0xed, 0x6c, 0x99, 0xbb, 0x58, 0xee, 0x66, 0xe4, 0x95, 0x11,
		0x28, 0x33, 0x8b, 0xc1, 0xe2, 0x41, 0x9f, 0x27, 0x9e, 0x12, 0x71, 0x6a, 0x66, 0x7a, 0x3b, 0xbc,
		0xb6, 0xd4, 0x98, 0xe1, 0x48, 0xcf, 0x04, 0x65, 0xc7, 0xf0, 0x71, 0x53, 0x81, 0x71, 0x21, 0x38,
		0xce, 0x04, 0xc8, 0x95, 0x20, 0x39, 0x17, 0x28, 0xe7, 0x82, 0xe5, 0x52, 0xc0, 0xcc, 0x04, 0xcd,
		0xc2, 0x83, 0x9b, 0xbc, 0xf8, 0xa4, 0xa4, 0x97, 0x93, 0xd5, 0x92, 0x68, 0x35, 0xf6, 0x92, 0x2d,
		0x96, 0xcb, 0xdc, 0xc8, 0x1c, 0x7d, 0x5a, 0xcd, 0xb8, 0x19, 0x8c, 0x59, 0x89, 0x4b, 0xd6, 0x0f,
		0xb8, 0x6f, 0xaf, 0x6b, 0xe6, 0x0d, 0x19, 0xce, 0x5b, 0x9d, 0x0f, 0xd8, 0x28, 0xd0, 0xd3, 0x22,
		0x1c, 0x23, 0x0e, 0x75, 0x05, 0x75, 0x05, 0x75, 0x95, 0x29, 0xc2, 0x17, 0x45, 0x01, 0x67, 0xd2,
		0x85, 0xbe, 0xaa, 0x6c, 0xb0, 0xbe, 0x12, 0xd2, 0xe7, 0x77, 0xf6, 0xda, 0x6a, 0xda, 0x8c, 0xbd,
		0xae, 0xda, 0x81, 0xa2, 0x82, 0xa2, 0x82, 0xa2, 0xca, 0xb2, 0x5a, 0x46, 0x42, 0xea, 0xdd, 0xaa,
		0x03, 0x3d, 0x75, 0x68, 0xd1, 0xc4, 0x25, 0x93, 0xc3, 0xf1, 0xdb, 0xfc, 0xd3, 0x6a, 0x3a, 0xed,
		0x96, 0xeb, 0xe4, 0x45, 0x5a, 0x42, 0x5a, 0xaf, 0x7b, 0x47, 0x4a, 0xe5, 0x59, 0x73, 0xdf, 0x59,
		0x30, 0xe2, 0x0e, 0xdb, 0x3b, 0x53, 0xcc, 0x1b, 0xfb, 0xa2, 0x75, 0x31, 0x14, 0x3a, 0x19, 0x37,
		0x6c, 0xdd, 0xee, 0xdf, 0xbf, 0x39, 0x98, 0x02, 0x76, 0xb7, 0xf1, 0x53, 0xb0, 0x57, 0x3d, 0xde,
		0x3b, 0x3e, 0x38, 0xac, 0x1e, 0xef, 0x6f, 0xf0, 0x5c, 0x7c, 0x5a, 0xcf, 0xd3, 0x3f, 0x57, 0x85,
		0x2b, 0xb9, 0x46, 0x8c, 0x1a, 0x77, 0x93, 0x69, 0xf8, 0xe7, 0xaa, 0x36, 0x2e, 0x97, 0x6c, 0x65,
		0xe4, 0x95, 0xf9, 0x9d, 0xfe, 0xac, 0x79, 0xc0, 0x43, 0xae, 0xd5, 0x7d, 0x39, 0x92, 0x65, 0xef,
		0x7a, 0xa2, 0x21, 0x9d, 0x04, 0xfa, 0x06, 0x2c, 0x48, 0x5c, 0x44, 0xfa, 0x72, 0xdf, 0x5e, 0xcd,
		0x1a, 0x74, 0xcf, 0xb6, 0xbd, 0xf9, 0xec, 0x79, 0x8b, 0xed, 0xce, 0xe5, 0xdd, 0xbf, 0x47, 0xbf,
		0x6d, 0x1b, 0xc5, 0xc3, 0xb7, 0xac, 0xb6, 0x46, 0x97, 0x5f, 0xe6, 0xd1, 0x6f, 0x57, 0x33, 0x4c,
		0xfd, 0x94, 0xcf, 0x9c, 0x65, 0x10, 0x31, 0x43, 0xbf, 0xc1, 0xca, 0x5f, 0x30, 0xb4, 0x05, 0xd8,
		0x64, 0xc0, 0x26, 0x43, 0xce, 0x4c, 0xfe, 0x90, 0x27, 0xc8, 0xd9, 0x40, 0x71, 0xa3, 0xf9, 0x9e,
		0x07, 0x0b, 0x0c, 0x28, 0xbc, 0xd4, 0x99, 0xa9, 0xbc, 0xdf, 0x7f, 0x9f, 0xa9, 0xab, 0xed, 0xa9,
		0x7c, 0x6d, 0x80, 0x9e, 0x98, 0x26, 0x92, 0x18, 0xeb, 0x89, 0xb4, 0x79, 0x28, 0x2f, 0x0e, 0xa5,
		0xa9, 0x9e, 0xa8, 0x42, 0x4f, 0x40, 0x4f, 0xbc, 0x15, 0xaf, 0x32, 0xdd, 0x8c, 0x64, 0x7e, 0x28,
		0x64, 0x79, 0xbc, 0xa6, 0x47, 0x89, 0x7d, 0xcc, 0xed, 0x51, 0x6b, 0x08, 0x9b, 0x21, 0x6c, 0x86,
		0xb0, 0x59, 0x86, 0xd5, 0xc2, 0xe5, 0x28, 0xe4, 0x8a, 0x59, 0xec, 0xe5, 0x3f, 0xb2, 0x35, 0x7b,
		0x16, 0x6d, 0x34, 0xe4, 0x28, 0x1c, 0x77, 0x6a, 0xb5, 0x43, 0x69, 0xec, 0x20, 0xbb, 0x89, 0xd6,
		0xe5, 0xea, 0x30, 0xbb, 0x77, 0x9c, 0x1d, 0x39, 0xd0, 0x76, 0x52, 0xf3, 0x73, 0x25, 0x5b, 0x42,
		0x93, 0x84, 0x76, 0xae, 0x1c, 0x58, 0xa8, 0x45, 0x4b, 0x76, 0xd6, 0xa9, 0x02, 0xeb, 0x04, 0xeb,
		0x44, 0xc1, 0x3a, 0x99, 0x82, 0xe1, 0x83, 0xe8, 0x31, 0xa5, 0x04, 0x57, 0xe5, 0xc9, 0xbd, 0x29,
		0x62, 0x6c, 0x9b, 0x12, 0xfb, 0x09, 0x7f, 0x28, 0x55, 0xff, 0xbc, 0x71, 0xcb, 0x99, 0x72, 0x13,
		0x9d, 0xb7, 0x16, 0x54, 0x97, 0x02, 0xeb, 0x5c, 0x70, 0x5d, 0x0b, 0x70, 0x6e, 0x82, 0x9c, 0x9b,
		0x40, 0xe7, 0x21, 0xd8, 0x76, 0x02, 0x6e, 0x29, 0xe8, 0xee, 0x70, 0xf4, 0x35, 0x93, 0x79, 0xb0,
		0xe7, 0x62, 0xc5, 0xcd, 0xc4, 0xf3, 0xc8, 0x41, 0x53, 0x6e, 0x36, 0x78, 0xdd, 0xa0, 0xe3, 0xa3,
		0x17, 0x73, 0xb9, 0xe1, 0xeb, 0x58, 0xaf, 0x3d, 0x6b, 0xd6, 0xf1, 0x06, 0xf0, 0xa2, 0xdd, 0x1c,
		0x36, 0x1f, 0x1d, 0x49, 0xc8, 0xe3, 0xa9, 0x72, 0xb8, 0x31, 0xbc, 0xaa, 0xa9, 0xaa, 0x1c, 0xed,
		0xed, 0x1d, 0x1c, 0xee, 0xed, 0xed, 0x1c, 0xee, 0x1e, 0xee, 0x1c, 0xef, 0xef, 0x57, 0x0e, 0x2a,
		0xfb, 0x84, 0x66, 0xef, 0xd3, 0x66, 0xb4, 0xf2, 0x73, 0xad, 0x5a, 0xda, 0xda, 0xd3, 0x75, 0xab,
		0xb6, 0x56, 0xe2, 0xf9, 0xe6, 0xe7, 0x01, 0x3b, 0xf6, 0x84, 0xdd, 0x2c, 0x32, 0xf3, 0x05, 0x66,
		0xb1, 0xb8, 0x4a, 0x42, 0x96, 0xfb, 0x2a, 0x62, 0xbe, 0xc7, 0x12, 0x5d, 0x8e, 0x7f, 0x69, 0x87,
		0xb0, 0xfe, 0xbc, 0x69, 0xa0, 0x3a, 0x50, 0x1d, 0xa8, 0x0e, 0x54, 0x07, 0xaa, 0x03, 0xd5, 0x81,
		0xea, 0x40, 0xf5, 0xcd, 0x44, 0xf5, 0x75, 0x71, 0x98, 0x2f, 0x12, 0x8f, 0x29, 0xdf, 0x2d, 0x81,
		0x2d, 0x1a, 0x05, 0x7b, 0x81, 0xbd, 0xc0, 0x5e, 0x60, 0x2f, 0xb0, 0x17, 0xd8, 0x0b, 0xec, 0x05,
		0xf6, 0x02, 0x7b, 0x2d, 0xb3, 0x17, 0x57, 0x2a, 0x52, 0x6e, 0xc9, 0x6b, 0xd6, 0x24, 0xb8, 0x0b,
		0xdc, 0x05, 0xee, 0x02, 0x77, 0x81, 0xbb, 0xc0, 0x5d, 0xe0, 0x2e, 0x70, 0x17, 0xb8, 0x6b, 0x99,
		0xbb, 0x06, 0x5e, 0x92, 0x07, 0x7b, 0x2d, 0x35, 0x0b, 0xfe, 0x02, 0x7f, 0x81, 0xbf, 0xc0, 0x5f,
		0xe0, 0x2f, 0xf0, 0x17, 0xf8, 0x0b, 0xfc, 0x05, 0xfe, 0x5a, 0xe6, 0xaf, 0x70, 0x14, 0x68, 0x91,
		0x4f, 0xee, 0xd7, 0x93, 0xa6, 0xc1, 0x61, 0xe0, 0x30, 0x70, 0x18, 0x38, 0x0c, 0x1c, 0x06, 0x0e,
		0x03, 0x87, 0x81, 0xc3, 0xc0, 0x61, 0xcb, 0x1c, 0x16, 0x79, 0x9a, 0x3b, 0xe6, 0xaf, 0x59, 0x93,
		0xe0, 0x2e, 0x70, 0x17, 0xb8, 0x0b, 0xdc, 0x05, 0xee, 0x02, 0x77, 0x81, 0xbb, 0xc0, 0x5d, 0xe0,
		0xae, 0x65, 0xee, 0x72, 0x1e, 0xf5, 0x42, 0xac, 0x0b, 0xcc, 0x05, 0xe6, 0x02, 0x73, 0x81, 0xb9,
		0xc0, 0x5c, 0x60, 0x2e, 0x30, 0x17, 0x98, 0xeb, 0x19, 0x73, 0x8d, 0x64, 0x4e, 0x3b, 0x8e, 0x8f,
		0x1a, 0x06, 0x83, 0x81, 0xc1, 0xc0, 0x60, 0x60, 0x30, 0x30, 0x18, 0x18, 0x0c, 0x0c, 0x06, 0x06,
		0x03, 0x83, 0x3d, 0x66, 0xb0, 0x5f, 0x32, 0xba, 0x95, 0xe5, 0x58, 0x45, 0x3a, 0x72, 0x4d, 0x61,
		0x8f, 0x9a, 0x06, 0x87, 0x81, 0xc3, 0xc0, 0x61, 0xe0, 0x30, 0x70, 0x18, 0x38, 0x0c, 0x1c, 0x06,
		0x0e, 0x03, 0x87, 0x2d, 0xa6, 0x25, 0x60, 0x89, 0x2e, 0x7b, 0x01, 0x67, 0xca, 0x1d, 0x80, 0x2d,
		0xb5, 0x09, 0xf2, 0x02, 0x79, 0x81, 0xbc, 0x36, 0x88, 0xbc, 0xb4, 0x08, 0xb9, 0x16, 0xde, 0xaf,
		0x04, 0xec, 0x05, 0xf6, 0x02, 0x7b, 0x81, 0xbd, 0xc0, 0x5e, 0xb8, 0x1a, 0xc1, 0xa5, 0x39, 0xc7,
		0xd5, 0x08, 0x2e, 0xf1, 0x3c, 0x1a, 0xe9, 0xdc, 0xee, 0x46, 0x78, 0xa1, 0x6d, 0xe0, 0x3a, 0x70,
		0x1d, 0xb8, 0xbe, 0x41, 0xb8, 0x8e, 0x40, 0x29, 0x60, 0x1d, 0xb0, 0x0e, 0x58, 0x07, 0xac, 0xbb,
		0xf8, 0x7e, 0x5b, 0x12, 0x73, 0x7f, 0x3b, 0xc2, 0xa3, 0x56, 0x41, 0x5f, 0xa0, 0x2f, 0xd0, 0x17,
		0xe8, 0x0b, 0xf4, 0x05, 0xfa, 0x02, 0x7d, 0x81, 0xbe, 0x40, 0x5f, 0x8f, 0xe8, 0xcb, 0x75, 0x8d,
		0xde, 0xa5, 0x36, 0x41, 0x5e, 0x20, 0x2f, 0x90, 0x17, 0xc8, 0x0b, 0xe4, 0x05, 0xf2, 0x02, 0x79,
		0x81, 0xbc, 0x40, 0x5e, 0x8f, 0xc8, 0x2b, 0xaf, 0x0a, 0xbd, 0x2f, 0xb4, 0x0d, 0x12, 0x03, 0x89,
		0x81, 0xc4, 0x40, 0x62, 0x20, 0x31, 0x90, 0x18, 0x48, 0x0c, 0x24, 0x06, 0x12, 0x7b, 0x44, 0x62,
		0xae, 0x6b, 0xf4, 0x2e, 0xb5, 0x09, 0xf2, 0x02, 0x79, 0x81, 0xbc, 0x40, 0x5e, 0x20, 0x2f, 0x90,
		0x17, 0xc8, 0x0b, 0xe4, 0x05, 0xf2, 0x7a, 0x44, 0x5e, 0xee, 0x23, 0x5f, 0x88, 0x77, 0x81, 0xba,
		0x40, 0x5d, 0xa0, 0x2e, 0x50, 0x17, 0xa8, 0x0b, 0xd4, 0x05, 0xea, 0x02, 0x75, 0x3d, 0xa7, 0xae,
		0x7c, 0xea, 0xf4, 0x3e, 0x6b, 0x19, 0x14, 0x06, 0x0a, 0x03, 0x85, 0x81, 0xc2, 0x40, 0x61, 0xa0,
		0x30, 0x50, 0x18, 0x28, 0xac, 0x68, 0x14, 0xf6, 0x69, 0x85, 0x6b, 0xbe, 0x54, 0x93, 0x32, 0xd2,
		0x6c, 0x3c, 0x95, 0x56, 0xcb, 0xbc, 0x94, 0x78, 0xd7, 0x3c, 0x64, 0x31, 0xd3, 0xd7, 0x63, 0x8b,
		0xb0, 0x1d, 0xc5, 0x5c, 0x7a, 0x13, 0x42, 0x2a, 0x8b, 0xb1, 0x6d, 0x18, 0x30, 0x8f, 0x27, 0xdb,
		0x2f, 0xfd, 0xb8, 0x9d, 0x8c, 0xfa, 0x4b, 0x7f, 0x5f, 0xfe, 0x6d, 0x3b, 0xd1, 0x4c, 0xf3, 0xed,
		0x99, 0x79, 0xb1, 0x01, 0xbf, 0x52, 0xa2, 0xd5, 0xc8, 0xd3, 0x72, 0x66, 0xb0, 0xda, 0x8b, 0xb7,
		0x6b, 0x2e, 0xbe, 0xf9, 0xea, 0xa5, 0x1f, 0xaf, 0xba, 0xcb, 0x2f, 0xf7, 0xe8, 0xb7, 0xab, 0xee,
		0xf8, 0xe5, 0xae, 0x4e, 0xe7, 0x2f, 0xf7, 0x69, 0x35, 0x73, 0x6d, 0x30, 0xcf, 0x25, 0x9f, 0x27,
		0x9e, 0x12, 0xb1, 0xd5, 0x24, 0x2f, 0x8c, 0xfd, 0x72, 0x63, 0x86, 0x6b, 0xce, 0x4e, 0xfd, 0x59,
		0x93, 0xb7, 0x0b, 0xe2, 0x76, 0x46, 0xda, 0xae, 0x08, 0xdb, 0x39, 0x59, 0x3b, 0x27, 0x6a, 0x97,
		0x24, 0xbd, 0x5a, 0x1d, 0x69, 0x4d, 0xcc, 0x8b, 0xd5, 0x92, 0x68, 0x25, 0xe4, 0xd0, 0x66, 0xb9,
		0xcc, 0x64, 0xa7, 0x72, 0xb4, 0xc1, 0xfa, 0x86, 0x4b, 0xd6, 0x0f, 0xb8, 0x6f, 0xaf, 0x6b, 0xe6,
		0x0d, 0x19, 0xce, 0x5b, 0x9d, 0x0f, 0xd8, 0x28, 0x98, 0xac, 0xb7, 0xf1, 0xf2, 0x85, 0xba, 0x82,
		0xba, 0x82, 0xba, 0xca, 0xb2, 0x5a, 0xfa, 0x51, 0x14, 0x70, 0x26, 0x5d, 0xe8, 0xab, 0xca, 0x06,
		0xeb, 0x2b, 0x31, 0x10, 0xd2, 0xe7, 0x77, 0xf6, 0xfa, 0x6a, 0xde, 0x10, 0x14, 0x0d, 0x14, 0x0d,
		0x14, 0x4d, 0x86, 0xd5, 0x32, 0x12, 0x52, 0xef, 0x56, 0x1d, 0xe8, 0x99, 0x43, 0x8b, 0x26, 0xdc,
		0x84, 0x0b, 0x1d, 0xc4, 0x55, 0x5d, 0x86, 0x07, 0x1d, 0xc7, 0x9a, 0x5c, 0x87, 0x03, 0xf3, 0x08,
		0x24, 0x39, 0x08, 0xff, 0x39, 0x0d, 0xfb, 0xe5, 0x35, 0x05, 0x7b, 0xd5, 0xe3, 0xbd, 0xe3, 0x83,
		0xc3, 0xea, 0xf1, 0xfe, 0x06, 0xcf, 0xc5, 0x9a, 0x82, 0x68, 0x3f, 0x57, 0xaa, 0x08, 0xad, 0x2b,
		0x0a, 0xbb, 0xb3, 0x71, 0xb9, 0x55, 0x10, 0x76, 0x5f, 0x39, 0xd8, 0x51, 0xc5, 0x60, 0xb3, 0x45,
		0xf2, 0x73, 0x35, 0x64, 0xe9, 0x88, 0x2b, 0x6d, 0xa8, 0x72, 0xc9, 0x0b, 0xde, 0x01, 0x99, 0x82,
		0x4c, 0x41, 0xa6, 0x20, 0x53, 0x90, 0x29, 0xc8, 0x14, 0x64, 0x4a, 0x89, 0x4c, 0x57, 0x82, 0x2b,
		0xd3, 0xbb, 0xc0, 0xae, 0x67, 0xda, 0xc6, 0x12, 0x5a, 0x96, 0x1b, 0x03, 0x76, 0x00, 0x3b, 0x80,
		0x1d, 0x19, 0x56, 0x8b, 0x9b, 0x9b, 0xbf, 0x1c, 0x24, 0xd3, 0x81, 0x3d, 0xc0, 0x1e, 0xa4, 0xd8,
		0x23, 0xbf, 0xe4, 0x37, 0x50, 0x08, 0xe2, 0x63, 0x88, 0x8f, 0xb9, 0x05, 0xce, 0x68, 0x28, 0x3c,
		0x16, 0x38, 0x80, 0xcd, 0x59, 0x43, 0x00, 0x4d, 0x80, 0x26, 0x40, 0x33, 0xc3, 0x6a, 0x59, 0x7f,
		0x8a, 0x07, 0x6c, 0x0a, 0x6c, 0x8a, 0x4b, 0x9b, 0x32, 0x4b, 0xf2, 0xb6, 0x34, 0x28, 0x93, 0x56,
		0x60, 0x4d, 0x60, 0x4d, 0x60, 0x4d, 0x32, 0xac, 0x96, 0xb5, 0xe7, 0x37, 0xc3, 0x98, 0xc0, 0x98,
		0xb8, 0x34, 0x26, 0x51, 0xcc, 0x55, 0x39, 0xd1, 0x4c, 0x8f, 0x12, 0x7b, 0x9b, 0xb2, 0xdc, 0x18,
		0x4c, 0x0b, 0x4c, 0x0b, 0x4c, 0x4b, 0x86, 0xd5, 0xc2, 0xe5, 0x28, 0xe4, 0x8a, 0x59, 0x9c, 0x3b,
		0x7b, 0x64, 0x5f, 0xf6, 0x2c, 0xda, 0x68, 0xc8, 0x51, 0x38, 0xee, 0xd4, 0xdf, 0xb0, 0x51, 0xb0,
		0x51, 0x8e, 0x6d, 0xd4, 0xa7, 0x1c, 0x97, 0x92, 0xed, 0x61, 0xdf, 0x1c, 0x0f, 0xf9, 0x1a, 0xac,
		0x9b, 0xdc, 0xce, 0xf4, 0x66, 0x5b, 0x25, 0xe9, 0x67, 0x2c, 0xdd, 0x27, 0x53, 0xce, 0xe9, 0x58,
		0x1c, 0xb3, 0xa6, 0x06, 0x96, 0xce, 0x45, 0xa2, 0x6b, 0x5a, 0xab, 0x4c, 0xb3, 0x5f, 0x6a, 0x09,
		0xd9, 0x18, 0x0b, 0xba, 0x9c, 0xe8, 0x1f, 0x39, 0x0a, 0x82, 0xdf, 0x32, 0x3c, 0xcc, 0xee, 0xcc,
		0x1f, 0x6e, 0x2b, 0x9f, 0x2b, 0xee, 0x9f, 0xdc, 0xcf, 0x1e, 0x75, 0x3a, 0x80, 0x86, 0xc2, 0x90,
		0x8b, 0x10, 0x64, 0x58, 0xfe, 0x39, 0x2c, 0xfb, 0x74, 0x0b, 0xfe, 0xfd, 0xe5, 0xfb, 0xf6, 0x27,
		0xde, 0x99, 0x97, 0xac, 0xf3, 0xe1, 0x6a, 0x1e, 0x52, 0x0c, 0xbd, 0x9b, 0x21, 0x7f, 0x7b, 0x94,
		0x5f, 0x1f, 0xbb, 0x97, 0xff, 0xe5, 0x95, 0xd1, 0x9c, 0xab, 0x85, 0x37, 0xc2, 0x57, 0xe9, 0xb4,
		0x40, 0x26, 0xa9, 0xcf, 0x24, 0xe5, 0xe9, 0xa4, 0xfa, 0xb5, 0xfe, 0xa5, 0x5c, 0x25, 0xe6, 0xab,
		0xe3, 0x8d, 0xf5, 0x60, 0xba, 0x0e, 0x5e, 0x9e, 0xf9, 0xe7, 0xf3, 0xfa, 0xf8, 0x2f, 0x4f, 0x46,
		0xe0, 0xbd, 0x9e, 0x67, 0xed, 0xf1, 0x0b, 0xfd, 0xcc, 0xd6, 0xbf, 0xc7, 0xbd, 0x7a, 0x78, 0xf7,
		0xa5, 0xf7, 0x2e, 0x05, 0x81, 0x1f, 0x3f, 0x7b, 0xdb, 0x87, 0x4d, 0xbb, 0xf1, 0xbf, 0x3e, 0xe9,
		0xe5, 0x9c, 0xcf, 0x9f, 0xfc, 0xf9, 0x35, 0xc7, 0xf5, 0x2d, 0x87, 0x74, 0xd9, 0xd1, 0x7c, 0xe1,
		0xab, 0xd2, 0xb8, 0x90, 0xa9, 0x5d, 0xc3, 0xd4, 0x2e, 0xdf, 0x53, 0x57, 0x6e, 0xf2, 0x62, 0x19,
		0x57, 0x42, 0x5d, 0xbc, 0x2c, 0xbb, 0x25, 0x6f, 0x3e, 0x4a, 0xaf, 0xf4, 0xe6, 0xa1, 0x60, 0xd7,
		0xe4, 0x73, 0xaf, 0xa9, 0x90, 0x17, 0xa7, 0x20, 0x75, 0x0c, 0x21, 0x4d, 0x8c, 0x20, 0xc5, 0xd4,
		0x64, 0xf5, 0xf2, 0x33, 0x7b, 0xf1, 0x99, 0xbd, 0xf4, 0x74, 0x53, 0x67, 0xa6, 0xb6, 0x5f, 0x9b,
		0xd2, 0x87, 0xa9, 0xbd, 0x66, 0x49, 0x22, 0x92, 0xb2, 0x78, 0xbf, 0xac, 0xc2, 0xc3, 0x34, 0x3f,
		0x3c, 0xf3, 0x4e, 0xcf, 0xd2, 0x85, 0x95, 0x52, 0x87, 0x8f, 0xb2, 0x84, 0x89, 0x32, 0x2c, 0x05,
		0xd3, 0xc0, 0x8f, 0x71, 0x80, 0xc7, 0x38, 0x90, 0x93, 0x6d, 0xa9, 0xb8, 0xe1, 0xa7, 0xd4, 0xa1,
		0x96, 0xec, 0xd1, 0xfa, 0x94, 0x51, 0xf9, 0x37, 0x18, 0xe6, 0xb7, 0x34, 0x2b, 0xbb, 0xac, 0xd3,
		0x74, 0xe1, 0x85, 0xe5, 0x3d, 0x7d, 0x10, 0x6b, 0x1c, 0x6b, 0xdc, 0x72, 0x91, 0x64, 0x0d, 0x11,
		0xa6, 0x0c, 0x05, 0x9a, 0x09, 0x46, 0xda, 0x32, 0x3a, 0x19, 0xcb, 0xe5, 0x64, 0x2c, 0x8b, 0x03,
		0xb9, 0xf9, 0x90, 0x72, 0x93, 0x3e, 0x2f, 0x28, 0x65, 0xfe, 0x8f, 0x99, 0x0c, 0x5c, 0xf3, 0x20,
		0x88, 0xca, 0x5a, 0x84, 0x5c, 0xa5, 0x97, 0x83, 0xe5, 0x87, 0xb0, 0xb8, 0xb1, 0xb8, 0x9f, 0x8d,
		0xf8, 0x48, 0x48, 0x9d, 0xea, 0x60, 0x45, 0x86, 0x03, 0x14, 0x19, 0x0f, 0x4a, 0x64, 0x8b, 0xbf,
		0x66, 0x0e, 0xd7, 0x1b, 0x6e, 0x14, 0x9b, 0x1e, 0x64, 0xb0, 0x49, 0x8d, 0xff, 0x3b, 0x5b, 0x34,
		0x79, 0xe5, 0x43, 0x61, 0x7f, 0xa0, 0xc0, 0x6a, 0x74, 0x1c, 0xc5, 0x66, 0x7f, 0xe6, 0xa0, 0x9c,
		0x93, 0x51, 0x1c, 0x2b, 0x9e, 0x24, 0x65, 0x1d, 0xdc, 0x94, 0x99, 0x7f, 0xc3, 0x95, 0x16, 0x09,
		0x9f, 0x49, 0x7f, 0x4a, 0x5d, 0xfd, 0x46, 0x1b, 0x50, 0xdd, 0x50, 0xdd, 0xcf, 0x46, 0x5c, 0xf8,
		0x5c, 0x6a, 0xa1, 0xef, 0x15, 0x1f, 0x64, 0x61, 0x93, 0x14, 0x12, 0x5b, 0x6a, 0xce, 0x9a, 0x3e,
		0x61, 0x49, 0x86, 0x79, 0x9a, 0xbf, 0xd8, 0xf9, 0x79, 0xbd, 0x73, 0xd5, 0x3b, 0xff, 0x9e, 0x76,
		0x9a, 0x26, 0xea, 0x25, 0xdb, 0x86, 0x7e, 0x46, 0xbd, 0x37, 0x7f, 0xb3, 0x4e, 0xfb, 0xb2, 0x77,
		0xd5, 0xac, 0x97, 0xf2, 0xd0, 0xc8, 0x86, 0xaf, 0xd4, 0xfd, 0x47, 0xb7, 0xd7, 0x68, 0x5d, 0x5d,
		0xd4, 0x5a, 0x8d, 0x4d, 0x7a, 0xad, 0xc9, 0x48, 0xd5, 0x1b, 0xdd, 0xd3, 0xcb, 0x66, 0xa7, 0xd7,
		0x6c, 0x5f, 0x6c, 0xe0, 0x90, 0x9d, 0xd6, 0x3a, 0xb5, 0x93, 0xe6, 0x79, 0xb3, 0xd7, 0x6c, 0x74,
		0x37, 0xf0, 0xf5, 0x36, 0x74, 0xf0, 0x5a, 0xb5, 0x8b, 0xda, 0x97, 0x46, 0xab, 0x71, 0xd1, 0xbb,
		0xaa, 0xd5, 0xeb, 0x97, 0x8d, 0xee, 0x46, 0x8d, 0xdd, 0xe9, 0xd7, 0x5a, 0xb7, 0xdb, 0xec, 0x66,
		0x93, 0xd1, 0x54, 0x9f, 0xfc, 0x99, 0xb3, 0xfe, 0xce, 0x94, 0x50, 0x60, 0x94, 0x48, 0x60, 0x94,
		0x40, 0x90, 0x2d, 0x71, 0xc0, 0x10, 0x7e, 0xee, 0x13, 0xcd, 0xc3, 0x72, 0x96, 0xda, 0xea, 0x0f,
		0xd0, 0xf3, 0xfc, 0x59, 0xc0, 0x0e, 0x60, 0xc7, 0x45, 0x80, 0x3e, 0xc5, 0x67, 0xcf, 0xb9, 0x1c,
		0x4e, 0x36, 0x89, 0xe1, 0xa9, 0x16, 0xcb, 0x53, 0xad, 0xee, 0xc3, 0x31, 0x5d, 0xd6, 0xcd, 0xa9,
		0x4e, 0x82, 0x3d, 0x55, 0xca, 0x29, 0x0e, 0x7e, 0x41, 0x1b, 0x43, 0x1b, 0x43, 0x1b, 0x43, 0x1b,
		0x43, 0x1b, 0xbf, 0xf3, 0x2f, 0xf9, 0x25, 0xf1, 0x8d, 0x35, 0xc4, 0xf6, 0xe4, 0x7f, 0xde, 0xcc,
		0x65, 0xda, 0x7a, 0x2b, 0xab, 0xed, 0x3c, 0xf0, 0xe3, 0xab, 0xc9, 0xff, 0xcc, 0x14, 0x75, 0xda,
		0x34, 0xbd, 0x17, 0xf2, 0xc8, 0x96, 0xf2, 0xea, 0xde, 0xcd, 0xbe, 0x7a, 0x37, 0xf7, 0x14, 0x19,
		0x58, 0x4e, 0xec, 0x84, 0xe3, 0x0c, 0xac, 0x87, 0x0c, 0xd1, 0xd4, 0x48, 0x91, 0x36, 0xbf, 0xfb,
		0x9d, 0x09, 0x07, 0x50, 0x50, 0x00, 0x8a, 0xf7, 0x16, 0xd0, 0xe2, 0x83, 0xef, 0x64, 0x69, 0xbe,
		0x3a, 0x41, 0xef, 0x6a, 0x3a, 0x83, 0x25, 0x95, 0x79, 0x69, 0x99, 0x2c, 0x31, 0x8b, 0xa5, 0x66,
		0xba, 0xe4, 0xac, 0x97, 0x9e, 0xf5, 0x12, 0xb4, 0x5b, 0x8a, 0x19, 0xed, 0x7a, 0xca, 0x39, 0x4b,
		0xbb, 0x44, 0x17, 0x0f, 0x98, 0xde, 0xe4, 0x65, 0x79, 0x83, 0x97, 0xe5, 0xcd, 0x5d, 0xa6, 0xe4,
		0x66, 0x7a, 0x3a, 0xda, 0xe6, 0x54, 0xb4, 0x85, 0x4c, 0xd8, 0xca, 0x86, 0x33, 0x19, 0x71, 0x26,
		0x2b, 0x6e, 0x64, 0x26, 0x9b, 0xec, 0x18, 0xb8, 0x13, 0x5b, 0x56, 0x27, 0x9b, 0x1d, 0x94, 0x5e,
		0x32, 0x2c, 0xb9, 0xf4, 0x77, 0x2e, 0xbe, 0x95, 0x51, 0xbd, 0x1d, 0x9b, 0x3a, 0x3b, 0x10, 0x6f,
		0x88, 0x37, 0x05, 0xf1, 0x66, 0x09, 0x7f, 0x38, 0x7a, 0x55, 0x4e, 0x97, 0xb0, 0xf0, 0xaa, 0xa4,
		0x1b, 0x5c, 0x1f, 0x50, 0xea, 0x2c, 0x1c, 0x67, 0xaf, 0x2c, 0x06, 0x9f, 0x97, 0x8e, 0x81, 0x3d,
		0xf9, 0xc3, 0xec, 0xf7, 0x89, 0x2c, 0x6e, 0x80, 0x46, 0x49, 0x64, 0x14, 0xc5, 0x42, 0x0e, 0xcd,
		0xb5, 0xca, 0xa2, 0x05, 0x73, 0xee, 0x98, 0xd4, 0x1e, 0xf8, 0x20, 0x9a, 0x29, 0x8a, 0x75, 0x59,
		0x73, 0x15, 0x42, 0x3b, 0xbd, 0xa0, 0x9d, 0x16, 0x83, 0x03, 0x00, 0x59, 0x21, 0x80, 0x6c, 0xf8,
		0x51, 0xff, 0x87, 0xf8, 0xe3, 0x8b, 0x27, 0xcc, 0x33, 0xb9, 0xea, 0x29, 0x83, 0x94, 0x2f, 0x9e,
		0x30, 0x7f, 0x2b, 0x72, 0x99, 0x7d, 0x4c, 0x53, 0x8c, 0x67, 0x36, 0xdc, 0x33, 0xc1, 0xbc, 0x8c,
		0x4a, 0x14, 0x91, 0x8b, 0x8f, 0x10, 0xb9, 0xc8, 0xac, 0xec, 0x1e, 0x0e, 0x99, 0x73, 0x36, 0xc8,
		0xc6, 0x5e, 0x26, 0xcc, 0xb5, 0x60, 0xad, 0xdf, 0x7f, 0x9f, 0x09, 0xff, 0x76, 0x7a, 0x9a, 0x72,
		0x24, 0x98, 0x5c, 0x0c, 0xaf, 0xfb, 0x91, 0x4a, 0x0c, 0xa4, 0x73, 0xf1, 0x68, 0xce, 0xc1, 0xc5,
		0x2a, 0x44, 0x14, 0xc1, 0xc5, 0xa7, 0x0b, 0xd6, 0x22, 0x78, 0x30, 0x6f, 0xc1, 0x0c, 0xd3, 0x2b,
		0x08, 0x20, 0x20, 0x80, 0x90, 0x17, 0x9e, 0x67, 0x15, 0x87, 0xc5, 0x83, 0x1e, 0x8b, 0x59, 0x5f,
		0x04, 0x42, 0x0b, 0xee, 0xa0, 0xe6, 0xe8, 0xa3, 0xd6, 0xec, 0x8a, 0x8e, 0x56, 0x6c, 0x8b, 0x8e,
		0x56, 0x37, 0xa3, 0xe8, 0xa8, 0xa1, 0x18, 0xb9, 0x12, 0x27, 0xe7, 0x62, 0xe5, 0x5c, 0xbc, 0xdc,
		0x8a, 0x99, 0x99, 0xb8, 0x19, 0x8a, 0x9d, 0xb5, 0xf8, 0x3d, 0x17, 0xc3, 0x7b, 0xfb, 0x99, 0x7e,
		0x26, 0x8c, 0xf7, 0xb6, 0x53, 0x6d, 0x27, 0x92, 0xd6, 0x16, 0x2d, 0x0f, 0x11, 0xcd, 0x41, 0x54,
		0x5d, 0x8b, 0x6c, 0x6e, 0xa2, 0x9b, 0x9b, 0x08, 0xe7, 0x23, 0xca, 0x76, 0x22, 0x6d, 0x29, 0xda,
		0xce, 0x44, 0xfc, 0x41, 0xd4, 0xb3, 0x25, 0x64, 0xa4, 0x17, 0xf7, 0xac, 0x51, 0xa0, 0x15, 0x88,
		0xbc, 0x73, 0xd1, 0xcf, 0x43, 0x05, 0xe4, 0xa8, 0x0a, 0xf2, 0x52, 0x09, 0xb9, 0xab, 0x86, 0xdc,
		0x55, 0x44, 0xbe, 0xaa, 0xc2, 0x8d, 0xca, 0x70, 0xa4, 0x3a, 0x1e, 0xba, 0x6a, 0x57, 0x10, 0xf9,
		0xd5, 0x76, 0x8d, 0x03, 0xc7, 0x8b, 0x48, 0xcc, 0xe2, 0xa7, 0xed, 0x65, 0x82, 0x7f, 0xf8, 0xe5,
		0x7e, 0xdb, 0xa9, 0x76, 0xd9, 0xb2, 0x88, 0x41, 0x5f, 0xcc, 0xdf, 0x79, 0xf1, 0xd3, 0xd5, 0xe9,
		0xd2, 0x3b, 0x3f, 0xfc, 0x72, 0x9f, 0x29, 0x5c, 0x9d, 0xff, 0x4a, 0x72, 0x71, 0x25, 0xa6, 0xd5,
		0x6d, 0x43, 0xaf, 0x07, 0x36, 0xcc, 0x6f, 0x1f, 0x7a, 0xcd, 0x6e, 0xec, 0xc0, 0x6e, 0xc0, 0x6e,
		0xc0, 0x6e, 0xb8, 0x59, 0xb3, 0xd6, 0xd7, 0x5a, 0xbc, 0xba, 0x62, 0xb3, 0x6f, 0x57, 0xa4, 0x06,
		0xc7, 0x43, 0x87, 0x6d, 0x2e, 0x6d, 0x77, 0x4c, 0xea, 0xf7, 0x6f, 0x67, 0xcf, 0x1d, 0xd9, 0x6c,
		0xbd, 0x3e, 0xbd, 0x95, 0xc0, 0xb9, 0x62, 0x37, 0xbd, 0xec, 0x60, 0xa5, 0x1e, 0x41, 0x15, 0x9a,
		0x1d, 0x9a, 0xfd, 0x83, 0x6a, 0x76, 0x57, 0x41, 0x85, 0x45, 0x83, 0xa6, 0x29, 0xf4, 0xa9, 0x25,
		0xc1, 0x2c, 0xc5, 0x7e, 0xc5, 0xd8, 0x98, 0x1b, 0x3e, 0xe6, 0xa9, 0x6c, 0x56, 0xa0, 0x74, 0xf2,
		0x56, 0x3e, 0x2b, 0x53, 0x42, 0x2b, 0x53, 0x46, 0xab, 0x51, 0x4a, 0x6e, 0x95, 0x93, 0x63, 0x25,
		0x95, 0x1f, 0x86, 0x3e, 0x5b, 0xf1, 0xf6, 0xd7, 0x43, 0xbf, 0x4b, 0x2f, 0x95, 0x4f, 0x9b, 0x39,
		0x61, 0x0e, 0x27, 0xcb, 0x6d, 0x94, 0x20, 0xcf, 0x68, 0x01, 0xd4, 0x3f, 0xd4, 0x3f, 0xd4, 0x3f,
		0xd4, 0xbf, 0x51, 0xb5, 0x4d, 0x63, 0x13, 0xb0, 0x9f, 0x43, 0xdb, 0x46, 0xd5, 0x3c, 0x8d, 0x07,
		0x6a, 0x52, 0xfd, 0xf3, 0x69, 0x89, 0xc6, 0x7f, 0xe4, 0x25, 0x64, 0x06, 0xb5, 0x43, 0xb3, 0xfe,
		0xdf, 0xbf, 0x73, 0x6b, 0xf9, 0xd1, 0xb8, 0xf5, 0x7e, 0xb4, 0xaf, 0x26, 0x55, 0x37, 0x5b, 0xb5,
		0xd3, 0xab, 0xcb, 0xc6, 0x79, 0xed, 0x1f, 0xa5, 0xdc, 0xbe, 0xf8, 0xef, 0xdf, 0xa8, 0x8f, 0xd6,
		0x65, 0xfb, 0x5b, 0xaf, 0x71, 0x89, 0x11, 0x7a, 0x7d, 0x84, 0x7e, 0x9c, 0xd7, 0x2e, 0xae, 0x6a,
		0xa7, 0xa7, 0x8d, 0x6e, 0xf7, 0xaa, 0xd3, 0x6e, 0x5e, 0xf4, 0x30, 0x58, 0xaf, 0x0f, 0x56, 0xbb,
		0xf7, 0x15, 0xab, 0xe9, 0xad, 0x01, 0xea, 0x5e, 0x7d, 0x3f, 0xaf, 0x5d, 0x60, 0x84, 0x5e, 0x1f,
		0xa1, 0x53, 0x8c, 0xd0, 0x7b, 0x3a, 0xbb, 0xd1, 0x69, 0xd4, 0xa0, 0xb5, 0xdf, 0xa6, 0x80, 0xc6,
		0x79, 0xa3, 0xf3, 0xb5, 0x7d, 0xd1, 0xc0, 0x20, 0xbd, 0x3e, 0x48, 0xf5, 0xf6, 0x69, 0xb7, 0xd9,
		0xbd, 0x3a, 0xad, 0x9d, 0x9c, 0x37, 0xae, 0xea, 0x8d, 0xef, 0xcd, 0x53, 0x0c, 0xd7, 0x1b, 0xc3,
		0x35, 0x06, 0xca, 0x93, 0xcb, 0x66, 0xfd, 0x0b, 0x46, 0xe9, 0x2d, 0x0b, 0xd7, 0xab, 0xf5, 0x9a,
		0xed, 0x8b, 0xab, 0xf6, 0xc5, 0x79, 0x9e, 0xe4, 0x9d, 0x4b, 0xcb, 0x3f, 0x37, 0xdd, 0xdd, 0x47,
		0xd2, 0x5c, 0xa6, 0x76, 0xff, 0x3f, 0xf6, 0xbe, 0xac, 0x3b, 0x6d, 0x64, 0x6b, 0xfb, 0xde, 0xbf,
		0x82, 0xc5, 0x3a, 0x17, 0xf6, 0x39, 0x96, 0x0d, 0x18, 0xb0, 0x9d, 0x9b, 0x5e, 0xc4, 0x21, 0x69,
		0x7f, 0xed, 0xe9, 0xb5, 0x49, 0x9f, 0x95, 0x8e, 0x39, 0x2c, 0x19, 0xca, 0x8e, 0xde, 0x80, 0xc4,
		0x2b, 0x09, 0x9f, 0xb8, 0x13, 0xfe, 0xfb, 0xb7, 0x10, 0xf3, 0x5c, 0xc3, 0x2e, 0x4d, 0x3c, 0xb9,
		0xe8, 0xa4, 0x13, 0xab, 0x40, 0x55, 0x7b, 0x78, 0xf6, 0x53, 0x7b, 0x08, 0x23, 0x69, 0x8e, 0xf2,
		0xfe, 0x3d, 0x13, 0x4e, 0xce, 0xdc, 0x43, 0xf0, 0x95, 0xe3, 0x92, 0x5a, 0x11, 0x69, 0xc6, 0xf7,
		0xf6, 0xe1, 0xe6, 0xdc, 0x4b, 0x09, 0x4d, 0x2e, 0xd8, 0xba, 0x9a, 0xcc, 0x64, 0x83, 0xed, 0x8b,
		0x4a, 0x4c, 0x3e, 0xd8, 0xba, 0xa8, 0xd0, 0x64, 0x04, 0xdd, 0xe7, 0x49, 0x6c, 0x49, 0xc2, 0xb0,
		0x20, 0x59, 0x92, 0xdc, 0x22, 0xcd, 0x36, 0x43, 0xcd, 0x5a, 0xf4, 0x13, 0x52, 0xe2, 0x45, 0x24,
		0x3d, 0xda, 0xa4, 0x46, 0xa5, 0xc6, 0x50, 0x8f, 0x88, 0xc8, 0xc9, 0x85, 0xf8, 0xa9, 0x4a, 0x9c,
		0xa8, 0x6a, 0x11, 0x0e, 0x4d, 0xd1, 0x0d, 0x59, 0xa9, 0x6b, 0x0e, 0xa5, 0xae, 0x0b, 0x8e, 0x1b,
		0xa5, 0xae, 0x3b, 0x65, 0x07, 0x55, 0x8b, 0x53, 0x28, 0x2d, 0xa0, 0x42, 0xd1, 0x49, 0x48, 0xb6,
		0xaf, 0xe7, 0xf9, 0x4e, 0xc7, 0xf0, 0xdb, 0xaf, 0x14, 0x15, 0xff, 0x33, 0x8b, 0xa1, 0xe0, 0x1f,
		0x56, 0x70, 0x47, 0xac, 0xa0, 0x72, 0xc1, 0xbf, 0xdf, 0x7e, 0xa5, 0xab, 0xf4, 0x1f, 0x2c, 0x86,
		0x12, 0xff, 0x10, 0x94, 0x93, 0x5a, 0x49, 0xb5, 0x29, 0xab, 0x36, 0xa5, 0xd5, 0xa3, 0xbc, 0xf1,
		0x20, 0x7c, 0x50, 0xe2, 0x1f, 0x07, 0xd5, 0xd7, 0x61, 0x02, 0x34, 0x9a, 0x02, 0x5d, 0x26, 0x41,
		0xbb, 0x69, 0xd0, 0x6e, 0x22, 0xf4, 0x9a, 0x0a, 0x1a, 0x93, 0x41, 0x64, 0x3a, 0x74, 0x71, 0x8c,
		0x7a, 0xa2, 0xa5, 0x29, 0x64, 0x3f, 0xf6, 0xdb, 0xaf, 0xf1, 0x2e, 0xed, 0x0f, 0xbe, 0x6b, 0xad,
		0xfd, 0xea, 0x35, 0x6a, 0xed, 0xd7, 0x14, 0x56, 0xf4, 0x3b, 0x3d, 0x8b, 0xde, 0x4f, 0x0c, 0x16,
		0x45, 0x3d, 0x3f, 0x9c, 0x04, 0x9c, 0x44, 0x2c, 0x9d, 0x04, 0xea, 0xf9, 0x17, 0xeb, 0xf9, 0x07,
		0x06, 0x2b, 0x5d, 0x46, 0xdd, 0xf0, 0x7a, 0x4f, 0x3e, 0xe5, 0x39, 0xcf, 0x1a, 0xf7, 0xc9, 0xe2,
		0x30, 0xf2, 0x30, 0xf2, 0x30, 0xf2, 0x30, 0xf2, 0x49, 0x31, 0xf2, 0x13, 0xc3, 0x85, 0xde, 0x2d,
		0xdb, 0x4e, 0x19, 0xbd, 0x5b, 0x60, 0xe0, 0x61, 0xe0, 0x63, 0x6c, 0xe0, 0xc9, 0x7b, 0xb7, 0x50,
		0x52, 0x01, 0x1a, 0x29, 0x01, 0x4d, 0xa8, 0x51, 0x1b, 0x7a, 0xd4, 0x69, 0x64, 0x42, 0x30, 0x36,
		0xba, 0x8d, 0x4e, 0x68, 0xc6, 0x27, 0x34, 0x23, 0x14, 0x8e, 0x31, 0xa2, 0x35, 0x4a, 0xc4, 0xc6,
		0x49, 0x1f, 0x0a, 0x5d, 0x81, 0x53, 0x5c, 0xf1, 0xd1, 0x87, 0x42, 0xa0, 0xe5, 0x6c, 0x07, 0x5a,
		0xb6, 0xe8, 0x60, 0x0c, 0x42, 0x60, 0x0e, 0xe0, 0x0b, 0xe0, 0x0b, 0xe0, 0x0b, 0xe0, 0x0b, 0xe0,
		0x0b, 0x08, 0x7d, 0x81, 0x5e, 0x27, 0x00, 0xeb, 0x0f, 0xeb, 0x0f, 0xeb, 0x0f, 0xeb, 0x4f, 0x2f,
		0xf1, 0x96, 0xed, 0x9f, 0x14, 0x34, 0x1a, 0xff, 0x13, 0x0d, 0x4b, 0xdf, 0x9b, 0xf6, 0x0b, 0xd3,
		0xd6, 0xda, 0x4a, 0x5f, 0x59, 0x7d, 0xf6, 0xda, 0xb2, 0xb5, 0x19, 0x80, 0x25, 0xaf, 0x7b, 0xa8,
		0xf7, 0x63, 0x82, 0x06, 0x63, 0xd9, 0x77, 0x99, 0x42, 0xbe, 0x78, 0x5a, 0x3c, 0x3b, 0x29, 0x17,
		0xcf, 0x34, 0x7f, 0xe0, 0x47, 0xd7, 0x6c, 0xfa, 0x96, 0x63, 0x7f, 0xb0, 0x5e, 0xac, 0xa0, 0xdc,
		0x35, 0x97, 0xc4, 0xa6, 0x0d, 0xd9, 0x6b, 0xf3, 0x47, 0x68, 0x32, 0x90, 0x0b, 0x5b, 0x06, 0x4e,
		0x53, 0x24, 0x03, 0x7b, 0xc9, 0x58, 0xb5, 0xbe, 0x03, 0xe0, 0xfa, 0x75, 0x24, 0x67, 0x9a, 0xd0,
		0xf5, 0x70, 0x79, 0xc0, 0x6b, 0xc0, 0x6b, 0xc0, 0x6b, 0xc0, 0x6b, 0x52, 0x89, 0x7f, 0xb2, 0x6c,
		0xd3, 0x7d, 0xd3, 0x88, 0xaf, 0xcf, 0xd1, 0x8f, 0x88, 0x47, 0xd6, 0x13, 0x98, 0xe1, 0x1f, 0xe7,
		0x3e, 0x44, 0xf3, 0x09, 0xfe, 0xf1, 0x6a, 0x3f, 0x44, 0x90, 0x1d, 0xa4, 0x27, 0x07, 0x14, 0xc9,
		0x9f, 0x71, 0x45, 0x11, 0xc8, 0x0d, 0x8a, 0x06, 0x25, 0x20, 0xf9, 0x53, 0x99, 0xe5, 0xd1, 0x9a,
		0xfc, 0x19, 0xab, 0xac, 0xcf, 0x38, 0xb4, 0x95, 0x1b, 0x6c, 0x48, 0xc6, 0xe9, 0x59, 0x19, 0xba,
		0x5b, 0x79, 0xb4, 0x99, 0x43, 0x9b, 0x39, 0x21, 0x60, 0x18, 0xb3, 0xf6, 0x72, 0x73, 0x50, 0x10,
		0x5d, 0xe5, 0x62, 0x20, 0x24, 0x31, 0x69, 0xa9, 0x34, 0x11, 0x8c, 0x38, 0xb7, 0x55, 0xb2, 0x5a,
		0xea, 0xdd, 0x94, 0xac, 0x96, 0x62, 0x13, 0xa5, 0x1c, 0x5a, 0xc9, 0x65, 0xd0, 0x44, 0x29, 0x21,
		0xc6, 0x4f, 0x19, 0x25, 0x13, 0xa2, 0x62, 0x0a, 0x14, 0xbc, 0x8c, 0x7a, 0xad, 0x56, 0x9c, 0x2d,
		0x96, 0x5a, 0xe5, 0x12, 0x49, 0xa5, 0x12, 0x9a, 0xbf, 0xc1, 0x6e, 0xed, 0x5e, 0xf3, 0x37, 0xf3,
		0x85, 0xd1, 0x35, 0x7f, 0x1b, 0x2c, 0x46, 0xd3, 0xfc, 0x2d, 0x87, 0xe6, 0x6f, 0x51, 0x50, 0x7c,
		0x68, 0xfe, 0x16, 0x07, 0x5a, 0x86, 0x8c, 0xb2, 0x9b, 0x48, 0x5c, 0xcf, 0xb2, 0xfd, 0x72, 0x91,
		0x42, 0xe0, 0x46, 0xfa, 0x49, 0x90, 0x16, 0x45, 0x9c, 0xf0, 0x46, 0x48, 0x70, 0xea, 0x48, 0x68,
		0xd3, 0x95, 0x39, 0x31, 0x4e, 0x56, 0xa2, 0x5e, 0x57, 0x63, 0x4e, 0x12, 0x65, 0x0e, 0x8d, 0x8e,
		0xbc, 0x33, 0xdd, 0x47, 0x95, 0x3f, 0x2b, 0x16, 0xcb, 0xa7, 0xc5, 0x62, 0xee, 0xf4, 0xe4, 0x34,
		0x77, 0x5e, 0x2a, 0xe5, 0xcb, 0xd4, 0x73, 0x60, 0xb5, 0x9e, 0x5e, 0x4c, 0x98, 0xf3, 0x7a, 0x54,
		0xa4, 0x9c, 0x02, 0xa4, 0x6e, 0x7e, 0x33, 0x3d, 0xcf, 0xf2, 0x0c, 0x05, 0x7e, 0x66, 0xc9, 0xb4,
		0xcf, 0xac, 0x09, 0xe8, 0x05, 0xe8, 0x05, 0xe8, 0x15, 0x33, 0xe8, 0x45, 0x56, 0x88, 0x46, 0x54,
		0x78, 0x16, 0xb5, 0xe5, 0x33, 0x48, 0xd2, 0x50, 0x56, 0x98, 0x3f, 0x83, 0xe2, 0xda, 0x12, 0x36,
		0x10, 0x36, 0x10, 0x36, 0x90, 0xda, 0x06, 0xd2, 0x2a, 0xe9, 0x9c, 0x31, 0x2c, 0x12, 0xac, 0x55,
		0xb5, 0x7b, 0x9d, 0xc1, 0x0b, 0xf7, 0x13, 0x68, 0x58, 0x29, 0xa1, 0x24, 0x20, 0x24, 0xcc, 0x27,
		0xcc, 0x27, 0x20, 0x64, 0x3c, 0x2d, 0x5d, 0xdb, 0xf4, 0x7c, 0xa3, 0xd7, 0x6d, 0x51, 0xb4, 0x38,
		0x9c, 0xde, 0xd6, 0xce, 0x2c, 0x0a, 0xdb, 0x07, 0xdb, 0x07, 0xdb, 0x17, 0x33, 0xdb, 0x47, 0x7d,
		0x71, 0x51, 0xc4, 0xc5, 0x85, 0xa4, 0xcf, 0xd0, 0xc4, 0x86, 0x9f, 0x17, 0x0a, 0x27, 0x27, 0xa7,
		0x85, 0xdc, 0x49, 0xf9, 0xac, 0x54, 0x3c, 0x3d, 0x2d, 0x9d, 0xe5, 0xce, 0x70, 0x95, 0x41, 0x7d,
		0x78, 0xb9, 0xd0, 0x0e, 0xef, 0x14, 0x37, 0x19, 0xa2, 0xbf, 0x92, 0x78, 0x93, 0xd1, 0x31, 0x6d,
		0xf3, 0x25, 0xc8, 0x9d, 0x37, 0xcc, 0x56, 0xcb, 0x65, 0x9e, 0x47, 0x87, 0xc9, 0x56, 0xac, 0x0d,
		0x68, 0x06, 0x68, 0x06, 0x68, 0x86, 0xb0, 0x34, 0x11, 0x96, 0x90, 0xf8, 0x86, 0x63, 0xdd, 0x07,
		0xc0, 0x26, 0xc2, 0x26, 0xc2, 0x26, 0xc2, 0x26, 0xc6, 0xd0, 0x26, 0x76, 0x1d, 0xd7, 0x37, 0x5a,
		0xcc, 0x6b, 0xba, 0x56, 0x97, 0xa4, 0xfa, 0x70, 0xb2, 0xbf, 0x4b, 0x2b, 0xc3, 0x0a, 0xc2, 0x0a,
		0xc2, 0x0a, 0xc2, 0x0a, 0xc6, 0xd5, 0x0a, 0x52, 0xde, 0xcf, 0x8e, 0x17, 0x84, 0xcd, 0x83, 0xcd,
		0x83, 0xcd, 0x83, 0xcd, 0x8b, 0xaf, 0xcd, 0x23, 0x0e, 0x81, 0xe7, 0x56, 0x85, 0xf5, 0x83, 0xf5,
		0x83, 0xf5, 0x8b, 0x99, 0xf5, 0x23, 0xd4, 0xd0, 0x0c, 0xd2, 0xfb, 0xa6, 0xdf, 0xdd, 0x7b, 0xf3,
		0x7c, 0xd6, 0xd1, 0x13, 0x4b, 0xaf, 0x58, 0x1b, 0xb6, 0x15, 0xb6, 0x15, 0xb6, 0x35, 0xfd, 0xc8,
		0x92, 0x60, 0xad, 0x2b, 0x66, 0xbf, 0x04, 0x2d, 0x46, 0x50, 0xbe, 0xab, 0xb0, 0x2c, 0xca, 0x77,
		0x13, 0x77, 0x54, 0x85, 0x12, 0xaa, 0x75, 0x85, 0x7f, 0xd5, 0x93, 0x8b, 0xbd, 0x46, 0x6d, 0xe3,
		0x68, 0x41, 0x57, 0xb0, 0x28, 0xd0, 0x16, 0xd0, 0x16, 0xd0, 0x16, 0xd0, 0x16, 0xd0, 0x16, 0xd0,
		0x16, 0xd0, 0x16, 0xd0, 0xd6, 0x4e, 0xa3, 0x2d, 0xdf, 0x6f, 0xd3, 0xa1, 0xac, 0xc1, 0x62, 0x40,
		0x57, 0x40, 0x57, 0x40, 0x57, 0x31, 0x43, 0x57, 0x3d, 0xcb, 0xf6, 0xf3, 0x65, 0x42, 0x74, 0x55,
		0x46, 0x3d, 0x17, 0xb0, 0x15, 0xb0, 0x95, 0xd4, 0x51, 0x95, 0x4b, 0xa5, 0x13, 0xa0, 0xab, 0xe4,
		0xa0, 0xab, 0x9d, 0x1f, 0x07, 0xa1, 0x3a, 0x3c, 0x8e, 0x70, 0x10, 0x84, 0xc2, 0x74, 0x38, 0x89,
		0x8e, 0xea, 0x7b, 0x1a, 0x4f, 0x7c, 0x3c, 0x05, 0x48, 0x38, 0xb1, 0x50, 0x6d, 0xc6, 0x0f, 0xc9,
		0x4c, 0x1f, 0x92, 0x19, 0x3e, 0x6a, 0x33, 0x7b, 0x44, 0x77, 0x5b, 0x51, 0xaf, 0x28, 0xf5, 0x29,
		0x2b, 0xd5, 0xa8, 0x9f, 0x48, 0x83, 0xc4, 0x74, 0x87, 0x5f, 0x03, 0xf8, 0x7e, 0x92, 0xf3, 0xd4,
		0x64, 0x4f, 0x8b, 0xe0, 0x94, 0x04, 0x0e, 0x47, 0xf9, 0x50, 0xf8, 0xce, 0x62, 0xfb, 0xce, 0x72,
		0xec, 0xaa, 0xe0, 0xa4, 0x07, 0xa9, 0xc9, 0x0e, 0x82, 0x2d, 0x0b, 0x84, 0x27, 0x37, 0xc8, 0xc4,
		0xe2, 0x0a, 0x31, 0xb7, 0x6c, 0x6c, 0xad, 0x1c, 0x43, 0x2b, 0xc7, 0xca, 0x6a, 0x31, 0x31, 0xad,
		0x26, 0x8b, 0x4e, 0x4a, 0xc8, 0x36, 0x9d, 0xde, 0x40, 0x53, 0xc4, 0x0b, 0xdb, 0xa7, 0x6d, 0xef,
		0xc6, 0x2b, 0x88, 0x3a, 0x64, 0xa9, 0x8e, 0x1b, 0xd2, 0x54, 0x93, 0x0a, 0xb5, 0x44, 0x40, 0x25,
		0xa9, 0x52, 0x47, 0x64, 0x54, 0x11, 0x19, 0x35, 0x44, 0x43, 0x05, 0xe9, 0x05, 0x7d, 0xb2, 0x83,
		0x43, 0xb2, 0xcf, 0xae, 0xd9, 0x61, 0x46, 0xcb, 0xf2, 0x9a, 0xa6, 0x4b, 0x30, 0x66, 0x6c, 0x7e,
		0x39, 0x4c, 0x1c, 0xc3, 0xe4, 0x9e, 0xc8, 0x38, 0xd7, 0xa4, 0x4e, 0x1c, 0x1b, 0xb9, 0x19, 0xa5,
		0x36, 0x59, 0x04, 0x73, 0x3d, 0x88, 0x68, 0x54, 0x9a, 0x69, 0xb1, 0x84, 0x17, 0x11, 0xb4, 0x33,
		0xc9, 0x89, 0x69, 0x52, 0x1d, 0x7c, 0x5b, 0x9f, 0x66, 0xb6, 0x6e, 0xec, 0x8f, 0x40, 0xdf, 0x1c,
		0x0e, 0x2d, 0xa7, 0x12, 0x11, 0xeb, 0x58, 0x8f, 0xf1, 0xd4, 0xc0, 0x21, 0x78, 0x60, 0xae, 0xeb,
		0xb8, 0x86, 0x82, 0xce, 0x2f, 0x80, 0x91, 0xc9, 0x7a, 0x40, 0x23, 0x40, 0x23, 0x40, 0x23, 0x40,
		0x23, 0x40, 0x23, 0x40, 0x23, 0x40, 0x23, 0x40, 0x23, 0x02, 0x68, 0xc4, 0xe9, 0xf9, 0xb4, 0x70,
		0x64, 0xb0, 0x20, 0xf0, 0x08, 0xf0, 0x08, 0xf0, 0x08, 0xf0, 0x08, 0xf0, 0x08, 0xf0, 0x08, 0xf0,
		0x08, 0xf0, 0x08, 0x17, 0x1e, 0xa1, 0xe3, 0x45, 0xc0, 0x88, 0x00, 0x81, 0x00, 0x81, 0x00, 0x81,
		0x00, 0x81, 0x00, 0x81, 0x00, 0x81, 0x00, 0x81, 0xf0, 0x22, 0x10, 0x42, 0x2e, 0x04, 0x2c, 0x08,
		0x30, 0x08, 0x30, 0x08, 0x30, 0x08, 0x30, 0x08, 0x30, 0x08, 0x30, 0x08, 0x30, 0x08, 0xc7, 0x36,
		0x07, 0x13, 0x5e, 0x9b, 0x6d, 0x66, 0xba, 0xea, 0x20, 0x64, 0x66, 0x2d, 0xa0, 0x10, 0xa0, 0x10,
		0xa0, 0x10, 0x41, 0x89, 0x69, 0x99, 0x3e, 0x33, 0x4c, 0xbb, 0x65, 0xf8, 0x96, 0x52, 0xfb, 0x33,
		0x8a, 0xd6, 0x4a, 0xd9, 0x3b, 0xd3, 0xf7, 0x99, 0x6b, 0x2b, 0x83, 0x91, 0xec, 0xe3, 0x63, 0xeb,
		0x67, 0xb1, 0x6f, 0x0c, 0x7e, 0x2b, 0x8c, 0x7f, 0xab, 0x0d, 0x7f, 0x7b, 0x37, 0xf7, 0xdb, 0xfe,
		0xe3, 0xe3, 0xd1, 0xe3, 0x63, 0xeb, 0x5f, 0x07, 0xbf, 0xed, 0xff, 0xf5, 0xeb, 0xeb, 0xe3, 0xe3,
		0xbf, 0x1e, 0x1f, 0x8d, 0xfa, 0xdc, 0x4f, 0x1c, 0x64, 0x53, 0x69, 0x83, 0xfd, 0xf6, 0x2b, 0x5d,
		0xc5, 0xc0, 0xec, 0x62, 0xb0, 0xc2, 0xb0, 0xc2, 0xb0, 0xc2, 0x88, 0x05, 0x11, 0x0b, 0x22, 0x16,
		0x44, 0x2c, 0x88, 0x58, 0x90, 0x03, 0x87, 0xf4, 0xec, 0xef, 0xb6, 0xf3, 0x5f, 0x9b, 0x06, 0x87,
		0x8c, 0x17, 0x03, 0x0e, 0x01, 0x0e, 0x01, 0x0e, 0x01, 0x0e, 0x01, 0x0e, 0x01, 0x0e, 0x01, 0x0e,
		0xd9, 0x2d, 0x1c, 0x92, 0xce, 0x6e, 0x51, 0x41, 0xbf, 0x9d, 0x63, 0xc9, 0x0e, 0x26, 0x19, 0x85,
		0xa6, 0x44, 0x41, 0x63, 0xb5, 0xc6, 0xc5, 0xf8, 0x83, 0x75, 0x75, 0x89, 0x12, 0x68, 0xbf, 0xc3,
		0x6c, 0xf3, 0xa9, 0xcd, 0x5a, 0xf2, 0x7d, 0x60, 0xc6, 0x0b, 0x88, 0xb6, 0xe8, 0x60, 0xcf, 0x66,
		0xaf, 0x1d, 0x60, 0x84, 0x01, 0xe4, 0x90, 0xec, 0x22, 0x93, 0x43, 0x17, 0x99, 0x50, 0x41, 0xe3,
		0x4e, 0x75, 0x91, 0x91, 0x06, 0x83, 0x93, 0x13, 0x7f, 0x72, 0x9c, 0x36, 0x33, 0x65, 0x22, 0xa8,
		0xc9, 0x25, 0x40, 0x3e, 0x06, 0x36, 0x42, 0x6a, 0x48, 0xcc, 0x64, 0x13, 0x24, 0xa6, 0xc1, 0x40,
		0xbd, 0xa1, 0xde, 0x49, 0x50, 0x6f, 0xd3, 0x63, 0xc6, 0x04, 0x55, 0x18, 0x2e, 0x7b, 0x56, 0xd1,
		0xf4, 0x53, 0x89, 0x67, 0xef, 0x26, 0xd8, 0xa7, 0x69, 0x58, 0xcf, 0xef, 0x66, 0xc0, 0xce, 0xc2,
		0x5f, 0x8c, 0xfe, 0x3f, 0xd0, 0x45, 0xf4, 0xa6, 0x5c, 0x8b, 0x09, 0x43, 0xe8, 0x4b, 0x29, 0xd0,
		0x5b, 0x97, 0xa3, 0x27, 0xe5, 0x9e, 0xc2, 0x5e, 0x8f, 0x7b, 0xe3, 0x72, 0x18, 0x68, 0xb1, 0x6e,
		0xb8, 0x52, 0xdd, 0x6f, 0xa5, 0xba, 0xdd, 0x8a, 0x75, 0xb7, 0xdd, 0xb6, 0x1f, 0x82, 0x32, 0x27,
		0x2d, 0x6b, 0x59, 0xae, 0x4e, 0xa2, 0x32, 0xd2, 0xb5, 0x59, 0xae, 0xd6, 0x4b, 0xcb, 0xea, 0x7f,
		0x59, 0xb3, 0x5f, 0xbc, 0xfb, 0x24, 0xb8, 0x3f, 0x1b, 0x76, 0x45, 0x68, 0x37, 0x56, 0xef, 0xc1,
		0xf2, 0x1b, 0xae, 0x78, 0xbb, 0x2d, 0xfd, 0x5b, 0xb9, 0xfa, 0xb5, 0x6e, 0x69, 0x70, 0xb9, 0xb5,
		0x1f, 0x2b, 0x0f, 0x16, 0x11, 0xc0, 0x1c, 0xbc, 0xd8, 0x42, 0x18, 0x43, 0x08, 0x63, 0x05, 0x31,
		0x4c, 0x20, 0x26, 0x91, 0xdb, 0x1a, 0x3e, 0x66, 0x9b, 0xdf, 0x4c, 0xcf, 0xb3, 0x3c, 0xc3, 0xda,
		0x1e, 0xe9, 0x4e, 0x29, 0xdc, 0xe9, 0x33, 0xdb, 0x0c, 0x29, 0x17, 0x5c, 0xe5, 0x86, 0xa7, 0x22,
		0x70, 0x54, 0x02, 0x7e, 0x8a, 0xc2, 0x4d, 0x69, 0x78, 0x29, 0x0d, 0x27, 0xe5, 0xe0, 0xa3, 0x9a,
		0x33, 0xe4, 0x86, 0x83, 0xe2, 0xc3, 0xf4, 0xa6, 0x19, 0x5d, 0xb2, 0xe6, 0xf9, 0x90, 0x47, 0xb2,
		0x87, 0xf3, 0xe9, 0x25, 0xc4, 0x9b, 0x67, 0xb0, 0x3d, 0x64, 0x7c, 0x27, 0x65, 0x5c, 0x4c, 0x48,
		0xe6, 0x84, 0xbd, 0xc8, 0xf1, 0xb3, 0x55, 0xbb, 0xd7, 0x19, 0x7c, 0xa1, 0xbe, 0x0e, 0xc5, 0xe0,
		0x6d, 0x71, 0x2d, 0xda, 0xd2, 0x9a, 0xb3, 0x85, 0x35, 0x54, 0x21, 0xce, 0xaa, 0xc0, 0xdb, 0x22,
		0x3a, 0xcb, 0x6c, 0xdf, 0xb5, 0x98, 0x67, 0x98, 0x2f, 0xac, 0x25, 0x54, 0xed, 0x37, 0xc3, 0x90,
		0x2f, 0xac, 0x20, 0xd6, 0xe8, 0x3f, 0x27, 0xda, 0xe8, 0x3f, 0x87, 0x46, 0xff, 0xa4, 0xa4, 0x56,
		0x9c, 0x1a, 0xfd, 0x0b, 0x93, 0x56, 0x4a, 0x09, 0x09, 0x12, 0x09, 0x08, 0x92, 0x09, 0x07, 0x72,
		0x23, 0x76, 0x14, 0x18, 0x53, 0xb5, 0xe4, 0x24, 0xc5, 0x84, 0x01, 0x8a, 0xab, 0xe8, 0xbe, 0xdc,
		0x40, 0xa1, 0xc8, 0xb7, 0x8c, 0xee, 0x82, 0x9f, 0x64, 0x17, 0x35, 0x91, 0xa1, 0xf5, 0x10, 0x87,
		0xce, 0xc8, 0x0d, 0x2d, 0x50, 0x1a, 0x52, 0x00, 0xdf, 0x04, 0xdf, 0x04, 0xdf, 0x04, 0xdf, 0x04,
		0xdf, 0x04, 0xdf, 0xc4, 0xe1, 0x9b, 0x84, 0x9b, 0xd8, 0xab, 0x35, 0xad, 0x87, 0x77, 0x82, 0x77,
		0x82, 0x77, 0x82, 0x77, 0x82, 0x77, 0x82, 0x77, 0xe2, 0xf0, 0x4e, 0xf2, 0x7e, 0x09, 0x1e, 0x09,
		0x1e, 0x09, 0x1e, 0x09, 0x1e, 0x09, 0x1e, 0x09, 0x1e, 0x89, 0xd2, 0x23, 0x49, 0x5d, 0x33, 0x89,
		0x36, 0x91, 0x84, 0x4f, 0x82, 0x4f, 0x82, 0x4f, 0x82, 0x4f, 0x82, 0x4f, 0x82, 0x4f, 0xda, 0xb8,
		0x0d, 0x12, 0x4d, 0x06, 0xe5, 0x9b, 0x0a, 0xc2, 0x2b, 0xc1, 0x2b, 0x11, 0x7a, 0x25, 0xd9, 0xa6,
		0x7c, 0x32, 0x4d, 0xf8, 0xa4, 0x9b, 0xee, 0x45, 0xd4, 0x64, 0x2f, 0x4c, 0x1b, 0xe2, 0xb7, 0x5f,
		0x0d, 0xb3, 0xd9, 0x64, 0x5d, 0x9f, 0x49, 0x5c, 0x51, 0xcf, 0x3d, 0x0d, 0x3b, 0x02, 0x3b, 0x02,
		0x74, 0x0b, 0x74, 0x0b, 0x74, 0x0b, 0x74, 0x4b, 0xe4, 0x99, 0xa4, 0x73, 0xa7, 0xc4, 0xdb, 0xb5,
		0xc2, 0x2f, 0xc1, 0x2f, 0xc1, 0x2f, 0xc1, 0x2f, 0xc1, 0x2f, 0xc1, 0x2f, 0x6d, 0xf5, 0x4b, 0xa2,
		0xed, 0x3c, 0x15, 0xda, 0x77, 0xc2, 0x2f, 0xc1, 0x2f, 0xc1, 0x2f, 0xc1, 0x2f, 0xc1, 0x2f, 0xed,
		0xb2, 0x5f, 0x8a, 0x5d, 0xfb, 0x14, 0xe1, 0x4e, 0x8d, 0x1c, 0xad, 0x42, 0x44, 0x9a, 0x30, 0xca,
		0x95, 0x1e, 0xf3, 0x36, 0x55, 0x14, 0x6c, 0xa2, 0x28, 0xd8, 0x34, 0x11, 0x25, 0xfb, 0xc4, 0x2e,
		0x3a, 0x19, 0x25, 0xfb, 0xfc, 0x4d, 0x07, 0x39, 0x9b, 0x0c, 0xca, 0xe9, 0xc0, 0x37, 0xd6, 0x6e,
		0x3b, 0xc1, 0xb5, 0x8b, 0xcb, 0xaf, 0x07, 0xb3, 0x0f, 0x41, 0xb8, 0x21, 0xdc, 0x4b, 0x3b, 0xde,
		0xb3, 0x6c, 0x9f, 0x0b, 0x54, 0x0a, 0x80, 0x49, 0x41, 0x10, 0x29, 0x80, 0x86, 0x65, 0x40, 0xa3,
		0x6c, 0xef, 0x4b, 0x49, 0x90, 0xa8, 0x02, 0x6b, 0x44, 0x7a, 0x88, 0xca, 0x80, 0x41, 0xd5, 0xad,
		0x50, 0x07, 0x7f, 0x4a, 0xbb, 0x43, 0x04, 0xca, 0xea, 0x1a, 0x8c, 0xb3, 0xd7, 0xeb, 0x76, 0x5d,
		0xe6, 0x79, 0x46, 0x70, 0xb3, 0xda, 0x7a, 0x65, 0xae, 0x6f, 0x79, 0x6c, 0xa4, 0xfd, 0x9c, 0xb6,
		0x7a, 0xc3, 0x1a, 0x30, 0xdd, 0x30, 0xdd, 0x4b, 0x3b, 0x6e, 0xb5, 0x98, 0xed, 0x5b, 0xfe, 0x1b,
		0x5f, 0x9b, 0xd4, 0x09, 0x36, 0xe1, 0xd0, 0xd8, 0xec, 0xe5, 0x68, 0xe9, 0xf7, 0xa6, 0xc7, 0xc4,
		0xc9, 0xb2, 0xab, 0xab, 0x0f, 0x77, 0x8d, 0xda, 0xd5, 0x9f, 0xbc, 0xc7, 0x14, 0x98, 0x17, 0x4f,
		0x88, 0x74, 0x90, 0x6c, 0x9d, 0x7c, 0x77, 0x7b, 0x5f, 0x6b, 0x5c, 0x7e, 0xc8, 0xea, 0xb0, 0xc8,
		0x92, 0x5f, 0xe9, 0xe1, 0xcb, 0x43, 0xad, 0x7a, 0xdd, 0xb8, 0xa9, 0x5c, 0x57, 0xe3, 0xf4, 0xb5,
		0x82, 0x9d, 0xfa, 0x50, 0x7d, 0xb8, 0xb8, 0xbf, 0xbc, 0xab, 0x5d, 0xde, 0xde, 0xc4, 0x70, 0xcb,
		0x2e, 0x2a, 0x77, 0x95, 0xf7, 0x97, 0x57, 0x97, 0xb5, 0xcb, 0xea, 0x43, 0x0c, 0xbf, 0x5e, 0x4c,
		0x37, 0xef, 0xba, 0x72, 0x53, 0xf9, 0x54, 0xbd, 0xae, 0xde, 0xd4, 0x1a, 0x95, 0x0f, 0x1f, 0xee,
		0xab, 0x0f, 0xb1, 0xda, 0xbb, 0x8b, 0xdf, 0x2b, 0x0f, 0x0f, 0x97, 0x0f, 0x62, 0x3a, 0xba, 0x47,
		0x43, 0xe9, 0xa8, 0xd9, 0xef, 0x74, 0x34, 0xf4, 0x95, 0x03, 0x3f, 0x6f, 0x9e, 0xcf, 0x3a, 0x46,
		0x8b, 0x79, 0x4d, 0xd7, 0xea, 0x72, 0xf1, 0x55, 0x53, 0xd0, 0xb3, 0xfc, 0x2c, 0xc0, 0x0e, 0xc0,
		0xce, 0xb2, 0x9c, 0x88, 0xf7, 0x06, 0xe5, 0xf8, 0xd9, 0x2b, 0x66, 0xbf, 0x04, 0x6c, 0x29, 0x22,
		0xd5, 0x74, 0x45, 0xaa, 0x85, 0x12, 0x02, 0xd3, 0x59, 0xdb, 0xcc, 0x35, 0x71, 0x64, 0xd1, 0x28,
		0xf3, 0xf4, 0xb1, 0x87, 0x35, 0x86, 0x35, 0x86, 0x35, 0x86, 0x35, 0x86, 0x35, 0xde, 0xfc, 0x2f,
		0x61, 0x8c, 0x7e, 0xd8, 0x36, 0x71, 0x85, 0xf7, 0x2a, 0x97, 0x7b, 0xe0, 0xc3, 0xde, 0x86, 0x37,
		0xdc, 0xf6, 0x66, 0x3c, 0x6f, 0x94, 0x5d, 0x39, 0x51, 0x62, 0xcb, 0x3b, 0xcc, 0x7f, 0xfb, 0xe9,
		0x77, 0x9c, 0xf9, 0x7e, 0x23, 0x07, 0xb7, 0xf4, 0xbd, 0x16, 0x1c, 0xe0, 0xc2, 0xc7, 0xaf, 0x69,
		0x53, 0xbd, 0xd6, 0xb7, 0x6d, 0xf2, 0x65, 0xb3, 0xbe, 0xcb, 0x7b, 0x5b, 0x75, 0x0f, 0xbf, 0xcd,
		0x55, 0x71, 0xbb, 0x26, 0x6e, 0x57, 0xb4, 0xe8, 0x7a, 0x06, 0xdf, 0x4b, 0xf0, 0xcc, 0xd7, 0x35,
		0x81, 0xce, 0x9a, 0xa6, 0xb9, 0x7d, 0x0a, 0xc8, 0xe0, 0x87, 0x14, 0x67, 0x80, 0xe4, 0x68, 0x66,
		0x80, 0xac, 0xff, 0x26, 0x99, 0x58, 0x8f, 0x00, 0x19, 0x7c, 0xef, 0xb0, 0x26, 0x80, 0x98, 0xcd,
		0x20, 0x8b, 0x64, 0x80, 0x03, 0xb8, 0x81, 0xe5, 0xcc, 0x33, 0xc9, 0x68, 0x09, 0xbf, 0x59, 0x10,
		0x92, 0x0b, 0x2b, 0x37, 0x0a, 0x0a, 0x0d, 0xaa, 0xe4, 0x6e, 0x08, 0xdf, 0x1c, 0x9f, 0xa1, 0xe0,
		0x35, 0xc3, 0xe8, 0x39, 0xb1, 0x74, 0xdc, 0x7c, 0x4c, 0xd3, 0x71, 0xf9, 0x04, 0x4d, 0x56, 0xe0,
		0x94, 0x05, 0x4f, 0x59, 0x00, 0x95, 0x04, 0x51, 0x10, 0xda, 0x71, 0x9e, 0x18, 0xaf, 0x80, 0xae,
		0xb0, 0x78, 0x46, 0x87, 0xf9, 0xdf, 0x1c, 0x85, 0x21, 0xbf, 0xcb, 0x4b, 0xed, 0xc6, 0x40, 0x4f,
		0x31, 0x31, 0x57, 0x15, 0x77, 0x32, 0xb1, 0x27, 0x13, 0x7f, 0x12, 0x35, 0x10, 0x53, 0x07, 0x89,
		0x20, 0x31, 0x43, 0x33, 0xce, 0xb3, 0x67, 0x6f, 0xa7, 0xf3, 0x37, 0xda, 0xea, 0x73, 0x89, 0x67,
		0x47, 0x5f, 0xfb, 0xab, 0xd4, 0xb1, 0xc8, 0x8f, 0xf2, 0x97, 0xbc, 0x95, 0xdf, 0xba, 0x05, 0x0a,
		0xb3, 0xfa, 0xe5, 0x6e, 0xf1, 0xb7, 0xbe, 0x60, 0xa5, 0x52, 0x69, 0x5c, 0x57, 0x6b, 0xbf, 0xdf,
		0x7e, 0x68, 0xd4, 0xbe, 0xdc, 0x55, 0x15, 0x5e, 0x32, 0x23, 0x79, 0xf9, 0x4f, 0x7f, 0x7a, 0x2b,
		0x5f, 0xf4, 0xbe, 0xf2, 0xe1, 0xf2, 0xf3, 0x43, 0xa3, 0x72, 0x75, 0x95, 0x55, 0x5e, 0xb8, 0x7f,
		0x18, 0xb7, 0xb7, 0xbb, 0xba, 0xbd, 0xa8, 0xa4, 0xf2, 0xc5, 0x6a, 0x95, 0x8b, 0xca, 0x05, 0xd5,
		0xb1, 0x29, 0xad, 0x50, 0xdf, 0x0b, 0xf7, 0x73, 0x25, 0xcf, 0x82, 0xc0, 0xe8, 0x71, 0xf3, 0xc1,
		0xdb, 0x79, 0xe2, 0xbd, 0x70, 0xf6, 0xab, 0xae, 0xd5, 0x77, 0x0a, 0x25, 0x03, 0xac, 0x62, 0xab,
		0x85, 0xef, 0xf9, 0x57, 0xf1, 0xbc, 0xea, 0x8b, 0xcc, 0x26, 0x0f, 0x48, 0x42, 0xaf, 0x09, 0x18,
		0xf0, 0x98, 0x2b, 0x8b, 0xba, 0x14, 0xe1, 0xdf, 0x22, 0x04, 0x74, 0x86, 0x6f, 0x65, 0x3c, 0xbd,
		0xa9, 0x48, 0x2c, 0x15, 0x14, 0x5c, 0x82, 0x83, 0xc1, 0x4e, 0x85, 0xa4, 0x06, 0xfd, 0x1d, 0x9d,
		0x5d, 0x3e, 0x24, 0x78, 0x8f, 0x47, 0xbf, 0x99, 0xa6, 0x79, 0x3c, 0x8d, 0xc8, 0x8e, 0x85, 0x88,
		0x85, 0x8d, 0xa4, 0xf4, 0x43, 0xb0, 0x7e, 0x63, 0xf4, 0x5b, 0xc5, 0x34, 0x1b, 0x95, 0xc9, 0xc7,
		0x34, 0x46, 0xb1, 0x58, 0x88, 0x25, 0xd0, 0xec, 0x75, 0x64, 0x0e, 0x44, 0x07, 0xee, 0x0d, 0x9f,
		0x03, 0xd3, 0x02, 0xa6, 0x25, 0x1c, 0xa6, 0x25, 0x10, 0x38, 0x79, 0x76, 0x65, 0xf8, 0xb8, 0x1c,
		0xa3, 0x92, 0x07, 0xa3, 0x02, 0x46, 0x45, 0x0f, 0x2a, 0x14, 0x55, 0x83, 0xc9, 0x83, 0x82, 0x0c,
		0xf9, 0x5a, 0x71, 0x11, 0x76, 0x6c, 0x04, 0x0a, 0xa2, 0xac, 0x28, 0x14, 0x0a, 0x43, 0xa7, 0x38,
		0x94, 0x98, 0x94, 0x54, 0x91, 0xb4, 0xe0, 0x52, 0x32, 0xc5, 0x8a, 0x24, 0xb0, 0x95, 0x56, 0xb8,
		0x79, 0x3f, 0xc4, 0x37, 0x06, 0x5e, 0xcc, 0x39, 0xf1, 0x0e, 0xff, 0xe6, 0x51, 0xc8, 0x9c, 0xe2,
		0x32, 0xaa, 0x8a, 0x49, 0xa9, 0xa0, 0xf4, 0x8a, 0x4a, 0xad, 0xb0, 0xda, 0x14, 0x57, 0x9b, 0x02,
		0x6b, 0x51, 0x64, 0x1a, 0x86, 0x4c, 0x91, 0x3d, 0x94, 0xbf, 0xa3, 0x58, 0x2b, 0x6f, 0x34, 0xf4,
		0xfd, 0x92, 0xcf, 0x2c, 0x11, 0xac, 0x45, 0x4a, 0xe7, 0x2f, 0xbd, 0x78, 0xa5, 0x52, 0x69, 0x54,
		0x2e, 0x2e, 0x6e, 0x3f, 0xdf, 0xd4, 0x2e, 0x6f, 0x3e, 0x35, 0xaa, 0x7f, 0x56, 0x6f, 0x6a, 0x14,
		0x04, 0xff, 0xe4, 0x83, 0x08, 0x89, 0x7e, 0x75, 0xe6, 0x52, 0x7c, 0x2b, 0x2e, 0x6e, 0xaf, 0xaf,
		0x2b, 0x37, 0x1f, 0xb2, 0x64, 0x1f, 0xd9, 0x3f, 0x4c, 0xe4, 0x3e, 0x5c, 0xdd, 0x7e, 0xba, 0xbc,
		0x21, 0xdc, 0x05, 0x92, 0x95, 0xea, 0x51, 0xdb, 0xb1, 0xbd, 0x08, 0xa4, 0x20, 0xeb, 0xb2, 0xa6,
		0xe3, 0xb6, 0xe8, 0x90, 0xc9, 0x68, 0x3d, 0xa0, 0x12, 0xa0, 0x12, 0xa0, 0x92, 0x58, 0xa1, 0x12,
		0x66, 0xf7, 0x3a, 0xcc, 0x35, 0x7d, 0xb9, 0x7c, 0x8a, 0xb5, 0xa8, 0xa4, 0x48, 0xb0, 0x56, 0xd5,
		0xee, 0x05, 0x89, 0xd4, 0x91, 0x19, 0xd0, 0x50, 0x23, 0x4a, 0xc9, 0x9b, 0x88, 0xa5, 0x75, 0x24,
		0x6f, 0x26, 0x86, 0x44, 0xfc, 0xf0, 0xb7, 0x63, 0x25, 0x36, 0x27, 0x23, 0x7d, 0x6d, 0x51, 0x0d,
		0xbe, 0xc3, 0xf0, 0x37, 0xa1, 0x3b, 0x0c, 0xf5, 0x93, 0x93, 0x69, 0x9a, 0x48, 0x10, 0xc2, 0xd3,
		0x85, 0xee, 0xaa, 0x5d, 0x18, 0xc1, 0xa1, 0x81, 0x43, 0x0b, 0xd9, 0xe2, 0x29, 0x3b, 0xb3, 0xe9,
		0xe8, 0x2a, 0x66, 0x3e, 0x13, 0x65, 0xc5, 0x9d, 0x2a, 0xac, 0x71, 0x37, 0x32, 0xba, 0x47, 0x47,
		0x23, 0x0b, 0x7a, 0x3c, 0xa3, 0xd6, 0x31, 0x36, 0x64, 0xc3, 0xea, 0x2e, 0x65, 0x1b, 0xb6, 0xad,
		0x48, 0x8c, 0x6b, 0xff, 0x55, 0xcd, 0x57, 0x01, 0xe6, 0x0b, 0xe6, 0x2b, 0x14, 0xf3, 0x85, 0x2b,
		0x00, 0x04, 0xdb, 0x08, 0xb6, 0x11, 0x6c, 0x0b, 0xc8, 0x1b, 0xae, 0x00, 0x70, 0x05, 0x80, 0x2b,
		0x00, 0x5c, 0x01, 0x84, 0xc6, 0x60, 0xe1, 0x0a, 0x00, 0xa8, 0x04, 0xa8, 0x04, 0xa8, 0x64, 0x73,
		0xcc, 0x80, 0x2b, 0x80, 0x78, 0x44, 0x94, 0x71, 0xba, 0x02, 0x50, 0x21, 0x73, 0x32, 0x34, 0x37,
		0x00, 0x1b, 0x3a, 0x06, 0x69, 0xe0, 0xcd, 0xb4, 0xe6, 0xe7, 0xfe, 0xc1, 0xde, 0x94, 0xa2, 0xf3,
		0x54, 0x96, 0x7d, 0x6d, 0xed, 0x19, 0xab, 0xba, 0xeb, 0x8a, 0xfa, 0x44, 0xa1, 0x47, 0x59, 0x29,
		0x3a, 0x56, 0x51, 0x73, 0xb2, 0x28, 0xbd, 0x5a, 0x77, 0x2a, 0xda, 0x4b, 0xaf, 0x86, 0xe7, 0x10,
		0x66, 0xe9, 0x95, 0x18, 0x7b, 0x2f, 0xc5, 0xd6, 0x4b, 0x17, 0x5e, 0x15, 0x50, 0x78, 0x45, 0x09,
		0x73, 0xd1, 0xe2, 0x06, 0x2d, 0x6e, 0x50, 0x90, 0x85, 0x16, 0x37, 0x5c, 0xb6, 0x1a, 0x2d, 0x6e,
		0xd0, 0xe2, 0x26, 0x74, 0x9a, 0x17, 0x2d, 0x6e, 0x92, 0xfd, 0x62, 0x68, 0x71, 0x13, 0xbe, 0xd1,
		0x43, 0x8b, 0x9b, 0xf4, 0x73, 0x1d, 0x68, 0x71, 0xa3, 0x07, 0x0a, 0x66, 0xd0, 0xe2, 0x26, 0x66,
		0x3c, 0x8b, 0x28, 0x71, 0x2c, 0x47, 0xb3, 0x08, 0x70, 0xc3, 0xc9, 0x99, 0xa5, 0xbe, 0x69, 0x5f,
		0x55, 0xe6, 0xa9, 0x6f, 0xda, 0x49, 0x1d, 0x33, 0xd5, 0xcd, 0x9e, 0xff, 0x6d, 0x00, 0x9e, 0x9b,
		0xa6, 0xd8, 0xc4, 0xae, 0x85, 0xe7, 0xd0, 0xc7, 0x1b, 0x7d, 0xbc, 0x47, 0x02, 0xd5, 0xea, 0x58,
		0xb6, 0x11, 0x98, 0x76, 0x61, 0x9e, 0x73, 0xe6, 0x59, 0x74, 0x99, 0x02, 0xd9, 0x19, 0x0e, 0xd9,
		0x29, 0xd9, 0x56, 0x47, 0xad, 0x9d, 0x0e, 0xfa, 0x4c, 0x81, 0xd6, 0x8c, 0x6b, 0x9f, 0xa9, 0xa1,
		0x15, 0xee, 0x9a, 0x9e, 0xf7, 0x5f, 0x95, 0xac, 0xb2, 0x05, 0xab, 0x3e, 0x59, 0x0f, 0x35, 0x73,
		0x28, 0x3a, 0x09, 0x59, 0xd1, 0x22, 0x61, 0x9b, 0x08, 0x6b, 0xe6, 0x22, 0x67, 0x9d, 0x24, 0x77,
		0xa0, 0xfa, 0xc3, 0x57, 0x23, 0xbc, 0xe9, 0xa4, 0xdb, 0x69, 0x1a, 0xec, 0x87, 0xff, 0x6e, 0x26,
		0x82, 0xfb, 0x66, 0x7a, 0xdf, 0x58, 0xcb, 0x78, 0x0d, 0xa6, 0xd3, 0x91, 0x4a, 0xfd, 0xb3, 0xd9,
		0xf6, 0x28, 0xc5, 0x3e, 0x6c, 0x81, 0xaf, 0x87, 0x52, 0xc9, 0x38, 0xef, 0x16, 0x46, 0xc7, 0x41,
		0xed, 0x6d, 0xc6, 0xcb, 0xc2, 0xe9, 0xc0, 0xe9, 0xc0, 0xe9, 0x88, 0xc5, 0x35, 0xee, 0x5b, 0xd7,
		0x9f, 0x2a, 0x92, 0x62, 0x9d, 0x62, 0xe8, 0xf7, 0x1e, 0xfd, 0xf4, 0xa4, 0x2b, 0xce, 0x51, 0x6d,
		0xc7, 0x53, 0x92, 0x44, 0xbe, 0xf7, 0x87, 0x08, 0xfd, 0x38, 0xf7, 0xe9, 0x8d, 0xca, 0xe0, 0xd3,
		0x3f, 0x7b, 0xcc, 0x95, 0x6a, 0xfa, 0xd1, 0xd7, 0x32, 0xcc, 0x56, 0xae, 0x26, 0x5e, 0xa9, 0x16,
		0x5e, 0x39, 0x7e, 0x2f, 0x20, 0x7e, 0x47, 0xfc, 0x8e, 0xf8, 0x1d, 0x50, 0x0a, 0x50, 0x0a, 0xf1,
		0x3b, 0xe2, 0x77, 0xc4, 0xef, 0x88, 0xdf, 0x11, 0xbf, 0xc3, 0xe9, 0xc0, 0xe9, 0x20, 0x7e, 0x57,
		0x35, 0x49, 0x83, 0xd0, 0x78, 0x14, 0xd9, 0x92, 0xd8, 0xa2, 0xc9, 0x7a, 0x30, 0x42, 0x30, 0x42,
		0x30, 0x42, 0xc9, 0x42, 0xbe, 0xe0, 0x0d, 0x57, 0xf0, 0x86, 0xb2, 0x0d, 0x03, 0x28, 0x68, 0x43,
		0x89, 0x4e, 0x01, 0xa9, 0xce, 0xc6, 0x5d, 0x77, 0x48, 0x9a, 0xd2, 0x72, 0xd7, 0x1c, 0x4b, 0x98,
		0x45, 0xd0, 0x82, 0x09, 0x57, 0x72, 0x89, 0x56, 0xc8, 0x0c, 0xcc, 0x20, 0x33, 0x50, 0x8d, 0x50,
		0x5d, 0xc8, 0x71, 0x56, 0x2f, 0x85, 0x5e, 0xb9, 0x1c, 0xca, 0xa1, 0xf5, 0x81, 0x45, 0xdc, 0x3b,
		0xa0, 0x1c, 0x5a, 0x33, 0x4f, 0x89, 0x72, 0x68, 0xc9, 0x65, 0x51, 0x0e, 0x1d, 0xcd, 0xdb, 0xa1,
		0x1c, 0x5a, 0x5b, 0xb8, 0x3d, 0xfe, 0x85, 0x72, 0xe8, 0xf8, 0x86, 0xf7, 0x28, 0x87, 0xe6, 0x59,
		0x04, 0xe5, 0xd0, 0xe1, 0xf0, 0x84, 0x28, 0x87, 0x8e, 0x1b, 0x01, 0x23, 0x9c, 0x52, 0x27, 0x4f,
		0xbe, 0x88, 0x24, 0xd0, 0xa1, 0xfd, 0x1c, 0x78, 0x17, 0xf0, 0x2e, 0xe0, 0x5d, 0xc0, 0xbb, 0x80,
		0x77, 0x01, 0xef, 0x02, 0xde, 0x05, 0xbc, 0x0b, 0x78, 0x17, 0xf0, 0x2e, 0xe0, 0x5d, 0xc0, 0xbb,
		0x80, 0x77, 0x01, 0xef, 0x02, 0xde, 0x25, 0xf1, 0xbc, 0x8b, 0xce, 0x56, 0x74, 0xf3, 0xb4, 0x0b,
		0x6d, 0x3b, 0x3a, 0x0e, 0xd6, 0x65, 0x20, 0x5f, 0x9e, 0x38, 0xeb, 0x32, 0x7c, 0x0c, 0xd9, 0x2e,
		0x60, 0x5d, 0xc2, 0x61, 0x5d, 0x84, 0x5a, 0xb6, 0x51, 0xb8, 0x1b, 0xf4, 0xc0, 0x02, 0xa7, 0x12,
		0xd7, 0x1a, 0x5a, 0xc9, 0xa6, 0x70, 0x4b, 0xe2, 0x22, 0x5d, 0xa1, 0x9f, 0xa1, 0x1c, 0xb4, 0x8e,
		0xca, 0x01, 0x1d, 0x8a, 0xa4, 0x05, 0x99, 0x66, 0x76, 0x7c, 0xd0, 0xba, 0x72, 0xd9, 0xfa, 0x92,
		0xe0, 0x29, 0x16, 0xae, 0x2f, 0x2a, 0x23, 0xc6, 0x99, 0x86, 0xa9, 0xac, 0xda, 0x94, 0x56, 0x9b,
		0xf2, 0x6a, 0x51, 0x62, 0x1a, 0x7e, 0x2c, 0x7e, 0xe3, 0x4c, 0x95, 0x79, 0x2c, 0x22, 0x3e, 0x8b,
		0x6a, 0x87, 0x94, 0x0b, 0xe6, 0xd5, 0x39, 0xc2, 0xb5, 0x24, 0x8c, 0xce, 0x02, 0xfa, 0x35, 0xda,
		0x44, 0x50, 0x48, 0xbf, 0x52, 0x9d, 0x12, 0x4c, 0x34, 0x1f, 0xaa, 0xbb, 0x46, 0xd5, 0x52, 0xfb,
		0xb5, 0x1e, 0x52, 0xad, 0xd8, 0x1e, 0x8e, 0x12, 0x8e, 0x12, 0x8e, 0x52, 0x93, 0xa3, 0xa4, 0x2d,
		0xe6, 0xa7, 0xf6, 0x9a, 0x91, 0x98, 0x43, 0xd7, 0x69, 0x13, 0xde, 0xb2, 0x07, 0xab, 0xc1, 0xf0,
		0xc1, 0xf0, 0xc1, 0xf0, 0xc5, 0xca, 0xf0, 0xc9, 0xe6, 0x34, 0xad, 0x35, 0x75, 0xe7, 0x04, 0x6b,
		0x29, 0xe5, 0x3c, 0xe9, 0x81, 0xfa, 0x7a, 0xc2, 0x2a, 0x62, 0x47, 0x41, 0x24, 0x66, 0x1a, 0x77,
		0x8e, 0x26, 0x9b, 0x6c, 0xed, 0xf6, 0x95, 0x08, 0xd7, 0x24, 0xcd, 0x36, 0x5b, 0xbb, 0x21, 0x0f,
		0x5f, 0x1e, 0x6a, 0xd5, 0xeb, 0xc6, 0x87, 0xea, 0xc7, 0xcb, 0x9b, 0xea, 0x87, 0xc6, 0xfd, 0xed,
		0x55, 0xf5, 0x81, 0x70, 0x67, 0x32, 0xc4, 0x29, 0x69, 0xfa, 0x44, 0x64, 0xd3, 0xee, 0x0c, 0x76,
		0xa5, 0x51, 0xf9, 0x70, 0x7d, 0x79, 0x93, 0x25, 0xff, 0xbc, 0x3e, 0xe9, 0x8a, 0xf5, 0xbd, 0x78,
		0x7d, 0x2f, 0xf5, 0x55, 0xea, 0x09, 0x84, 0xae, 0x9e, 0xf7, 0xcd, 0xf8, 0xce, 0xde, 0xe8, 0xd0,
		0xeb, 0x78, 0x41, 0x00, 0x58, 0x00, 0x58, 0x00, 0xd8, 0x58, 0x01, 0xd8, 0xd8, 0x51, 0xdc, 0x91,
		0x58, 0x3c, 0xe5, 0x9e, 0x7c, 0xcb, 0x81, 0x81, 0x5a, 0x57, 0x3e, 0xd8, 0x3c, 0xd8, 0x3c, 0xd8,
		0x3c, 0xd8, 0x3c, 0x2d, 0x4f, 0xca, 0x66, 0x4f, 0x28, 0x76, 0x07, 0x9c, 0xe2, 0x4b, 0xf9, 0x3c,
		0xdc, 0x20, 0xeb, 0xf4, 0x58, 0x6d, 0xba, 0xc8, 0xf4, 0x7b, 0xc8, 0xe6, 0xe8, 0x7e, 0x1e, 0x7c,
		0x8b, 0x86, 0xf4, 0x98, 0x11, 0xf9, 0xd3, 0xeb, 0x4b, 0x35, 0x45, 0x94, 0x19, 0x3f, 0xb2, 0x42,
		0x69, 0xe4, 0x9a, 0x32, 0x66, 0x28, 0x33, 0xc5, 0x0a, 0xc8, 0x14, 0xd3, 0xe8, 0x9d, 0x90, 0x29,
		0x36, 0xfd, 0xe6, 0xc8, 0x14, 0x03, 0xa4, 0x04, 0xa4, 0x04, 0xa4, 0x4c, 0x2a, 0xa4, 0x44, 0xa6,
		0x18, 0xa5, 0x36, 0x21, 0x53, 0x8c, 0x92, 0x6d, 0x41, 0xa6, 0x18, 0x1c, 0x25, 0x1c, 0xe5, 0x6e,
		0x3a, 0x4a, 0x64, 0x8a, 0x2d, 0x7d, 0x77, 0x64, 0x8a, 0xc1, 0xf0, 0xc1, 0xf0, 0xa5, 0xdd, 0xf0,
		0x21, 0x53, 0x2c, 0xca, 0xb0, 0x8a, 0xd8, 0x51, 0x10, 0x89, 0x99, 0xc6, 0x9d, 0x43, 0xa6, 0xd8,
		0xc2, 0x86, 0x20, 0x53, 0x8c, 0x63, 0x77, 0x90, 0x29, 0x16, 0xdd, 0x2a, 0xc8, 0x14, 0x43, 0xa6,
		0x18, 0x00, 0x2c, 0x00, 0x6c, 0x5c, 0x01, 0x2c, 0x32, 0xc5, 0x90, 0x29, 0x06, 0x9b, 0x07, 0x9b,
		0x07, 0x9b, 0x97, 0x48, 0x9b, 0xb7, 0xc3, 0x99, 0x62, 0x2a, 0xa9, 0x4b, 0x19, 0xaa, 0x44, 0x31,
		0x89, 0xc1, 0xb2, 0xf2, 0x67, 0x27, 0x93, 0x27, 0x46, 0x37, 0x97, 0x1c, 0x13, 0xc9, 0x91, 0x2d,
		0x16, 0xb5, 0x47, 0x4a, 0xea, 0x44, 0xf2, 0x36, 0x33, 0x9f, 0x89, 0x66, 0x05, 0x9c, 0x2a, 0xac,
		0x71, 0x37, 0x32, 0xb9, 0x47, 0x47, 0xa3, 0x3c, 0xdb, 0xe3, 0x89, 0x52, 0xa7, 0x62, 0xd0, 0xf9,
		0x1f, 0x01, 0x69, 0x21, 0x6b, 0xa9, 0x52, 0xd9, 0xd0, 0x7b, 0xb0, 0x44, 0x5a, 0x87, 0xcb, 0x4f,
		0xc1, 0x40, 0xa8, 0x63, 0xe5, 0xa7, 0xee, 0x1f, 0x13, 0xe5, 0x37, 0x9d, 0x4c, 0x28, 0x8d, 0xb5,
		0x83, 0xc3, 0x20, 0x6b, 0xac, 0xbd, 0xa7, 0xb0, 0xdf, 0xa2, 0xfb, 0xac, 0xb0, 0xbf, 0x59, 0xae,
		0xb1, 0x6b, 0x72, 0x3b, 0xba, 0x79, 0x2f, 0xd7, 0xef, 0xd0, 0x86, 0xdd, 0x09, 0x86, 0x61, 0x39,
		0xae, 0xf5, 0x37, 0xdf, 0xe6, 0xcc, 0xcd, 0xd0, 0x9a, 0x3e, 0xb6, 0x65, 0xf7, 0xf9, 0x8a, 0x11,
		0xb8, 0x61, 0xa4, 0x08, 0x5c, 0x14, 0x87, 0x85, 0xa2, 0xf0, 0x4f, 0x1a, 0xe6, 0x49, 0xc3, 0x39,
		0x29, 0xd8, 0xa6, 0xa6, 0x3f, 0xbc, 0xc9, 0xf9, 0xa2, 0x7d, 0x92, 0xe5, 0xfa, 0x22, 0xa3, 0xbb,
		0x7d, 0x06, 0xdd, 0xed, 0xe5, 0x04, 0x74, 0xb5, 0xdd, 0x23, 0x19, 0x29, 0xb8, 0xb4, 0x1a, 0x26,
		0x0a, 0xea, 0x0b, 0xb2, 0xd1, 0xfd, 0x1e, 0x13, 0x05, 0xb9, 0x7e, 0x61, 0xa2, 0xe0, 0xf6, 0x17,
		0xc4, 0x44, 0xc1, 0xf0, 0x98, 0x2b, 0x8d, 0x6f, 0x87, 0x89, 0x82, 0xda, 0x68, 0xca, 0xf1, 0x2f,
		0x4c, 0x14, 0x14, 0xb7, 0x77, 0x98, 0x28, 0x88, 0x89, 0x82, 0xd4, 0xf0, 0x2f, 0x83, 0x89, 0x82,
		0x44, 0x10, 0x32, 0xe5, 0xc4, 0xe7, 0x24, 0x28, 0x13, 0xef, 0x5e, 0x22, 0x48, 0xd3, 0x4d, 0x3e,
		0x49, 0xa8, 0x43, 0x09, 0xcd, 0x44, 0x41, 0xf6, 0x3a, 0x32, 0x0a, 0x82, 0xac, 0xcb, 0xe8, 0x39,
		0xb0, 0x2e, 0x60, 0x5d, 0xc2, 0x61, 0x5d, 0x02, 0x81, 0x93, 0xa7, 0x59, 0x86, 0x8f, 0x63, 0xaa,
		0x20, 0x78, 0x95, 0x58, 0xf1, 0x2a, 0x98, 0x2a, 0x88, 0xec, 0x1f, 0x6d, 0x8a, 0xa4, 0x05, 0x9d,
		0x66, 0x76, 0xbc, 0x57, 0x54, 0xe0, 0x48, 0x86, 0xb5, 0xf0, 0x64, 0x2c, 0xda, 0xcc, 0x9a, 0x48,
		0x2c, 0xd7, 0xaf, 0xa8, 0xd4, 0x0a, 0xab, 0x4d, 0x71, 0xb5, 0x29, 0xb0, 0x16, 0x45, 0xa6, 0xe1,
		0xc9, 0xe2, 0x97, 0x58, 0x4e, 0x5b, 0x9e, 0x4b, 0x59, 0x96, 0xab, 0xa7, 0x1c, 0x77, 0x8e, 0xdc,
		0xaf, 0x7c, 0xae, 0xfd, 0x7e, 0x7b, 0x7f, 0xf9, 0x57, 0xa5, 0x76, 0x79, 0x7b, 0xd3, 0xa8, 0xfe,
		0x59, 0xbd, 0xa9, 0x51, 0x30, 0xfd, 0x93, 0xcf, 0xd2, 0x50, 0x86, 0xab, 0xa9, 0x28, 0x79, 0xdd,
		0x6e, 0x5c, 0xdc, 0x5e, 0x5f, 0x57, 0x6e, 0x3e, 0xd0, 0x15, 0xe1, 0xf6, 0x0f, 0x93, 0xbb, 0x15,
		0x37, 0x1f, 0x2f, 0x3f, 0x65, 0x63, 0x56, 0xee, 0x5b, 0x8f, 0xda, 0xa2, 0xa1, 0x10, 0x84, 0x93,
		0x68, 0x1b, 0x92, 0x4a, 0xc3, 0xdf, 0x42, 0xef, 0x19, 0x3c, 0x65, 0xe1, 0xaa, 0xc1, 0xd7, 0x18,
		0xfe, 0x96, 0x80, 0xa6, 0xc1, 0x04, 0x88, 0x94, 0x0e, 0x89, 0xa2, 0x20, 0x04, 0x21, 0x21, 0x0a,
		0x42, 0xe2, 0x56, 0x10, 0x32, 0xa3, 0xd6, 0xe8, 0x7e, 0x1e, 0x0a, 0xa3, 0x85, 0xee, 0xe7, 0x30,
		0x5f, 0x60, 0xb4, 0xc0, 0x68, 0x81, 0xd1, 0x02, 0xa3, 0x05, 0x46, 0x0b, 0x8c, 0x16, 0x18, 0x2d,
		0x30, 0x5a, 0x60, 0xb4, 0x76, 0x9b, 0xd1, 0x0a, 0xb9, 0xb7, 0xc9, 0x1a, 0x42, 0x2b, 0xdc, 0xe6,
		0x26, 0x61, 0x74, 0x06, 0x90, 0x06, 0x9b, 0xe8, 0x0d, 0x90, 0x49, 0x40, 0x6f, 0x80, 0xd5, 0xda,
		0xa4, 0xbf, 0x39, 0xc0, 0x6a, 0xfd, 0x41, 0x77, 0x80, 0x4d, 0x67, 0x13, 0x46, 0x92, 0xec, 0xf0,
		0x34, 0xc2, 0x4c, 0x92, 0x15, 0x23, 0xa6, 0xa4, 0x88, 0x28, 0xe9, 0x14, 0xd9, 0x02, 0x52, 0x64,
		0x29, 0xe3, 0x4a, 0x14, 0x26, 0xa3, 0x30, 0x19, 0x09, 0xb4, 0x94, 0x64, 0x0a, 0x0a, 0x93, 0xd7,
		0x7f, 0x6d, 0x14, 0x26, 0xa3, 0x30, 0x59, 0xf1, 0x45, 0x51, 0x98, 0x9c, 0xc8, 0x17, 0x43, 0x61,
		0x72, 0xf8, 0x46, 0x0f, 0x85, 0xc9, 0xe9, 0x67, 0x3f, 0x50, 0x98, 0xac, 0x07, 0x0a, 0x66, 0x50,
		0x98, 0x1c, 0x3f, 0xce, 0x45, 0x94, 0x50, 0x96, 0xa6, 0x5c, 0x04, 0x38, 0xe3, 0xa4, 0xf7, 0x63,
		0xe4, 0x6d, 0x4d, 0xa8, 0xb2, 0x9f, 0x3a, 0xba, 0x31, 0x72, 0x16, 0x04, 0x8a, 0x15, 0xfe, 0xa1,
		0xff, 0x22, 0xad, 0x55, 0x8d, 0xa0, 0xff, 0xa2, 0x4e, 0x7d, 0xe1, 0x4e, 0xd1, 0x16, 0x50, 0x14,
		0x9e, 0x7c, 0x6b, 0x39, 0x0d, 0xf1, 0x98, 0xfb, 0xca, 0x5c, 0xe3, 0xc5, 0x75, 0x7a, 0x5d, 0x8f,
		0x5f, 0x51, 0xe6, 0x1f, 0x83, 0xbe, 0xa0, 0x5f, 0xe9, 0xb2, 0x38, 0x49, 0xdc, 0x0d, 0xcc, 0x3e,
		0x8d, 0x2e, 0x1a, 0x21, 0xb2, 0xa4, 0x3b, 0x7d, 0x45, 0x20, 0xd9, 0x36, 0x40, 0xad, 0x5d, 0x00,
		0xfa, 0x68, 0x84, 0x2a, 0xe0, 0xe4, 0xb1, 0x5f, 0x9a, 0xfb, 0x68, 0xd0, 0x4c, 0xd1, 0xc1, 0x04,
		0x1d, 0x54, 0x1c, 0x44, 0xa1, 0x54, 0x91, 0x30, 0xb1, 0x84, 0x05, 0x53, 0xc9, 0x63, 0x64, 0x65,
		0xea, 0x9a, 0x68, 0x4a, 0x33, 0x51, 0x94, 0x09, 0x1b, 0x03, 0x1b, 0x23, 0x2e, 0x2f, 0x3b, 0x71,
		0xd5, 0xfd, 0x50, 0xbd, 0xff, 0xb3, 0x7a, 0xbf, 0x13, 0x57, 0xdd, 0xe9, 0xbd, 0x0d, 0xde, 0xb9,
		0x9b, 0xe0, 0x98, 0x05, 0x11, 0x61, 0x26, 0x36, 0xcf, 0xb1, 0x8a, 0x73, 0xff, 0x27, 0xdf, 0xf8,
		0x42, 0x80, 0x65, 0x7d, 0x08, 0x3e, 0xf0, 0x53, 0xf0, 0xe9, 0xb3, 0xff, 0x23, 0xd5, 0xee, 0x42,
		0xe0, 0xc2, 0x4d, 0x80, 0x1f, 0x92, 0x8a, 0xcc, 0x54, 0x22, 0x32, 0x64, 0x2b, 0x82, 0xa6, 0x88,
		0x7d, 0xb6, 0xa2, 0x7c, 0x8b, 0x09, 0x95, 0xd6, 0x12, 0x2b, 0x5a, 0x4a, 0x88, 0xcf, 0x17, 0xd5,
		0x63, 0x26, 0x86, 0xa6, 0xd3, 0x93, 0xb7, 0x14, 0xe3, 0x05, 0xc0, 0x69, 0xc2, 0x58, 0xa4, 0x83,
		0xd3, 0x1c, 0x4a, 0x34, 0x41, 0x23, 0x95, 0xe1, 0x3a, 0xe8, 0x0d, 0x0c, 0xce, 0x61, 0x27, 0x38,
		0x07, 0xe5, 0x4e, 0x2a, 0x66, 0xab, 0xe5, 0x32, 0xcf, 0xa3, 0x0b, 0xed, 0xc7, 0x0b, 0xa2, 0x87,
		0x8a, 0x7e, 0x15, 0xa5, 0x56, 0x55, 0x6d, 0x2a, 0xab, 0x4d, 0x75, 0xb5, 0xa8, 0x30, 0x0d, 0x35,
		0x11, 0xbf, 0x1e, 0x2a, 0xea, 0xbd, 0xde, 0x28, 0x80, 0x39, 0x07, 0x50, 0x1f, 0xdb, 0x90, 0xa8,
		0x3a, 0x3e, 0x28, 0x38, 0x4d, 0xc5, 0x21, 0x07, 0x4b, 0x67, 0xa6, 0xdc, 0x52, 0x94, 0x00, 0xd8,
		0xc0, 0x9a, 0xc2, 0x9a, 0x26, 0xdd, 0x9a, 0xaa, 0x02, 0x25, 0x72, 0xc0, 0xa4, 0x09, 0x38, 0x11,
		0x03, 0x28, 0x72, 0xd5, 0xd7, 0x61, 0x02, 0xf4, 0x99, 0x02, 0x5d, 0x26, 0x41, 0xbb, 0x69, 0xd0,
		0x6e, 0x22, 0xb4, 0x9a, 0x0a, 0x1a, 0x93, 0x41, 0x64, 0x3a, 0xe8, 0x01, 0xd9, 0x92, 0xbc, 0x5a,
		0x5d, 0x83, 0x56, 0xfb, 0x33, 0x8a, 0xc5, 0xde, 0xdb, 0xf6, 0xe0, 0x2b, 0xa9, 0x0c, 0xd1, 0xea,
		0xd4, 0xc2, 0xce, 0xbe, 0x16, 0x35, 0xec, 0xed, 0xd2, 0x1e, 0x9f, 0x69, 0x58, 0xfb, 0xce, 0xf4,
		0x7d, 0xe6, 0xda, 0xe4, 0xdb, 0x3d, 0xf9, 0x80, 0xff, 0xec, 0xef, 0x7f, 0xcd, 0x19, 0xe7, 0xf5,
		0x5f, 0x5f, 0xf3, 0xc6, 0x79, 0x7d, 0xf8, 0xc7, 0x7c, 0xf0, 0xdb, 0xf0, 0xcf, 0x85, 0xaf, 0x39,
		0xa3, 0x38, 0xfe, 0x73, 0xe9, 0x6b, 0xce, 0x28, 0xd5, 0x0f, 0x1e, 0x1f, 0x8f, 0x0e, 0x7e, 0x9e,
		0xf4, 0xc5, 0x1f, 0xfc, 0x47, 0x96, 0xfc, 0x25, 0xea, 0xa4, 0x2b, 0xf6, 0x0f, 0x13, 0x24, 0xd4,
		0x65, 0x08, 0xf5, 0x66, 0xa1, 0x36, 0x8d, 0xe7, 0x8a, 0xf1, 0xb1, 0xfe, 0x33, 0x7f, 0x58, 0xec,
		0xbf, 0x3b, 0xf8, 0x79, 0xda, 0x5f, 0xfc, 0xcb, 0x5f, 0xab, 0x7e, 0x2c, 0x7f, 0x78, 0xda, 0x7f,
		0xb7, 0xe6, 0x5f, 0xca, 0xfd, 0x77, 0x9c, 0x6b, 0x94, 0xfa, 0xfb, 0x4b, 0x3f, 0x3a, 0xf8, 0xfb,
		0xc2, 0xba, 0x07, 0x8a, 0x6b, 0x1e, 0x38, 0x59, 0xf7, 0xc0, 0xc9, 0x9a, 0x07, 0xd6, 0x7e, 0xa5,
		0xc2, 0x9a, 0x07, 0x4a, 0xfd, 0x5f, 0x4b, 0x3f, 0xbf, 0xbf, 0xfa, 0x47, 0xcb, 0xfd, 0x83, 0x5f,
		0xeb, 0xfe, 0xed, 0xb4, 0xff, 0xeb, 0xdd, 0x41, 0x02, 0x54, 0x7c, 0x2f, 0x5e, 0xdf, 0xab, 0x1f,
		0x87, 0xbc, 0x20, 0xb5, 0x7c, 0xf2, 0xb5, 0x46, 0x4a, 0x21, 0xbf, 0x1c, 0xb1, 0x0c, 0x62, 0x19,
		0xc4, 0x32, 0x09, 0x8d, 0x65, 0x94, 0xf3, 0xe3, 0xd7, 0xc3, 0x91, 0x14, 0xd9, 0x5c, 0xdf, 0xea,
		0x30, 0xa7, 0xe7, 0xd3, 0x9b, 0xdd, 0xf1, 0xc2, 0xb0, 0xbc, 0xb0, 0xbc, 0xb0, 0xbc, 0x3b, 0x65,
		0x79, 0x7b, 0x96, 0xed, 0xe7, 0xcb, 0x1a, 0x2c, 0x6f, 0x99, 0x70, 0xc9, 0x7b, 0xd3, 0x7e, 0x49,
		0x04, 0x83, 0x74, 0x6d, 0xd9, 0xe4, 0x8a, 0xaa, 0xc9, 0xac, 0x2e, 0x2d, 0x1f, 0xd4, 0x43, 0x68,
		0x5c, 0xff, 0xa3, 0x6b, 0x36, 0x7d, 0xcb, 0xb1, 0x3f, 0x58, 0x2f, 0x56, 0xd0, 0x05, 0x2b, 0x47,
		0xfe, 0x39, 0x7d, 0x0d, 0xdc, 0xc3, 0xb5, 0xf9, 0x23, 0xf1, 0x47, 0x5a, 0x2e, 0x95, 0x4e, 0x4a,
		0x09, 0x3e, 0x56, 0xc4, 0xf3, 0x1a, 0x57, 0x50, 0xbd, 0x24, 0x25, 0x1a, 0x3e, 0x31, 0x59, 0x8f,
		0xa8, 0xba, 0x64, 0x94, 0xee, 0x3c, 0xfa, 0xfd, 0x98, 0x24, 0x25, 0x22, 0x43, 0x54, 0x7c, 0x32,
		0xfc, 0xf3, 0xf8, 0xef, 0x94, 0x46, 0xaf, 0xaa, 0xcb, 0x80, 0x4a, 0xe2, 0x8a, 0x6b, 0xb6, 0xac,
		0x1e, 0x61, 0x1e, 0xe0, 0x68, 0x3d, 0x24, 0xae, 0x84, 0x17, 0x67, 0x20, 0x71, 0x05, 0x89, 0x2b,
		0xeb, 0x17, 0x22, 0xca, 0x4c, 0x5b, 0x12, 0x5f, 0x32, 0x73, 0x4c, 0xa8, 0xf0, 0x20, 0x1c, 0x40,
		0x38, 0x80, 0x70, 0xa0, 0x35, 0x20, 0x93, 0x05, 0xcd, 0x66, 0xd3, 0x37, 0xba, 0x8e, 0xeb, 0xd3,
		0xcb, 0xd5, 0x24, 0x17, 0x6e, 0xf2, 0x11, 0xc4, 0xc7, 0xfe, 0x81, 0x3d, 0x9b, 0xbd, 0x76, 0x70,
		0xea, 0xf9, 0xb3, 0xfc, 0x09, 0xf5, 0xf2, 0x7a, 0x82, 0x40, 0x72, 0x2b, 0xa6, 0xd3, 0x9a, 0xe9,
		0xb7, 0x6a, 0xba, 0xad, 0x5b, 0x68, 0x56, 0x2e, 0x34, 0x6b, 0x17, 0x8a, 0xd5, 0xd3, 0x14, 0xe2,
		0x13, 0x4b, 0x3c, 0x39, 0xfd, 0xba, 0x24, 0xef, 0x03, 0xb3, 0x65, 0xd8, 0xbd, 0xce, 0x93, 0x74,
		0x1d, 0x22, 0x8f, 0x89, 0x29, 0x6b, 0x58, 0x5a, 0x0f, 0x37, 0x3b, 0xfe, 0xa5, 0x47, 0x49, 0x33,
		0xba, 0xb9, 0xda, 0x90, 0x08, 0xbe, 0x25, 0xa2, 0x4f, 0xf7, 0xe7, 0x84, 0x40, 0xf6, 0x69, 0xd2,
		0xe1, 0xf9, 0xa3, 0xd7, 0xc8, 0xe9, 0x46, 0x75, 0xf4, 0x1a, 0x39, 0xde, 0x48, 0x8e, 0x7f, 0x2f,
		0x19, 0xab, 0xc6, 0x35, 0xd7, 0x8c, 0x50, 0x7d, 0x82, 0x09, 0x79, 0xba, 0xb1, 0xfb, 0xe4, 0x23,
		0xb4, 0x62, 0xf7, 0x02, 0xb0, 0x3b, 0xb0, 0x3b, 0xb0, 0x3b, 0xb0, 0x3b, 0xb0, 0x3b, 0xb0, 0x3b,
		0xb0, 0x3b, 0xb0, 0x3b, 0xb0, 0x3b, 0xb0, 0x7b, 0xaa, 0xb1, 0xbb, 0xcb, 0x7c, 0xd7, 0xb4, 0xbd,
		0x8e, 0xe5, 0x1b, 0xa6, 0xef, 0xb3, 0x4e, 0xd7, 0xf7, 0xf4, 0xa1, 0xf8, 0x55, 0x1f, 0x06, 0xc0,
		0x0d, 0xc0, 0x0d, 0xc0, 0x0d, 0xc0, 0x4d, 0x28, 0xef, 0x3d, 0xcb, 0xf6, 0xcf, 0x34, 0x42, 0xed,
		0x12, 0xa0, 0x36, 0xa0, 0x36, 0xa0, 0x76, 0x2a, 0xa1, 0x76, 0xa1, 0x04, 0xa0, 0x0d, 0xa0, 0xad,
		0x01, 0x68, 0x7b, 0xac, 0xe9, 0x32, 0xdf, 0xf8, 0xce, 0xde, 0xf4, 0xe1, 0xeb, 0x99, 0xcf, 0x00,
		0xac, 0x06, 0xac, 0x06, 0xac, 0x06, 0xac, 0xa6, 0x8c, 0xde, 0x9d, 0x9e, 0x6f, 0xd9, 0x2f, 0x46,
		0xd7, 0xf4, 0xbc, 0x40, 0x7c, 0x74, 0x76, 0x89, 0xd9, 0x05, 0x8f, 0x10, 0x68, 0xb9, 0x41, 0xdd,
		0xfb, 0x6f, 0xd9, 0x2b, 0xcc, 0x7f, 0x0e, 0x3c, 0x03, 0x3c, 0x03, 0x3c, 0x03, 0x3c, 0x03, 0xa1,
		0xbc, 0x6b, 0x69, 0x35, 0xb8, 0xe4, 0x13, 0xce, 0x35, 0xac, 0xad, 0xa5, 0xf5, 0x60, 0x08, 0xac,
		0x4b, 0x48, 0xad, 0x08, 0x97, 0xfd, 0xb2, 0xc6, 0xcf, 0xd0, 0xdd, 0xc5, 0x6d, 0xf2, 0x41, 0x49,
		0x6f, 0x51, 0xa8, 0x27, 0x6c, 0xd6, 0xcc, 0x18, 0x85, 0xa3, 0x0c, 0x65, 0x28, 0x83, 0x9c, 0x32,
		0xa0, 0xb5, 0x61, 0x2a, 0x5a, 0x1b, 0x6a, 0x36, 0x0d, 0xbb, 0xc3, 0xfc, 0xc5, 0xaa, 0xda, 0x8e,
		0xb8, 0x85, 0xc2, 0x34, 0x02, 0xd5, 0xd2, 0x4a, 0x61, 0x58, 0xa4, 0x7f, 0x4c, 0x5a, 0xc2, 0x9b,
		0xd1, 0xd3, 0x59, 0xe1, 0x3e, 0xf8, 0xaa, 0x24, 0x0d, 0x16, 0xe8, 0x24, 0xa7, 0x4f, 0xd2, 0x84,
		0xc2, 0xf4, 0x35, 0xf4, 0xdf, 0x1c, 0x2e, 0x1b, 0xf3, 0xaa, 0xec, 0x02, 0xaa, 0xb2, 0x13, 0xc4,
		0x08, 0xa0, 0x2a, 0x1b, 0x55, 0xd9, 0xa8, 0xca, 0x06, 0xef, 0x09, 0xde, 0x13, 0xbc, 0x27, 0x2a,
		0x3b, 0x56, 0x99, 0x18, 0x54, 0x76, 0xcc, 0x7c, 0x71, 0xa4, 0x9b, 0x89, 0x7f, 0x0e, 0xd2, 0xcd,
		0x62, 0x7b, 0xf4, 0xa8, 0xec, 0x00, 0xed, 0xa4, 0x47, 0x7d, 0x50, 0x95, 0x0d, 0xec, 0x0e, 0xec,
		0x0e, 0xec, 0x0e, 0xec, 0x0e, 0xec, 0x0e, 0xec, 0x0e, 0xec, 0x0e, 0xec, 0x0e, 0xec, 0x0e, 0xec,
		0x9e, 0x10, 0xec, 0xde, 0x74, 0x7a, 0xb6, 0xcf, 0x5c, 0x8d, 0x49, 0xc1, 0x93, 0x4f, 0xd0, 0x03,
		0xad, 0xf3, 0x80, 0xd6, 0x80, 0xd6, 0x80, 0xd6, 0x71, 0x84, 0xd6, 0xd4, 0x97, 0x84, 0x53, 0xc2,
		0xa1, 0xd9, 0x64, 0x9e, 0x67, 0x0c, 0x7e, 0xd3, 0xd1, 0x45, 0x62, 0x99, 0x7d, 0x98, 0xff, 0xbc,
		0xc3, 0x44, 0x8e, 0xe0, 0xd1, 0x65, 0xd8, 0xc2, 0x30, 0x70, 0xe1, 0x19, 0xba, 0xb0, 0x0c, 0x5e,
		0xe8, 0x86, 0x2f, 0x74, 0x03, 0x18, 0xaa, 0x21, 0xd4, 0x0c, 0x2d, 0x35, 0x69, 0x8c, 0x36, 0xee,
		0x61, 0x1d, 0x08, 0x2b, 0x17, 0x43, 0xc8, 0x56, 0xd6, 0x99, 0xac, 0xac, 0x97, 0x91, 0xd0, 0xcf,
		0x4c, 0x84, 0xca, 0x50, 0x84, 0x1c, 0xae, 0x86, 0xcd, 0x58, 0x44, 0x11, 0xba, 0x86, 0xc0, 0x60,
		0x84, 0xca, 0x64, 0x44, 0x2d, 0x22, 0xf9, 0xb3, 0x62, 0xb1, 0x7c, 0x5a, 0x2c, 0xe6, 0x4e, 0x4f,
		0x4e, 0x73, 0xe7, 0xa5, 0x52, 0xbe, 0x9c, 0x2f, 0xa5, 0x58, 0x6a, 0xf6, 0x92, 0xb9, 0x7a, 0x52,
		0x72, 0xfc, 0x75, 0x4c, 0xdd, 0x1c, 0x61, 0x7f, 0x97, 0xfd, 0x2f, 0x6b, 0x86, 0x18, 0x6b, 0x8c,
		0x3f, 0x0f, 0xb1, 0x06, 0x62, 0x0d, 0xc4, 0x1a, 0x88, 0x35, 0x10, 0x6b, 0x20, 0xd6, 0x40, 0xac,
		0x81, 0x58, 0x03, 0xb1, 0x06, 0x62, 0x0d, 0xc4, 0x1a, 0x29, 0x8d, 0x35, 0x5c, 0xe6, 0xbb, 0x16,
		0x6b, 0x19, 0x93, 0x18, 0xe0, 0xff, 0x7a, 0xcc, 0x0b, 0x23, 0xe8, 0x58, 0xf7, 0xc1, 0x88, 0x3e,
		0x10, 0x7d, 0x20, 0xfa, 0x40, 0xf4, 0x81, 0xe8, 0x03, 0xd1, 0x07, 0xa2, 0x0f, 0x44, 0x1f, 0x88,
		0x3e, 0x10, 0x7d, 0x20, 0xfa, 0x48, 0x69, 0xf4, 0xe1, 0x5b, 0x1d, 0xe6, 0xf4, 0xfc, 0xf0, 0xa3,
		0x8f, 0x75, 0x1f, 0x8c, 0xe8, 0x03, 0xd1, 0x07, 0xa2, 0x0f, 0x44, 0x1f, 0x88, 0x3e, 0x10, 0x7d,
		0x20, 0xfa, 0x40, 0xf4, 0x81, 0xe8, 0x03, 0xd1, 0x07, 0xa2, 0x8f, 0x38, 0x44, 0x1f, 0xb1, 0x2e,
		0x3b, 0xd1, 0xd4, 0xc3, 0x74, 0xb2, 0xbe, 0xd6, 0x5e, 0xa6, 0x41, 0xdf, 0xcb, 0x63, 0x4d, 0x35,
		0x73, 0x19, 0xad, 0xbd, 0x4d, 0x1f, 0x06, 0x5f, 0xbd, 0x71, 0x31, 0xfe, 0xea, 0x18, 0x69, 0x4b,
		0x0b, 0x2d, 0x31, 0xd2, 0x36, 0xcc, 0x48, 0x18, 0x25, 0x95, 0xf1, 0x8b, 0x74, 0x51, 0x52, 0x89,
		0x91, 0xb6, 0x11, 0x44, 0xab, 0xe8, 0x53, 0x12, 0xa7, 0x68, 0x14, 0x7d, 0x4a, 0xe2, 0x7b, 0xf4,
		0x18, 0x69, 0x1b, 0xc1, 0xaa, 0x18, 0x69, 0x4b, 0xe3, 0xf8, 0x30, 0xd2, 0x16, 0xb0, 0x1a, 0xb0,
		0x1a, 0xb0, 0x5a, 0x8f, 0xbc, 0x63, 0xa4, 0x2d, 0x46, 0xda, 0xc2, 0x33, 0xc0, 0x33, 0xc0, 0x33,
		0xc0, 0x33, 0xcc, 0xcb, 0x3b, 0x46, 0xda, 0x86, 0xcd, 0xba, 0x60, 0xa4, 0xad, 0xc2, 0x07, 0x61,
		0xa4, 0x6d, 0x04, 0x8c, 0x11, 0x46, 0xda, 0xc6, 0x5a, 0x19, 0x30, 0xd2, 0x16, 0x23, 0x6d, 0xc1,
		0xfc, 0x11, 0xaf, 0xb4, 0xd3, 0x23, 0x6d, 0x29, 0xc7, 0x9f, 0x66, 0xf4, 0x67, 0x7d, 0xc4, 0x66,
		0xa0, 0xed, 0x5e, 0x84, 0x12, 0x47, 0x2d, 0x69, 0x5a, 0x25, 0x2c, 0x4b, 0x32, 0xfa, 0x57, 0x8f,
		0x4c, 0xa9, 0x49, 0x93, 0xbc, 0x0c, 0x28, 0x9c, 0x3f, 0xd1, 0x18, 0x64, 0xd2, 0xf1, 0xc7, 0x44,
		0x1d, 0xd2, 0xc9, 0xc6, 0x1d, 0x53, 0xb2, 0x47, 0xf4, 0x6c, 0x11, 0x35, 0x3b, 0xa4, 0x8d, 0x0d,
		0xd2, 0xc6, 0xfe, 0x68, 0x61, 0x7b, 0xa2, 0xb5, 0xc8, 0x54, 0x1d, 0xc8, 0xb3, 0xd4, 0x3c, 0xf3,
		0xb4, 0xdd, 0x1f, 0x69, 0xc4, 0x45, 0x4c, 0x28, 0x93, 0x13, 0xc9, 0x98, 0x74, 0x9e, 0xc1, 0xa4,
		0xf3, 0x64, 0x85, 0x0f, 0xe4, 0x04, 0xb0, 0x5e, 0xe2, 0x57, 0x07, 0xe1, 0xab, 0x87, 0xe8, 0xd5,
		0x4a, 0xa9, 0x6b, 0x25, 0x76, 0x75, 0x72, 0x58, 0xda, 0xb9, 0xab, 0xc4, 0x13, 0xb8, 0xf5, 0x38,
		0xdf, 0x17, 0xe9, 0x15, 0xea, 0x32, 0x84, 0x1a, 0x44, 0xec, 0x0e, 0x10, 0xb1, 0x71, 0x25, 0x36,
		0xeb, 0x71, 0xa1, 0xb9, 0x08, 0xc2, 0xdd, 0xa6, 0x63, 0xdb, 0x2c, 0xc8, 0xa5, 0x35, 0xcc, 0x27,
		0xc7, 0xf5, 0x35, 0xc4, 0x36, 0xcb, 0x1f, 0x81, 0x28, 0x07, 0x51, 0x0e, 0xa2, 0x9c, 0x9d, 0x8a,
		0x72, 0x74, 0x74, 0xc4, 0xd0, 0xd0, 0x01, 0x43, 0x53, 0x0d, 0x91, 0x06, 0x3c, 0xa8, 0xb3, 0x66,
		0x48, 0x77, 0x6f, 0x24, 0xcd, 0x35, 0x42, 0x61, 0x94, 0x87, 0xe8, 0xe8, 0xbc, 0xa5, 0xb3, 0x16,
		0x28, 0xac, 0x23, 0x0d, 0xaf, 0xc3, 0x44, 0x28, 0xa7, 0x0c, 0x04, 0x1a, 0x26, 0x02, 0x6d, 0xb6,
		0x1d, 0x8f, 0xe9, 0x45, 0xa0, 0xa3, 0x8f, 0x00, 0x02, 0x05, 0x02, 0x05, 0x02, 0x05, 0x02, 0x05,
		0x02, 0x05, 0x02, 0x05, 0x02, 0x05, 0x02, 0x05, 0x02, 0x05, 0x02, 0x1d, 0xc0, 0xc3, 0x67, 0xd3,
		0x6a, 0xf7, 0x5c, 0xcd, 0x18, 0x74, 0xf2, 0x21, 0x40, 0xa1, 0x40, 0xa1, 0x40, 0xa1, 0x40, 0xa1,
		0x40, 0xa1, 0x40, 0xa1, 0x40, 0xa1, 0x40, 0xa1, 0x40, 0xa1, 0x40, 0xa1, 0x03, 0x80, 0xe8, 0x74,
		0x99, 0xad, 0x17, 0x82, 0x0e, 0x3f, 0x01, 0xf8, 0x13, 0xf8, 0x13, 0xf8, 0x13, 0xf8, 0x13, 0xf8,
		0x13, 0xf8, 0x13, 0xf8, 0x13, 0xf8, 0x13, 0xf8, 0x13, 0xf8, 0x73, 0x80, 0x0e, 0x47, 0x93, 0xd8,
		0xf4, 0x42, 0xd0, 0xc9, 0x87, 0x00, 0x85, 0x02, 0x85, 0x02, 0x85, 0x02, 0x85, 0x02, 0x85, 0x02,
		0x85, 0x02, 0x85, 0x02, 0x85, 0x02, 0x85, 0xee, 0x30, 0x0a, 0x65, 0xae, 0xeb, 0xb8, 0x9e, 0xe1,
		0xb2, 0x26, 0xb3, 0x5e, 0x59, 0x8b, 0x1e, 0x81, 0x2e, 0x7e, 0x00, 0xd0, 0x27, 0xd0, 0x27, 0xd0,
		0x27, 0xd0, 0x27, 0xd0, 0x27, 0xd0, 0x27, 0xd0, 0x27, 0xd0, 0x27, 0xd0, 0xe7, 0x0e, 0xa3, 0xcf,
		0x0e, 0xf3, 0x3c, 0xf3, 0x85, 0xe9, 0xc4, 0x9f, 0xcb, 0x1f, 0x01, 0x04, 0x0a, 0x04, 0x0a, 0x04,
		0x0a, 0x04, 0x0a, 0x04, 0x0a, 0x04, 0x0a, 0x04, 0x0a, 0x04, 0x0a, 0x04, 0x0a, 0x04, 0xea, 0x19,
		0xde, 0xd0, 0xc5, 0xea, 0x42, 0x9f, 0xc1, 0xf2, 0x40, 0x9e, 0x40, 0x9e, 0x40, 0x9e, 0x40, 0x9e,
		0x40, 0x9e, 0x40, 0x9e, 0x40, 0x9e, 0x40, 0x9e, 0x40, 0x9e, 0x3b, 0x8c, 0x3c, 0x47, 0x03, 0x5c,
		0x88, 0x01, 0x67, 0xb0, 0x2a, 0x70, 0x26, 0x70, 0x26, 0x70, 0xe6, 0x4e, 0xe1, 0x4c, 0xcf, 0x77,
		0x2d, 0xfb, 0x45, 0xc7, 0x44, 0x83, 0xb3, 0x14, 0xd9, 0xdc, 0x51, 0x0e, 0x3c, 0xbd, 0xd9, 0x1d,
		0x2f, 0x0c, 0xcb, 0x0b, 0xcb, 0x0b, 0xcb, 0xbb, 0x53, 0x96, 0xb7, 0x67, 0xd9, 0x7e, 0xbe, 0xac,
		0xc1, 0xf2, 0x96, 0x11, 0xde, 0x23, 0xbc, 0x47, 0x78, 0x1f, 0x8b, 0x23, 0x2d, 0x97, 0x4a, 0x27,
		0x88, 0xe7, 0xd3, 0x1b, 0xcf, 0x63, 0x80, 0xed, 0xd6, 0x01, 0xb6, 0x54, 0xb3, 0x91, 0x35, 0xcc,
		0xaf, 0x25, 0x18, 0x86, 0x1c, 0xcd, 0xf8, 0x5a, 0xdf, 0x6c, 0x9a, 0x4d, 0x8f, 0x6e, 0x7e, 0xed,
		0x68, 0xbd, 0x98, 0x0d, 0xb0, 0xcd, 0x61, 0x80, 0x6d, 0x0c, 0xa2, 0x0a, 0x0c, 0xb0, 0xe5, 0x7f,
		0x23, 0xb2, 0x01, 0xb6, 0xcd, 0xb1, 0x0e, 0xd0, 0xd7, 0xf5, 0x0f, 0xd6, 0xa5, 0xa5, 0x1b, 0xf2,
		0xa0, 0x1b, 0x40, 0x37, 0x80, 0x6e, 0xa0, 0x78, 0x53, 0x2a, 0x03, 0x32, 0x59, 0xb0, 0xeb, 0xb8,
		0x3e, 0xbd, 0x48, 0x8d, 0x95, 0x20, 0x58, 0x9d, 0xf8, 0xb0, 0x3f, 0xb0, 0x67, 0xb3, 0xd7, 0x0e,
		0xce, 0xba, 0x78, 0x4e, 0xbd, 0xb8, 0x9e, 0xb0, 0x8f, 0xdc, 0x72, 0xe9, 0xb4, 0x60, 0xfa, 0x2d,
		0x99, 0x6e, 0x8b, 0x16, 0x9a, 0x65, 0x0b, 0xcd, 0xc2, 0x85, 0x62, 0xe9, 0x34, 0x05, 0xf5, 0xc4,
		0x12, 0x4f, 0x4e, 0xb8, 0xae, 0x34, 0x5a, 0x86, 0xdd, 0xeb, 0x3c, 0x31, 0x57, 0xe3, 0x60, 0xde,
		0xb2, 0x86, 0xa5, 0xf5, 0xb0, 0xb1, 0xe3, 0x5f, 0x7a, 0x94, 0x34, 0xa3, 0x9b, 0x9d, 0x0d, 0x89,
		0xd2, 0x5b, 0xa2, 0xf6, 0x74, 0x7f, 0x4e, 0x08, 0xf4, 0x9e, 0x26, 0x1d, 0x9e, 0x3f, 0x7a, 0x8d,
		0x2c, 0x6e, 0x54, 0x47, 0xaf, 0x91, 0xd5, 0x8d, 0xe4, 0xf8, 0xf7, 0x92, 0xb1, 0x6a, 0x5c, 0xe7,
		0x4c, 0x13, 0xaa, 0x4f, 0xd6, 0x63, 0x4d, 0x97, 0xf9, 0xc6, 0x77, 0xf6, 0xa6, 0x0f, 0xb5, 0xcf,
		0x7c, 0x06, 0xe0, 0x35, 0xe0, 0x35, 0xe0, 0x35, 0xe0, 0x35, 0xa1, 0xbc, 0xbb, 0x4e, 0xcf, 0xb7,
		0xec, 0x17, 0xa3, 0x6b, 0x7a, 0x5e, 0x20, 0x3e, 0xfa, 0x30, 0x36, 0x51, 0x8e, 0x59, 0xcc, 0x3d,
		0x42, 0xa0, 0xe5, 0x86, 0xd9, 0x6a, 0xb9, 0xcc, 0xf3, 0x34, 0x7a, 0x85, 0xf9, 0xcf, 0x81, 0x67,
		0x80, 0x67, 0x80, 0x67, 0x80, 0x67, 0x20, 0x94, 0x77, 0xab, 0xab, 0xc9, 0xba, 0xcc, 0xf9, 0x84,
		0x73, 0x0d, 0x6b, 0x8f, 0xf6, 0x26, 0x71, 0xbc, 0xcb, 0x74, 0xe7, 0x5f, 0x8b, 0x1a, 0xf7, 0x7e,
		0xd9, 0x2f, 0x6b, 0xfc, 0x8c, 0x3b, 0xd3, 0xf7, 0x99, 0x6b, 0x6b, 0x3b, 0x8e, 0xc9, 0x07, 0xfd,
		0x67, 0x7f, 0xff, 0x6b, 0xce, 0x38, 0xaf, 0xff, 0xfa, 0x9a, 0x37, 0xce, 0xeb, 0xc3, 0x3f, 0xe6,
		0x83, 0xdf, 0x86, 0x7f, 0x2e, 0x7c, 0xcd, 0x19, 0xc5, 0xf1, 0x9f, 0x4b, 0x5f, 0x73, 0x46, 0xa9,
		0x7e, 0xf0, 0xf8, 0x78, 0x74, 0xf0, 0xf3, 0xa4, 0x2f, 0xfe, 0xe0, 0x3f, 0xb2, 0xda, 0x5e, 0xa6,
		0xbe, 0x97, 0x20, 0xce, 0x28, 0x1c, 0x65, 0x28, 0x43, 0x19, 0xe4, 0x94, 0xc1, 0x34, 0x9e, 0x2b,
		0xc6, 0xc7, 0xfa, 0xcf, 0xfc, 0x61, 0xb1, 0xff, 0xee, 0xe0, 0xe7, 0x69, 0x7f, 0xf1, 0x2f, 0x7f,
		0xad, 0xfa, 0xb1, 0xfc, 0xe1, 0x69, 0xff, 0xdd, 0x9a, 0x7f, 0x29, 0xf7, 0xdf, 0x71, 0xae, 0x51,
		0xea, 0xef, 0x2f, 0xfd, 0xe8, 0xe0, 0xef, 0x0b, 0xeb, 0x1e, 0x28, 0xae, 0x79, 0xe0, 0x64, 0xdd,
		0x03, 0x27, 0x6b, 0x1e, 0x58, 0xfb, 0x95, 0x0a, 0x6b, 0x1e, 0x28, 0xf5, 0x7f, 0x2d, 0xfd, 0xfc,
		0xfe, 0xea, 0x1f, 0x2d, 0xf7, 0x0f, 0x7e, 0xad, 0xfb, 0xb7, 0xd3, 0xfe, 0xaf, 0x77, 0x07, 0x09,
		0x34, 0x0d, 0xbb, 0xc3, 0xfc, 0xc5, 0x2a, 0x79, 0x80, 0x38, 0x1f, 0x74, 0x1a, 0x81, 0x6a, 0xc9,
		0x0b, 0x1d, 0xe6, 0x1c, 0x1e, 0x93, 0x66, 0x24, 0x65, 0xf4, 0xe4, 0x89, 0xd6, 0x82, 0xaf, 0xda,
		0x18, 0x05, 0x9b, 0x29, 0xaa, 0x6b, 0x1b, 0xe6, 0xe6, 0x92, 0x67, 0x99, 0x51, 0xa5, 0xfc, 0x66,
		0x74, 0x26, 0x99, 0x15, 0x90, 0x64, 0x96, 0x20, 0x46, 0x00, 0x49, 0x66, 0x48, 0x32, 0x23, 0x5c,
		0x1b, 0x49, 0x66, 0xe0, 0x3a, 0xc1, 0x75, 0x82, 0xeb, 0xd4, 0x26, 0xef, 0x48, 0x32, 0x0b, 0x9d,
		0xdf, 0x41, 0x92, 0x99, 0xf8, 0xe7, 0x20, 0xc9, 0x2c, 0xb6, 0x47, 0x8f, 0x24, 0x33, 0x50, 0x4d,
		0x7a, 0xd4, 0x07, 0x49, 0x66, 0x80, 0xd7, 0x80, 0xd7, 0x80, 0xd7, 0x09, 0x86, 0xd7, 0x48, 0x32,
		0x43, 0x92, 0x19, 0x3c, 0x03, 0x3c, 0x03, 0x3c, 0x03, 0x3c, 0xc3, 0xbc, 0xbc, 0x23, 0xc9, 0x2c,
		0x6c, 0xde, 0x05, 0x49, 0x66, 0x0a, 0x1f, 0x84, 0x24, 0xb3, 0x08, 0x38, 0x23, 0x24, 0x99, 0xc5,
		0x5a, 0x19, 0x90, 0x64, 0x86, 0x24, 0x33, 0x30, 0x7f, 0xc4, 0x2b, 0xed, 0x74, 0x92, 0x19, 0x65,
		0x42, 0x52, 0x46, 0x6b, 0x8e, 0x19, 0x41, 0x4b, 0x42, 0x3a, 0xb9, 0x41, 0x7b, 0x4b, 0x5e, 0x09,
		0x8b, 0x67, 0x7f, 0xcb, 0xa1, 0x4c, 0x45, 0xd6, 0xe0, 0x72, 0x2f, 0x44, 0xa9, 0xc9, 0xfe, 0x11,
		0x5c, 0x66, 0x64, 0xd5, 0x20, 0x57, 0xf6, 0xca, 0xf2, 0xfc, 0x8a, 0xef, 0xab, 0xe5, 0x47, 0x65,
		0xaf, 0x2d, 0xbb, 0xda, 0x66, 0x83, 0x48, 0xdf, 0xcb, 0xbe, 0xcb, 0xd8, 0xbd, 0x76, 0x5b, 0xa1,
		0xd7, 0xe7, 0xb5, 0xf9, 0x83, 0x6e, 0xb1, 0x5b, 0xb7, 0xc5, 0x5c, 0xd6, 0x7a, 0xff, 0x36, 0x5a,
		0x2a, 0xd4, 0x23, 0x22, 0x52, 0x68, 0x3d, 0x8a, 0xac, 0xa0, 0xc1, 0xf4, 0x9a, 0x2b, 0xa7, 0xb2,
		0xe2, 0x0a, 0x27, 0xf6, 0x84, 0xe0, 0xb9, 0xab, 0x9e, 0x37, 0xf1, 0x39, 0x4b, 0x1c, 0x30, 0xe1,
		0xc1, 0x8a, 0x9d, 0x28, 0xff, 0xb9, 0x08, 0x9c, 0x89, 0x64, 0xb6, 0xb7, 0x52, 0x56, 0xb7, 0x64,
		0xf6, 0xb6, 0x74, 0x96, 0xb6, 0x0a, 0xa5, 0xae, 0x4e, 0x99, 0xab, 0x52, 0xe2, 0x64, 0x94, 0x37,
		0x19, 0xa5, 0x4d, 0x42, 0x59, 0xeb, 0xb5, 0x32, 0xb2, 0xd9, 0xcc, 0x6a, 0x83, 0xd4, 0x28, 0x06,
		0xa7, 0x29, 0xde, 0x57, 0x29, 0xdf, 0x4b, 0x51, 0xdc, 0x3f, 0xd1, 0xdd, 0x33, 0x51, 0xdd, 0x27,
		0x91, 0xdf, 0x1b, 0x91, 0xdf, 0x0f, 0x91, 0xde, 0x03, 0x85, 0x8b, 0xb2, 0x95, 0xef, 0x6f, 0xe8,
		0x06, 0x8f, 0x29, 0xde, 0xcf, 0x4b, 0x80, 0x25, 0x09, 0x87, 0xe0, 0xab, 0xec, 0xd7, 0xb4, 0x3d,
		0xff, 0x60, 0x15, 0xd8, 0x18, 0xd8, 0x18, 0xd8, 0x18, 0x21, 0x79, 0xb1, 0x5a, 0xcc, 0xf6, 0x2d,
		0xff, 0xcd, 0x65, 0xcf, 0x14, 0x86, 0x46, 0x21, 0x1b, 0x37, 0x7b, 0x39, 0xfa, 0x2a, 0xef, 0x4d,
		0x8f, 0xd1, 0xcd, 0xed, 0xa8, 0x54, 0x2a, 0x8d, 0x87, 0xea, 0xfd, 0x9f, 0xd5, 0xfb, 0x46, 0xed,
		0xcb, 0x5d, 0x55, 0x55, 0x08, 0x83, 0xd4, 0x63, 0x8f, 0xe4, 0x9e, 0x87, 0xb8, 0xa2, 0xf4, 0xbe,
		0xf2, 0xe1, 0xf2, 0xf3, 0x43, 0x36, 0x0e, 0x45, 0xb3, 0xc4, 0x6f, 0x56, 0xab, 0x5c, 0x54, 0x2e,
		0x1e, 0xa2, 0x1e, 0x7c, 0x51, 0x0f, 0xdb, 0x36, 0x80, 0xaa, 0x58, 0x49, 0x55, 0x48, 0xde, 0x53,
		0x90, 0x10, 0x15, 0xe2, 0x37, 0x0f, 0x02, 0x34, 0xc5, 0x1e, 0xe1, 0xa9, 0x8d, 0xb9, 0x5e, 0x81,
		0xd0, 0x4b, 0x8e, 0xd8, 0x55, 0x22, 0x72, 0x95, 0x88, 0x5b, 0x39, 0xa2, 0x96, 0x77, 0xff, 0x24,
		0xa5, 0x9d, 0x48, 0xca, 0xb3, 0x42, 0x94, 0x95, 0xaa, 0x5c, 0xf3, 0x49, 0xf4, 0x76, 0xf9, 0xdc,
		0xfc, 0x13, 0x5b, 0x76, 0x5e, 0x74, 0xc7, 0xe5, 0x77, 0x9a, 0x63, 0x73, 0x25, 0x37, 0x75, 0xf3,
		0x46, 0xae, 0xdf, 0x9e, 0x0d, 0x5b, 0xc3, 0xc9, 0x48, 0x0a, 0x31, 0x90, 0x9c, 0x8c, 0x23, 0x37,
		0xc3, 0x28, 0x12, 0xc0, 0x88, 0x07, 0x2a, 0xa2, 0x01, 0x89, 0x74, 0xe0, 0x21, 0x1d, 0x60, 0x48,
		0x05, 0x12, 0x31, 0x56, 0x16, 0x4e, 0x0f, 0x2b, 0xa2, 0x24, 0xdb, 0x1d, 0xe7, 0x06, 0xed, 0xd8,
		0x13, 0xd8, 0x21, 0xde, 0x9d, 0x11, 0xd9, 0x91, 0xec, 0x46, 0xf5, 0xe4, 0xdc, 0x83, 0xd5, 0x6f,
		0xbf, 0xfc, 0x6e, 0x2b, 0xde, 0x2b, 0x6b, 0xb6, 0x4d, 0xb7, 0xb3, 0xbe, 0xe4, 0x60, 0xa2, 0x53,
		0xa3, 0x9f, 0x5b, 0xb3, 0x33, 0x9b, 0xb5, 0x7e, 0xab, 0xb6, 0xf3, 0x68, 0xf9, 0x9c, 0x76, 0x6f,
		0xfa, 0x32, 0x22, 0x8a, 0x2d, 0xac, 0xd0, 0xc2, 0x8a, 0xbc, 0xa4, 0xc0, 0xc3, 0xaf, 0x4e, 0x24,
		0x91, 0xdb, 0xd8, 0xf7, 0xe1, 0xb1, 0xf1, 0x9b, 0xf8, 0xe1, 0x8f, 0x13, 0x9b, 0xf8, 0x9c, 0x26,
		0x13, 0xbf, 0x4d, 0x08, 0x12, 0x6c, 0xe5, 0xb7, 0x08, 0x09, 0x8d, 0xa1, 0xe7, 0xbd, 0xba, 0x11,
		0x1d, 0x87, 0x28, 0x37, 0xee, 0x50, 0xf0, 0xae, 0x52, 0x98, 0x1a, 0x95, 0xa1, 0x42, 0xa5, 0xc4,
		0x4d, 0x95, 0xed, 0x54, 0x66, 0x37, 0x95, 0xd9, 0x4c, 0x59, 0x71, 0xd4, 0x13, 0x6e, 0x6a, 0x0f,
		0x97, 0x82, 0xb7, 0x1b, 0xfe, 0x26, 0xde, 0x0f, 0x8f, 0xd7, 0x4b, 0x07, 0x1f, 0x32, 0xfc, 0x4d,
		0xa8, 0x93, 0x1d, 0x47, 0x68, 0xc4, 0x61, 0x01, 0xad, 0x96, 0xb8, 0xf6, 0x5a, 0x2d, 0x41, 0xcd,
		0xcd, 0x41, 0x73, 0xa1, 0xb9, 0x4a, 0x57, 0x09, 0x93, 0x53, 0x6b, 0x33, 0xf3, 0x59, 0xec, 0xda,
		0x60, 0xe2, 0x3e, 0x4e, 0x05, 0x9e, 0xb9, 0x1b, 0x19, 0x87, 0xa3, 0xa3, 0x61, 0x64, 0x72, 0x6c,
		0xb5, 0xc2, 0xd4, 0x4a, 0xb1, 0x8c, 0x20, 0xa9, 0x4c, 0x20, 0x69, 0xaf, 0x5a, 0x80, 0x6e, 0xa6,
		0x5a, 0x37, 0x45, 0xf3, 0x76, 0x44, 0x5c, 0x88, 0xbc, 0x2b, 0x91, 0x74, 0x29, 0xd2, 0xae, 0x45,
		0x45, 0x8c, 0x49, 0xc4, 0x59, 0x55, 0xac, 0xc9, 0xc4, 0x9b, 0x4c, 0xcc, 0xa9, 0xc4, 0x5d, 0xfc,
		0x96, 0x23, 0x23, 0x71, 0xf3, 0x24, 0x7d, 0xdb, 0xad, 0x9e, 0x49, 0x23, 0x99, 0x41, 0xa3, 0x27,
		0x39, 0xd5, 0x65, 0x9e, 0xa4, 0x5d, 0x9d, 0xf4, 0x04, 0x19, 0xaf, 0x00, 0x4d, 0x87, 0xa6, 0x43,
		0xd3, 0x63, 0xab, 0xe9, 0x1e, 0x7b, 0x65, 0xae, 0xe5, 0xbf, 0x29, 0x64, 0xa2, 0x8f, 0x57, 0x80,
		0xa6, 0x43, 0xd3, 0x53, 0xa9, 0xe9, 0x6a, 0x99, 0x6b, 0x2a, 0x19, 0x6b, 0x34, 0x99, 0x6a, 0x93,
		0x17, 0xb9, 0xbd, 0xab, 0xde, 0x5c, 0xdc, 0xde, 0x7c, 0xbc, 0xfc, 0xd4, 0xa8, 0x5c, 0x55, 0xee,
		0xaf, 0x1b, 0x0f, 0xd5, 0x3f, 0xab, 0xf7, 0x97, 0xb5, 0x2f, 0xb2, 0x92, 0x44, 0x90, 0xa3, 0x46,
		0x94, 0x7c, 0xf7, 0xef, 0xca, 0xfd, 0xcd, 0xe5, 0xcd, 0x27, 0x85, 0xb4, 0xca, 0xc3, 0xa8, 0x5f,
		0xe1, 0xe2, 0xfe, 0xb2, 0x76, 0x79, 0x51, 0xb9, 0x4a, 0xf2, 0x3b, 0x7c, 0xbe, 0xf9, 0xe3, 0xe6,
		0xf6, 0xdf, 0x37, 0x49, 0x7e, 0x85, 0xeb, 0xcb, 0x9b, 0xdb, 0xfb, 0x44, 0xbf, 0x40, 0xe5, 0xff,
		0x29, 0xbd, 0x80, 0xd4, 0x93, 0x75, 0xdd, 0x56, 0x5f, 0x0b, 0xfa, 0xf1, 0xd9, 0x0f, 0x5f, 0x1e,
		0xf9, 0x04, 0x4f, 0x03, 0xf5, 0x00, 0xf5, 0x20, 0xbe, 0x89, 0x6d, 0x7c, 0xe3, 0x5b, 0x1d, 0x66,
		0x34, 0x5d, 0x66, 0xfa, 0x4c, 0x81, 0xb1, 0x9c, 0x5b, 0x05, 0x1a, 0x0f, 0x8d, 0x4f, 0xa5, 0xc6,
		0x0f, 0xa4, 0xdc, 0xb7, 0x9a, 0xdf, 0xbd, 0x72, 0x51, 0x41, 0xed, 0x25, 0x9a, 0x9f, 0x29, 0x8e,
		0xb9, 0x50, 0x6b, 0x0e, 0x42, 0x50, 0x7f, 0x46, 0xd2, 0xe9, 0x96, 0x6a, 0xcc, 0x04, 0xe5, 0x1c,
		0x81, 0xbe, 0x5a, 0xab, 0x94, 0xd8, 0x6d, 0x6d, 0xfe, 0xac, 0x58, 0x2c, 0x9f, 0x16, 0x8b, 0xb9,
		0xd3, 0x93, 0xd3, 0xdc, 0x79, 0xa9, 0x94, 0x2f, 0xe7, 0x4b, 0x31, 0xda, 0xed, 0x90, 0xaa, 0x77,
		0xea, 0x71, 0xf0, 0xcb, 0x6f, 0x5d, 0x66, 0xa8, 0x5c, 0x22, 0x8e, 0x17, 0x80, 0x37, 0x86, 0x37,
		0x4e, 0xa5, 0x37, 0xee, 0xd9, 0x96, 0x63, 0xab, 0xc0, 0x6f, 0x89, 0xb6, 0xc8, 0x6a, 0x6d, 0x8f,
		0xd3, 0xd0, 0x88, 0xe0, 0x30, 0xaa, 0x37, 0x4f, 0x7d, 0x79, 0xf4, 0x12, 0xf9, 0x5c, 0xfb, 0x72,
		0x57, 0x6d, 0x5c, 0x7e, 0x48, 0x6f, 0x9d, 0xf4, 0xd5, 0x6d, 0x2a, 0x8b, 0xa4, 0x6f, 0x6b, 0xa9,
		0x7c, 0xad, 0xca, 0x65, 0x2a, 0x5f, 0xab, 0xfa, 0x3f, 0x77, 0x35, 0x14, 0xb4, 0x47, 0x06, 0x89,
		0x93, 0x9b, 0xfb, 0x2e, 0x5a, 0xfe, 0x2e, 0x93, 0xfa, 0x2e, 0x50, 0xe6, 0xae, 0xbb, 0x28, 0x78,
		0x54, 0xc6, 0xbe, 0x35, 0xa2, 0x10, 0x2b, 0x5e, 0x97, 0x2a, 0x5a, 0x97, 0x2a, 0x56, 0x17, 0x2b,
		0x52, 0x8f, 0xac, 0xea, 0x73, 0x46, 0xc2, 0x08, 0x0b, 0x3f, 0x67, 0x64, 0x2a, 0xa1, 0xb5, 0x9f,
		0x5b, 0x4b, 0x18, 0x45, 0x76, 0x42, 0xa5, 0x02, 0xb4, 0xd9, 0x76, 0x9a, 0xdf, 0xb7, 0x17, 0x80,
		0x0e, 0x7f, 0x4c, 0xb1, 0xfe, 0x33, 0x47, 0x53, 0xff, 0xe9, 0xbd, 0x25, 0xb3, 0xf8, 0x73, 0xf0,
		0xbd, 0xc3, 0xaa, 0xfc, 0xe4, 0x2c, 0xda, 0x13, 0x2b, 0xd6, 0x8b, 0x4b, 0xed, 0xe7, 0x66, 0x01,
		0x90, 0xa5, 0x42, 0xa2, 0x2f, 0xfc, 0xdc, 0x28, 0x20, 0x34, 0x6e, 0x8f, 0xbb, 0xea, 0xd3, 0xb7,
		0x3a, 0xec, 0x6f, 0xc7, 0x66, 0x86, 0x50, 0xa7, 0xce, 0xb9, 0xbb, 0x85, 0xe9, 0xe3, 0xe9, 0xa8,
		0x24, 0xe3, 0x13, 0x3b, 0x55, 0x26, 0x2e, 0x7e, 0xa5, 0x2a, 0x5c, 0x62, 0xa9, 0x07, 0x01, 0xcb,
		0xd7, 0x90, 0xcd, 0x09, 0xa0, 0x21, 0xd8, 0xc4, 0x51, 0x90, 0x55, 0x4a, 0x6a, 0x03, 0x9b, 0xc0,
		0xa9, 0xf3, 0x17, 0xbd, 0x72, 0x62, 0x92, 0x8b, 0xc1, 0xaa, 0x5c, 0x55, 0xae, 0xe8, 0x5b, 0x03,
		0xc7, 0x06, 0xc7, 0x06, 0xc7, 0x06, 0xc7, 0x06, 0xc7, 0xa6, 0xc1, 0xb1, 0x11, 0xb7, 0x9b, 0x1a,
		0xfa, 0xb5, 0x04, 0x37, 0x9c, 0xda, 0x14, 0xc3, 0x8b, 0xee, 0x83, 0x12, 0xe5, 0xb0, 0x39, 0x36,
		0xe5, 0x8b, 0x49, 0x41, 0x3a, 0xc4, 0x8f, 0x74, 0x68, 0x39, 0x1d, 0xd3, 0xb2, 0xf9, 0x1c, 0xeb,
		0x64, 0x6f, 0x67, 0x1f, 0xe2, 0x43, 0x69, 0x39, 0xd0, 0x0f, 0x49, 0x45, 0x69, 0xdc, 0x6e, 0x4f,
		0x42, 0x3c, 0x32, 0x82, 0x23, 0x59, 0xb3, 0x57, 0xcc, 0x7e, 0x09, 0x6c, 0x26, 0xdf, 0x4d, 0xb2,
		0x58, 0xeb, 0x5a, 0x09, 0x78, 0x24, 0x97, 0xaa, 0x34, 0xc9, 0x75, 0x13, 0x7c, 0x4e, 0x21, 0x91,
		0xad, 0x2f, 0xd6, 0x88, 0x37, 0xf4, 0xad, 0x28, 0x94, 0x4e, 0x42, 0xdc, 0x0c, 0x22, 0x24, 0x55,
		0xe7, 0x90, 0x58, 0xd1, 0x61, 0xc0, 0xd9, 0xfd, 0xfd, 0xfd, 0xaf, 0xa6, 0xf1, 0x77, 0xc5, 0xf8,
		0x2b, 0x67, 0x9c, 0x37, 0xea, 0x33, 0xff, 0xf3, 0xf8, 0x68, 0x34, 0xea, 0x07, 0x3f, 0x73, 0x87,
		0xe5, 0x7c, 0xff, 0xe0, 0xb7, 0xe9, 0xdf, 0xd7, 0x1f, 0x1f, 0x8f, 0x0e, 0xfe, 0x29, 0xf3, 0xd4,
		0x6f, 0x07, 0xbf, 0x1e, 0x1f, 0x8f, 0xb6, 0x5b, 0x90, 0xba, 0x06, 0x4e, 0xe0, 0x9b, 0xe3, 0xf9,
		0x62, 0x6e, 0x67, 0xf2, 0x04, 0x7c, 0x0e, 0x7c, 0x0e, 0x7c, 0x0e, 0x7c, 0x0e, 0x7c, 0x0e, 0x7c,
		0x8e, 0x90, 0xcf, 0x69, 0x3b, 0x2f, 0x96, 0x6d, 0x3c, 0x99, 0xb6, 0xcd, 0x5c, 0x7e, 0xbf, 0x33,
		0xf7, 0x14, 0x7c, 0x0f, 0x7c, 0xcf, 0xd2, 0x75, 0x05, 0x67, 0x46, 0x34, 0x27, 0x95, 0x27, 0x27,
		0xdb, 0x1d, 0xc7, 0x6f, 0x09, 0x8b, 0xf6, 0xec, 0x43, 0x90, 0x6c, 0x48, 0x76, 0x74, 0x92, 0x1d,
		0x2d, 0xcd, 0xba, 0xed, 0x3e, 0x95, 0x97, 0x67, 0xdd, 0x70, 0x83, 0xca, 0x49, 0xb4, 0x76, 0x7b,
		0x1c, 0xbd, 0xfd, 0x83, 0x9f, 0x8a, 0x47, 0x67, 0x7f, 0x90, 0xac, 0x1c, 0x99, 0x5d, 0xdd, 0x9e,
		0x40, 0x5a, 0x57, 0xb7, 0x87, 0x9c, 0x2e, 0x5c, 0x7d, 0x8f, 0x7e, 0xd0, 0xb2, 0x5b, 0xec, 0x87,
		0x44, 0x2b, 0xf0, 0xe0, 0x31, 0x5c, 0x75, 0x8b, 0x04, 0x93, 0xb8, 0xea, 0x16, 0x47, 0x0a, 0xcb,
		0xb1, 0x52, 0x54, 0x7d, 0xc0, 0x03, 0x81, 0x47, 0x2b, 0x70, 0x28, 0x66, 0xaa, 0x15, 0x53, 0xb8,
		0x09, 0xf8, 0x37, 0xd3, 0x6d, 0xfd, 0xd7, 0x74, 0x99, 0x61, 0xd9, 0x3e, 0x73, 0xdd, 0x5e, 0x57,
		0xa1, 0x99, 0xd6, 0x8a, 0xb5, 0xe4, 0x4a, 0xfb, 0xf3, 0x09, 0x2b, 0xed, 0x17, 0x13, 0x74, 0x55,
		0x81, 0x27, 0x13, 0x7c, 0x32, 0x05, 0x20, 0x51, 0x04, 0x31, 0x85, 0x90, 0xe0, 0x90, 0xa5, 0x14,
		0x64, 0xf2, 0xa0, 0xf9, 0xfa, 0xa2, 0xde, 0xbd, 0x73, 0xb0, 0x08, 0xe6, 0xce, 0x0f, 0x44, 0xc3,
		0x7f, 0xeb, 0x32, 0x0f, 0x93, 0xe7, 0x25, 0x94, 0x6a, 0xb8, 0x73, 0x3b, 0x37, 0x7b, 0xbe, 0xcb,
		0xdc, 0x26, 0xb3, 0x7d, 0xf3, 0x85, 0x11, 0xf4, 0x56, 0x50, 0x69, 0xad, 0xa0, 0xd6, 0xe8, 0x6a,
		0xfc, 0x4b, 0xbd, 0x44, 0x9c, 0xa4, 0xf1, 0x15, 0x91, 0x79, 0x59, 0x5a, 0x8e, 0xa8, 0x11, 0xd6,
		0x64, 0x3d, 0xc2, 0x16, 0x4d, 0x8a, 0x22, 0x3d, 0x7f, 0x04, 0x04, 0x0d, 0xb2, 0x74, 0x1f, 0x41,
		0x3e, 0x17, 0xe7, 0x43, 0xd8, 0x8b, 0xe6, 0xe9, 0x7a, 0x58, 0x53, 0xf6, 0x25, 0x60, 0xa1, 0x65,
		0x7b, 0xbe, 0x69, 0xfb, 0xea, 0x68, 0x63, 0xbc, 0x10, 0x10, 0x07, 0x10, 0x07, 0x10, 0x07, 0x10,
		0x07, 0x10, 0x07, 0x10, 0x07, 0x10, 0x07, 0x10, 0xc7, 0x0a, 0xc4, 0xe1, 0x33, 0xf7, 0xd5, 0x6c,
		0x53, 0x40, 0x8e, 0xd1, 0x4a, 0xc0, 0x1c, 0xc0, 0x1c, 0xc0, 0x1c, 0xc2, 0x32, 0xe3, 0xf9, 0xa6,
		0x6f, 0x28, 0x2a, 0x51, 0x46, 0xad, 0x93, 0xf7, 0x64, 0x89, 0xcf, 0xf6, 0xd0, 0xe6, 0x66, 0x6d,
		0xd3, 0x76, 0x3c, 0xd6, 0x74, 0xec, 0x96, 0x92, 0x2c, 0x03, 0xc6, 0x00, 0xc6, 0x24, 0x0a, 0xc6,
		0x90, 0x77, 0x1a, 0x07, 0xae, 0x09, 0x17, 0xd7, 0x74, 0x14, 0xa4, 0x6c, 0x9a, 0x02, 0x6b, 0xfe,
		0x00, 0x9a, 0x01, 0x9a, 0x01, 0x9a, 0x01, 0x83, 0x02, 0xe8, 0x01, 0xe8, 0x01, 0x06, 0x05, 0x48,
		0x63, 0x25, 0xd2, 0x30, 0x7c, 0xab, 0xc3, 0x48, 0xe0, 0xc6, 0x70, 0x25, 0x60, 0x0e, 0x60, 0x0e,
		0x60, 0x0e, 0x61, 0x99, 0x51, 0x9b, 0x80, 0x46, 0xc9, 0x9f, 0x00, 0x74, 0x00, 0x74, 0x80, 0xef,
		0x00, 0x0a, 0x09, 0x11, 0x85, 0x28, 0x28, 0xfa, 0x14, 0x80, 0x58, 0x36, 0xb0, 0x07, 0xb0, 0x07,
		0xb0, 0x07, 0xf8, 0x0e, 0x40, 0x0f, 0x40, 0x0f, 0xf0, 0x1d, 0x40, 0x1a, 0x2b, 0x91, 0x06, 0x15,
		0xdf, 0x31, 0x5e, 0x09, 0x98, 0x03, 0x98, 0x03, 0x98, 0x03, 0x7c, 0x07, 0x40, 0x07, 0x40, 0x07,
		0xf8, 0x8e, 0xdd, 0x43, 0x21, 0x5a, 0xcb, 0x7e, 0x25, 0xc7, 0x6e, 0x4e, 0x9e, 0xe7, 0x6e, 0x14,
		0xd5, 0xed, 0x79, 0x83, 0xff, 0x8c, 0xba, 0x4e, 0x28, 0x57, 0xc4, 0x67, 0x04, 0x7a, 0x4b, 0x75,
		0x7b, 0xde, 0xe0, 0x3f, 0xc3, 0x71, 0x06, 0x8d, 0xdf, 0x47, 0x1f, 0x7d, 0x39, 0xf9, 0x64, 0x5d,
		0xf3, 0x51, 0x05, 0x5a, 0x3c, 0x58, 0xad, 0x36, 0x93, 0xef, 0x2f, 0x10, 0x3c, 0x8d, 0x8e, 0x02,
		0xfa, 0xc0, 0x1f, 0x3a, 0x0a, 0xa0, 0xa3, 0x00, 0x22, 0x27, 0x44, 0x4e, 0xbb, 0x11, 0x39, 0x81,
		0xad, 0x45, 0xe0, 0x84, 0xc0, 0x49, 0x26, 0x70, 0x02, 0x5b, 0x1b, 0x61, 0x9c, 0x84, 0x8e, 0x02,
		0x40, 0x1c, 0x40, 0x1c, 0x40, 0x1c, 0x40, 0x1c, 0x40, 0x1c, 0x40, 0x1c, 0x40, 0x1c, 0x31, 0x45,
		0x1c, 0xe8, 0x28, 0x00, 0xcc, 0x01, 0xcc, 0x81, 0x8e, 0x02, 0xb3, 0x4b, 0xa0, 0xa3, 0x00, 0x60,
		0xcc, 0x4e, 0xc3, 0x18, 0xdc, 0x38, 0x27, 0x1c, 0xd7, 0xa0, 0xa3, 0x00, 0xd0, 0x0c, 0xd0, 0x0c,
		0x18, 0x14, 0x40, 0x0f, 0x40, 0x0f, 0x30, 0x28, 0x40, 0x1a, 0x5a, 0x91, 0x06, 0x3a, 0x0a, 0x00,
		0x73, 0x00, 0x73, 0x20, 0xc3, 0x1e, 0xa0, 0x03, 0xa0, 0x03, 0x7c, 0x07, 0x50, 0x48, 0x14, 0x28,
		0x04, 0x1d, 0x05, 0x80, 0x3d, 0x80, 0x3d, 0xc0, 0x77, 0x00, 0x7a, 0x00, 0x7a, 0x80, 0xef, 0x00,
		0xd2, 0xd0, 0x89, 0x34, 0xd0, 0x51, 0x00, 0x98, 0x03, 0x98, 0x03, 0x7c, 0x07, 0x40, 0x07, 0x40,
		0x07, 0xf8, 0x0e, 0xa0, 0x10, 0x55, 0x14, 0x92, 0xc6, 0x8e, 0x02, 0x12, 0x35, 0xf0, 0x19, 0xe9,
		0x1e, 0x02, 0x97, 0x83, 0x0f, 0x8b, 0x43, 0xdb, 0x00, 0xbb, 0xc5, 0x7e, 0x28, 0xf4, 0x0d, 0x08,
		0x1e, 0x97, 0x6b, 0x1c, 0x90, 0x43, 0xe3, 0x80, 0x30, 0xb1, 0xdd, 0x2e, 0x35, 0x0e, 0x90, 0x46,
		0x6c, 0x93, 0xf3, 0xee, 0xd9, 0x03, 0xf3, 0x23, 0x71, 0xdc, 0xe3, 0xae, 0x18, 0xe7, 0x12, 0xcf,
		0x8e, 0xbe, 0xb6, 0x1c, 0x26, 0x23, 0x80, 0xa7, 0xcc, 0xee, 0x75, 0x98, 0x3b, 0xb4, 0xbc, 0xea,
		0xf0, 0x34, 0x5f, 0x54, 0x58, 0xa3, 0x6a, 0xf7, 0x3a, 0x83, 0x13, 0x0c, 0x15, 0xe9, 0x13, 0x6c,
		0x61, 0xcf, 0xb2, 0xfd, 0x93, 0x02, 0xc1, 0xee, 0x9d, 0x02, 0xdc, 0x03, 0xdc, 0xef, 0x08, 0xb8,
		0x2f, 0x16, 0xce, 0x8b, 0xe7, 0xe5, 0xd3, 0xc2, 0x39, 0x20, 0x7d, 0x64, 0x90, 0xbe, 0x1e, 0x03,
		0x30, 0xfa, 0x9d, 0xb9, 0x36, 0x6b, 0xcb, 0xa3, 0xd1, 0xd1, 0xf3, 0xe8, 0x63, 0x05, 0x38, 0x1a,
		0x2b, 0x38, 0x8a, 0x3e, 0x56, 0xe0, 0xeb, 0xb5, 0x28, 0x11, 0xb9, 0x32, 0xad, 0x53, 0x2a, 0xe4,
		0x08, 0x20, 0x47, 0x00, 0x88, 0x1e, 0x88, 0x9e, 0xf7, 0x08, 0x90, 0x23, 0x10, 0x21, 0x94, 0x47,
		0x1f, 0x2b, 0x20, 0x0e, 0x20, 0x0e, 0x20, 0x0e, 0x20, 0x0e, 0x20, 0x0e, 0x20, 0x0e, 0x20, 0x8e,
		0xb8, 0x22, 0x0e, 0xf4, 0xb1, 0x02, 0xe6, 0x00, 0xe6, 0x40, 0x1f, 0xab, 0xd9, 0x25, 0xd0, 0xc7,
		0x0a, 0x30, 0x66, 0xa7, 0x61, 0x0c, 0xf2, 0x1c, 0x13, 0x8e, 0x6b, 0xd0, 0xc7, 0x0a, 0x68, 0x06,
		0x68, 0x06, 0x0c, 0x0a, 0xa0, 0x07, 0xa0, 0x07, 0x18, 0x14, 0x20, 0x0d, 0xad, 0x48, 0x03, 0x7d,
		0xac, 0x80, 0x39, 0x80, 0x39, 0x50, 0xd7, 0x09, 0xd0, 0x01, 0xd0, 0x01, 0xbe, 0x03, 0x28, 0x24,
		0x0a, 0x14, 0x82, 0x3e, 0x56, 0xc0, 0x1e, 0xc0, 0x1e, 0xe0, 0x3b, 0x00, 0x3d, 0x00, 0x3d, 0xc0,
		0x77, 0x00, 0x69, 0xe8, 0x44, 0x1a, 0xe8, 0x63, 0x05, 0xcc, 0x01, 0xcc, 0x01, 0xbe, 0x03, 0xa0,
		0x03, 0xa0, 0x03, 0x7c, 0x07, 0x50, 0x88, 0x2a, 0x0a, 0x49, 0x63, 0x1f, 0x2b, 0xa9, 0x2a, 0xf8,
		0x8c, 0x74, 0x27, 0xab, 0x3f, 0x86, 0x1f, 0x17, 0x83, 0xf6, 0x01, 0xb6, 0x25, 0x81, 0x41, 0x26,
		0x3e, 0x2d, 0x78, 0x1a, 0xad, 0x03, 0xf4, 0xa1, 0x3c, 0xb4, 0x0e, 0x40, 0xeb, 0x00, 0x84, 0x48,
		0x08, 0x91, 0x76, 0x23, 0x44, 0x02, 0x2d, 0x8b, 0x08, 0x09, 0x11, 0x92, 0x4c, 0x84, 0x04, 0x5a,
		0x36, 0xc2, 0x80, 0x08, 0xad, 0x03, 0x80, 0x38, 0x80, 0x38, 0x80, 0x38, 0x80, 0x38, 0x80, 0x38,
		0x80, 0x38, 0x80, 0x38, 0x62, 0x8a, 0x38, 0xd0, 0x3a, 0x00, 0x98, 0x03, 0x98, 0x03, 0xad, 0x03,
		0x66, 0x97, 0x40, 0xeb, 0x00, 0xc0, 0x98, 0x9d, 0x86, 0x31, 0xb8, 0x5a, 0x4e, 0x38, 0xae, 0x41,
		0xeb, 0x00, 0xa0, 0x19, 0xa0, 0x19, 0x30, 0x28, 0x80, 0x1e, 0x80, 0x1e, 0x60, 0x50, 0x80, 0x34,
		0xb4, 0x22, 0x0d, 0xb4, 0x0e, 0x00, 0xe6, 0x00, 0xe6, 0x40, 0x2a, 0x3d, 0x40, 0x07, 0x40, 0x07,
		0xf8, 0x0e, 0xa0, 0x90, 0x28, 0x50, 0x08, 0x5a, 0x07, 0x00, 0x7b, 0x00, 0x7b, 0x80, 0xef, 0x00,
		0xf4, 0x00, 0xf4, 0x00, 0xdf, 0x01, 0xa4, 0xa1, 0x13, 0x69, 0xa0, 0x75, 0x00, 0x30, 0x07, 0x30,
		0x07, 0xf8, 0x0e, 0x80, 0x0e, 0x80, 0x0e, 0xf0, 0x1d, 0x40, 0x21, 0xaa, 0x28, 0x24, 0x8d, 0xad,
		0x03, 0x24, 0x6a, 0xe0, 0x33, 0xd2, 0x8d, 0x03, 0x6e, 0x06, 0x1f, 0x16, 0x83, 0xb6, 0x01, 0x9e,
		0xf3, 0xec, 0xff, 0xd7, 0x74, 0xd9, 0x30, 0x8f, 0xd1, 0xed, 0x75, 0x7d, 0xf9, 0x26, 0x02, 0x2b,
		0xd6, 0x42, 0x4b, 0x01, 0x7d, 0xe8, 0x0f, 0x2d, 0x05, 0xd0, 0x52, 0x00, 0xa1, 0x13, 0x42, 0xa7,
		0xdd, 0x08, 0x9d, 0x40, 0xd7, 0x22, 0x72, 0x42, 0xe4, 0x24, 0x13, 0x39, 0x81, 0xae, 0x8d, 0x30,
		0x50, 0x42, 0x4b, 0x01, 0x20, 0x0e, 0x20, 0x0e, 0x20, 0x0e, 0x20, 0x0e, 0x20, 0x0e, 0x20, 0x0e,
		0x20, 0x8e, 0x98, 0x22, 0x0e, 0xb4, 0x14, 0x00, 0xe6, 0x00, 0xe6, 0x40, 0x4b, 0x81, 0xd9, 0x25,
		0xd0, 0x52, 0x00, 0x30, 0x66, 0xa7, 0x61, 0x0c, 0xae, 0x9c, 0x13, 0x8e, 0x6b, 0xd0, 0x52, 0x00,
		0x68, 0x06, 0x68, 0x06, 0x0c, 0x0a, 0xa0, 0x07, 0xa0, 0x07, 0x18, 0x14, 0x20, 0x0d, 0xad, 0x48,
		0x03, 0x2d, 0x05, 0x80, 0x39, 0x80, 0x39, 0x90, 0x62, 0x0f, 0xd0, 0x01, 0xd0, 0x01, 0xbe, 0x03,
		0x28, 0x24, 0x0a, 0x14, 0x82, 0x96, 0x02, 0xc0, 0x1e, 0xc0, 0x1e, 0xe0, 0x3b, 0x00, 0x3d, 0x00,
		0x3d, 0xc0, 0x77, 0x00, 0x69, 0xe8, 0x44, 0x1a, 0x68, 0x29, 0x00, 0xcc, 0x01, 0xcc, 0x01, 0xbe,
		0x03, 0xa0, 0x03, 0xa0, 0x03, 0x7c, 0x07, 0x50, 0x88, 0x2a, 0x0a, 0x49, 0x63, 0x4b, 0x01, 0xe5,
		0x8a, 0xf8, 0x8c, 0x74, 0x83, 0x81, 0x87, 0xd1, 0x47, 0x5f, 0x4e, 0x3e, 0x39, 0x06, 0xdd, 0x06,
		0x7c, 0xc7, 0x97, 0xc8, 0x32, 0x9e, 0xfa, 0xba, 0xe0, 0x71, 0xf4, 0x14, 0xd0, 0x07, 0xff, 0xd0,
		0x53, 0x00, 0x3d, 0x05, 0x10, 0x3b, 0x21, 0x76, 0xda, 0x8d, 0xd8, 0x09, 0x7c, 0x2d, 0x42, 0x27,
		0x84, 0x4e, 0x32, 0xa1, 0x13, 0xf8, 0xda, 0x08, 0x23, 0x25, 0xf4, 0x14, 0x00, 0xe2, 0x00, 0xe2,
		0x00, 0xe2, 0x00, 0xe2, 0x00, 0xe2, 0x00, 0xe2, 0x00, 0xe2, 0x88, 0x29, 0xe2, 0x40, 0x4f, 0x01,
		0x60, 0x0e, 0x60, 0x0e, 0xf4, 0x14, 0x98, 0x5d, 0x02, 0x3d, 0x05, 0x00, 0x63, 0x76, 0x1a, 0xc6,
		0xe0, 0xce, 0x39, 0xe1, 0xb8, 0x06, 0x3d, 0x05, 0x80, 0x66, 0x80, 0x66, 0xc0, 0xa0, 0x00, 0x7a,
		0x00, 0x7a, 0x80, 0x41, 0x01, 0xd2, 0xd0, 0x8a, 0x34, 0xd0, 0x53, 0x00, 0x98, 0x03, 0x98, 0x03,
		0x39, 0xf6, 0x00, 0x1d, 0x00, 0x1d, 0xe0, 0x3b, 0x80, 0x42, 0xa2, 0x40, 0x21, 0xe8, 0x29, 0x00,
		0xec, 0x01, 0xec, 0x01, 0xbe, 0x03, 0xd0, 0x03, 0xd0, 0x03, 0x7c, 0x07, 0x90, 0x86, 0x4e, 0xa4,
		0x81, 0x9e, 0x02, 0xc0, 0x1c, 0xc0, 0x1c, 0xe0, 0x3b, 0x00, 0x3a, 0x00, 0x3a, 0xc0, 0x77, 0x00,
		0x85, 0xa8, 0xa2, 0x90, 0x34, 0xf6, 0x14, 0x90, 0x29, 0x82, 0xcf, 0x48, 0xb7, 0x11, 0xa8, 0x05,
		0x9f, 0x16, 0x83, 0xd6, 0x01, 0x3d, 0x8f, 0xb9, 0xf2, 0x9d, 0x03, 0x82, 0xa7, 0xd1, 0x38, 0x40,
		0x1f, 0xc6, 0x43, 0xe3, 0x00, 0x34, 0x0e, 0x40, 0x80, 0x84, 0x00, 0x69, 0x37, 0x02, 0x24, 0x90,
		0xb2, 0x88, 0x8f, 0x10, 0x1f, 0xc9, 0xc4, 0x47, 0x20, 0x65, 0x23, 0x0c, 0x87, 0xd0, 0x38, 0x00,
		0x88, 0x03, 0x88, 0x03, 0x88, 0x03, 0x88, 0x03, 0x88, 0x03, 0x88, 0x03, 0x88, 0x23, 0xa6, 0x88,
		0x03, 0x8d, 0x03, 0x80, 0x39, 0x80, 0x39, 0xd0, 0x38, 0x60, 0x76, 0x09, 0x34, 0x0e, 0x00, 0x8c,
		0xd9, 0x69, 0x18, 0x83, 0x8b, 0xe5, 0x84, 0xe3, 0x1a, 0x34, 0x0e, 0x00, 0x9a, 0x01, 0x9a, 0x01,
		0x83, 0x02, 0xe8, 0x01, 0xe8, 0x01, 0x06, 0x05, 0x48, 0x43, 0x2b, 0xd2, 0x40, 0xe3, 0x00, 0x60,
		0x0e, 0x60, 0x0e, 0x24, 0xd2, 0x03, 0x74, 0x00, 0x74, 0x80, 0xef, 0x00, 0x0a, 0x89, 0x02, 0x85,
		0xa0, 0x71, 0x00, 0xb0, 0x07, 0xb0, 0x07, 0xf8, 0x0e, 0x40, 0x0f, 0x40, 0x0f, 0xf0, 0x1d, 0x40,
		0x1a, 0x3a, 0x91, 0x06, 0x1a, 0x07, 0x00, 0x73, 0x00, 0x73, 0x80, 0xef, 0x00, 0xe8, 0x00, 0xe8,
		0x00, 0xdf, 0x01, 0x14, 0xa2, 0x8a, 0x42, 0xd2, 0xd8, 0x38, 0x40, 0xa2, 0x06, 0x3e, 0x23, 0xdd,
		0x37, 0xe0, 0xf3, 0xe0, 0xc3, 0x62, 0xd0, 0x36, 0xe0, 0xbf, 0xa6, 0xe5, 0xcb, 0xb7, 0x0d, 0x08,
		0x9e, 0x46, 0xdb, 0x00, 0x7d, 0x08, 0x0f, 0x6d, 0x03, 0xd0, 0x36, 0x00, 0xe1, 0x11, 0xc2, 0xa3,
		0xdd, 0x08, 0x8f, 0x40, 0xc9, 0x22, 0x3a, 0x42, 0x74, 0x24, 0x13, 0x1d, 0x81, 0x92, 0x8d, 0x30,
		0x18, 0x42, 0xdb, 0x00, 0x20, 0x0e, 0x20, 0x0e, 0x20, 0x0e, 0x20, 0x0e, 0x20, 0x0e, 0x20, 0x0e,
		0x20, 0x8e, 0x98, 0x22, 0x0e, 0xb4, 0x0d, 0x00, 0xe6, 0x00, 0xe6, 0x40, 0xdb, 0x80, 0xd9, 0x25,
		0xd0, 0x36, 0x00, 0x30, 0x66, 0xa7, 0x61, 0x0c, 0xae, 0x95, 0x13, 0x8e, 0x6b, 0xd0, 0x36, 0x00,
		0x68, 0x06, 0x68, 0x06, 0x0c, 0x0a, 0xa0, 0x07, 0xa0, 0x07, 0x18, 0x14, 0x20, 0x0d, 0xad, 0x48,
		0x03, 0x6d, 0x03, 0x80, 0x39, 0x80, 0x39, 0x90, 0x46, 0x0f, 0xd0, 0x01, 0xd0, 0x01, 0xbe, 0x03,
		0x28, 0x24, 0x0a, 0x14, 0x82, 0xb6, 0x01, 0xc0, 0x1e, 0xc0, 0x1e, 0xe0, 0x3b, 0x00, 0x3d, 0x00,
		0x3d, 0xc0, 0x77, 0x00, 0x69, 0xe8, 0x44, 0x1a, 0x68, 0x1b, 0x00, 0xcc, 0x01, 0xcc, 0x01, 0xbe,
		0x03, 0xa0, 0x03, 0xa0, 0x03, 0x7c, 0x07, 0x50, 0x88, 0x2a, 0x0a, 0x49, 0x63, 0xdb, 0x00, 0x89,
		0x1a, 0xf8, 0x8c, 0x74, 0xdb, 0x80, 0x7f, 0x0f, 0x3e, 0x4c, 0x57, 0xdb, 0x80, 0x3d, 0xc2, 0x53,
		0x91, 0x3d, 0x0d, 0xc9, 0x53, 0x10, 0x38, 0x00, 0xa9, 0x8d, 0xe7, 0xdb, 0xf3, 0xed, 0x3b, 0xb8,
		0xf9, 0x27, 0xb6, 0xec, 0xed, 0x00, 0xaf, 0x0d, 0x13, 0xb0, 0x5b, 0x6c, 0x1b, 0x54, 0xcb, 0x5e,
		0x59, 0x9e, 0x5f, 0xf1, 0x7d, 0xbe, 0x4a, 0xf8, 0x81, 0x3b, 0xad, 0xb6, 0xd9, 0x00, 0x69, 0x0d,
		0x2c, 0x99, 0xdd, 0x6b, 0xb7, 0x0f, 0xf7, 0x78, 0x1c, 0x80, 0xf8, 0x43, 0xb7, 0x6e, 0x8b, 0xb9,
		0xac, 0xf5, 0xfe, 0x6d, 0xf4, 0x88, 0xd2, 0x86, 0x08, 0x0a, 0x99, 0xb0, 0x70, 0x71, 0x88, 0x95,
		0xa0, 0x38, 0x6d, 0x16, 0xa4, 0xf5, 0xe2, 0xb1, 0xfa, 0x5f, 0xd6, 0xec, 0x0f, 0xef, 0xbe, 0x08,
		0xed, 0xc7, 0x86, 0xbd, 0x10, 0xd8, 0x83, 0xd5, 0xef, 0xbf, 0xfc, 0x76, 0x2b, 0xde, 0x2c, 0xdb,
		0xb2, 0xbd, 0xb5, 0xaf, 0x33, 0xc1, 0xca, 0x83, 0x1f, 0x5a, 0xb3, 0x2b, 0x9b, 0x3b, 0x8f, 0x6c,
		0x0d, 0x13, 0x79, 0xc2, 0x40, 0xfe, 0x8e, 0x21, 0xbc, 0x41, 0x9c, 0x70, 0x90, 0x26, 0x1c, 0x84,
		0x09, 0x75, 0xf4, 0x10, 0x93, 0xc3, 0x6d, 0x9d, 0x38, 0xb2, 0xcd, 0xf1, 0x9e, 0x6f, 0xd9, 0x84,
		0xf1, 0xb6, 0x8e, 0x7e, 0x7e, 0x9b, 0x9d, 0xe4, 0x6a, 0x31, 0xc3, 0xcd, 0x0b, 0x88, 0xc4, 0xff,
		0xe2, 0x2d, 0x63, 0x44, 0xa3, 0x79, 0xe9, 0xa8, 0x5d, 0x3a, 0x3a, 0x97, 0x6a, 0xf9, 0xa2, 0xe6,
		0xe9, 0x78, 0x5b, 0xb8, 0x64, 0x3d, 0x66, 0xba, 0xcd, 0x6f, 0xfc, 0x9b, 0x37, 0x29, 0xc2, 0x18,
		0x3e, 0xc7, 0xb9, 0x01, 0x62, 0xd1, 0x89, 0x30, 0xe1, 0x24, 0x43, 0x30, 0xc9, 0xf7, 0x26, 0x92,
		0xa5, 0x8f, 0x94, 0xe9, 0x22, 0x65, 0x7a, 0x48, 0xa9, 0xf7, 0x10, 0x2d, 0xbc, 0x15, 0x26, 0x77,
		0xa6, 0x0e, 0xca, 0xe9, 0x98, 0x96, 0x6d, 0x04, 0xce, 0x52, 0xe0, 0xd0, 0xc6, 0x36, 0x4d, 0x80,
		0xbd, 0xc9, 0x5e, 0x31, 0xfb, 0x25, 0x70, 0xed, 0x62, 0x74, 0x8d, 0x44, 0xec, 0xa4, 0x42, 0xc7,
		0xa8, 0xd2, 0xbb, 0x93, 0x58, 0x5f, 0xf2, 0x79, 0x82, 0x40, 0x5e, 0x86, 0x5e, 0x57, 0xa1, 0x4f,
		0xa8, 0xb6, 0xac, 0x50, 0x3a, 0x89, 0x70, 0xd3, 0x34, 0xc5, 0xb1, 0x75, 0x01, 0x0d, 0xb9, 0x33,
		0x7d, 0x9f, 0xb9, 0xb6, 0xb0, 0x8a, 0x64, 0xf7, 0xf7, 0xf7, 0xbf, 0x9a, 0xc6, 0xdf, 0x15, 0xe3,
		0xaf, 0x9c, 0x71, 0xde, 0xa8, 0xcf, 0xfc, 0xcf, 0xe3, 0xa3, 0xd1, 0xa8, 0x1f, 0xfc, 0xcc, 0x1d,
		0x96, 0xf3, 0xfd, 0x83, 0xdf, 0xa6, 0x7f, 0x5f, 0x7f, 0x7c, 0x3c, 0x3a, 0xf8, 0xa7, 0xcc, 0x53,
		0xbf, 0x1d, 0xfc, 0x7a, 0x7c, 0x3c, 0xe2, 0xb7, 0x74, 0x75, 0x52, 0x4b, 0x27, 0x14, 0x48, 0x2a,
		0x05, 0x94, 0x4a, 0x81, 0xe5, 0xca, 0x00, 0x53, 0xb2, 0xad, 0xa1, 0x44, 0x27, 0x48, 0x95, 0x3b,
		0x99, 0x59, 0xc7, 0xea, 0x0c, 0xbf, 0xbd, 0xf1, 0xf4, 0x26, 0xc3, 0x29, 0x51, 0xdc, 0xbf, 0xcc,
		0x39, 0xd9, 0x9e, 0xce, 0x36, 0x95, 0xb1, 0xe0, 0x54, 0x74, 0x51, 0x08, 0x2d, 0xdb, 0x3b, 0xe6,
		0x8a, 0x56, 0x04, 0x02, 0xe8, 0x0f, 0xb6, 0xd7, 0x18, 0x61, 0x4b, 0x59, 0x1a, 0x61, 0x43, 0x40,
		0xfa, 0xcd, 0xf1, 0x7c, 0x83, 0xd9, 0xbe, 0x6b, 0x31, 0x8f, 0x3f, 0x22, 0x9b, 0x7b, 0x0a, 0x71,
		0x19, 0xe2, 0xb2, 0x05, 0x61, 0x7a, 0x13, 0x8f, 0xcd, 0x66, 0x9e, 0x15, 0x8b, 0xcf, 0xf2, 0x88,
		0xcf, 0x10, 0x9f, 0x89, 0x09, 0xaa, 0x28, 0x13, 0xa5, 0xc6, 0x4c, 0x29, 0x0a, 0xae, 0xb4, 0x00,
		0xab, 0x08, 0xb2, 0xba, 0x40, 0x53, 0x60, 0xa4, 0x0c, 0x9a, 0x21, 0x4b, 0x85, 0x9a, 0x0a, 0xcd,
		0x90, 0xdb, 0x96, 0xe9, 0x11, 0xb4, 0x43, 0x0e, 0x96, 0x41, 0xe2, 0x97, 0xbc, 0xda, 0x50, 0xa9,
		0x0f, 0xb9, 0x1a, 0x91, 0xab, 0x13, 0xa9, 0x5a, 0xc9, 0xa9, 0x97, 0x02, 0xa3, 0x93, 0xa1, 0x6e,
		0x13, 0xe4, 0x5a, 0xf6, 0x0b, 0x41, 0xbe, 0x57, 0xfe, 0x2c, 0xd4, 0x1d, 0x90, 0xe2, 0x0b, 0x48,
		0xf9, 0x03, 0x52, 0x3e, 0x61, 0x23, 0xbf, 0xb0, 0xf5, 0x02, 0x9b, 0x4e, 0x28, 0x65, 0x28, 0xc6,
		0x01, 0x90, 0x1e, 0xc5, 0x94, 0x8a, 0x56, 0x7c, 0xb2, 0x12, 0x0c, 0x39, 0x0c, 0x39, 0x0c, 0x79,
		0xb2, 0x0c, 0x79, 0x38, 0xfd, 0x25, 0xbb, 0xaf, 0x45, 0xc3, 0x6c, 0xb5, 0x5c, 0xe6, 0x11, 0xa0,
		0xc6, 0xb9, 0xd5, 0x60, 0x73, 0x60, 0x73, 0x60, 0x73, 0xc2, 0xd6, 0x9f, 0x8c, 0xe4, 0xad, 0xf3,
		0xb2, 0x1e, 0x48, 0xde, 0xb1, 0x2d, 0x2d, 0xf4, 0x9f, 0xfd, 0xfd, 0xaf, 0x39, 0xe3, 0xbc, 0xfe,
		0xeb, 0x6b, 0xde, 0x38, 0xaf, 0x0f, 0xff, 0x98, 0x0f, 0x7e, 0x1b, 0xfe, 0xb9, 0xf0, 0x35, 0x67,
		0x14, 0xc7, 0x7f, 0x2e, 0x7d, 0xcd, 0x19, 0xa5, 0xfa, 0xc1, 0xe3, 0xe3, 0xd1, 0xc1, 0xcf, 0x93,
		0xbe, 0xf8, 0x83, 0xff, 0xc8, 0x86, 0x9d, 0x4e, 0x0d, 0xbc, 0x9d, 0x74, 0xbc, 0x6d, 0x75, 0x5f,
		0xcb, 0xa4, 0x3e, 0xb0, 0x0c, 0x1f, 0x08, 0x1f, 0x08, 0x1f, 0x18, 0x99, 0xfe, 0xc4, 0xd6, 0x07,
		0x9a, 0xc6, 0x73, 0xc5, 0xf8, 0x58, 0xff, 0x99, 0x3f, 0x2c, 0xf6, 0xdf, 0x1d, 0xfc, 0x3c, 0xed,
		0x2f, 0xfe, 0xe5, 0xaf, 0x55, 0x3f, 0x96, 0x3f, 0x3c, 0xed, 0xbf, 0x5b, 0xf3, 0x2f, 0xe5, 0xfe,
		0x3b, 0xce, 0x35, 0x4a, 0xfd, 0xfd, 0xa5, 0x1f, 0x1d, 0xfc, 0x7d, 0x61, 0xdd, 0x03, 0xc5, 0x35,
		0x0f, 0x9c, 0xac, 0x7b, 0xe0, 0x64, 0xcd, 0x03, 0x6b, 0xbf, 0x52, 0x61, 0xcd, 0x03, 0xa5, 0xfe,
		0xaf, 0xa5, 0x9f, 0xdf, 0x5f, 0xfd, 0xa3, 0xe5, 0xfe, 0xc1, 0xaf, 0x75, 0xff, 0x76, 0xda, 0xff,
		0xf5, 0xee, 0x00, 0x88, 0x60, 0xd7, 0x11, 0x41, 0x2a, 0xaa, 0xd7, 0x5a, 0xb6, 0x77, 0x3c, 0x9b,
		0xb3, 0x31, 0xfd, 0x9f, 0xb7, 0x63, 0xa9, 0x3b, 0xcc, 0x8c, 0x58, 0xfe, 0xca, 0xef, 0x8e, 0xe7,
		0x57, 0x87, 0x1f, 0x3d, 0xf9, 0xf3, 0x1b, 0x57, 0x56, 0x8b, 0xfc, 0x79, 0x88, 0x0c, 0xc4, 0x95,
		0xe6, 0x4c, 0x55, 0xb9, 0x52, 0x49, 0xac, 0x86, 0xbb, 0x60, 0xdc, 0x05, 0x6b, 0xc7, 0x56, 0x93,
		0xf3, 0x6e, 0x33, 0xf3, 0xd9, 0x65, 0xcf, 0x32, 0x07, 0x3e, 0x86, 0x51, 0xa7, 0x12, 0xcf, 0xde,
		0x8d, 0xcc, 0xda, 0xd1, 0xd1, 0xc8, 0x46, 0x1d, 0x4f, 0x94, 0x2c, 0x06, 0x26, 0x63, 0x58, 0x81,
		0x2a, 0x6d, 0x2f, 0x44, 0x0b, 0x58, 0x33, 0x14, 0x89, 0x23, 0x05, 0x18, 0x0b, 0x18, 0x8b, 0x8d,
		0xdf, 0x10, 0x89, 0x23, 0xe0, 0x3d, 0xc0, 0x7b, 0x24, 0x90, 0xf7, 0x40, 0xe2, 0x08, 0xc2, 0x56,
		0x45, 0x22, 0x1b, 0x89, 0x23, 0x30, 0xe4, 0x30, 0xe4, 0x48, 0x1c, 0x09, 0xc3, 0xd6, 0x20, 0x71,
		0x04, 0x36, 0x07, 0x36, 0x27, 0x2e, 0x36, 0x07, 0x89, 0x23, 0x48, 0x1c, 0x01, 0xde, 0x8e, 0xc0,
		0x07, 0x22, 0x71, 0x04, 0x3e, 0x10, 0x3e, 0x10, 0x89, 0x23, 0x9a, 0x7d, 0x20, 0x12, 0x47, 0x90,
		0x38, 0x02, 0x44, 0x80, 0xc4, 0x91, 0xe9, 0xf3, 0x14, 0x89, 0x23, 0x32, 0x57, 0x98, 0x19, 0x8a,
		0xbc, 0x11, 0x81, 0xe6, 0xbc, 0xe2, 0xa7, 0x41, 0xdb, 0x91, 0x60, 0xd4, 0xbc, 0x57, 0x90, 0x10,
		0x4d, 0x74, 0xfb, 0x25, 0x6e, 0x1d, 0x8b, 0x4b, 0x53, 0xe9, 0x0d, 0x32, 0x4e, 0xdf, 0x61, 0x7a,
		0xad, 0x54, 0x67, 0x53, 0xdf, 0x18, 0x49, 0xa0, 0x69, 0x90, 0xfc, 0x86, 0xea, 0xe8, 0x91, 0xe4,
		0x31, 0xf7, 0x95, 0xb9, 0x02, 0xed, 0x91, 0xc6, 0x0f, 0xa0, 0x33, 0x12, 0x3a, 0x23, 0xcd, 0x8a,
		0x90, 0x4c, 0xc7, 0xda, 0xe0, 0x39, 0x74, 0x44, 0x0a, 0x31, 0xde, 0xde, 0xe9, 0x8e, 0x48, 0xb2,
		0x7c, 0xd4, 0x34, 0x83, 0x47, 0x2a, 0x84, 0x46, 0x1e, 0x6c, 0x24, 0x94, 0x12, 0xf2, 0x60, 0x45,
		0xce, 0x3b, 0x36, 0x79, 0xb0, 0x63, 0x1d, 0x8b, 0x41, 0x1a, 0x2c, 0x3a, 0xa8, 0xc1, 0x5a, 0xa4,
		0xd1, 0x5a, 0xc8, 0x27, 0xc2, 0x52, 0x5d, 0xe8, 0xe0, 0x2e, 0x07, 0x77, 0x39, 0x11, 0xa9, 0x96,
		0x3c, 0xeb, 0x99, 0x89, 0xc9, 0x5d, 0x0e, 0xe5, 0x4d, 0xce, 0xb9, 0xc2, 0x1a, 0xa3, 0x77, 0x8a,
		0x7c, 0x72, 0x26, 0x71, 0xa6, 0xc7, 0xd2, 0x1e, 0x9d, 0x11, 0xac, 0x45, 0x75, 0xeb, 0x35, 0x59,
		0x30, 0x29, 0x19, 0x20, 0xe3, 0x5f, 0x75, 0xb5, 0x49, 0x90, 0x87, 0x31, 0x12, 0xb2, 0xf2, 0xae,
		0x09, 0x19, 0xae, 0x58, 0x13, 0x75, 0xc5, 0x4a, 0xa4, 0x72, 0xa9, 0x1c, 0x01, 0xdf, 0x75, 0x5c,
		0x5f, 0x1d, 0xbe, 0x06, 0xab, 0x48, 0x22, 0x81, 0x0f, 0xec, 0xd9, 0xec, 0xb5, 0x03, 0x08, 0x53,
		0x3a, 0x01, 0x00, 0x06, 0x00, 0x06, 0x00, 0x16, 0x57, 0x3e, 0xc3, 0xee, 0x75, 0x9e, 0x84, 0x47,
		0xda, 0xac, 0x52, 0xa1, 0x32, 0x66, 0xc7, 0x93, 0xda, 0x96, 0xa5, 0xe5, 0x30, 0x3b, 0x3e, 0x36,
		0x47, 0x50, 0x2e, 0x95, 0x4e, 0x30, 0x2c, 0x3e, 0x3a, 0xbc, 0x92, 0x9a, 0xac, 0xa9, 0x51, 0x0e,
		0xc0, 0xe8, 0xf7, 0x50, 0xba, 0xec, 0x3c, 0x0c, 0x3f, 0x72, 0xf4, 0x7b, 0x8c, 0xda, 0xeb, 0xa0,
		0x57, 0x86, 0x66, 0x98, 0x87, 0x2b, 0x82, 0x08, 0xac, 0x09, 0xae, 0x08, 0x10, 0x21, 0x21, 0x42,
		0xc2, 0x15, 0x01, 0xae, 0x08, 0x12, 0xcf, 0xde, 0xe2, 0x8a, 0x20, 0x7c, 0x21, 0xc3, 0x15, 0x01,
		0xae, 0x08, 0x70, 0x45, 0x10, 0x83, 0x90, 0x1b, 0x57, 0x04, 0x00, 0xc0, 0x00, 0xc0, 0xbb, 0x06,
		0x80, 0x71, 0x45, 0xb0, 0xcc, 0x4f, 0xe3, 0x8a, 0x20, 0x42, 0x74, 0x99, 0xc1, 0x15, 0x01, 0xae,
		0x08, 0x22, 0x27, 0xf5, 0x22, 0xbc, 0x22, 0x08, 0xa1, 0x9e, 0x7a, 0xe1, 0x86, 0x20, 0x79, 0x85,
		0xd4, 0x62, 0x21, 0x63, 0xa2, 0xeb, 0xa8, 0x25, 0x2f, 0x4b, 0x7a, 0x9e, 0xb0, 0x43, 0x57, 0x41,
		0x7e, 0xb3, 0x68, 0xcf, 0x19, 0x7e, 0x7b, 0xe3, 0xe9, 0x4d, 0x46, 0x8a, 0x29, 0x50, 0xde, 0x1c,
		0xb2, 0x0b, 0x76, 0x22, 0x11, 0xc2, 0x1d, 0x46, 0x85, 0xfb, 0xbc, 0xb1, 0xd1, 0x53, 0xd8, 0x3e,
		0x6f, 0x5e, 0xd2, 0x5f, 0xd1, 0xce, 0x57, 0xe7, 0x2d, 0xb7, 0x89, 0x5a, 0x0a, 0xd9, 0xb9, 0xee,
		0x61, 0x85, 0xee, 0x5d, 0x85, 0x8b, 0xd8, 0x0b, 0x28, 0x62, 0x27, 0x8f, 0x4d, 0x43, 0x2b, 0x62,
		0x37, 0xdd, 0xe6, 0x37, 0x99, 0x22, 0xf6, 0xe0, 0x39, 0xb1, 0x22, 0xf6, 0x1c, 0x8a, 0xd8, 0x51,
		0xc4, 0x2e, 0x49, 0x7a, 0x4c, 0xce, 0xab, 0xe5, 0x74, 0x4c, 0xcb, 0x36, 0x04, 0x7b, 0x91, 0xcb,
		0xdc, 0x26, 0x64, 0xaf, 0x98, 0xfd, 0x12, 0xf8, 0x0c, 0x31, 0x1a, 0x43, 0x02, 0x71, 0xa9, 0xd0,
		0x14, 0xaa, 0x94, 0xe7, 0x38, 0x06, 0xce, 0x4b, 0x3e, 0x4f, 0x10, 0xef, 0xca, 0xf0, 0xd5, 0x2a,
		0xb4, 0x02, 0xd5, 0x96, 0x15, 0x4a, 0x27, 0x11, 0x6e, 0x9a, 0x26, 0x1c, 0x5c, 0x17, 0xd0, 0x10,
		0xd9, 0x7b, 0xb5, 0xec, 0xfe, 0xfe, 0xfe, 0x57, 0xd3, 0xf8, 0xbb, 0x62, 0xfc, 0x95, 0x33, 0xce,
		0x1b, 0xf5, 0x99, 0xff, 0x79, 0x7c, 0x34, 0x1a, 0xf5, 0x83, 0x9f, 0xb9, 0xc3, 0x72, 0xbe, 0x7f,
		0xf0, 0xdb, 0xf4, 0xef, 0xeb, 0x8f, 0x8f, 0x47, 0x07, 0xff, 0x94, 0x79, 0xea, 0xb7, 0x83, 0x5f,
		0x8f, 0x8f, 0x47, 0xfc, 0x96, 0xae, 0x4e, 0x6a, 0xe9, 0x10, 0xaf, 0x22, 0x5e, 0x8d, 0x32, 0x5e,
		0x4d, 0x72, 0x2c, 0xc6, 0xc9, 0x9e, 0x89, 0x44, 0x62, 0xdb, 0xe9, 0xb1, 0x0d, 0x71, 0xd8, 0x9e,
		0xc0, 0x0e, 0xf1, 0xee, 0x8c, 0xc8, 0x8e, 0x64, 0x37, 0x06, 0x82, 0x9c, 0x7b, 0xb0, 0xfa, 0xed,
		0x97, 0xdf, 0x6d, 0xc5, 0x7b, 0x65, 0x5f, 0xdc, 0x6e, 0xd3, 0xd8, 0xd2, 0xf8, 0x6a, 0x62, 0x06,
		0x66, 0x7f, 0x78, 0xcd, 0x1e, 0x6d, 0x8e, 0x34, 0xb7, 0x06, 0x02, 0x3c, 0xc0, 0x7f, 0x01, 0xe8,
		0x1b, 0x9d, 0x97, 0xce, 0xa6, 0x1b, 0x6a, 0x5e, 0x43, 0x24, 0x8c, 0xe6, 0x85, 0x8d, 0xcb, 0x0a,
		0xb4, 0x3e, 0xfc, 0xf2, 0x44, 0xf2, 0xb9, 0x2d, 0x46, 0xe4, 0xed, 0x03, 0x23, 0xd6, 0xf7, 0x25,
		0x46, 0x1d, 0xf2, 0xb6, 0x89, 0x42, 0xa2, 0x19, 0x86, 0x2d, 0xa2, 0x12, 0x32, 0xcd, 0xd0, 0x64,
		0xae, 0x6f, 0x3d, 0x5b, 0x4d, 0xd3, 0x67, 0x86, 0xd5, 0x12, 0xa7, 0x1b, 0x16, 0x9e, 0x4f, 0x0d,
		0xed, 0xc0, 0x2b, 0x82, 0xa9, 0xe4, 0x1e, 0x38, 0x45, 0x34, 0x6e, 0x04, 0x84, 0xf0, 0x34, 0x27,
		0xc1, 0xe9, 0x4d, 0x1c, 0x88, 0x8d, 0xc3, 0x66, 0x31, 0xdb, 0x7c, 0x6a, 0x33, 0x71, 0x4d, 0x1b,
		0x3d, 0xc7, 0xdb, 0x8b, 0x70, 0x9a, 0xb2, 0x35, 0x10, 0x09, 0x28, 0x26, 0x14, 0x33, 0x3a, 0xc5,
		0x7c, 0x72, 0x9c, 0x36, 0x33, 0x6d, 0x19, 0xcd, 0xcc, 0x87, 0xa8, 0x99, 0x6d, 0xcb, 0xf3, 0x99,
		0x3d, 0xce, 0x94, 0x66, 0x9e, 0xb8, 0x8e, 0x2e, 0xad, 0x00, 0xb5, 0x83, 0xda, 0x45, 0xa6, 0x76,
		0x3d, 0x7b, 0x10, 0xe2, 0x4a, 0x28, 0x9d, 0x40, 0x85, 0x8d, 0x5c, 0x45, 0x8d, 0x42, 0xd9, 0xa6,
		0x52, 0x2d, 0x91, 0x4a, 0x0d, 0x91, 0x5a, 0xed, 0x10, 0x06, 0xc7, 0xad, 0x5e, 0x08, 0x83, 0xe3,
		0xb4, 0x09, 0x0b, 0x26, 0x2c, 0xa1, 0xb6, 0x27, 0xc1, 0x13, 0x96, 0xf6, 0xf4, 0x7e, 0x8e, 0xa0,
		0x6a, 0x2a, 0x78, 0x2c, 0x66, 0xf7, 0x3a, 0xcc, 0x1d, 0xf2, 0xcd, 0x0a, 0x2e, 0xab, 0x28, 0xf1,
		0x6c, 0xd5, 0xee, 0x75, 0x06, 0xd8, 0x41, 0xdb, 0x8d, 0x24, 0x2e, 0xe4, 0x84, 0x07, 0xf1, 0x90,
		0x84, 0x2a, 0x42, 0x35, 0x61, 0x32, 0x35, 0x60, 0x08, 0x49, 0x10, 0x92, 0x68, 0x08, 0x49, 0xe4,
		0x0a, 0xa1, 0x24, 0x0a, 0x9f, 0x24, 0x0b, 0x9d, 0x12, 0x9a, 0x21, 0x94, 0x43, 0x86, 0x90, 0xe8,
		0x96, 0x29, 0x14, 0x16, 0xc5, 0x3a, 0x47, 0x28, 0x44, 0x27, 0xe4, 0xbb, 0xa6, 0xed, 0x05, 0x1a,
		0xed, 0xb1, 0x66, 0xcf, 0xb5, 0xfc, 0x37, 0x71, 0x97, 0xb4, 0x62, 0x0d, 0x38, 0x28, 0x38, 0xa8,
		0x9d, 0xa6, 0xaa, 0x63, 0x99, 0xf6, 0x33, 0x93, 0x33, 0xc2, 0xdf, 0x5f, 0x8f, 0x33, 0xf7, 0xe5,
		0x93, 0xdb, 0x6d, 0x0a, 0xf4, 0xd1, 0x43, 0x3d, 0x06, 0x52, 0x26, 0xe8, 0x15, 0x07, 0x29, 0x13,
		0x70, 0x77, 0x3b, 0xe7, 0xee, 0x90, 0x32, 0x31, 0x63, 0x00, 0x90, 0x32, 0x01, 0xc5, 0x04, 0x0e,
		0x15, 0xd2, 0x4c, 0xa4, 0x4c, 0x40, 0xed, 0x90, 0x32, 0x81, 0x94, 0x09, 0xca, 0x37, 0x95, 0x7f,
		0xe3, 0x15, 0x6f, 0x8e, 0x94, 0x09, 0xa4, 0x4c, 0xf0, 0x0b, 0x0b, 0x52, 0x26, 0x90, 0x32, 0x81,
		0x94, 0x09, 0x22, 0xd5, 0x44, 0xca, 0x84, 0xfc, 0x96, 0x23, 0x65, 0x82, 0x3c, 0x54, 0x41, 0xca,
		0x04, 0x42, 0x12, 0xa4, 0x4c, 0x6c, 0x7a, 0x04, 0x29, 0x13, 0x1c, 0xcf, 0x23, 0x65, 0x22, 0xb2,
		0x6d, 0x43, 0xca, 0x04, 0x52, 0x26, 0xe0, 0xa0, 0x40, 0x55, 0x8b, 0xfe, 0x44, 0x1c, 0x52, 0x26,
		0x88, 0x3b, 0xa6, 0xcc, 0x64, 0x4c, 0x24, 0xb8, 0x71, 0xca, 0xf6, 0x3e, 0x24, 0x52, 0x5b, 0xa2,
		0xd2, 0x47, 0xa5, 0xed, 0xbc, 0xbc, 0x58, 0xf6, 0xcb, 0xf6, 0x1e, 0x2a, 0xe3, 0x1f, 0x8c, 0x47,
		0xff, 0x94, 0xb6, 0xf3, 0x92, 0xc8, 0xd6, 0x29, 0x83, 0xef, 0x1d, 0x62, 0xd7, 0x14, 0xcf, 0x69,
		0x33, 0xa1, 0xb6, 0x29, 0xc1, 0x03, 0xc9, 0xe8, 0x9b, 0xb2, 0x59, 0x04, 0x64, 0x1d, 0x66, 0xf4,
		0xf9, 0x3f, 0x1b, 0x45, 0x84, 0xc6, 0x01, 0xf0, 0xa7, 0xfe, 0xf0, 0x35, 0xde, 0x59, 0x25, 0x49,
		0xfc, 0x03, 0x69, 0x05, 0xa7, 0xa9, 0x86, 0x0e, 0xd3, 0xf8, 0x04, 0x2d, 0x7d, 0x08, 0x8d, 0x4b,
		0x10, 0xf5, 0x80, 0x33, 0xdd, 0x3d, 0xcb, 0x47, 0xce, 0xec, 0x78, 0x64, 0xf1, 0xc4, 0x07, 0x28,
		0x73, 0xfa, 0xe8, 0xab, 0xe1, 0xe7, 0x34, 0x2e, 0x86, 0x9f, 0x23, 0x34, 0x35, 0x99, 0x26, 0x00,
		0xf3, 0x58, 0x9b, 0x35, 0x7d, 0xc7, 0xf5, 0x64, 0x3a, 0x2b, 0x8f, 0x1f, 0x85, 0x1e, 0x43, 0x8f,
		0xa5, 0xf4, 0x58, 0x74, 0x8a, 0xf1, 0x44, 0xe6, 0x14, 0xe6, 0x79, 0x8f, 0x57, 0x08, 0x79, 0xa4,
		0x77, 0x2e, 0x9a, 0x91, 0xde, 0x62, 0x42, 0xad, 0x2a, 0xdc, 0x64, 0x42, 0x4e, 0x26, 0xec, 0x24,
		0x42, 0x2f, 0xc9, 0xb8, 0x85, 0x35, 0xd2, 0x5b, 0x10, 0x85, 0xd1, 0xa0, 0x32, 0x22, 0x05, 0x51,
		0x56, 0x14, 0x0a, 0x85, 0xa1, 0x53, 0x1c, 0x2a, 0x05, 0x22, 0x57, 0x24, 0x72, 0x85, 0x22, 0x55,
		0x2c, 0x39, 0x05, 0x53, 0xb8, 0x3f, 0x50, 0x52, 0xb8, 0xc9, 0x02, 0xcf, 0x66, 0xd3, 0x6a, 0x8b,
		0x70, 0xd6, 0x5b, 0x05, 0x6f, 0xb2, 0xa2, 0xe2, 0xa1, 0xd0, 0x4c, 0x9f, 0x53, 0x56, 0x4a, 0x4a,
		0xe5, 0xa4, 0x57, 0x52, 0x6a, 0x65, 0xd5, 0xa6, 0xb4, 0xda, 0x94, 0x57, 0x8b, 0x12, 0xab, 0x29,
		0xb3, 0xa2, 0x52, 0xcb, 0xf3, 0xf7, 0x5b, 0xe5, 0xcd, 0x6a, 0x31, 0xdb, 0xb7, 0xfc, 0x37, 0x97,
		0x3d, 0x53, 0x4e, 0x0d, 0x27, 0x98, 0xe6, 0x98, 0xbd, 0x1c, 0x7d, 0xb5, 0xf7, 0xa6, 0x47, 0x28,
		0xc6, 0xe3, 0x17, 0x7f, 0xf8, 0xf2, 0x70, 0x75, 0xfb, 0xa9, 0xf1, 0xb1, 0x72, 0x71, 0x79, 0x75,
		0x59, 0xfb, 0x92, 0xa5, 0x1c, 0x69, 0xe9, 0x91, 0x4d, 0x3a, 0xcf, 0x90, 0xcc, 0x61, 0x5d, 0xb9,
		0x01, 0x57, 0xb7, 0x17, 0x95, 0xab, 0x7c, 0x96, 0x6c, 0xf1, 0xfe, 0x61, 0xdc, 0xdf, 0xf8, 0xe2,
		0xf6, 0xe6, 0xe1, 0xf6, 0xaa, 0xba, 0x4b, 0xaf, 0x1c, 0x1c, 0xf2, 0xc9, 0x2e, 0xbd, 0xf1, 0xe7,
		0x87, 0xea, 0xfd, 0x2e, 0xbd, 0x6f, 0xe5, 0xf3, 0x87, 0xcb, 0xda, 0x2e, 0xbd, 0xf0, 0xc3, 0x97,
		0x87, 0x5a, 0xf5, 0xba, 0xf1, 0xa1, 0x52, 0xbd, 0xbe, 0xbd, 0xd9, 0xa5, 0x17, 0xbf, 0xa9, 0xdd,
		0xed, 0x96, 0x60, 0xd7, 0x7e, 0xdf, 0xa5, 0xf7, 0xbd, 0xae, 0x5c, 0x5e, 0xed, 0x9c, 0x6b, 0x2a,
		0xef, 0x94, 0x44, 0x5f, 0x5d, 0xed, 0x9a, 0x02, 0xdf, 0xdd, 0x5f, 0xfe, 0xb9, 0x73, 0x42, 0x9d,
		0xdb, 0xb9, 0x37, 0x2e, 0xee, 0x18, 0x00, 0xb9, 0xba, 0xfd, 0xb4, 0x4b, 0x6f, 0xfc, 0x47, 0xf5,
		0xfe, 0xa6, 0xba, 0x7b, 0xce, 0xa9, 0xb4, 0x73, 0x6f, 0x5c, 0xd8, 0xb9, 0x37, 0x3e, 0x25, 0x7c,
		0x63, 0x92, 0x95, 0xea, 0x51, 0x53, 0x94, 0x7b, 0x11, 0x9c, 0x78, 0xd6, 0x63, 0xaf, 0xcc, 0x25,
		0xbd, 0x74, 0x98, 0xac, 0x88, 0x4b, 0x87, 0xad, 0x7b, 0x85, 0x4b, 0x07, 0x5c, 0x3a, 0xac, 0x7f,
		0x23, 0xfa, 0x4b, 0x07, 0xef, 0xcd, 0x6b, 0x3b, 0x2f, 0x06, 0x91, 0x8a, 0x66, 0x14, 0xab, 0x81,
		0x97, 0xd6, 0x92, 0xab, 0x0e, 0x26, 0x34, 0xa4, 0xa1, 0x5e, 0x18, 0x4b, 0xa6, 0x1d, 0x2e, 0x9b,
		0x70, 0xc9, 0x34, 0xc4, 0x49, 0xc6, 0xdd, 0xe4, 0x4f, 0xc7, 0x4a, 0x39, 0x1b, 0x19, 0xf9, 0x4c,
		0xc5, 0x87, 0xf1, 0x57, 0x99, 0xfc, 0x49, 0x28, 0x79, 0x51, 0xfd, 0x1c, 0x65, 0x8a, 0x06, 0x95,
		0xef, 0xeb, 0xa9, 0xee, 0xe9, 0x55, 0x2b, 0x10, 0x91, 0x2c, 0x13, 0x8a, 0x0b, 0x44, 0xb2, 0x0c,
		0xa1, 0x6b, 0x9b, 0x56, 0x0a, 0x31, 0xf3, 0x59, 0xed, 0x0e, 0x7d, 0xe2, 0xc2, 0x4e, 0xd5, 0x5a,
		0xca, 0x04, 0xe6, 0xf7, 0xe8, 0x68, 0x64, 0x44, 0x8f, 0x27, 0x4a, 0x1d, 0x63, 0x13, 0xa6, 0x8c,
		0xfe, 0xa9, 0x50, 0x3f, 0x4c, 0x18, 0x4c, 0x18, 0x4c, 0x58, 0xdc, 0x4c, 0xd8, 0x44, 0xa9, 0xe3,
		0x6c, 0xc2, 0xb8, 0x1a, 0x8f, 0x6f, 0xb7, 0x5f, 0x9c, 0x15, 0xc4, 0x1b, 0x77, 0x5f, 0xd5, 0x78,
		0x15, 0x60, 0xbc, 0x60, 0xbc, 0x42, 0x31, 0x5e, 0x48, 0x56, 0x06, 0x6f, 0x08, 0xde, 0x10, 0xbc,
		0x21, 0xa7, 0xbc, 0x21, 0x59, 0x19, 0xc9, 0xca, 0x34, 0xbf, 0x90, 0xac, 0x1c, 0xd7, 0x43, 0x46,
		0xb2, 0x72, 0x8a, 0xdf, 0x17, 0xc9, 0xca, 0xbb, 0xf2, 0xe2, 0x48, 0x56, 0x4e, 0xf5, 0xfb, 0x22,
		0x59, 0x39, 0xf5, 0x12, 0x8d, 0x64, 0xe5, 0x9d, 0x10, 0x6a, 0x24, 0x2b, 0xa7, 0x1d, 0x80, 0x20,
		0x59, 0x79, 0x17, 0xa4, 0x1a, 0xc9, 0xca, 0xe9, 0x7f, 0x63, 0x24, 0x2b, 0x93, 0x3d, 0x8d, 0x64,
		0xe5, 0x0d, 0xcb, 0xe0, 0xd2, 0x41, 0x6e, 0xf7, 0x71, 0xe9, 0x80, 0x64, 0x65, 0x01, 0x35, 0x45,
		0xb2, 0xb2, 0xb8, 0xc0, 0xc6, 0x2f, 0x59, 0x59, 0x25, 0x65, 0x23, 0x43, 0x9a, 0xab, 0xcc, 0xd1,
		0x24, 0x9e, 0xee, 0x14, 0xf5, 0xb6, 0x0d, 0xfc, 0x83, 0xbd, 0xcd, 0x5e, 0xc6, 0x67, 0x24, 0xb5,
		0x4f, 0x6e, 0x74, 0xd6, 0xe4, 0x69, 0x95, 0x11, 0x5a, 0xd3, 0x45, 0x14, 0x46, 0x69, 0x4d, 0x16,
		0x91, 0x1a, 0xa9, 0x25, 0xbb, 0xf9, 0x8a, 0x4a, 0x46, 0xa8, 0x5c, 0x59, 0xa9, 0x4c, 0x2c, 0x1a,
		0x75, 0xca, 0x6a, 0x9a, 0x44, 0x93, 0xec, 0xa6, 0xd1, 0xa2, 0xfd, 0x91, 0x29, 0x8e, 0x24, 0xd4,
		0xd6, 0xd1, 0x42, 0x79, 0x7c, 0x52, 0x79, 0x7b, 0xd2, 0x2d, 0xa3, 0x0b, 0x68, 0x19, 0x4d, 0x89,
		0x8a, 0x77, 0xb8, 0xf5, 0xbb, 0x28, 0x66, 0x91, 0xd5, 0x60, 0x7e, 0x40, 0x92, 0xd4, 0xf1, 0x3f,
		0x0b, 0x3b, 0x4b, 0x37, 0xfc, 0x67, 0x61, 0x2f, 0xa5, 0x67, 0xff, 0x6c, 0x18, 0x18, 0xe3, 0xb2,
		0x8e, 0xe3, 0xb3, 0xd1, 0x6c, 0x1e, 0x8f, 0x7f, 0x64, 0xca, 0xc2, 0x73, 0x98, 0x9c, 0x82, 0xc9,
		0x29, 0x2b, 0x04, 0x4a, 0xdc, 0x89, 0xce, 0x3f, 0x8e, 0xf9, 0x0b, 0x70, 0xa6, 0x52, 0xce, 0x54,
		0x78, 0xfe, 0x82, 0x64, 0xab, 0x79, 0xb5, 0x16, 0xf3, 0x98, 0xbd, 0x10, 0x09, 0xb7, 0x8a, 0xd9,
		0x0b, 0x1c, 0x0f, 0x7e, 0x73, 0x3c, 0x5f, 0xbd, 0x96, 0x29, 0x58, 0x05, 0x75, 0x98, 0x28, 0x65,
		0x0a, 0x59, 0xa9, 0xa2, 0x61, 0xa6, 0xe9, 0xea, 0x30, 0x15, 0xf4, 0x66, 0xce, 0xb1, 0x9c, 0x2b,
		0xac, 0x31, 0x7a, 0x1b, 0xb5, 0xba, 0x00, 0xca, 0xca, 0x8f, 0xae, 0x61, 0xb6, 0x5a, 0x2e, 0xf3,
		0x3c, 0xca, 0xfb, 0x97, 0x73, 0x82, 0xb5, 0x48, 0x76, 0x8a, 0x6e, 0xc7, 0x56, 0xec, 0xdc, 0x6b,
		0x91, 0x70, 0xef, 0x96, 0xf6, 0xf0, 0x8c, 0x70, 0xcd, 0x3b, 0xd3, 0xf7, 0x99, 0x6b, 0x93, 0x16,
		0xa4, 0x04, 0x0b, 0xff, 0x67, 0x7f, 0xff, 0x6b, 0xce, 0x38, 0xaf, 0xff, 0xfa, 0x9a, 0x37, 0xce,
		0xeb, 0xc3, 0x3f, 0xe6, 0x83, 0xdf, 0x86, 0x7f, 0x2e, 0x7c, 0xcd, 0x19, 0xc5, 0xf1, 0x9f, 0x4b,
		0x5f, 0x73, 0x46, 0xa9, 0x7e, 0xf0, 0xf8, 0x78, 0x74, 0xf0, 0xf3, 0xa4, 0x2f, 0xfe, 0xe0, 0x3f,
		0xe8, 0xb2, 0x34, 0xea, 0x24, 0x2b, 0x11, 0x65, 0xb7, 0xe8, 0x11, 0xce, 0x32, 0x84, 0x73, 0x28,
		0x9c, 0xa6, 0xf1, 0x5c, 0x31, 0x3e, 0xd6, 0x7f, 0xe6, 0x0f, 0x8b, 0xfd, 0x77, 0x07, 0x3f, 0x4f,
		0xfb, 0x8b, 0x7f, 0xf9, 0x6b, 0xd5, 0x8f, 0xe5, 0x0f, 0x4f, 0xfb, 0xef, 0xd6, 0xfc, 0x4b, 0xb9,
		0xff, 0x8e, 0x73, 0x8d, 0x52, 0x7f, 0x7f, 0xe9, 0x47, 0x07, 0x7f, 0x5f, 0x58, 0xf7, 0x40, 0x71,
		0xcd, 0x03, 0x27, 0xeb, 0x1e, 0x38, 0x59, 0xf3, 0xc0, 0xda, 0xaf, 0x54, 0x58, 0xf3, 0x40, 0xa9,
		0xff, 0x6b, 0xe9, 0xe7, 0xf7, 0x57, 0xff, 0x68, 0xb9, 0x7f, 0xf0, 0x6b, 0xdd, 0xbf, 0x9d, 0xf6,
		0x7f, 0xbd, 0x3b, 0x88, 0xa1, 0xaa, 0xee, 0x45, 0xfb, 0x3d, 0x14, 0x4d, 0x05, 0xa1, 0xc7, 0x6f,
		0x39, 0x1d, 0xd3, 0xb2, 0x8d, 0x80, 0x26, 0x25, 0x74, 0xf9, 0x04, 0x16, 0x21, 0x7b, 0xc5, 0xec,
		0x97, 0x80, 0x17, 0x8e, 0x9d, 0xd3, 0xbf, 0xb6, 0x6c, 0xb2, 0x74, 0x26, 0xa2, 0x58, 0x6c, 0xed,
		0xb2, 0x41, 0xf1, 0xa9, 0x7c, 0xbb, 0x8a, 0xb5, 0xeb, 0x7e, 0x74, 0xcd, 0xa6, 0x6f, 0x39, 0xf6,
		0x07, 0xeb, 0xc5, 0x0a, 0xae, 0xdc, 0x73, 0x71, 0x4c, 0x13, 0xcd, 0x5e, 0x9b, 0x3f, 0x12, 0x77,
		0x54, 0x85, 0xd2, 0x49, 0x82, 0x0e, 0x2b, 0x2e, 0x06, 0x99, 0xc0, 0xe2, 0x50, 0x63, 0x8f, 0xec,
		0xfe, 0xfe, 0xfe, 0x57, 0xd3, 0xf8, 0xbb, 0x62, 0xfc, 0x95, 0x33, 0xce, 0x1b, 0xf5, 0x99, 0xff,
		0x79, 0x7c, 0x34, 0x1a, 0xf5, 0x83, 0x9f, 0xb9, 0xc3, 0x72, 0xbe, 0x7f, 0xf0, 0xdb, 0xf4, 0xef,
		0xeb, 0x03, 0x3c, 0xfc, 0x4f, 0x99, 0xa7, 0x7e, 0x3b, 0xf8, 0xf5, 0xf8, 0x78, 0x94, 0x8d, 0xda,
		0xb3, 0xed, 0x85, 0xfb, 0xb9, 0xe1, 0xb4, 0x1d, 0x1a, 0x5d, 0x99, 0x74, 0x1d, 0x97, 0x80, 0xb0,
		0x9b, 0x5d, 0x4c, 0xb6, 0xa1, 0x0b, 0x7b, 0x36, 0x7b, 0xed, 0x80, 0xbe, 0x29, 0xe5, 0x8b, 0x60,
		0xff, 0xc0, 0xfe, 0x81, 0xfd, 0x13, 0x93, 0x97, 0x81, 0xf6, 0x19, 0x76, 0xaf, 0xf3, 0xc4, 0x5c,
		0x02, 0x12, 0xb0, 0xac, 0xb0, 0xc4, 0xbd, 0x69, 0xbf, 0xc4, 0x82, 0x04, 0xa4, 0x44, 0xb5, 0xc4,
		0x10, 0x69, 0x02, 0x8d, 0xa8, 0xd6, 0xd3, 0x00, 0x88, 0x08, 0x50, 0x2b, 0x29, 0x5a, 0xd5, 0x75,
		0x04, 0xe5, 0x52, 0xe9, 0xa4, 0x14, 0xe3, 0x63, 0x00, 0x7c, 0x59, 0xda, 0x66, 0x2f, 0x70, 0x6d,
		0x13, 0x06, 0x50, 0xbd, 0x7d, 0xe2, 0xfc, 0x7a, 0x80, 0x1f, 0x80, 0x1f, 0x80, 0x1f, 0x42, 0xf2,
		0x42, 0x72, 0xd1, 0x96, 0xd2, 0x2b, 0x48, 0xd2, 0x8b, 0x34, 0x52, 0x46, 0x92, 0x9c, 0x1f, 0x48,
		0xda, 0x85, 0x59, 0x5a, 0x58, 0x6f, 0xe2, 0x0b, 0xb1, 0x44, 0x08, 0x19, 0x2e, 0xbe, 0x12, 0x79,
		0xf1, 0x95, 0x7a, 0x3a, 0x2e, 0x55, 0x35, 0x76, 0xf3, 0x39, 0xfb, 0xf3, 0xff, 0x2b, 0x3f, 0x6f,
		0x47, 0xb0, 0x96, 0xe1, 0x3e, 0xf8, 0xd4, 0x87, 0xe1, 0x77, 0x98, 0xfb, 0x3f, 0xa9, 0x39, 0x3b,
		0x02, 0x35, 0x77, 0x02, 0x29, 0xd8, 0x52, 0xc9, 0x8f, 0x2a, 0xc9, 0x5b, 0x92, 0xf1, 0x06, 0x32,
		0x81, 0x91, 0x09, 0xac, 0x3d, 0x3e, 0x20, 0x18, 0x0e, 0xa1, 0x32, 0x14, 0x62, 0xc5, 0x30, 0x88,
		0x40, 0xc1, 0x62, 0x60, 0x26, 0xa6, 0x85, 0xb0, 0xd2, 0xb6, 0x42, 0xa6, 0x96, 0x36, 0x83, 0xd2,
		0x01, 0x18, 0x8c, 0x4c, 0x7c, 0x4b, 0x07, 0x26, 0x95, 0xfb, 0x04, 0xa3, 0x9c, 0xa4, 0x7b, 0x00,
		0x64, 0x28, 0xa7, 0xa1, 0x80, 0xc5, 0x03, 0x8b, 0x17, 0x0e, 0x8b, 0xa7, 0x3c, 0x0d, 0x45, 0xb2,
		0x90, 0x6d, 0xad, 0xd8, 0x29, 0xcf, 0xe1, 0x24, 0x50, 0x44, 0x32, 0x85, 0xa4, 0x54, 0x4c, 0x7a,
		0x05, 0xa5, 0x56, 0x54, 0x6d, 0x0a, 0xab, 0x4d, 0x71, 0xb5, 0x28, 0xb0, 0x3a, 0xdd, 0x40, 0xc0,
		0x0f, 0x2a, 0x2b, 0xf6, 0x64, 0x21, 0xb2, 0x71, 0x47, 0x4b, 0x02, 0x4c, 0x34, 0xf6, 0x48, 0x31,
		0xa6, 0xd5, 0xae, 0xfc, 0x3a, 0x8c, 0x80, 0x3e, 0x63, 0xa0, 0xcb, 0x28, 0x68, 0x37, 0x0e, 0xda,
		0x8d, 0x84, 0x56, 0x63, 0x41, 0x63, 0x34, 0x88, 0x8c, 0x87, 0x7a, 0x0c, 0xbf, 0x55, 0x5e, 0x69,
		0xc7, 0x2a, 0x2d, 0xf9, 0xfd, 0x12, 0xe1, 0x9a, 0x5a, 0xc6, 0x2c, 0x2d, 0x6d, 0x88, 0x9e, 0x71,
		0x4b, 0x93, 0x8f, 0xd1, 0x30, 0x76, 0x69, 0xfc, 0xeb, 0x27, 0xf9, 0x8a, 0x19, 0x9d, 0x63, 0x98,
		0x88, 0x75, 0x24, 0xc4, 0x9d, 0x20, 0x1f, 0xcf, 0x94, 0xdc, 0xad, 0xa0, 0x1e, 0xdb, 0x94, 0xdc,
		0x9d, 0xa0, 0x1d, 0xe7, 0x94, 0xdc, 0x7d, 0x20, 0x1e, 0xf3, 0x94, 0xdc, 0x8d, 0xd0, 0x34, 0xfe,
		0x29, 0xb9, 0x1b, 0x42, 0x3a, 0x16, 0x2a, 0xc9, 0x0a, 0x42, 0x39, 0x2e, 0x2a, 0xb9, 0xfb, 0x40,
		0x3b, 0x46, 0x2a, 0xe1, 0x2e, 0xb4, 0x8c, 0x9d, 0x20, 0x1e, 0x3b, 0x95, 0x6c, 0x03, 0x41, 0x3b,
		0x8e, 0x2a, 0xe1, 0xca, 0x91, 0xc3, 0x4e, 0xd0, 0x8f, 0xaf, 0x4a, 0x34, 0xb0, 0x22, 0x1d, 0x6b,
		0x95, 0xdc, 0x9d, 0xa0, 0x1e, 0x77, 0x95, 0x70, 0xed, 0x28, 0x61, 0x27, 0xe8, 0xc7, 0x63, 0x25,
		0x7c, 0x27, 0x4e, 0x35, 0xec, 0x04, 0xe9, 0x8a, 0xf5, 0xd4, 0x35, 0x3d, 0xa0, 0xa8, 0x39, 0x24,
		0x1b, 0xb3, 0xb5, 0x24, 0x15, 0x84, 0xb3, 0x7c, 0x32, 0xb8, 0xec, 0xc2, 0x65, 0xd7, 0xe8, 0x03,
		0x70, 0xd9, 0x95, 0x80, 0xcb, 0x2e, 0xfa, 0x71, 0x5e, 0x8b, 0x66, 0x80, 0x62, 0xac, 0xd7, 0x64,
		0x4d, 0x9a, 0xf1, 0x5e, 0x84, 0x86, 0x3d, 0xd2, 0x44, 0x0a, 0xa2, 0xf1, 0x5f, 0x53, 0x17, 0x43,
		0x59, 0x45, 0xb1, 0x62, 0x36, 0x18, 0x49, 0x02, 0x55, 0x86, 0xb4, 0xd0, 0x62, 0xc5, 0xdc, 0x30,
		0x99, 0xda, 0x0b, 0x3a, 0xb9, 0x50, 0x99, 0xc4, 0x49, 0x96, 0x0f, 0x43, 0x9d, 0x07, 0x83, 0x49,
		0x9c, 0x51, 0xba, 0x7c, 0x24, 0xbd, 0xc5, 0xc0, 0x56, 0xd3, 0x4f, 0xe2, 0x94, 0xaf, 0x41, 0x59,
		0xeb, 0xaa, 0x4f, 0x69, 0xea, 0x62, 0x17, 0x6a, 0x54, 0x26, 0x46, 0x04, 0xc3, 0x8d, 0x31, 0xdc,
		0x18, 0x26, 0x15, 0x26, 0x15, 0x26, 0x55, 0xd5, 0xa4, 0x4e, 0x8c, 0x48, 0x12, 0x4d, 0xaa, 0xd0,
		0x4c, 0xc9, 0xed, 0xf6, 0x54, 0x71, 0xe0, 0x70, 0x46, 0x47, 0x51, 0x46, 0x01, 0xc6, 0x14, 0xc6,
		0x34, 0x51, 0xc6, 0x14, 0x45, 0x19, 0xaa, 0xcb, 0x81, 0xa7, 0x06, 0x4f, 0x1d, 0x9a, 0xb1, 0xa0,
		0xa3, 0x30, 0x33, 0x28, 0xca, 0x40, 0x51, 0xc6, 0xd2, 0xc7, 0xa0, 0x28, 0x43, 0x93, 0x8e, 0x84,
		0xb8, 0x13, 0x28, 0xca, 0x40, 0x51, 0xc6, 0xd2, 0x4e, 0xa0, 0x28, 0x03, 0x45, 0x19, 0x19, 0x14,
		0x65, 0x6c, 0xd8, 0x10, 0x14, 0x65, 0xa0, 0x28, 0x03, 0x45, 0x19, 0xab, 0x5d, 0x28, 0x8a, 0x32,
		0x50, 0x94, 0x81, 0xa2, 0x8c, 0x35, 0xca, 0x81, 0xa2, 0x0c, 0x14, 0x65, 0xa0, 0x28, 0x63, 0xc5,
		0x4e, 0xa0, 0x28, 0x03, 0x45, 0x19, 0x2b, 0x77, 0x02, 0x45, 0x19, 0x28, 0xca, 0x88, 0x6c, 0x15,
		0x14, 0x65, 0x28, 0x2c, 0x87, 0xcb, 0x2e, 0x5c, 0x76, 0xad, 0xfc, 0x00, 0x5c, 0x76, 0x11, 0xe8,
		0x3e, 0x8a, 0x32, 0xa2, 0x5b, 0x61, 0xd7, 0x8a, 0x32, 0x28, 0xf2, 0xa7, 0x32, 0xba, 0x6b, 0x32,
		0x1e, 0x82, 0x2f, 0x19, 0x55, 0xb2, 0x5b, 0xa8, 0x6d, 0x8f, 0xff, 0x60, 0x6f, 0xb3, 0xc9, 0x2e,
		0x19, 0x45, 0x2b, 0x90, 0xbd, 0xb2, 0x3c, 0xbf, 0xe2, 0xfb, 0x8a, 0xbd, 0x94, 0xaf, 0x2d, 0xbb,
		0xda, 0x66, 0x03, 0xc3, 0xee, 0x65, 0xdf, 0x65, 0xec, 0x5e, 0xbb, 0xad, 0x90, 0x01, 0x78, 0x6d,
		0xfe, 0xa0, 0x5b, 0xec, 0xd6, 0x6d, 0x31, 0x97, 0xb5, 0xde, 0xbf, 0x8d, 0x96, 0x0a, 0xf5, 0xb0,
		0x88, 0x94, 0x5d, 0xb7, 0x92, 0x67, 0x95, 0xd2, 0x35, 0xb5, 0xa9, 0x75, 0x16, 0xb3, 0x8b, 0xb4,
		0x9d, 0x7d, 0xa4, 0xe3, 0x8b, 0x26, 0x47, 0x1d, 0x8b, 0xd1, 0x24, 0x52, 0xf9, 0xc6, 0x4a, 0xf9,
		0xc5, 0xca, 0x23, 0x49, 0x0a, 0x18, 0x49, 0x12, 0x65, 0x74, 0x93, 0xe6, 0x91, 0x24, 0x52, 0x03,
		0xbd, 0x96, 0x84, 0x45, 0x62, 0xb0, 0x17, 0x11, 0x15, 0x81, 0x51, 0x24, 0xe1, 0x50, 0x07, 0x18,
		0x45, 0x42, 0x18, 0xea, 0x53, 0xe8, 0x4d, 0x26, 0xbd, 0xa3, 0x84, 0x75, 0xcc, 0x78, 0x3d, 0x27,
		0x58, 0x8b, 0x64, 0xa7, 0xe8, 0x76, 0x6c, 0xc5, 0xce, 0x91, 0x0e, 0x61, 0x5e, 0xda, 0xc3, 0x33,
		0xc2, 0x35, 0xa9, 0xe7, 0xe5, 0x4e, 0x16, 0x4e, 0xda, 0x70, 0xe6, 0xf1, 0xaf, 0x7a, 0x9c, 0xd8,
		0x4c, 0x3d, 0xc2, 0x59, 0x86, 0x70, 0x62, 0xa8, 0x73, 0x82, 0x87, 0x3a, 0x13, 0xab, 0x2a, 0xe6,
		0xba, 0x8f, 0x4c, 0x43, 0xcb, 0xe9, 0x98, 0x96, 0x6d, 0x04, 0x4c, 0x43, 0xcc, 0xc6, 0xba, 0x5f,
		0x31, 0xfb, 0x25, 0x60, 0x62, 0x62, 0xe7, 0xf4, 0xaf, 0x2d, 0x5b, 0xc3, 0x85, 0x23, 0xe9, 0xb5,
		0xf0, 0x64, 0xd9, 0xa0, 0x7c, 0x48, 0xbd, 0xa0, 0x7a, 0x69, 0xdd, 0x8f, 0xae, 0xd9, 0xf4, 0x2d,
		0xc7, 0xfe, 0x60, 0xbd, 0x58, 0x01, 0x79, 0x9c, 0xa3, 0xbb, 0x5c, 0x24, 0x74, 0x27, 0xd7, 0xe6,
		0x8f, 0xc4, 0x1d, 0x55, 0xa1, 0x74, 0x92, 0xa0, 0xc3, 0x8a, 0x8b, 0x41, 0xa6, 0xe9, 0xee, 0x40,
		0x8a, 0x3d, 0xb2, 0xfb, 0xfb, 0xfb, 0x5f, 0x4d, 0xe3, 0xef, 0x8a, 0xf1, 0x57, 0xce, 0x38, 0x6f,
		0xd4, 0x67, 0xfe, 0xe7, 0xf1, 0xd1, 0x68, 0xd4, 0x0f, 0x7e, 0xe6, 0x0e, 0xcb, 0xf9, 0xfe, 0xc1,
		0x6f, 0xd3, 0xbf, 0xaf, 0x0f, 0xf0, 0xf0, 0x3f, 0x65, 0x9e, 0xfa, 0xed, 0xe0, 0xd7, 0xe3, 0xe3,
		0x51, 0x36, 0x6a, 0xcf, 0xb6, 0x17, 0xee, 0xe7, 0x4a, 0x5c, 0x41, 0x48, 0xd0, 0xaa, 0x23, 0x66,
		0xbf, 0xeb, 0xb8, 0x04, 0x84, 0xdd, 0xec, 0x62, 0xb2, 0x03, 0x59, 0xd9, 0xb3, 0xd9, 0x6b, 0x07,
		0xf4, 0x4d, 0x29, 0x5f, 0x04, 0xfb, 0x07, 0xf6, 0x0f, 0xec, 0x9f, 0x98, 0xbc, 0x0c, 0xb4, 0xcf,
		0xb0, 0x7b, 0x9d, 0x27, 0xe6, 0x12, 0x90, 0x80, 0x65, 0x85, 0x25, 0xee, 0x4d, 0xfb, 0x25, 0x16,
		0x24, 0x20, 0x25, 0xaa, 0xa5, 0x4e, 0x72, 0x1c, 0x43, 0x23, 0xaa, 0xf5, 0x34, 0x00, 0x22, 0x8a,
		0x24, 0x56, 0x4a, 0xb4, 0xaa, 0xeb, 0x08, 0xca, 0xa5, 0xd2, 0x49, 0x29, 0xc6, 0xc7, 0x00, 0xf8,
		0xb2, 0xb4, 0xcd, 0x5e, 0xe0, 0xda, 0x26, 0x0c, 0xa0, 0x32, 0x82, 0x59, 0x58, 0x0f, 0xf0, 0x03,
		0xf0, 0x03, 0xf0, 0x43, 0x48, 0x5e, 0x48, 0x2e, 0xda, 0x52, 0x7a, 0x05, 0x49, 0x7a, 0x91, 0x46,
		0xca, 0x48, 0x92, 0xf3, 0x03, 0x49, 0xbb, 0x30, 0x4b, 0x0b, 0xeb, 0x4d, 0x7c, 0x21, 0x96, 0x08,
		0x21, 0xc3, 0xc5, 0x57, 0x22, 0x2f, 0xbe, 0x52, 0x4f, 0xc7, 0xed, 0x50, 0x46, 0xb0, 0x64, 0x7d,
		0x07, 0x61, 0x36, 0xb0, 0x78, 0xf1, 0x86, 0x40, 0x26, 0xf0, 0x1e, 0xe1, 0x09, 0x8e, 0x8b, 0x2f,
		0x04, 0xb2, 0xb4, 0xe4, 0xea, 0x2b, 0x94, 0xea, 0x29, 0x94, 0xea, 0x27, 0xe4, 0xea, 0x25, 0x78,
		0xf7, 0x4f, 0x52, 0xf2, 0x49, 0x25, 0x3e, 0x2b, 0x94, 0x1b, 0x4e, 0x23, 0xe3, 0x7c, 0xd2, 0xbd,
		0x5d, 0x56, 0x37, 0xff, 0xc4, 0x96, 0x53, 0x10, 0xdd, 0x7d, 0xc5, 0x5d, 0xe7, 0xd8, 0x67, 0x95,
		0xfd, 0xdd, 0xbc, 0xa5, 0xeb, 0x37, 0x6a, 0xf5, 0xbf, 0xac, 0xd9, 0x3a, 0xde, 0x2d, 0x13, 0xdd,
		0xaa, 0x0d, 0x7b, 0x23, 0xb6, 0x27, 0xab, 0x77, 0x61, 0xf9, 0x1d, 0x57, 0xbc, 0x5f, 0xb6, 0xc3,
		0x3a, 0x8e, 0xbb, 0xbe, 0x34, 0x7d, 0x82, 0x4b, 0x47, 0x3f, 0xb7, 0x66, 0x87, 0x36, 0x97, 0x32,
		0x6c, 0x25, 0x44, 0x78, 0x08, 0x8f, 0x59, 0x42, 0xc3, 0x7b, 0xdb, 0x24, 0x58, 0xbc, 0x84, 0x85,
		0x30, 0x21, 0x21, 0x4c, 0x38, 0x2c, 0x12, 0x0a, 0x83, 0xef, 0x4d, 0x24, 0x93, 0xdb, 0x52, 0xfb,
		0xb3, 0xcd, 0xf1, 0x9e, 0x6f, 0xd9, 0x84, 0xf1, 0xb6, 0x72, 0xcd, 0xdd, 0xe2, 0xac, 0x59, 0xe1,
		0x66, 0xc0, 0x44, 0x98, 0x2e, 0x7e, 0x01, 0x90, 0x65, 0xae, 0xa4, 0x19, 0x2a, 0x69, 0x26, 0x4a,
		0x48, 0x40, 0xe2, 0x6d, 0xff, 0x87, 0x06, 0x82, 0x7f, 0x7c, 0x1b, 0xa7, 0x89, 0xbb, 0x0e, 0x96,
		0xe5, 0x9a, 0xb7, 0xb6, 0xc1, 0xdc, 0x6f, 0xb4, 0xb4, 0x3c, 0x95, 0x5f, 0x42, 0x95, 0x5e, 0xc2,
		0x5a, 0x52, 0x80, 0x96, 0xc4, 0x4c, 0x4b, 0x78, 0x2b, 0xa7, 0xb2, 0xdd, 0x6f, 0x6f, 0x9e, 0xd5,
		0x34, 0xdb, 0xfc, 0xdb, 0x37, 0xb9, 0xe7, 0x1d, 0x3f, 0xc9, 0x1b, 0x76, 0x08, 0x5d, 0x4a, 0x08,
		0x5f, 0x42, 0xc8, 0x5c, 0x3a, 0x88, 0x0b, 0x9b, 0xea, 0xa5, 0x82, 0xf2, 0x25, 0x82, 0xf2, 0xa5,
		0x81, 0x94, 0x30, 0xea, 0x09, 0x44, 0x85, 0x49, 0xff, 0xc9, 0x79, 0xf5, 0x2c, 0xdb, 0x2f, 0x8b,
		0x64, 0xe7, 0x8c, 0xa5, 0x4f, 0x80, 0x46, 0x94, 0x4c, 0x1f, 0x90, 0xa0, 0x42, 0x54, 0xd2, 0x03,
		0x54, 0xef, 0xfa, 0x14, 0xaf, 0xff, 0x29, 0xee, 0x99, 0x65, 0xee, 0x5d, 0x55, 0xae, 0xf3, 0xa9,
		0xb6, 0x2c, 0x7f, 0x56, 0x2c, 0x96, 0x4f, 0x8b, 0xc5, 0xdc, 0xe9, 0xc9, 0x69, 0xee, 0xbc, 0x54,
		0xca, 0x97, 0x65, 0x47, 0x2c, 0x90, 0xec, 0xa2, 0x26, 0xee, 0xa9, 0x4e, 0x15, 0xf5, 0x73, 0x78,
		0x72, 0x97, 0x05, 0x61, 0x77, 0x4b, 0xdc, 0x19, 0x4d, 0x9e, 0x84, 0x33, 0x82, 0x33, 0x82, 0x33,
		0x82, 0x33, 0x82, 0x33, 0x82, 0x33, 0x4a, 0x28, 0x05, 0xc1, 0x7b, 0x99, 0x25, 0xc6, 0x40, 0x70,
		0x5c, 0x50, 0xc5, 0x95, 0x6f, 0xde, 0xc8, 0xdd, 0x0a, 0xef, 0x84, 0x0a, 0xdb, 0x6c, 0xfb, 0xdd,
		0xed, 0x54, 0xf3, 0xe0, 0x87, 0xc0, 0x33, 0x83, 0x67, 0x06, 0xcf, 0xbc, 0x13, 0x0c, 0x1a, 0xb3,
		0xcd, 0xa7, 0x36, 0x33, 0x6c, 0xbf, 0x6b, 0x98, 0xbd, 0xc0, 0x94, 0x09, 0xc6, 0x2e, 0x8b, 0x0b,
		0x70, 0x6e, 0xc9, 0x4c, 0xa5, 0xd2, 0xb3, 0xd9, 0xf6, 0x18, 0x42, 0x1f, 0x84, 0x3e, 0x61, 0x87,
		0x3e, 0x4f, 0x8e, 0xd3, 0x66, 0xa6, 0x2d, 0x11, 0xfb, 0xe4, 0xf3, 0x21, 0xf2, 0x0a, 0x43, 0x0d,
		0x6b, 0xc9, 0xaa, 0x66, 0x0b, 0x2a, 0x09, 0x95, 0x84, 0x4a, 0x92, 0xaa, 0xe4, 0xc0, 0xdb, 0x49,
		0x16, 0xcf, 0xcc, 0x02, 0x6d, 0x43, 0xaa, 0x60, 0x06, 0x0a, 0x07, 0x85, 0x23, 0x53, 0x38, 0xa9,
		0x82, 0x13, 0x99, 0x02, 0x13, 0xb9, 0x82, 0x12, 0x85, 0x66, 0xa9, 0x8a, 0x05, 0x23, 0x2a, 0xb9,
		0xfb, 0xca, 0xb9, 0xfa, 0xb1, 0x2f, 0x00, 0xa9, 0xeb, 0xcc, 0xce, 0x56, 0x3b, 0xf4, 0x72, 0xd2,
		0x0f, 0x1d, 0x05, 0x19, 0x89, 0x28, 0xc8, 0xa8, 0x83, 0x25, 0x96, 0x60, 0x43, 0x6d, 0xbf, 0x4b,
		0x9e, 0xa5, 0x76, 0xe3, 0x77, 0x35, 0xa6, 0xa8, 0x0d, 0x70, 0xda, 0x77, 0xf6, 0xe6, 0xf1, 0x93,
		0x6c, 0x93, 0x27, 0x40, 0xb3, 0x81, 0x66, 0x9b, 0x13, 0x22, 0xb9, 0x28, 0x61, 0xf0, 0xa0, 0x58,
		0x68, 0x90, 0x47, 0x68, 0x80, 0xd0, 0x40, 0x4c, 0x44, 0x45, 0xaf, 0x14, 0xd4, 0xae, 0x18, 0x14,
		0x05, 0x57, 0x5a, 0x80, 0x55, 0x04, 0x59, 0x5d, 0xa0, 0x55, 0x05, 0x9b, 0x4c, 0xc0, 0xc9, 0x04,
		0x9d, 0x44, 0xe0, 0xc5, 0x31, 0x52, 0x26, 0xcc, 0x71, 0x0c, 0xdf, 0xd9, 0x9b, 0x61, 0xb5, 0xd4,
		0xbb, 0xa3, 0x8c, 0xd6, 0x41, 0x57, 0x14, 0x79, 0xc5, 0xa1, 0x52, 0x20, 0x72, 0x45, 0x22, 0x57,
		0x28, 0x52, 0xc5, 0x92, 0x53, 0x30, 0x49, 0x45, 0x93, 0x27, 0xa5, 0xd6, 0xca, 0x4b, 0xcf, 0xb2,
		0xfd, 0x7c, 0x19, 0xfd, 0xd8, 0x86, 0x5f, 0x04, 0xfd, 0xd8, 0x94, 0x7e, 0xa1, 0x1f, 0x5b, 0x3c,
		0x8e, 0x01, 0xfd, 0xd8, 0x56, 0x22, 0x0d, 0x5f, 0xc5, 0x6a, 0xce, 0x61, 0x8d, 0x60, 0x25, 0xa0,
		0x0d, 0xa0, 0x0d, 0xa0, 0x0d, 0x21, 0x79, 0xb1, 0x5a, 0xcc, 0xf6, 0x2d, 0xff, 0xcd, 0x65, 0xcf,
		0x14, 0x4d, 0xd8, 0x14, 0x6c, 0x70, 0xf6, 0x72, 0xf4, 0x55, 0xde, 0x9b, 0x1e, 0x81, 0xf8, 0x8d,
		0x5f, 0xf0, 0xa6, 0x76, 0xd7, 0xa8, 0x7c, 0xae, 0xfd, 0xde, 0xa8, 0x7d, 0xb9, 0xab, 0xaa, 0x8a,
		0x60, 0xe0, 0x6e, 0x3c, 0x92, 0xae, 0x54, 0xc4, 0xf3, 0xf9, 0x27, 0xaf, 0x79, 0xfd, 0xa1, 0x94,
		0x8d, 0xd8, 0x5f, 0xd5, 0xc3, 0xd6, 0xa2, 0xd0, 0xfc, 0xd5, 0xeb, 0x08, 0x6e, 0x10, 0x38, 0xac,
		0xe1, 0x52, 0xf0, 0x58, 0xf0, 0x58, 0xf0, 0x58, 0x42, 0xf2, 0xe2, 0xf9, 0xee, 0xe6, 0x8e, 0x36,
		0xdc, 0xce, 0xea, 0x0c, 0xdd, 0xdd, 0x04, 0x2f, 0x33, 0xc7, 0x97, 0x7d, 0xe3, 0x3f, 0x1c, 0x4b,
		0xf1, 0xdf, 0x19, 0xb1, 0xdb, 0xce, 0x1b, 0xbf, 0xfb, 0x07, 0x7b, 0xf3, 0x46, 0xbf, 0x73, 0x5d,
		0x7e, 0xca, 0x9f, 0x80, 0xc8, 0x24, 0x67, 0x49, 0xae, 0x54, 0x8d, 0x23, 0x95, 0xb4, 0xfd, 0xb8,
		0x3c, 0xc0, 0xe5, 0x81, 0x76, 0x5b, 0x3d, 0x39, 0xef, 0x36, 0x33, 0x9f, 0xe5, 0x22, 0x8a, 0x89,
		0x71, 0x3e, 0x95, 0x4b, 0x4a, 0x0a, 0x8c, 0xd8, 0xd1, 0xd1, 0xc8, 0x30, 0x1d, 0x8f, 0x54, 0x0c,
		0x63, 0xdf, 0xa5, 0x4c, 0x45, 0x01, 0xa6, 0x02, 0xa6, 0x62, 0xe3, 0x37, 0xc4, 0x3d, 0x23, 0xe2,
		0x28, 0xc4, 0x51, 0x89, 0x8c, 0xa3, 0x70, 0xcf, 0x38, 0xfb, 0x45, 0x70, 0xcf, 0xa8, 0x46, 0x18,
		0xe2, 0x9e, 0x31, 0x16, 0xc7, 0x80, 0x7b, 0xc6, 0x95, 0x48, 0x03, 0xf7, 0x8c, 0x40, 0x1b, 0x40,
		0x1b, 0x51, 0xa2, 0x0d, 0xdc, 0x33, 0x0a, 0xbb, 0x1b, 0xdc, 0x33, 0x6a, 0xf1, 0x3a, 0x19, 0xdc,
		0x33, 0xc2, 0x63, 0xc1, 0x63, 0xc1, 0x63, 0x6d, 0x91, 0x17, 0xdc, 0x33, 0x2e, 0xc8, 0x44, 0x94,
		0xf7, 0x8c, 0x9a, 0xa7, 0x46, 0xad, 0xb8, 0x66, 0x4c, 0xde, 0x94, 0x28, 0x21, 0x2a, 0x14, 0x73,
		0xa2, 0x08, 0x64, 0x5b, 0x49, 0xa6, 0xe9, 0xe7, 0x42, 0x2d, 0x4b, 0x71, 0x36, 0xf5, 0xe5, 0xd5,
		0x9c, 0xe5, 0xc7, 0x72, 0xbb, 0xa8, 0x65, 0x08, 0xc8, 0x68, 0x9c, 0x14, 0xff, 0x18, 0x10, 0xae,
		0xf1, 0x56, 0xa8, 0xaf, 0xa6, 0x85, 0x46, 0x71, 0xae, 0xaf, 0x1e, 0xcd, 0x95, 0x13, 0x2e, 0xaf,
		0x16, 0x9a, 0x47, 0x87, 0xea, 0xea, 0x0c, 0xaa, 0xab, 0xe5, 0x04, 0x74, 0xf2, 0x80, 0xec, 0xac,
		0xfd, 0xc9, 0x39, 0xcb, 0x35, 0xb7, 0x41, 0x8a, 0x54, 0x24, 0xe1, 0x28, 0x52, 0xa4, 0x44, 0xce,
		0x3b, 0x36, 0x29, 0x52, 0x63, 0x1d, 0x8b, 0x41, 0x8e, 0x14, 0xba, 0x31, 0xc0, 0x5a, 0xa4, 0xd1,
		0x5a, 0x48, 0x67, 0x49, 0xc9, 0x3a, 0x50, 0x22, 0x47, 0x0a, 0x1e, 0x18, 0x3c, 0xf0, 0xce, 0xf3,
		0xc0, 0x02, 0xc3, 0xd7, 0x37, 0xba, 0x97, 0x73, 0x85, 0x35, 0xa4, 0xda, 0x89, 0x2e, 0xfe, 0x22,
		0xc8, 0x92, 0x52, 0x6a, 0xa4, 0xaa, 0x73, 0x87, 0x68, 0x77, 0x8a, 0x6e, 0xc7, 0x56, 0xec, 0x9c,
		0x52, 0xa3, 0xd6, 0xad, 0x7b, 0x78, 0x46, 0xb8, 0xa6, 0x6a, 0x8f, 0xcf, 0xb5, 0x0b, 0xc7, 0xbd,
		0xe1, 0xeb, 0xba, 0x5f, 0x75, 0x92, 0x95, 0xfa, 0x87, 0x31, 0x16, 0xce, 0x32, 0x84, 0x13, 0x8d,
		0x69, 0x13, 0xd4, 0x98, 0x56, 0xb3, 0xaa, 0xee, 0x45, 0xfb, 0x3d, 0x14, 0x4d, 0x05, 0xa1, 0xc7,
		0x6f, 0x39, 0x1d, 0xd3, 0xb2, 0x8d, 0xe0, 0xf2, 0x84, 0xd0, 0xe5, 0x13, 0x58, 0x84, 0xec, 0x15,
		0xb3, 0x5f, 0x02, 0x52, 0x23, 0x76, 0x4e, 0x9f, 0x32, 0xa9, 0x9c, 0x28, 0x16, 0x5b, 0xbb, 0xec,
		0x64, 0x3a, 0x21, 0xf1, 0xba, 0x1a, 0xb2, 0x9c, 0x89, 0x1d, 0x69, 0x86, 0x3a, 0xf9, 0x3c, 0xac,
		0xa3, 0x2a, 0x94, 0x4e, 0x12, 0x74, 0x58, 0x71, 0x31, 0xc8, 0x04, 0x16, 0x87, 0x1a, 0x7b, 0x64,
		0xf7, 0xf7, 0xf7, 0xbf, 0x9a, 0xc6, 0xdf, 0x15, 0xe3, 0xaf, 0x9c, 0x71, 0xde, 0xa8, 0xcf, 0xfc,
		0xcf, 0xe3, 0xa3, 0xd1, 0xa8, 0x1f, 0xfc, 0xcc, 0x1d, 0x96, 0xf3, 0xfd, 0x83, 0xdf, 0xa6, 0x7f,
		0x5f, 0x1f, 0xe0, 0xe1, 0x7f, 0xca, 0x3c, 0xf5, 0xdb, 0xc1, 0xaf, 0xc7, 0xc7, 0xa3, 0x6c, 0xd4,
		0x9e, 0x2d, 0x95, 0xb5, 0x06, 0xa6, 0xe7, 0x39, 0x4d, 0x2b, 0x48, 0x75, 0x20, 0xaa, 0x39, 0x58,
		0x5a, 0x51, 0x92, 0x0f, 0x99, 0x99, 0x77, 0xf5, 0x50, 0xbd, 0xff, 0xb3, 0x7a, 0x0f, 0x2a, 0x10,
		0x54, 0x20, 0xa8, 0x40, 0x31, 0x79, 0x61, 0x76, 0xaf, 0xc3, 0xdc, 0x61, 0x26, 0x13, 0x01, 0x23,
		0x58, 0x54, 0x58, 0xa3, 0x6a, 0xf7, 0x3a, 0x83, 0x97, 0x8a, 0x73, 0x26, 0xbb, 0xf5, 0xd4, 0x73,
		0x3d, 0x5f, 0xdd, 0x06, 0x8e, 0xd6, 0x51, 0xb7, 0x7c, 0x22, 0x93, 0xfe, 0x60, 0xf8, 0x60, 0xf8,
		0x60, 0xf8, 0xa4, 0x27, 0x15, 0xae, 0x35, 0x7a, 0xf9, 0x18, 0x1b, 0xac, 0xae, 0xe3, 0x12, 0x98,
		0xab, 0x60, 0x15, 0x75, 0x63, 0x95, 0x2f, 0x9c, 0xc0, 0x54, 0xc1, 0x54, 0xc1, 0x54, 0x89, 0x6b,
		0x9f, 0x61, 0xf7, 0x3a, 0x4f, 0xdc, 0x99, 0xae, 0x9b, 0x54, 0x08, 0xbd, 0x2d, 0xf4, 0x72, 0x5a,
		0xe8, 0x6d, 0x11, 0x9f, 0x23, 0x40, 0x6f, 0x8b, 0xc4, 0xf1, 0x4d, 0x03, 0x3f, 0xc4, 0x5c, 0x02,
		0xc8, 0x32, 0x5c, 0x07, 0x11, 0x16, 0x60, 0x0b, 0x60, 0x0b, 0x22, 0x2c, 0x7d, 0x06, 0xeb, 0x95,
		0xb9, 0x9e, 0x6c, 0x05, 0xf1, 0xdc, 0x7e, 0x8d, 0x17, 0x52, 0x37, 0x59, 0x45, 0x98, 0x2b, 0x98,
		0x2b, 0x98, 0x2b, 0x31, 0x79, 0xe9, 0x59, 0xb6, 0x7f, 0x46, 0x60, 0xac, 0x4a, 0x88, 0xaf, 0xc2,
		0x01, 0xf7, 0x79, 0xc4, 0x57, 0x51, 0x1f, 0x41, 0x11, 0xb1, 0x55, 0x64, 0xb1, 0x55, 0x6a, 0x3a,
		0xa3, 0x8c, 0xba, 0x01, 0x8c, 0x7e, 0x0f, 0x65, 0xfe, 0xc2, 0xc3, 0xf0, 0x23, 0x47, 0xbf, 0xc7,
		0x68, 0xfe, 0x02, 0x5a, 0xaa, 0x6b, 0x06, 0x77, 0x28, 0x16, 0x8c, 0xc0, 0x9a, 0xa0, 0x58, 0x10,
		0x71, 0x11, 0xe2, 0x22, 0x14, 0x0b, 0x4a, 0xaf, 0x81, 0x62, 0xc1, 0x50, 0x77, 0x8a, 0x6e, 0xc7,
		0x56, 0xec, 0x1c, 0x8a, 0x05, 0x51, 0x2c, 0x18, 0x5f, 0xe1, 0x44, 0xb1, 0x20, 0x8a, 0x05, 0x51,
		0x2c, 0x48, 0x43, 0xa2, 0x64, 0x50, 0x2c, 0x18, 0x82, 0x45, 0x40, 0xb1, 0x20, 0x29, 0xa5, 0x89,
		0x62, 0xc1, 0xc4, 0x1c, 0x15, 0x8a, 0x05, 0x65, 0x0c, 0x32, 0x8a, 0x05, 0x51, 0x2c, 0xa8, 0xc9,
		0xba, 0xa0, 0x58, 0x10, 0x54, 0x20, 0xa8, 0xc0, 0xf4, 0x52, 0x81, 0x28, 0x16, 0x14, 0xfa, 0x8e,
		0x28, 0x16, 0x84, 0xe1, 0x83, 0xe1, 0x4b, 0x83, 0xe1, 0xdb, 0x91, 0x54, 0x56, 0xe7, 0xf9, 0xd9,
		0x63, 0x04, 0x06, 0x6b, 0xb4, 0x0e, 0x0c, 0x0d, 0x0c, 0x0d, 0x0c, 0x8d, 0x90, 0xbc, 0xf4, 0x2c,
		0xdb, 0x2f, 0x17, 0x09, 0xec, 0xcc, 0x19, 0xb2, 0x50, 0xb5, 0x92, 0x51, 0xa8, 0xf2, 0x8b, 0xcf,
		0x11, 0xe4, 0xcf, 0x8a, 0xc5, 0xf2, 0x69, 0xb1, 0x98, 0x3b, 0x3d, 0x39, 0xcd, 0x9d, 0x97, 0x4a,
		0xf9, 0x72, 0x1e, 0x45, 0x7f, 0x89, 0xe2, 0x8d, 0xba, 0x4e, 0xbb, 0x6d, 0x58, 0xb6, 0xcf, 0xdc,
		0x57, 0xb3, 0x4d, 0xd1, 0xae, 0x60, 0x76, 0x39, 0xc0, 0x10, 0xc0, 0x10, 0xc0, 0x10, 0x61, 0x18,
		0x72, 0x52, 0x20, 0x80, 0x21, 0xa7, 0x80, 0x21, 0x80, 0x21, 0xbb, 0x52, 0x0c, 0x53, 0x38, 0x2f,
		0x9e, 0x97, 0x4f, 0x0b, 0xe7, 0x00, 0x1f, 0x09, 0x03, 0x1f, 0x68, 0x91, 0x04, 0xc0, 0x02, 0xc0,
		0x92, 0x41, 0x8b, 0x24, 0xb4, 0x48, 0x02, 0x6a, 0xd9, 0x31, 0xd4, 0x82, 0x16, 0x49, 0xc9, 0x03,
		0x2c, 0x68, 0x91, 0x04, 0xd8, 0x02, 0xd8, 0x92, 0x02, 0xd8, 0xb2, 0x23, 0xf7, 0xca, 0xae, 0xe3,
		0xf8, 0x46, 0x8b, 0xb5, 0xcd, 0x37, 0x75, 0xa3, 0x35, 0xb3, 0x16, 0x0c, 0x0e, 0x0c, 0x0e, 0x0c,
		0x8e, 0x90, 0xbc, 0x80, 0xd8, 0x45, 0x88, 0x84, 0x10, 0x49, 0xf0, 0x08, 0x40, 0xec, 0x26, 0x33,
		0x4e, 0x1a, 0x42, 0x05, 0xcb, 0xeb, 0x52, 0x75, 0x68, 0x5c, 0x5c, 0x10, 0x00, 0x04, 0x00, 0x04,
		0x00, 0x44, 0x18, 0x80, 0x20, 0xc1, 0x0d, 0x00, 0x04, 0x00, 0x44, 0xe0, 0x08, 0x90, 0xe0, 0x96,
		0x74, 0x28, 0xe2, 0xf9, 0xae, 0xe9, 0x0f, 0x2b, 0x96, 0xd4, 0x20, 0xc8, 0x78, 0x21, 0x40, 0x0f,
		0x40, 0x0f, 0x40, 0x0f, 0x61, 0xe8, 0x81, 0x06, 0xcf, 0x40, 0x1e, 0x40, 0x1e, 0xfc, 0x47, 0x50,
		0x28, 0x01, 0x68, 0x24, 0x0a, 0x68, 0x60, 0x1a, 0x05, 0xc0, 0x0a, 0xc0, 0x0a, 0xc0, 0x0a, 0xc0,
		0x4a, 0xd8, 0x31, 0x3a, 0xc0, 0x4a, 0xd4, 0x47, 0x80, 0x69, 0x14, 0xd1, 0x41, 0x95, 0xb4, 0x4e,
		0xa3, 0x90, 0x99, 0xa8, 0x90, 0x51, 0x1a, 0x46, 0xf1, 0x10, 0x7c, 0xa2, 0xae, 0x59, 0x14, 0x7b,
		0x84, 0xe7, 0x33, 0x80, 0x12, 0xe2, 0xcd, 0xf5, 0xb3, 0x57, 0x96, 0xe7, 0x57, 0x7c, 0x5f, 0x2c,
		0x81, 0x71, 0xe0, 0x03, 0xaa, 0x6d, 0x36, 0x80, 0x05, 0x03, 0x8d, 0xb4, 0x7b, 0xed, 0xb6, 0xc0,
		0x58, 0x8d, 0x6b, 0xf3, 0x87, 0xfc, 0xc3, 0xb7, 0x6e, 0x8b, 0xb9, 0xac, 0xf5, 0xfe, 0x6d, 0xf4,
		0x28, 0xe9, 0x16, 0x4a, 0x8a, 0xb6, 0x82, 0x48, 0x67, 0x85, 0xc6, 0x91, 0xc8, 0x09, 0x31, 0x9f,
		0xf8, 0x6e, 0x17, 0xc6, 0xcd, 0x3f, 0xb1, 0x65, 0x8f, 0x45, 0xf7, 0x56, 0x66, 0x4f, 0x39, 0x36,
		0x53, 0x7c, 0x13, 0x37, 0xef, 0xde, 0xfa, 0x3d, 0xd9, 0xb0, 0x1f, 0x9c, 0x83, 0x65, 0x84, 0x06,
		0xc9, 0x70, 0x0e, 0x8e, 0xe1, 0x1e, 0x14, 0x23, 0x12, 0x6f, 0x89, 0xc7, 0x55, 0xa2, 0xf1, 0x93,
		0x74, 0x9c, 0x24, 0x1d, 0x0f, 0x49, 0xc5, 0x3d, 0x6a, 0x1a, 0xc2, 0x3b, 0x98, 0x25, 0x6b, 0xf6,
		0xfc, 0x6f, 0x46, 0xc7, 0xf2, 0x3a, 0xa6, 0xdf, 0xfc, 0xc6, 0xbf, 0x87, 0x93, 0x2e, 0x8e, 0x73,
		0x8f, 0xf3, 0x7a, 0x17, 0x21, 0x94, 0x28, 0x1c, 0xee, 0xcb, 0x84, 0xf7, 0xf2, 0xe1, 0xbc, 0x6c,
		0xf8, 0xae, 0x1c, 0xae, 0x2b, 0x87, 0xe7, 0x4a, 0xe1, 0x38, 0x2d, 0xde, 0x10, 0x0e, 0xaf, 0x27,
		0xe7, 0xd5, 0x74, 0x7a, 0xb6, 0xcf, 0x5c, 0xa1, 0xcc, 0x03, 0x89, 0x4c, 0x03, 0xc9, 0x90, 0x59,
		0x02, 0xd2, 0xaa, 0x84, 0xc4, 0xaa, 0xc4, 0x9a, 0x22, 0x3f, 0x4f, 0x11, 0x5f, 0xc9, 0x50, 0xa3,
		0x2a, 0x21, 0x2c, 0xd5, 0x96, 0xd1, 0xdd, 0xe4, 0x93, 0xec, 0xa2, 0xa6, 0x28, 0xa3, 0x4e, 0x05,
		0xff, 0x38, 0xdc, 0x3a, 0xb3, 0xcd, 0xa7, 0x36, 0x33, 0x6c, 0xbf, 0x6b, 0x0c, 0xbc, 0x8c, 0xb8,
		0x6f, 0x5a, 0x5c, 0x80, 0xd3, 0x16, 0x49, 0x96, 0x3f, 0xc1, 0xab, 0xc1, 0xab, 0x91, 0x79, 0x35,
		0xf1, 0xf2, 0x21, 0xc1, 0x72, 0x21, 0x4a, 0x15, 0x6d, 0xc9, 0xaa, 0x66, 0x0b, 0x2a, 0x09, 0x95,
		0x84, 0x4a, 0x92, 0xaa, 0xe4, 0xc0, 0xdb, 0x79, 0x81, 0xa0, 0x18, 0xa2, 0x33, 0x36, 0x27, 0xaf,
		0xba, 0x62, 0x0d, 0x28, 0x1c, 0x14, 0x2e, 0x64, 0x85, 0x93, 0x1a, 0xc5, 0x28, 0x33, 0x72, 0x51,
		0x6e, 0xb4, 0xa2, 0xc2, 0x8c, 0x63, 0xc5, 0x51, 0x89, 0x2a, 0x33, 0xa6, 0x94, 0x27, 0xbc, 0xc4,
		0x7e, 0xc4, 0x61, 0x5d, 0xe7, 0x85, 0x95, 0xda, 0xa1, 0x97, 0x93, 0x7e, 0xe8, 0x18, 0x1d, 0x98,
		0x88, 0xd1, 0x81, 0xf5, 0xb8, 0x47, 0xff, 0xf1, 0xbd, 0xfc, 0xe1, 0xbc, 0x14, 0x16, 0xb9, 0xfa,
		0xd9, 0x7e, 0xeb, 0xbb, 0xe1, 0xe2, 0x67, 0x4f, 0x60, 0x87, 0x78, 0x77, 0x46, 0x64, 0x47, 0xb2,
		0x1b, 0x6f, 0x9e, 0x38, 0xf7, 0x60, 0xf5, 0xdb, 0x2f, 0xbf, 0xdb, 0x8a, 0xf7, 0xca, 0x76, 0x5d,
		0xa7, 0xc9, 0x3c, 0x8f, 0xad, 0x87, 0xb1, 0x33, 0x5d, 0x6f, 0xc6, 0x3f, 0xba, 0x66, 0x7f, 0x36,
		0x5f, 0x6b, 0x6d, 0x45, 0xa3, 0x3c, 0xe8, 0x73, 0x16, 0x6d, 0x0e, 0xbe, 0xcf, 0xa6, 0xfd, 0xe3,
		0x84, 0x97, 0xc2, 0x70, 0x52, 0x18, 0x3e, 0x2e, 0xc2, 0xc5, 0xe0, 0x8b, 0x13, 0xc9, 0xe4, 0xb6,
		0x8b, 0xa8, 0xf1, 0xa9, 0xf1, 0xdf, 0x60, 0x8e, 0x1f, 0x48, 0xc6, 0x1d, 0xe6, 0x16, 0x21, 0x90,
		0x8d, 0x35, 0xa2, 0xbf, 0xc4, 0xdc, 0x2c, 0x24, 0x34, 0xa6, 0x9e, 0xfb, 0x16, 0xb3, 0x6b, 0x49,
		0x90, 0x50, 0x83, 0x87, 0xd2, 0x11, 0xd7, 0x72, 0x0a, 0x59, 0xfa, 0x02, 0x5b, 0x3e, 0x21, 0x8c,
		0x5b, 0x64, 0xdb, 0x66, 0xe6, 0xb3, 0xcb, 0x9e, 0x65, 0xc2, 0x5a, 0x81, 0xee, 0x2c, 0x03, 0xd4,
		0x1f, 0x38, 0xf8, 0xa3, 0xa3, 0x21, 0xae, 0x39, 0x1e, 0x08, 0x7c, 0x88, 0x54, 0x14, 0x5f, 0x66,
		0xca, 0xd2, 0xee, 0x88, 0x24, 0xe6, 0x71, 0x5a, 0x79, 0x61, 0x6b, 0x0f, 0xc5, 0x4c, 0xb0, 0x62,
		0xf2, 0x7a, 0x8d, 0xc9, 0x03, 0xa6, 0xfb, 0xe2, 0x89, 0xef, 0xf9, 0x24, 0x05, 0x66, 0xf0, 0xb4,
		0xe0, 0x6e, 0xc9, 0x5d, 0x3a, 0x4b, 0x17, 0xbe, 0xa8, 0x14, 0xbc, 0x28, 0x88, 0xb3, 0xaa, 0x58,
		0x93, 0x89, 0x37, 0x99, 0x98, 0xd3, 0x88, 0xbb, 0x78, 0xe4, 0x2d, 0x41, 0x55, 0xc9, 0x97, 0xac,
		0xcc, 0x96, 0xa4, 0x5b, 0xf6, 0x8b, 0x12, 0x59, 0xa5, 0xf5, 0x0d, 0xa5, 0xf2, 0x8d, 0x27, 0x4f,
		0xab, 0xe4, 0x1d, 0x4f, 0x17, 0x51, 0xc8, 0x3f, 0x9e, 0x2c, 0x22, 0x95, 0x87, 0x2c, 0x2e, 0x44,
		0x02, 0xdb, 0x9b, 0x6d, 0x76, 0x7b, 0x46, 0xcf, 0x33, 0x5f, 0xd8, 0x88, 0x12, 0x90, 0x37, 0x8f,
		0x4b, 0x2b, 0xc1, 0x54, 0xc2, 0x54, 0xa6, 0xce, 0x54, 0xfa, 0x56, 0x87, 0xf9, 0x56, 0xf3, 0xbb,
		0x27, 0xd5, 0x02, 0x49, 0xa1, 0xf5, 0x91, 0x62, 0x2d, 0x9f, 0x42, 0x41, 0x23, 0x45, 0xed, 0x1e,
		0x51, 0xc1, 0x18, 0x55, 0x63, 0x01, 0xca, 0x02, 0x31, 0x85, 0xda, 0x3c, 0x92, 0x9a, 0x3c, 0xea,
		0xad, 0xa5, 0x6f, 0x55, 0x44, 0xba, 0xdb, 0x21, 0x95, 0xc3, 0xd5, 0x63, 0xe5, 0x9b, 0x7b, 0x9e,
		0x44, 0xb7, 0xf8, 0x15, 0x9e, 0x39, 0x58, 0x07, 0x7e, 0x19, 0x7e, 0x19, 0x7e, 0x19, 0x7e, 0x19,
		0x7e, 0x19, 0x7e, 0x19, 0x7e, 0x59, 0xd6, 0x2f, 0xfb, 0x56, 0xdb, 0xfa, 0x5b, 0xae, 0xa2, 0x7d,
		0xde, 0x31, 0xcf, 0x2c, 0x04, 0xcf, 0x0c, 0xcf, 0x9c, 0x3a, 0xcf, 0xdc, 0x65, 0x6e, 0x93, 0xd9,
		0xbe, 0xf9, 0xc2, 0x14, 0x1c, 0x73, 0x09, 0x8e, 0x19, 0x8e, 0x39, 0xae, 0x8e, 0x39, 0x97, 0x83,
		0x1f, 0x8e, 0xc2, 0x0f, 0x77, 0x58, 0xc7, 0x71, 0xdf, 0x86, 0xa1, 0xad, 0xbc, 0x13, 0x9e, 0x5b,
		0x05, 0x1e, 0x18, 0x1e, 0x38, 0x75, 0x1e, 0x58, 0xba, 0x63, 0x3f, 0xc2, 0x62, 0x78, 0x5f, 0x84,
		0xc5, 0x70, 0xc7, 0x62, 0xee, 0x98, 0x22, 0x32, 0x5e, 0xb1, 0x16, 0x5c, 0x33, 0x5c, 0x33, 0x82,
		0x63, 0x04, 0xc7, 0x70, 0xcf, 0x08, 0x8e, 0xe1, 0x8d, 0xb7, 0x6e, 0xdb, 0xa8, 0x5c, 0x4b, 0xd2,
		0xff, 0x06, 0x4f, 0xc3, 0xe3, 0xc2, 0xe3, 0x22, 0xd7, 0x75, 0x51, 0xbe, 0x45, 0x73, 0x5d, 0xb5,
		0x68, 0xb7, 0x48, 0x1d, 0xd4, 0x32, 0xe8, 0xe0, 0xae, 0x87, 0x82, 0x6e, 0x43, 0xb7, 0x41, 0x74,
		0x01, 0x49, 0x03, 0x49, 0x83, 0xe8, 0x02, 0xb4, 0x1e, 0x6f, 0x9b, 0xe7, 0x9b, 0xae, 0x6f, 0xf8,
		0x96, 0x0a, 0xc0, 0x9e, 0x59, 0x03, 0xae, 0x18, 0xae, 0x18, 0xae, 0x18, 0xae, 0x18, 0xae, 0x18,
		0xae, 0x18, 0xae, 0x58, 0xcc, 0x15, 0xf7, 0xba, 0x6a, 0x6e, 0x78, 0xf4, 0x3c, 0x5c, 0x30, 0x5c,
		0x30, 0x4a, 0x22, 0xe0, 0x87, 0xe1, 0x87, 0xe1, 0x87, 0xe1, 0x87, 0x85, 0x7e, 0x32, 0x2e, 0x63,
		0xd2, 0x26, 0x4d, 0x01, 0xc7, 0x7f, 0x12, 0x1e, 0xfc, 0xc7, 0xd9, 0xe7, 0xf0, 0x6e, 0xfc, 0x41,
		0xe3, 0x3f, 0x89, 0xcc, 0xfb, 0xd3, 0xdd, 0x33, 0x73, 0x34, 0xcf, 0x6f, 0x3b, 0xc3, 0x2f, 0xd6,
		0x53, 0x43, 0xaa, 0x87, 0x86, 0x54, 0xcf, 0x0c, 0xb1, 0x1e, 0x19, 0x51, 0xb5, 0x10, 0x5d, 0x12,
		0x36, 0xba, 0x56, 0xa2, 0x4b, 0xe2, 0x95, 0xcc, 0x96, 0xa2, 0xdb, 0x7a, 0x74, 0xca, 0xec, 0x88,
		0x4a, 0x7b, 0x51, 0xcf, 0xfb, 0x66, 0x8c, 0xa6, 0x27, 0x6e, 0xed, 0x2f, 0x3a, 0xf3, 0xb3, 0xf1,
		0x68, 0x30, 0xea, 0xbd, 0x79, 0x86, 0xcf, 0xdc, 0x4e, 0x22, 0x9b, 0x8c, 0x4e, 0xbe, 0x7c, 0x58,
		0x8d, 0x46, 0x9b, 0xe3, 0xdd, 0xe7, 0xec, 0x33, 0x3a, 0xfa, 0x79, 0xe2, 0x36, 0xa3, 0x39, 0x6d,
		0xa3, 0x12, 0xb7, 0x89, 0x82, 0x6c, 0xdc, 0x16, 0x8b, 0x79, 0x89, 0x5b, 0x44, 0x85, 0xc6, 0x4b,
		0x72, 0xb7, 0x1b, 0x1d, 0x8e, 0xaf, 0x91, 0x1d, 0x7b, 0x23, 0x31, 0xf5, 0x66, 0xb0, 0x77, 0xe9,
		0x99, 0xc1, 0xc1, 0x2b, 0xa9, 0xaa, 0x4c, 0x43, 0x2c, 0x07, 0x71, 0x70, 0x4a, 0xb2, 0x1e, 0xb4,
		0x9d, 0xfa, 0xf1, 0x37, 0x5d, 0xd7, 0xf1, 0x9d, 0xa6, 0xd3, 0x36, 0x5e, 0x99, 0xeb, 0x89, 0x04,
		0x15, 0xb3, 0xed, 0xa5, 0xe7, 0x57, 0x10, 0xd7, 0xd6, 0x3f, 0x0b, 0xd0, 0x55, 0xe8, 0x6a, 0x74,
		0xba, 0xca, 0xec, 0x5e, 0x87, 0xb9, 0xa2, 0xe5, 0x11, 0x13, 0x7d, 0x2d, 0x0a, 0x3c, 0x53, 0xb5,
		0x7b, 0x41, 0x6f, 0xc0, 0x7e, 0x88, 0x3a, 0xee, 0x9a, 0x3e, 0x33, 0xda, 0x56, 0xc7, 0xf2, 0xc5,
		0xb5, 0x7b, 0xe6, 0x59, 0xa8, 0x28, 0x54, 0x34, 0x32, 0x15, 0xed, 0x59, 0xb6, 0x9f, 0x2f, 0x4b,
		0x68, 0x67, 0x19, 0x33, 0x8b, 0x49, 0xf9, 0xf4, 0x5d, 0x9e, 0x59, 0x5c, 0x2e, 0x95, 0x4e, 0x30,
		0xa4, 0x58, 0xc9, 0x17, 0x79, 0xcc, 0x1b, 0x80, 0x44, 0x59, 0x77, 0x34, 0xff, 0x38, 0x3c, 0x12,
		0x3c, 0x12, 0x3c, 0x12, 0x3c, 0x12, 0x3c, 0x12, 0x3c, 0x92, 0xb4, 0x47, 0xf2, 0xad, 0x0e, 0x73,
		0x7a, 0x12, 0xbe, 0x68, 0xfc, 0x20, 0xbc, 0x10, 0xbc, 0x10, 0xbc, 0x10, 0xbc, 0x10, 0xbc, 0x10,
		0xbc, 0x90, 0xc4, 0x4f, 0x44, 0x95, 0x7b, 0x31, 0xbd, 0x9d, 0x3f, 0xe6, 0xba, 0xb9, 0xcd, 0xf0,
		0x67, 0x1a, 0x3c, 0x78, 0xdf, 0x1e, 0x82, 0x95, 0x1b, 0x23, 0x2f, 0x26, 0x9b, 0x7a, 0xb1, 0x31,
		0xe7, 0x81, 0x67, 0x58, 0x9a, 0xd0, 0x90, 0xb4, 0xb8, 0x8c, 0xc0, 0xc4, 0xdd, 0x34, 0x81, 0xda,
		0xe0, 0x6e, 0x1a, 0xa0, 0x11, 0xa0, 0x71, 0xf5, 0xc9, 0xe1, 0x6e, 0x9a, 0x5f, 0x5b, 0x71, 0x37,
		0x0d, 0x5d, 0x8d, 0x52, 0x57, 0x71, 0x37, 0xbd, 0x76, 0x6b, 0x70, 0x37, 0x0d, 0x15, 0x05, 0x07,
		0x03, 0x0e, 0x06, 0x1c, 0x0c, 0x38, 0x18, 0x0a, 0x5f, 0x84, 0xbb, 0x69, 0x78, 0x24, 0x78, 0x24,
		0x78, 0x24, 0x78, 0x24, 0x78, 0xa4, 0x78, 0x78, 0x24, 0xdc, 0x4d, 0xc3, 0x0b, 0xc1, 0x0b, 0xc1,
		0x0b, 0xc1, 0x0b, 0xc1, 0x0b, 0x69, 0xf2, 0x42, 0x71, 0xbf, 0x9b, 0xe6, 0xed, 0x3e, 0x21, 0x7c,
		0x35, 0xcd, 0xd1, 0x6d, 0x22, 0xae, 0x4d, 0x01, 0xb6, 0x16, 0xd6, 0xcb, 0x6c, 0x88, 0x52, 0x57,
		0x80, 0x8d, 0x97, 0xf1, 0x5c, 0x97, 0xf0, 0xdc, 0xbd, 0x00, 0x0a, 0x64, 0xbd, 0x00, 0x92, 0xda,
		0x06, 0x20, 0xb4, 0x0e, 0x00, 0x4f, 0x8e, 0xc3, 0xd9, 0x9f, 0x75, 0xf6, 0x6a, 0x91, 0xab, 0x1d,
		0x2b, 0xa7, 0x79, 0x0f, 0xa3, 0x0f, 0x40, 0x5a, 0xd3, 0x2c, 0x74, 0x67, 0x58, 0x70, 0x03, 0x43,
		0xc9, 0x4e, 0x6a, 0x02, 0x9d, 0xd3, 0x04, 0x51, 0xa0, 0x00, 0x96, 0x95, 0x41, 0x7d, 0xb2, 0x7d,
		0x0d, 0x25, 0x51, 0x9e, 0x0a, 0x4c, 0x11, 0xe9, 0x11, 0x29, 0x83, 0xe6, 0x54, 0xb7, 0x42, 0xbd,
		0x33, 0x99, 0xd2, 0xee, 0x10, 0x81, 0xac, 0xba, 0x86, 0xfc, 0xb7, 0x66, 0xcf, 0x75, 0x99, 0xed,
		0x1b, 0x2d, 0xd3, 0x67, 0x62, 0x26, 0x7a, 0xe9, 0x49, 0x58, 0x6a, 0x58, 0xea, 0x85, 0xfd, 0x1e,
		0xc8, 0x86, 0x61, 0xda, 0x2d, 0xde, 0xce, 0xea, 0xd3, 0xa1, 0x2e, 0x1c, 0x3f, 0x7b, 0x67, 0xfa,
		0x3e, 0x73, 0x6d, 0x6e, 0x73, 0x9d, 0xfd, 0xcf, 0xd7, 0x9c, 0x71, 0x5e, 0xff, 0x59, 0xec, 0x3f,
		0x3e, 0x1a, 0xc3, 0x3f, 0x16, 0x66, 0xff, 0x58, 0x1b, 0xff, 0xe1, 0xdd, 0xd2, 0x1f, 0xf6, 0x1f,
		0x1f, 0x8f, 0x82, 0x3f, 0xff, 0xeb, 0xe0, 0xb7, 0xbf, 0xbe, 0xfe, 0xcb, 0xa8, 0x2f, 0xfd, 0xc4,
		0x3f, 0xb2, 0x91, 0xa8, 0x6f, 0xcb, 0xe9, 0x98, 0x96, 0x6d, 0x70, 0x4d, 0x97, 0x9a, 0x9e, 0xca,
		0xcc, 0x43, 0x50, 0x5a, 0x28, 0xad, 0xb4, 0x78, 0x08, 0xab, 0xec, 0x15, 0xb3, 0x5f, 0x82, 0xa8,
		0x34, 0x15, 0x00, 0x2b, 0x0f, 0x80, 0x35, 0xde, 0x8a, 0x42, 0xe9, 0x24, 0x81, 0x78, 0x4a, 0x87,
		0x93, 0xd9, 0xdf, 0xdf, 0xff, 0x6a, 0x1a, 0x7f, 0x57, 0x8c, 0xbf, 0x72, 0xc6, 0x79, 0xa3, 0x3e,
		0xf3, 0x3f, 0x8f, 0x8f, 0x46, 0xa3, 0x7e, 0xf0, 0x33, 0x77, 0x58, 0xce, 0xf7, 0x0f, 0x7e, 0x9b,
		0xfe, 0x7d, 0xfd, 0xf1, 0xf1, 0xe8, 0xe0, 0x9f, 0x32, 0x4f, 0xfd, 0x76, 0xf0, 0xeb, 0xf1, 0xf1,
		0x28, 0x1a, 0xcf, 0xf3, 0xcd, 0xf1, 0x7c, 0x31, 0xb7, 0x33, 0x79, 0x02, 0x3e, 0x07, 0x3e, 0x07,
		0x3e, 0x07, 0x3e, 0x07, 0x3e, 0x07, 0x3e, 0x47, 0xc8, 0xe7, 0xb4, 0x9d, 0x17, 0xcb, 0x36, 0x9e,
		0x4c, 0xdb, 0x66, 0x2e, 0xbf, 0xdf, 0x99, 0x7b, 0x0a, 0xbe, 0x07, 0xbe, 0x67, 0x61, 0xbf, 0xb9,
		0x47, 0xd0, 0x72, 0x8e, 0x9c, 0x95, 0x93, 0xed, 0x8e, 0xe3, 0xb7, 0x84, 0x45, 0x7b, 0xf6, 0x21,
		0x48, 0x36, 0x24, 0x3b, 0x3a, 0xc9, 0x8e, 0xf6, 0x22, 0x7b, 0xcb, 0xe5, 0x3e, 0xef, 0x1d, 0xf6,
		0xfa, 0xab, 0x7c, 0xbe, 0xfb, 0x6b, 0x9f, 0xb5, 0x6d, 0xe6, 0x73, 0x37, 0xb6, 0x9f, 0xff, 0x71,
		0xf4, 0xb6, 0x47, 0x6f, 0x7b, 0x9e, 0x23, 0x0f, 0xd3, 0x54, 0xa3, 0x7f, 0x40, 0x7a, 0xfb, 0x07,
		0x3c, 0x9b, 0x6d, 0x0f, 0x0d, 0x04, 0x90, 0xd9, 0xab, 0x1a, 0xff, 0xa7, 0xbf, 0x81, 0x00, 0x8a,
		0x8b, 0xa1, 0x6a, 0x48, 0xa2, 0xe7, 0x78, 0x04, 0x49, 0xf4, 0x7a, 0x49, 0x48, 0x09, 0x66, 0x56,
		0x89, 0xa1, 0xa5, 0xde, 0x32, 0x24, 0xd1, 0x2b, 0xfb, 0x22, 0x14, 0x17, 0xc3, 0x23, 0xc1, 0x23,
		0xc1, 0x23, 0xc1, 0x23, 0xc1, 0x23, 0xc5, 0xc3, 0x23, 0xa1, 0xb8, 0x18, 0x5e, 0x08, 0x5e, 0x08,
		0x5e, 0x08, 0x5e, 0x08, 0x5e, 0x48, 0x93, 0x17, 0x8a, 0x65, 0x71, 0xf1, 0xdc, 0xed, 0x1d, 0x79,
		0xef, 0xeb, 0x5a, 0xb0, 0x3a, 0xda, 0x5f, 0xe3, 0xfa, 0x4a, 0xd1, 0xe1, 0xe2, 0xfa, 0x0a, 0xd8,
		0x11, 0xd8, 0x51, 0x0b, 0x76, 0xc4, 0xf5, 0x15, 0x54, 0x0d, 0xaa, 0x86, 0x30, 0x0d, 0x61, 0x1a,
		0xc2, 0x34, 0x84, 0x69, 0xb8, 0xbe, 0x82, 0x47, 0x82, 0x47, 0x82, 0x47, 0x82, 0x47, 0x82, 0x47,
		0x4a, 0x90, 0x47, 0xc2, 0xf5, 0x15, 0xbc, 0x10, 0xbc, 0x10, 0xbc, 0x10, 0xbc, 0x10, 0xbc, 0x90,
		0x26, 0x2f, 0x94, 0x80, 0xeb, 0x2b, 0xe2, 0xf6, 0xb8, 0x73, 0xb7, 0x57, 0x09, 0xee, 0x90, 0xcb,
		0x53, 0xa1, 0x27, 0xb9, 0x2d, 0xdc, 0x75, 0x86, 0x7b, 0x1b, 0x5e, 0x7c, 0xdb, 0x0b, 0xf3, 0xbe,
		0x68, 0x76, 0x65, 0x33, 0x5e, 0x8e, 0x57, 0x9a, 0x7f, 0x8b, 0xe9, 0x77, 0x9d, 0xf9, 0x9e, 0xd9,
		0x81, 0x67, 0xb5, 0x6c, 0xb3, 0x6d, 0xb4, 0xd8, 0xab, 0xb5, 0x02, 0x2f, 0xcc, 0xd4, 0x43, 0xce,
		0xff, 0xe0, 0xc2, 0xbb, 0xae, 0xbe, 0x57, 0x5c, 0x8b, 0x94, 0x36, 0x21, 0xa2, 0x59, 0xe4, 0xe3,
		0x74, 0xfd, 0x75, 0xc8, 0x67, 0x1b, 0xc2, 0xe1, 0x46, 0x32, 0xdc, 0x88, 0x65, 0x11, 0x99, 0x4c,
		0xbe, 0x9c, 0xa0, 0x5c, 0xac, 0xbb, 0xb7, 0xdb, 0x56, 0xb1, 0xc8, 0x57, 0xa9, 0x18, 0x76, 0x51,
		0xea, 0x86, 0x23, 0x12, 0x05, 0xa3, 0xe1, 0x17, 0xa5, 0xae, 0x3f, 0xc2, 0xa8, 0x6c, 0xdc, 0x82,
		0x9e, 0x1d, 0x2f, 0xfe, 0xff, 0xd6, 0x5c, 0x86, 0xb5, 0xb6, 0xa1, 0x36, 0x5a, 0xe9, 0x43, 0xb0,
		0x50, 0x63, 0xe1, 0x7f, 0x37, 0xa5, 0x31, 0xf0, 0x15, 0x58, 0xb7, 0x9d, 0x17, 0xab, 0x69, 0xb6,
		0x8d, 0xe6, 0x37, 0xd3, 0xb6, 0x59, 0xdb, 0xdb, 0x2e, 0xc7, 0x4b, 0x4f, 0x40, 0xa2, 0x63, 0x27,
		0xd1, 0xdb, 0xcb, 0xac, 0x87, 0x87, 0x27, 0x50, 0x67, 0x3d, 0x7a, 0x20, 0x19, 0x85, 0xd6, 0x1c,
		0xc2, 0x20, 0x1b, 0x73, 0x47, 0x9f, 0xa9, 0xb2, 0x5d, 0x58, 0x68, 0x70, 0x32, 0x77, 0xa6, 0x0a,
		0x67, 0xcd, 0xbe, 0x98, 0x47, 0x94, 0x14, 0xad, 0xc8, 0xe8, 0x1e, 0x01, 0x91, 0x4b, 0x1f, 0xdd,
		0xc3, 0x2f, 0x92, 0x7a, 0xe8, 0x1e, 0x5e, 0x51, 0x9d, 0x3c, 0x60, 0xb6, 0x3a, 0x96, 0x6d, 0xf0,
		0xe5, 0xea, 0xad, 0x3d, 0xf5, 0xd9, 0x45, 0x0e, 0x43, 0x69, 0xd4, 0x26, 0x2a, 0xd4, 0x2a, 0xc2,
		0x4d, 0x24, 0xe4, 0xaa, 0xc2, 0x4e, 0x26, 0xf4, 0x64, 0xc2, 0x4f, 0xa7, 0x04, 0x92, 0x7c, 0x8b,
		0xe0, 0xd9, 0x0b, 0x73, 0xa1, 0x9b, 0x04, 0xdd, 0xf0, 0x07, 0xab, 0x49, 0x1c, 0xbf, 0xc4, 0xdc,
		0xf3, 0xc9, 0xb3, 0x62, 0xf3, 0xcf, 0xc5, 0x77, 0x55, 0xa4, 0x2f, 0x63, 0x8b, 0x79, 0x4d, 0xd7,
		0xea, 0x72, 0xd3, 0x47, 0x2b, 0x37, 0x74, 0x76, 0x11, 0x58, 0x0e, 0x58, 0x8e, 0xd4, 0x5a, 0x0e,
		0xee, 0x7e, 0x69, 0x6b, 0xed, 0xc5, 0x59, 0x0c, 0x74, 0xde, 0xb2, 0x5b, 0xec, 0x87, 0xbc, 0xb6,
		0x0f, 0x1f, 0x87, 0x9e, 0x43, 0xcf, 0x53, 0xab, 0xe7, 0x3d, 0xcb, 0xf6, 0x4f, 0x0a, 0x0a, 0x7a,
		0x7e, 0x2a, 0xf1, 0xa8, 0xdc, 0x2d, 0xea, 0xf8, 0x97, 0x9c, 0x90, 0x65, 0x54, 0x6f, 0x55, 0x15,
		0x15, 0x7c, 0x69, 0x19, 0xc5, 0x5b, 0xd6, 0xc9, 0x3a, 0x04, 0xd7, 0x86, 0x92, 0xe2, 0x37, 0xbf,
		0xb5, 0x0a, 0xb7, 0xaf, 0xba, 0xb6, 0xb6, 0x58, 0x38, 0x2f, 0x9e, 0x97, 0x4f, 0x0b, 0xe7, 0xa5,
		0x18, 0xed, 0xf1, 0x5e, 0x38, 0x4f, 0xd5, 0x63, 0xe0, 0x7e, 0x17, 0x18, 0xe7, 0x61, 0x08, 0x22,
		0xed, 0x8d, 0x57, 0xae, 0x06, 0xe7, 0x0c, 0xe7, 0x9c, 0x5a, 0xe7, 0x6c, 0xb5, 0x98, 0xed, 0x5b,
		0xfe, 0x9b, 0xcb, 0x9e, 0x55, 0x90, 0xb8, 0x84, 0xf5, 0xcb, 0x5e, 0x8e, 0x3e, 0xfa, 0xbd, 0xe9,
		0x29, 0xc8, 0xce, 0xf8, 0x45, 0xae, 0x6e, 0x3f, 0x5d, 0x5e, 0x54, 0xae, 0x1a, 0xd5, 0xab, 0xea,
		0x75, 0xf5, 0xa6, 0xd6, 0xb8, 0xbb, 0xbf, 0xad, 0xdd, 0x5e, 0xdc, 0x5e, 0x35, 0x6a, 0x5f, 0xee,
		0xaa, 0x59, 0x95, 0x9c, 0x1b, 0x4f, 0x1a, 0x46, 0xa8, 0x41, 0x89, 0xb9, 0xd7, 0x1b, 0xbc, 0x4e,
		0xa3, 0x5a, 0xfb, 0xbd, 0x7a, 0x7f, 0x53, 0xad, 0x65, 0xa3, 0x70, 0xbf, 0x94, 0x2f, 0x72, 0x5b,
		0xbb, 0xc9, 0x86, 0xec, 0xde, 0xea, 0xb1, 0xc9, 0x74, 0x12, 0x73, 0x6f, 0x4e, 0xf7, 0xc9, 0x6c,
		0x7e, 0x37, 0x3a, 0x4e, 0x4b, 0xc9, 0xaf, 0xcd, 0x2e, 0x03, 0x87, 0x06, 0x87, 0x96, 0x5a, 0x87,
		0x36, 0x27, 0xea, 0xd1, 0x32, 0xd2, 0x12, 0xcf, 0xce, 0x94, 0xdc, 0xdf, 0xdc, 0xde, 0x54, 0xb3,
		0x31, 0x30, 0x41, 0x41, 0x51, 0x72, 0xb3, 0x6d, 0x7a, 0x9e, 0xbc, 0xfd, 0x99, 0x59, 0x03, 0xc6,
		0x07, 0xc6, 0x07, 0x68, 0x3a, 0xee, 0x68, 0xba, 0x76, 0x7f, 0xf9, 0xfe, 0x73, 0xad, 0x72, 0xff,
		0xa5, 0x71, 0x5f, 0xa9, 0x55, 0x1b, 0x17, 0x57, 0x95, 0x87, 0x87, 0x94, 0x20, 0xe9, 0xc1, 0xab,
		0x0d, 0xdf, 0x2a, 0x9f, 0xcf, 0xe5, 0x3e, 0x25, 0x19, 0x4b, 0x4f, 0x5f, 0xe5, 0x2c, 0x35, 0x6f,
		0x52, 0x48, 0xcf, 0x9b, 0x1c, 0x95, 0x52, 0xf2, 0x26, 0xf9, 0x52, 0x5a, 0xce, 0x24, 0x3d, 0x1a,
		0x7f, 0x9a, 0x9a, 0x37, 0x39, 0xcf, 0xa5, 0x48, 0xba, 0x52, 0xf3, 0x2a, 0x29, 0x79, 0x8f, 0x52,
		0x6a, 0x4e, 0xa4, 0x98, 0x96, 0x17, 0x29, 0xa7, 0xc7, 0xc3, 0xa7, 0xc8, 0x2f, 0xa6, 0x46, 0x4b,
		0xd2, 0xf2, 0x26, 0x27, 0x6a, 0x6f, 0xb2, 0x43, 0x24, 0xb9, 0xcf, 0x3c, 0xdf, 0xf0, 0xac, 0x17,
		0xdb, 0x6c, 0xcb, 0x53, 0x54, 0xb3, 0x8b, 0x80, 0xa3, 0x02, 0x47, 0x95, 0x5a, 0x8e, 0x4a, 0xbc,
		0x8f, 0xe6, 0x12, 0x3f, 0x95, 0x8f, 0x83, 0xd2, 0xbb, 0xd6, 0x93, 0xd1, 0x75, 0x1d, 0xdf, 0x69,
		0x3a, 0x2a, 0x6a, 0x3f, 0xb7, 0x0c, 0x14, 0x1f, 0x8a, 0x0f, 0x72, 0x7a, 0xb3, 0xf2, 0xc7, 0x89,
		0x9c, 0x4e, 0x63, 0x92, 0xc7, 0xed, 0xc5, 0x69, 0xf9, 0x2c, 0xf9, 0x19, 0x1e, 0x1f, 0x3e, 0x17,
		0xaa, 0x89, 0x7f, 0x8b, 0xfc, 0xa7, 0xe4, 0xbf, 0xc3, 0xed, 0x45, 0x31, 0x1d, 0xe2, 0x94, 0x82,
		0xac, 0xa7, 0xcf, 0x17, 0x37, 0x69, 0x78, 0x8b, 0x7c, 0xf2, 0xb5, 0xa2, 0x98, 0x4b, 0x81, 0x6a,
		0x3f, 0xd4, 0xae, 0xcb, 0xc5, 0x34, 0xe8, 0x76, 0x0a, 0xd4, 0xe2, 0xa1, 0x76, 0x9d, 0x2f, 0x27,
		0xdf, 0xe1, 0xe5, 0x3e, 0x55, 0x1b, 0x57, 0x95, 0x54, 0x58, 0xa9, 0x34, 0xe0, 0x8f, 0x5c, 0xee,
		0x53, 0xe3, 0xfa, 0xea, 0x53, 0x3a, 0xe4, 0xea, 0xdf, 0x69, 0x90, 0xab, 0x0f, 0x9f, 0x4f, 0xd2,
		0xa0, 0x1c, 0xc5, 0x34, 0xbc, 0x44, 0x0a, 0x4e, 0xe2, 0x22, 0x7f, 0x5e, 0x48, 0x83, 0x52, 0x14,
		0x53, 0x61, 0x6b, 0xab, 0xa9, 0xf0, 0x7b, 0x69, 0xc0, 0x52, 0x85, 0x52, 0x79, 0x87, 0x2f, 0xbf,
		0x48, 0x1b, 0x20, 0x09, 0xf6, 0xb4, 0x9d, 0x3c, 0x27, 0xdf, 0xd2, 0x70, 0xb1, 0x0d, 0xe0, 0xf1,
		0xe8, 0x0f, 0xc7, 0x42, 0x5d, 0xbd, 0x32, 0xf2, 0xbd, 0x0f, 0xaf, 0x86, 0x5f, 0xe0, 0x62, 0xf4,
		0xf9, 0x8d, 0xd1, 0x1f, 0xb8, 0x46, 0x3b, 0xf2, 0x1f, 0x02, 0x4f, 0xc3, 0x7b, 0xe6, 0x7f, 0x63,
		0xae, 0xcd, 0x24, 0x3a, 0xde, 0x4f, 0x9e, 0x44, 0x0f, 0x34, 0xf4, 0x40, 0x53, 0x34, 0x01, 0xc2,
		0x3d, 0xd0, 0x04, 0xdb, 0xf6, 0x2d, 0x1d, 0xb8, 0xb0, 0xa2, 0x4b, 0x88, 0xb0, 0xb4, 0x28, 0xab,
		0x88, 0x34, 0x91, 0x68, 0xab, 0x8a, 0x38, 0x99, 0xa8, 0x93, 0x89, 0x3c, 0x9d, 0xe8, 0x4b, 0x7a,
		0x57, 0x51, 0x0d, 0x95, 0xf3, 0x8a, 0x3a, 0xbd, 0xe3, 0xd8, 0xe2, 0x1f, 0x4b, 0x69, 0x8f, 0x06,
		0x77, 0x59, 0x1d, 0x7d, 0x21, 0x21, 0xbf, 0x29, 0x01, 0x77, 0x84, 0xf0, 0x80, 0x52, 0x5b, 0x46,
		0x95, 0x86, 0x8c, 0xd2, 0x66, 0xa9, 0x00, 0xb3, 0x04, 0xb3, 0xc4, 0xf9, 0x35, 0x45, 0x3d, 0xf5,
		0xe4, 0x41, 0xcb, 0x36, 0xce, 0x72, 0x85, 0xfc, 0xff, 0x19, 0xcf, 0xae, 0xd9, 0x61, 0x9e, 0xfa,
		0x2d, 0xfb, 0xe2, 0x82, 0x87, 0x91, 0x4c, 0x3d, 0x91, 0xf5, 0xed, 0x14, 0xca, 0xb4, 0x4a, 0xa9,
		0x98, 0xff, 0x2d, 0xab, 0xd0, 0xc2, 0x48, 0x51, 0xaf, 0xc8, 0xf5, 0x8b, 0x5c, 0xcf, 0xd6, 0xe9,
		0xdb, 0x60, 0xdf, 0xc2, 0x6e, 0x68, 0x24, 0x29, 0x31, 0xd2, 0x99, 0x36, 0x2b, 0x50, 0x70, 0xcf,
		0xf6, 0x99, 0x5b, 0x2e, 0xaa, 0x88, 0xcc, 0x48, 0x81, 0xce, 0x14, 0x96, 0x50, 0x6b, 0x86, 0x46,
		0xc3, 0xf0, 0x64, 0xa8, 0x9a, 0xa3, 0x11, 0x59, 0x96, 0xa5, 0xe5, 0x88, 0x9a, 0xa5, 0x4d, 0xd6,
		0x23, 0x6c, 0xe8, 0x45, 0x40, 0xcf, 0x4d, 0x8f, 0x80, 0xa0, 0x89, 0x9a, 0xee, 0x23, 0xc8, 0x9f,
		0x15, 0x8b, 0xe5, 0xd3, 0x62, 0x31, 0x77, 0x7a, 0x72, 0x9a, 0x3b, 0x2f, 0x95, 0xf2, 0xe5, 0x7c,
		0x29, 0xc6, 0xa7, 0xb2, 0x17, 0xcd, 0xd3, 0xf5, 0x90, 0xda, 0xbc, 0xc9, 0xf4, 0xb1, 0xb0, 0x6c,
		0xe3, 0xa9, 0xed, 0x34, 0xbf, 0x1b, 0xcc, 0x75, 0x1d, 0x97, 0x06, 0x8d, 0xcc, 0x2d, 0x08, 0x34,
		0x02, 0x34, 0x02, 0x34, 0x02, 0x34, 0x02, 0x34, 0x02, 0x34, 0x02, 0x34, 0x02, 0x34, 0xb2, 0x0d,
		0x8d, 0x34, 0xdd, 0x26, 0x25, 0x16, 0x99, 0x59, 0x0e, 0x48, 0x04, 0x48, 0x04, 0x48, 0x04, 0x48,
		0x04, 0x48, 0x04, 0x48, 0x04, 0x48, 0x04, 0x48, 0x64, 0x1b, 0x12, 0x79, 0x76, 0xcd, 0x97, 0x81,
		0x03, 0xa0, 0xbc, 0xa8, 0x59, 0x5c, 0x13, 0x98, 0x04, 0x98, 0x04, 0x98, 0x04, 0x98, 0x04, 0x98,
		0x04, 0x98, 0x04, 0x98, 0x04, 0x98, 0x64, 0x1b, 0x26, 0xf9, 0x5f, 0xf3, 0xe9, 0x89, 0xb9, 0x94,
		0x88, 0x64, 0x7e, 0x45, 0xe0, 0x11, 0xe0, 0x11, 0xe0, 0x11, 0xe0, 0x11, 0xe0, 0x11, 0xe0, 0x11,
		0xe0, 0x11, 0xe0, 0x91, 0x6d, 0x78, 0xa4, 0x63, 0x36, 0x8d, 0xa6, 0x63, 0xfb, 0xae, 0xd3, 0xa6,
		0x04, 0x25, 0x2b, 0x96, 0x05, 0x32, 0x01, 0x32, 0x01, 0x32, 0x01, 0x32, 0x01, 0x32, 0x01, 0x32,
		0x01, 0x32, 0x01, 0x32, 0xe1, 0x41, 0x26, 0x5d, 0xb3, 0xe7, 0x31, 0x6a, 0x5c, 0x32, 0xb7, 0x28,
		0x50, 0x09, 0x50, 0x09, 0x50, 0x09, 0x50, 0x09, 0x50, 0x09, 0x50, 0x09, 0x50, 0x09, 0x50, 0xc9,
		0x36, 0x54, 0xe2, 0xbc, 0x32, 0xd7, 0xb3, 0xfe, 0x26, 0x05, 0x25, 0x8b, 0x6b, 0x02, 0x93, 0x00,
		0x93, 0x00, 0x93, 0x00, 0x93, 0x00, 0x93, 0x00, 0x93, 0x00, 0x93, 0x00, 0x93, 0x6c, 0xc3, 0x24,
		0xdd, 0xa6, 0x67, 0x3c, 0x59, 0x5d, 0xca, 0xaa, 0x9b, 0x85, 0x25, 0x81, 0x48, 0x14, 0xdb, 0xfc,
		0x00, 0x96, 0xc8, 0xb7, 0x01, 0x02, 0x36, 0x01, 0x36, 0x01, 0x36, 0x01, 0x36, 0x01, 0x36, 0x49,
		0x28, 0x36, 0x09, 0x40, 0x04, 0x6b, 0x19, 0x1e, 0x6b, 0x3a, 0x76, 0x8b, 0x0e, 0xa0, 0x2c, 0xae,
		0x0b, 0x94, 0x02, 0x94, 0x02, 0x94, 0x02, 0x94, 0x02, 0x94, 0x02, 0x94, 0x02, 0x94, 0x02, 0x94,
		0x22, 0x86, 0x52, 0x3c, 0xf6, 0xca, 0x5c, 0xd6, 0x7e, 0xd3, 0x06, 0x57, 0xd6, 0x7e, 0x00, 0x70,
		0x0b, 0x70, 0x0b, 0x70, 0x0b, 0x70, 0x0b, 0x70, 0x0b, 0x70, 0x0b, 0x70, 0x0b, 0x70, 0x8b, 0x18,
		0x6e, 0xe9, 0xd9, 0xe6, 0xab, 0x69, 0xb5, 0xcd, 0xa7, 0x36, 0x23, 0x87, 0x2c, 0xab, 0xd6, 0x06,
		0x5a, 0x01, 0x5a, 0x01, 0x5a, 0x01, 0x5a, 0x01, 0x5a, 0x01, 0x5a, 0x01, 0x5a, 0x01, 0x5a, 0xe1,
		0x47, 0x2b, 0x3d, 0xbb, 0x45, 0x9f, 0x3c, 0xbb, 0xb4, 0x28, 0xf0, 0x09, 0xb2, 0x67, 0xe5, 0xa1,
		0x09, 0xb2, 0x67, 0x81, 0x4a, 0x80, 0x4a, 0x80, 0x4a, 0x80, 0x4a, 0x76, 0x02, 0x95, 0x38, 0x3d,
		0x9f, 0x78, 0x98, 0xdf, 0xd2, 0x8a, 0xc0, 0x23, 0xc0, 0x23, 0xc0, 0x23, 0xc0, 0x23, 0xc0, 0x23,
		0xc0, 0x23, 0xc0, 0x23, 0xc0, 0x23, 0x5b, 0xf1, 0x08, 0xed, 0x38, 0xbf, 0xa5, 0x15, 0x81, 0x47,
		0x70, 0x7f, 0xa3, 0x08, 0x4a, 0x70, 0x7f, 0x03, 0x64, 0x02, 0x64, 0x02, 0x64, 0x02, 0x64, 0xb2,
		0x5b, 0xc8, 0x84, 0x72, 0xb4, 0xdf, 0xc2, 0x7a, 0x40, 0x25, 0x40, 0x25, 0x40, 0x25, 0x40, 0x25,
		0x40, 0x25, 0x40, 0x25, 0x40, 0x25, 0x40, 0x25, 0x02, 0xa8, 0x44, 0x47, 0x0b, 0xfb, 0x35, 0xeb,
		0x02, 0xa5, 0xe0, 0x2e, 0x47, 0x1e, 0xa0, 0xe0, 0x2e, 0x07, 0xd8, 0x04, 0xd8, 0x04, 0xd8, 0x04,
		0xd8, 0x64, 0xa7, 0xb0, 0x09, 0x6d, 0x13, 0xfb, 0x95, 0xab, 0x02, 0x97, 0x00, 0x97, 0x00, 0x97,
		0x00, 0x97, 0x00, 0x97, 0x00, 0x97, 0x00, 0x97, 0x00, 0x97, 0x6c, 0xc5, 0x25, 0xd4, 0x2d, 0x63,
		0x57, 0xac, 0x09, 0x4c, 0x82, 0x1b, 0x1d, 0x45, 0x60, 0x82, 0x1b, 0x1d, 0xa0, 0x13, 0xa0, 0x13,
		0xa0, 0x13, 0xa0, 0x93, 0x84, 0xa2, 0x93, 0x3d, 0x8d, 0x32, 0x9a, 0xad, 0xd8, 0xb6, 0xe3, 0x9b,
		0x83, 0x23, 0x91, 0x12, 0xcb, 0xac, 0xd7, 0xfc, 0xc6, 0x3a, 0x66, 0xd7, 0xf4, 0xbf, 0x0d, 0x2c,
		0xee, 0xb1, 0xd3, 0x65, 0x76, 0x33, 0x40, 0x0f, 0x81, 0xcf, 0xb1, 0x6c, 0xb3, 0x6d, 0xb4, 0xd8,
		0xab, 0xd5, 0x64, 0xc7, 0x8b, 0xff, 0xdf, 0x76, 0x5e, 0xac, 0xa6, 0xd9, 0x36, 0x9a, 0xdf, 0x4c,
		0xdb, 0x66, 0x6d, 0xef, 0x78, 0xf4, 0x87, 0x63, 0xe6, 0x7f, 0x63, 0xae, 0xcd, 0xfc, 0x63, 0xcf,
		0x37, 0x7d, 0x26, 0x61, 0xbb, 0xb3, 0x9e, 0xef, 0xf6, 0x9a, 0xbe, 0x3d, 0x72, 0x03, 0xb7, 0x93,
		0xef, 0x54, 0x1b, 0x7d, 0x85, 0x0f, 0xc1, 0x37, 0x68, 0x2c, 0xfc, 0xef, 0xd5, 0xf0, 0x0b, 0x5d,
		0x8c, 0xbe, 0x4f, 0x63, 0xf4, 0x87, 0x46, 0x75, 0xf4, 0x7d, 0x1a, 0x0f, 0xc1, 0xf7, 0xd9, 0xd3,
		0x73, 0x78, 0x7c, 0x3f, 0xc9, 0x79, 0xbc, 0xb2, 0xc7, 0xaa, 0xf3, 0x38, 0x05, 0x0e, 0x52, 0xd3,
		0x01, 0xf2, 0x1d, 0xdd, 0xf6, 0x83, 0xe0, 0x38, 0x84, 0xac, 0x65, 0xb7, 0x18, 0xbf, 0xa5, 0x9f,
		0xa9, 0xc5, 0x1f, 0x3c, 0xc6, 0x79, 0xc8, 0x62, 0xe6, 0x5f, 0x18, 0xd5, 0xcb, 0xa0, 0x78, 0x45,
		0xd4, 0x2e, 0x8b, 0xd2, 0x95, 0x51, 0xb9, 0x32, 0x0a, 0x57, 0x47, 0xdd, 0xb4, 0x06, 0x40, 0x18,
		0x45, 0x4f, 0x4e, 0xae, 0xcd, 0xcc, 0x67, 0x97, 0x3d, 0x8b, 0x9c, 0xda, 0x48, 0x10, 0xf3, 0xa7,
		0x02, 0xcf, 0xdc, 0x8d, 0x6c, 0xcc, 0xd1, 0xd1, 0xf1, 0x50, 0xb7, 0x8f, 0x87, 0xb2, 0x1f, 0xaa,
		0x8e, 0xbe, 0xb8, 0xcc, 0xf3, 0x64, 0xb4, 0x74, 0xf8, 0xa0, 0x98, 0x9e, 0xe6, 0xa1, 0xa7, 0xd0,
		0xd3, 0xc5, 0xaf, 0xf3, 0xc1, 0x72, 0xc5, 0x0e, 0xae, 0x39, 0x96, 0x0e, 0xc1, 0x9d, 0x9f, 0x06,
		0xc5, 0xc1, 0xf3, 0x82, 0xbb, 0x26, 0x26, 0xc2, 0xca, 0x44, 0x92, 0x0a, 0x81, 0x44, 0x44, 0x1c,
		0xa9, 0x12, 0x46, 0x64, 0x44, 0x11, 0x19, 0x41, 0x44, 0x47, 0x0c, 0xe9, 0x0d, 0x49, 0x44, 0x55,
		0x62, 0xf2, 0x60, 0xf7, 0xdb, 0x9b, 0x37, 0x8b, 0x41, 0xd5, 0x19, 0xd9, 0xa5, 0x15, 0xc1, 0xc7,
		0x82, 0x8f, 0x05, 0x1f, 0x2b, 0x29, 0x39, 0xe2, 0xc8, 0x92, 0x02, 0x69, 0xae, 0x45, 0x9e, 0xc7,
		0x4e, 0xd3, 0xe8, 0xb6, 0x4d, 0xff, 0xd9, 0x71, 0x3b, 0xef, 0x9a, 0x4e, 0xa7, 0xeb, 0xd8, 0xcc,
		0xf6, 0xbd, 0xd5, 0x7f, 0x3d, 0xf8, 0x5b, 0xdf, 0x35, 0x6d, 0xaf, 0xc9, 0xac, 0x57, 0xe6, 0xbe,
		0x9b, 0xf9, 0xf3, 0xe2, 0x3f, 0x2d, 0x1a, 0x0d, 0x6f, 0xf1, 0x07, 0xc6, 0x91, 0xf1, 0xc2, 0x5f,
		0x0b, 0xe0, 0x5f, 0xaa, 0xb3, 0xbd, 0xb2, 0x3c, 0xbf, 0xe2, 0xfb, 0xae, 0xda, 0xf9, 0x5e, 0x5b,
		0x76, 0xb5, 0xcd, 0x06, 0x22, 0x3e, 0xc0, 0xd2, 0x76, 0xaf, 0xdd, 0x56, 0x38, 0x9d, 0x6b, 0xf3,
		0x07, 0xdd, 0x62, 0xb7, 0x6e, 0x8b, 0xb9, 0xac, 0xf5, 0xfe, 0x6d, 0xb4, 0x54, 0x8c, 0x2f, 0x14,
		0x67, 0x24, 0x41, 0xdd, 0x6f, 0xcd, 0x2e, 0x06, 0x97, 0x05, 0x97, 0x05, 0x97, 0xb5, 0xa3, 0x2e,
		0x6b, 0xf2, 0xb7, 0x01, 0x97, 0x8a, 0x1b, 0x0b, 0x3d, 0x14, 0xf7, 0x88, 0x0f, 0x3a, 0x96, 0x8a,
		0xad, 0x35, 0x10, 0xde, 0x97, 0xc3, 0xef, 0xd3, 0x18, 0x19, 0x61, 0x5d, 0x37, 0x16, 0x42, 0x84,
		0xbe, 0xe9, 0x33, 0x79, 0xd2, 0x42, 0xe6, 0x26, 0x48, 0x99, 0xb3, 0x28, 0x80, 0xb3, 0x00, 0x67,
		0x01, 0xce, 0x02, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x9c, 0x05, 0x38, 0x0b, 0x70, 0x16, 0xe0,
		0x2c, 0xe0, 0xb2, 0xe0, 0xb2, 0xe0, 0xb2, 0xc0, 0x59, 0xa4, 0x86, 0xb3, 0x88, 0x49, 0x92, 0xe5,
		0x98, 0xb2, 0x40, 0x8e, 0xa5, 0xc2, 0x61, 0x46, 0x97, 0x62, 0x39, 0x3a, 0xbe, 0x30, 0xb3, 0xb7,
		0x16, 0x36, 0xc3, 0x30, 0x3d, 0xcf, 0x7a, 0xb1, 0xc7, 0x20, 0x4c, 0x30, 0xa3, 0x6b, 0xd3, 0x62,
		0xc8, 0xf2, 0x42, 0x96, 0x97, 0xa2, 0xa9, 0x10, 0xce, 0xf2, 0x9a, 0xca, 0x9f, 0x3c, 0x69, 0x3a,
		0xb3, 0x06, 0xb2, 0xbd, 0xc0, 0x9c, 0xa6, 0x8d, 0x39, 0x95, 0x4c, 0x84, 0x5c, 0x12, 0x1c, 0xe9,
		0x4b, 0x1b, 0x05, 0x55, 0x41, 0xc8, 0x89, 0x90, 0x33, 0xfa, 0x90, 0x53, 0x56, 0xf5, 0xa6, 0x5e,
		0xaa, 0xdd, 0x76, 0x9a, 0xf2, 0x61, 0xcd, 0x6a, 0xaf, 0x35, 0x5d, 0x53, 0xf1, 0x74, 0x68, 0xaa,
		0x23, 0x95, 0x55, 0x94, 0x52, 0x55, 0x35, 0xa9, 0x2c, 0xb5, 0xea, 0x6a, 0x53, 0x61, 0x6d, 0xaa,
		0xac, 0x4f, 0xa5, 0xd5, 0x54, 0x5b, 0x51, 0xc5, 0xe9, 0xd8, 0xa5, 0x25, 0xc9, 0x6b, 0xb1, 0xa6,
		0xd5, 0x31, 0xdb, 0x4a, 0xc5, 0xf5, 0x4b, 0x5e, 0xb4, 0x40, 0xb0, 0xd6, 0x52, 0x89, 0xf1, 0x09,
		0xc1, 0xa2, 0x34, 0x25, 0xfc, 0xe3, 0x5f, 0x34, 0xda, 0x95, 0xa1, 0x2e, 0xe9, 0x5f, 0x3c, 0x8e,
		0xc2, 0x21, 0xed, 0xb2, 0xc4, 0x25, 0xfe, 0xeb, 0x4f, 0x3c, 0x47, 0xb6, 0x7e, 0xff, 0x90, 0xf0,
		0xa8, 0x08, 0x4b, 0xff, 0x17, 0x8f, 0xea, 0x04, 0x47, 0xd5, 0xdf, 0x8b, 0xc7, 0x2a, 0xf5, 0x88,
		0xfa, 0x11, 0x28, 0x88, 0xea, 0x0c, 0x55, 0x60, 0xf8, 0x14, 0x9e, 0x62, 0x05, 0x07, 0x31, 0x5c,
		0x18, 0x90, 0x0e, 0x90, 0x0e, 0x90, 0x2e, 0xa6, 0x90, 0x8e, 0xd9, 0xbd, 0x0e, 0x73, 0x29, 0x62,
		0xaf, 0x39, 0x50, 0x57, 0x24, 0x58, 0xab, 0x6a, 0xf7, 0x3a, 0x83, 0x97, 0xed, 0x27, 0xd0, 0xb8,
		0xb6, 0x98, 0xd7, 0x74, 0xad, 0x2e, 0x6d, 0x98, 0x3c, 0xbb, 0x28, 0x8c, 0x2a, 0x8c, 0x2a, 0x8c,
		0x6a, 0x4c, 0x8d, 0xaa, 0xe7, 0xbb, 0x96, 0xfd, 0x42, 0x69, 0x4f, 0xcf, 0x12, 0x68, 0x03, 0xc5,
		0xda, 0xe1, 0x6c, 0xdd, 0x54, 0x91, 0x36, 0x39, 0xb0, 0x7b, 0xb0, 0x7b, 0xb0, 0x7b, 0xa1, 0xdb,
		0xbd, 0x9e, 0x65, 0xfb, 0x27, 0x05, 0x42, 0xbb, 0x77, 0x0a, 0x1a, 0x2f, 0x12, 0x03, 0x07, 0x1a,
		0x2f, 0x3c, 0x1a, 0x4f, 0xd7, 0x51, 0x15, 0x0b, 0xe7, 0xc5, 0xf3, 0xf2, 0x69, 0xe1, 0xbc, 0x04,
		0x3e, 0x6f, 0x17, 0xf8, 0xbc, 0x85, 0x74, 0x36, 0x3a, 0xe0, 0xb5, 0xb8, 0x30, 0x20, 0x18, 0x20,
		0x18, 0x20, 0x58, 0x4c, 0x21, 0x98, 0x7a, 0x21, 0xc0, 0x52, 0xec, 0x49, 0x01, 0xc2, 0x66, 0x0b,
		0x03, 0xc6, 0x87, 0xf7, 0x6e, 0x31, 0xd5, 0x79, 0xf6, 0xdf, 0x96, 0xd2, 0x9e, 0x67, 0xff, 0x71,
		0xa6, 0x30, 0x6d, 0xf2, 0x77, 0x0a, 0x55, 0x69, 0xd1, 0xda, 0xed, 0x8e, 0xd9, 0xed, 0x5a, 0xf6,
		0x0b, 0x9d, 0xbd, 0x1e, 0x2f, 0x08, 0x3b, 0x0d, 0x3b, 0x0d, 0x3b, 0x1d, 0x53, 0x3b, 0x6d, 0xb5,
		0x98, 0xed, 0x5b, 0xfe, 0x1b, 0xb1, 0xad, 0x26, 0xc0, 0xfa, 0xd9, 0xcb, 0xd1, 0x57, 0x7b, 0x6f,
		0x7a, 0x84, 0xb2, 0x3c, 0x7e, 0xf1, 0x8f, 0xf7, 0x95, 0xeb, 0x6a, 0xe3, 0xba, 0x72, 0x77, 0x77,
		0x79, 0xf3, 0xa9, 0x71, 0x77, 0x7f, 0x5b, 0xbb, 0xbd, 0xb8, 0xbd, 0xca, 0x52, 0x8e, 0x33, 0xf0,
		0xc8, 0xa2, 0x7d, 0xda, 0x88, 0x7f, 0x6e, 0x1f, 0x2a, 0xd7, 0x77, 0xd9, 0x38, 0xc6, 0xba, 0x9a,
		0x5e, 0xf7, 0xd3, 0x8e, 0xbd, 0xee, 0xc7, 0xbb, 0x46, 0x6d, 0x97, 0x5e, 0xf8, 0xfd, 0x6e, 0x9d,
		0xef, 0xc5, 0xfb, 0xfb, 0x5d, 0x13, 0xe7, 0x8f, 0xd9, 0x98, 0xd1, 0x3c, 0xf5, 0xc4, 0x8e, 0x91,
		0x51, 0x09, 0x17, 0x9c, 0xae, 0xaf, 0x87, 0xe6, 0x59, 0x5c, 0x18, 0xe1, 0x03, 0xc2, 0x07, 0x84,
		0x0f, 0xa0, 0x79, 0x64, 0x69, 0x9e, 0xb0, 0xfb, 0x3f, 0x44, 0x6b, 0x96, 0x7d, 0xd7, 0x7a, 0xea,
		0xf9, 0xa6, 0xfb, 0x66, 0x78, 0x6d, 0xc7, 0x37, 0x88, 0x73, 0x1f, 0x56, 0xae, 0x0e, 0x03, 0x0d,
		0x03, 0x0d, 0x03, 0x1d, 0x57, 0x7e, 0x87, 0x38, 0x13, 0x02, 0x05, 0x4d, 0xb2, 0x7e, 0x4d, 0xd3,
		0xf5, 0x7a, 0x21, 0x5f, 0x3c, 0x2d, 0x9e, 0x9d, 0x94, 0x8b, 0x67, 0x48, 0x89, 0xa0, 0x3e, 0xb3,
		0x9c, 0xee, 0x33, 0x3b, 0x45, 0x4a, 0x44, 0xb8, 0xd1, 0x76, 0x3f, 0x21, 0xe5, 0xf1, 0x8a, 0x4d,
		0xbb, 0x26, 0xeb, 0x68, 0xe8, 0xf7, 0xb4, 0xa1, 0x5d, 0xd1, 0xf1, 0xf4, 0xcf, 0xc7, 0x4a, 0xad,
		0x2d, 0x32, 0xf4, 0x5d, 0xa2, 0xe6, 0xff, 0xbe, 0x32, 0xfd, 0xd2, 0x8d, 0xe9, 0x9f, 0xa5, 0x9a,
		0x96, 0xcb, 0x0b, 0x88, 0x4c, 0xdb, 0x4b, 0x35, 0x40, 0x4f, 0x92, 0xc4, 0x8c, 0x56, 0x97, 0xda,
		0x10, 0x39, 0xfa, 0x8e, 0xe8, 0x36, 0xac, 0xa9, 0x6d, 0x75, 0x29, 0x35, 0xcb, 0x34, 0x1a, 0x1b,
		0x26, 0x37, 0x90, 0x61, 0xe9, 0x00, 0x64, 0xbb, 0x47, 0x66, 0x28, 0x7b, 0x27, 0x15, 0x60, 0xc3,
		0x60, 0xc3, 0xd0, 0x3b, 0x09, 0xbd, 0x93, 0x40, 0x08, 0x82, 0x10, 0x4c, 0x02, 0x21, 0x88, 0xde,
		0x49, 0xa9, 0xa7, 0x1a, 0xd1, 0x3b, 0x09, 0xbd, 0x93, 0x40, 0x2c, 0x26, 0x86, 0x58, 0x44, 0xef,
		0x24, 0x40, 0x3a, 0x40, 0x3a, 0x40, 0x3a, 0x69, 0xc9, 0x43, 0xef, 0x24, 0x2d, 0xc6, 0x15, 0xbd,
		0x93, 0x60, 0x54, 0x61, 0x54, 0x77, 0xd5, 0xa8, 0xa2, 0x77, 0x12, 0x7a, 0x27, 0xc1, 0xee, 0xc1,
		0xee, 0xed, 0x9a, 0xdd, 0x43, 0xef, 0xa4, 0xb8, 0xd0, 0x78, 0xe8, 0x9d, 0x84, 0xde, 0x49, 0xe8,
		0x9d, 0xb4, 0x53, 0x7c, 0x1e, 0x7a, 0x27, 0x01, 0x82, 0x01, 0x82, 0xed, 0x3a, 0x04, 0x43, 0xef,
		0xa4, 0xa4, 0xd9, 0x6d, 0xf4, 0x4e, 0x82, 0x9d, 0x86, 0x9d, 0xde, 0x35, 0x3b, 0x8d, 0xde, 0x49,
		0xe8, 0x9d, 0x84, 0xde, 0x49, 0xe9, 0x7d, 0x5d, 0xf4, 0x4e, 0x4a, 0xf5, 0xeb, 0xa2, 0x77, 0x52,
		0xf4, 0x34, 0x0f, 0x7a, 0x27, 0xa1, 0x77, 0x12, 0xc2, 0x07, 0x84, 0x0f, 0xa0, 0x79, 0x62, 0x49,
		0xf3, 0xa0, 0x77, 0x12, 0x7a, 0x27, 0xc1, 0x40, 0xc3, 0x40, 0xef, 0x28, 0xbf, 0x83, 0xde, 0x49,
		0xfc, 0x5f, 0x0c, 0xbd, 0x93, 0x66, 0x3e, 0x00, 0x29, 0x11, 0xe8, 0x9d, 0x44, 0x1e, 0x2b, 0xa3,
		0x77, 0x12, 0xa7, 0x7f, 0x4b, 0x7c, 0xef, 0x24, 0x95, 0xce, 0x16, 0x99, 0x88, 0x5a, 0x27, 0x3d,
		0x04, 0xdf, 0x39, 0xac, 0xae, 0x23, 0x7b, 0x1a, 0x05, 0x69, 0x00, 0xe9, 0x64, 0x93, 0x95, 0xb3,
		0x57, 0x96, 0xe7, 0x57, 0x7c, 0x5f, 0xae, 0x41, 0xc3, 0xc0, 0x89, 0x56, 0xdb, 0x2c, 0xd8, 0xdb,
		0xec, 0xbb, 0x8c, 0xdd, 0x6b, 0xb7, 0x25, 0xda, 0xab, 0x5c, 0x9b, 0x3f, 0xd4, 0x17, 0xb9, 0x75,
		0x5b, 0xcc, 0x65, 0xad, 0xf7, 0x6f, 0xa3, 0x25, 0xb4, 0x6e, 0xb8, 0xa2, 0xc6, 0x46, 0xa7, 0xa9,
		0x59, 0xa9, 0xee, 0x37, 0x61, 0xeb, 0xa6, 0x98, 0x56, 0xf2, 0xeb, 0x16, 0xdf, 0x4f, 0x72, 0x0a,
		0x83, 0xac, 0x10, 0x84, 0x7c, 0xf8, 0x02, 0x27, 0x1e, 0xd6, 0x49, 0xf3, 0x1d, 0xef, 0xf6, 0xc3,
		0xe2, 0x38, 0xa8, 0xac, 0xe3, 0xf3, 0x9f, 0xce, 0x34, 0x82, 0xf7, 0x79, 0x6b, 0xdd, 0x04, 0x01,
		0xbf, 0x30, 0x71, 0x21, 0x43, 0x50, 0x28, 0x12, 0x11, 0xb2, 0x84, 0x83, 0x32, 0xb1, 0xa0, 0x4c,
		0x20, 0xa8, 0x13, 0x05, 0xb4, 0x06, 0x42, 0xb4, 0xed, 0x51, 0xb6, 0x39, 0x96, 0x0e, 0xc1, 0x9d,
		0x1f, 0x1f, 0xb8, 0x54, 0x0b, 0x4b, 0xc9, 0x98, 0x55, 0x9a, 0x83, 0x53, 0xe1, 0xdc, 0x88, 0x38,
		0x36, 0x55, 0x4e, 0x8d, 0x8c, 0x43, 0x23, 0xe3, 0xcc, 0xe8, 0x38, 0x32, 0xbd, 0x48, 0x55, 0xb6,
		0x13, 0xd8, 0x22, 0x19, 0xfd, 0xe2, 0x9a, 0x76, 0xaf, 0x6d, 0xba, 0x96, 0xff, 0xa6, 0xde, 0x97,
		0x6f, 0xc3, 0xda, 0x68, 0x38, 0x8a, 0x66, 0x7d, 0x91, 0xd3, 0xd5, 0x49, 0x6d, 0x38, 0x4a, 0x93,
		0x6e, 0x48, 0x91, 0x66, 0x48, 0x9b, 0x5e, 0x38, 0x79, 0xc1, 0xda, 0xfd, 0xe5, 0xfb, 0xcf, 0xb5,
		0xca, 0xfd, 0x97, 0xc6, 0xc3, 0xd5, 0x6d, 0xad, 0xf1, 0xe9, 0xbe, 0x72, 0xf3, 0xf9, 0xaa, 0x72,
		0x7f, 0x59, 0xfb, 0xa2, 0x2a, 0x94, 0x84, 0x29, 0x85, 0xc4, 0xa9, 0x94, 0x83, 0x77, 0x1e, 0xbe,
		0x6e, 0xfe, 0xa8, 0x50, 0xfa, 0x44, 0x70, 0x09, 0x73, 0x18, 0xdf, 0x57, 0x2c, 0x1c, 0xa5, 0xfd,
		0x0d, 0x49, 0xde, 0x6f, 0x2f, 0x1a, 0x8e, 0xb7, 0x1f, 0xe3, 0x96, 0xc1, 0xbe, 0x6f, 0x19, 0x1d,
		0xef, 0xc5, 0x30, 0x7b, 0xbe, 0x43, 0x80, 0x50, 0x66, 0x57, 0x03, 0x26, 0x01, 0x26, 0x01, 0x26,
		0x91, 0x94, 0x9c, 0x27, 0xc7, 0x69, 0x33, 0xd3, 0xa6, 0xc0, 0x23, 0xf9, 0x04, 0x98, 0x1f, 0xf6,
		0xa3, 0xcb, 0x9a, 0x3e, 0x6b, 0xd1, 0x99, 0xa0, 0xc9, 0x8a, 0x30, 0x43, 0x30, 0x43, 0x30, 0x43,
		0x92, 0x92, 0xa3, 0xdc, 0xac, 0x49, 0xb1, 0x49, 0x53, 0xb8, 0x56, 0xc8, 0x77, 0x4d, 0xdb, 0xeb,
		0x58, 0x3e, 0x9d, 0x15, 0x9a, 0xac, 0x08, 0x2b, 0x04, 0x2b, 0x04, 0x2b, 0xb4, 0x3b, 0x56, 0x68,
		0xd7, 0xae, 0xf5, 0x1d, 0xdf, 0x96, 0x9f, 0x4c, 0x46, 0x7c, 0xa1, 0x7b, 0xeb, 0xdb, 0x52, 0x03,
		0xc7, 0x04, 0x2e, 0xe8, 0x85, 0x2e, 0xab, 0x65, 0x86, 0xf2, 0x28, 0x0d, 0xe3, 0x51, 0xbe, 0x2a,
		0x2b, 0xe0, 0xaa, 0x0c, 0x57, 0x65, 0x9c, 0x5f, 0x53, 0xfa, 0xaa, 0xec, 0xc9, 0x6c, 0x7e, 0x7f,
		0x71, 0x9d, 0x9e, 0xdd, 0x32, 0x9e, 0xda, 0x4e, 0xf3, 0xbb, 0xc1, 0x5c, 0xd7, 0x71, 0x3d, 0x75,
		0xf0, 0xb5, 0x6e, 0x61, 0x60, 0x30, 0x60, 0x30, 0x60, 0x30, 0x49, 0xc9, 0x69, 0x3a, 0x3d, 0xdb,
		0x67, 0xae, 0xd2, 0x78, 0x9b, 0xb1, 0x2a, 0x29, 0x54, 0x05, 0x10, 0xd5, 0x69, 0x10, 0x14, 0xb3,
		0x50, 0xd6, 0x65, 0x10, 0xe7, 0xf6, 0x53, 0x77, 0xa4, 0xd4, 0x91, 0xc2, 0x4f, 0x70, 0xd9, 0x44,
		0x5a, 0x66, 0xa1, 0xeb, 0x08, 0xf2, 0x67, 0xc5, 0x62, 0xf9, 0xb4, 0x58, 0xcc, 0x9d, 0x9e, 0x9c,
		0xe6, 0xce, 0x4b, 0xa5, 0x7c, 0x39, 0x5f, 0x8a, 0xf1, 0xa9, 0x44, 0x54, 0xc8, 0x50, 0x8f, 0x31,
		0x3b, 0xd4, 0x74, 0x5a, 0xcc, 0x78, 0xb5, 0x9c, 0x76, 0x10, 0x71, 0x11, 0xe0, 0x93, 0xc5, 0x05,
		0x81, 0x4b, 0x80, 0x4b, 0x80, 0x4b, 0x80, 0x4b, 0x80, 0x4b, 0x80, 0x4b, 0x80, 0x4b, 0x80, 0x4b,
		0x38, 0xb7, 0x39, 0x60, 0x35, 0xd8, 0x88, 0xe3, 0x20, 0x80, 0x25, 0x0b, 0xeb, 0x01, 0x95, 0x00,
		0x95, 0x00, 0x95, 0x00, 0x95, 0x00, 0x95, 0x00, 0x95, 0x00, 0x95, 0x00, 0x95, 0x08, 0xa2, 0x12,
		0x8f, 0x35, 0x1d, 0xbb, 0x45, 0x08, 0x4b, 0xc6, 0x0b, 0x02, 0x97, 0x00, 0x97, 0x00, 0x97, 0x00,
		0x97, 0x00, 0x97, 0x00, 0x97, 0x00, 0x97, 0x00, 0x97, 0xf0, 0xe2, 0x12, 0xcf, 0x76, 0x09, 0xc0,
		0xc8, 0x60, 0x15, 0x35, 0x04, 0x92, 0x07, 0x02, 0x01, 0x02, 0x49, 0x1a, 0x02, 0x91, 0x4d, 0xf2,
		0x9a, 0x2c, 0x60, 0xbe, 0x12, 0x0e, 0x71, 0x1a, 0x2c, 0x86, 0x06, 0xbf, 0x3c, 0x4a, 0xea, 0xbf,
		0x75, 0x99, 0x87, 0xee, 0xbe, 0x14, 0x0b, 0x2f, 0x68, 0xf0, 0x70, 0x67, 0xd1, 0xda, 0x77, 0x41,
		0xe6, 0x5a, 0xac, 0x69, 0x75, 0xcc, 0xb6, 0x52, 0x80, 0xb1, 0xe4, 0x31, 0x0b, 0x04, 0x6b, 0x2d,
		0xc1, 0xac, 0x02, 0x9a, 0x06, 0xcb, 0x1d, 0x47, 0x01, 0xe3, 0x93, 0x93, 0xd2, 0x2b, 0xf8, 0x04,
		0x47, 0x85, 0xa9, 0xc9, 0xf2, 0xa0, 0xcd, 0xb2, 0x3d, 0xdf, 0xb4, 0x7d, 0x3a, 0xe0, 0x36, 0x5e,
		0x10, 0xe0, 0x0d, 0xe0, 0x0d, 0xe0, 0x0d, 0xe0, 0x0d, 0xe0, 0x0d, 0xe0, 0x0d, 0xe0, 0x0d, 0xe0,
		0x0d, 0xe0, 0x4d, 0x07, 0x78, 0xf3, 0x99, 0xfb, 0x6a, 0xb6, 0x29, 0xd1, 0xdb, 0x68, 0x45, 0xc0,
		0x37, 0xc0, 0x37, 0xc0, 0xb7, 0xd8, 0xc1, 0x37, 0xcf, 0x37, 0x7d, 0x83, 0x48, 0x49, 0x33, 0x34,
		0x17, 0xfd, 0x93, 0xa5, 0x3e, 0xdb, 0x43, 0xdf, 0x90, 0xb5, 0x4d, 0xdb, 0x51, 0x4b, 0xe5, 0x01,
		0x88, 0xcb, 0x01, 0x19, 0xec, 0xfa, 0xb4, 0x2e, 0x7d, 0x09, 0x09, 0xc0, 0x75, 0xf1, 0xc6, 0x75,
		0x1d, 0x93, 0x70, 0x76, 0xea, 0x60, 0x31, 0xa0, 0x39, 0xa0, 0x39, 0xa0, 0x39, 0x90, 0x71, 0x20,
		0xe3, 0x40, 0xc6, 0x01, 0xc7, 0x81, 0x8c, 0x03, 0x68, 0xd3, 0x02, 0xda, 0x0c, 0xdf, 0xea, 0x30,
		0x52, 0xe4, 0x36, 0x5c, 0x11, 0xf0, 0x0d, 0xf0, 0x0d, 0xf0, 0x2d, 0x76, 0xf0, 0x6d, 0xa0, 0x9b,
		0xbe, 0xd5, 0xfc, 0xee, 0x91, 0x02, 0xb8, 0x33, 0x40, 0x2d, 0x50, 0x66, 0xa0, 0xcc, 0x40, 0x99,
		0x01, 0x7d, 0x89, 0xa0, 0x2f, 0x02, 0xc3, 0x32, 0x05, 0x5e, 0x96, 0x0d, 0xcc, 0x05, 0xcc, 0x05,
		0xcc, 0x05, 0xca, 0x0c, 0x94, 0x19, 0x28, 0x33, 0xe0, 0x38, 0x50, 0x66, 0x00, 0x6d, 0x7a, 0x40,
		0x1b, 0x35, 0x65, 0x36, 0x5e, 0x11, 0xf0, 0x0d, 0xf0, 0x0d, 0xf0, 0x0d, 0x94, 0x19, 0xa0, 0x16,
		0x28, 0x33, 0x50, 0x66, 0xa0, 0xcc, 0xd2, 0x8a, 0xbe, 0x42, 0x6d, 0x11, 0xa2, 0x38, 0x94, 0x6e,
		0xb2, 0x8e, 0xa6, 0xe1, 0x74, 0xc1, 0x1c, 0xb5, 0x63, 0x85, 0xfe, 0x3d, 0x19, 0x3d, 0x83, 0xea,
		0x1e, 0x06, 0xdf, 0xab, 0x51, 0x1d, 0x7c, 0xaf, 0x18, 0x77, 0x4f, 0x7a, 0x66, 0x4d, 0xa3, 0xe9,
		0xb8, 0x6e, 0x30, 0x52, 0xd9, 0x78, 0x1a, 0x6a, 0xaa, 0x62, 0x2f, 0xa5, 0x15, 0x6b, 0xa2, 0xb7,
		0x23, 0x3a, 0x2b, 0x29, 0x62, 0x6b, 0xf4, 0x76, 0x44, 0x6f, 0x47, 0x0d, 0xe0, 0x18, 0xbd, 0x1d,
		0x23, 0x07, 0xbd, 0xe8, 0xed, 0x98, 0x41, 0x6f, 0x47, 0x1e, 0x74, 0xf2, 0xe6, 0x33, 0x7a, 0x78,
		0x12, 0x2c, 0x0a, 0x7c, 0x02, 0x7c, 0x02, 0x7c, 0x02, 0x7c, 0x02, 0x7c, 0x02, 0x7c, 0x02, 0x7c,
		0x02, 0x7c, 0x22, 0x80, 0x4f, 0x7a, 0xf6, 0x08, 0x4c, 0x98, 0x4f, 0x6d, 0x46, 0x36, 0xb3, 0x6b,
		0xed, 0xca, 0x40, 0x2a, 0x40, 0x2a, 0x40, 0x2a, 0x40, 0x2a, 0x40, 0x2a, 0x40, 0x2a, 0x40, 0x2a,
		0x40, 0x2a, 0xd2, 0x48, 0x65, 0xe0, 0xb3, 0xb4, 0x00, 0x95, 0xe1, 0xc2, 0xc0, 0x29, 0xc0, 0x29,
		0xc0, 0x29, 0xc0, 0x29, 0xc0, 0x29, 0xc0, 0x29, 0xc0, 0x29, 0xc0, 0x29, 0x9c, 0xdb, 0xdc, 0x75,
		0x3c, 0xdf, 0x18, 0x60, 0x8a, 0x27, 0x46, 0x30, 0xd5, 0x6b, 0x6e, 0x35, 0x4c, 0xf7, 0x02, 0x22,
		0xd9, 0x31, 0x44, 0x82, 0xe9, 0x5e, 0x7a, 0x94, 0x92, 0x52, 0x39, 0xd7, 0x2a, 0x29, 0xaa, 0x34,
		0x34, 0x55, 0x69, 0x4c, 0x77, 0x17, 0x95, 0x1a, 0x0b, 0xb2, 0x97, 0x9c, 0x42, 0xdb, 0x3c, 0xca,
		0x3f, 0x24, 0xcf, 0x03, 0x95, 0xb6, 0xa8, 0xb4, 0x45, 0xad, 0x47, 0x38, 0x41, 0x93, 0xfa, 0xe7,
		0x63, 0xcc, 0x17, 0x50, 0x1c, 0x50, 0x1c, 0x50, 0x1c, 0x50, 0x1c, 0x50, 0x1c, 0x50, 0x1c, 0x50,
		0x1c, 0x50, 0xdc, 0xee, 0xa1, 0x38, 0xcc, 0xfb, 0x8a, 0x14, 0xc7, 0x01, 0xc3, 0xa1, 0x5f, 0x4a,
		0xa8, 0xf8, 0x0d, 0xf3, 0xbe, 0x76, 0x04, 0xc4, 0xa1, 0x13, 0x0b, 0x3a, 0xb1, 0xa0, 0x13, 0x0b,
		0xe6, 0x7d, 0xa9, 0xbb, 0x0c, 0xcc, 0xfb, 0x02, 0x2b, 0x07, 0x56, 0x0e, 0xac, 0x1c, 0x58, 0x39,
		0xb0, 0x72, 0x00, 0x74, 0x60, 0xe5, 0x80, 0xde, 0xf4, 0xa3, 0x37, 0x0c, 0xfe, 0x02, 0x2b, 0x07,
		0x56, 0x6e, 0x67, 0xf0, 0x1b, 0xba, 0x18, 0x83, 0x3b, 0x03, 0xd4, 0x02, 0x77, 0x06, 0xf4, 0x15,
		0x03, 0xf4, 0x85, 0xc1, 0x5f, 0xe0, 0xce, 0xc0, 0x9d, 0x81, 0x3b, 0x03, 0x77, 0x06, 0xee, 0x0c,
		0x80, 0x0e, 0xdc, 0x19, 0xd0, 0x5b, 0xb2, 0xd0, 0x1b, 0x26, 0x80, 0x81, 0x3b, 0x03, 0x77, 0x06,
		0xee, 0x0c, 0xdc, 0x19, 0xb8, 0x33, 0x40, 0x2d, 0x70, 0x67, 0x40, 0x5f, 0x21, 0x3c, 0x99, 0xea,
		0x09, 0x60, 0x04, 0xbd, 0x7e, 0x32, 0x3a, 0x27, 0x81, 0xdd, 0x39, 0x9e, 0xff, 0x91, 0x35, 0xdf,
		0xb3, 0x58, 0xcf, 0x03, 0xeb, 0xba, 0x8c, 0xb0, 0xfd, 0xd2, 0xcc, 0x62, 0xe8, 0xbe, 0x84, 0xee,
		0x4b, 0x8a, 0xd8, 0x1a, 0xdd, 0x97, 0x54, 0xa4, 0x0f, 0xdd, 0x97, 0x84, 0x94, 0x14, 0x11, 0x32,
		0x6e, 0x39, 0xc2, 0x8e, 0x92, 0x71, 0xcb, 0x91, 0xfe, 0xd0, 0x1b, 0xb7, 0x1c, 0xb8, 0xe5, 0x40,
		0x9c, 0x9d, 0x98, 0x38, 0x1b, 0xdd, 0x97, 0x80, 0xe2, 0x80, 0xe2, 0x80, 0xe2, 0x80, 0xe2, 0x80,
		0xe2, 0x80, 0xe2, 0x80, 0xe2, 0x80, 0xe2, 0x76, 0x0e, 0xc5, 0xa1, 0xfb, 0x52, 0xa4, 0x38, 0x0e,
		0x18, 0x0e, 0xb9, 0x2a, 0xa1, 0xe2, 0x37, 0x74, 0x5f, 0xda, 0x11, 0x10, 0x87, 0x2c, 0x18, 0x64,
		0xc1, 0x20, 0x0b, 0x06, 0xdd, 0x97, 0xd4, 0x5d, 0x06, 0xba, 0x2f, 0x81, 0x95, 0x03, 0x2b, 0x07,
		0x56, 0x0e, 0xac, 0x1c, 0x58, 0x39, 0x00, 0x3a, 0xb0, 0x72, 0x40, 0x6f, 0xfa, 0xd1, 0x1b, 0xba,
		0x2f, 0x81, 0x95, 0x03, 0x2b, 0xb7, 0x33, 0xf8, 0x0d, 0x15, 0x64, 0xe0, 0xce, 0x00, 0xb5, 0xc0,
		0x9d, 0x01, 0x7d, 0xc5, 0x00, 0x7d, 0xa1, 0xfb, 0x12, 0xb8, 0x33, 0x70, 0x67, 0xe0, 0xce, 0xc0,
		0x9d, 0x81, 0x3b, 0x03, 0xa0, 0x03, 0x77, 0x06, 0xf4, 0x96, 0x2c, 0xf4, 0x86, 0xee, 0x4b, 0xe0,
		0xce, 0xc0, 0x9d, 0x81, 0x3b, 0x03, 0x77, 0x06, 0xee, 0x0c, 0x50, 0x0b, 0xdc, 0x19, 0xd0, 0x57,
		0x08, 0x4f, 0xa6, 0xbb, 0xfb, 0x92, 0x72, 0xab, 0x9f, 0x8c, 0xd6, 0xe6, 0x4b, 0x2e, 0x8b, 0x7f,
		0xef, 0xa5, 0xff, 0x33, 0x5e, 0x47, 0xe6, 0x41, 0xb1, 0xef, 0xd2, 0x78, 0x21, 0xf4, 0x5c, 0x42,
		0xcf, 0x25, 0x45, 0x44, 0x8d, 0x9e, 0x4b, 0x2a, 0xd2, 0x87, 0x9e, 0x4b, 0x88, 0x89, 0x11, 0x13,
		0xe3, 0x4e, 0x43, 0x09, 0xb7, 0x17, 0x10, 0x67, 0xcb, 0x1d, 0x07, 0xae, 0x34, 0x70, 0xa5, 0x81,
		0xa0, 0x3a, 0x31, 0x41, 0x35, 0x5a, 0x2d, 0x01, 0xbc, 0x01, 0xbc, 0x01, 0xbc, 0x01, 0xbc, 0x01,
		0xbc, 0x01, 0xbc, 0x01, 0xbc, 0x01, 0xbc, 0xed, 0x0a, 0x78, 0x43, 0x87, 0x25, 0xc0, 0x37, 0xc0,
		0xb7, 0xdd, 0x81, 0x6f, 0xe8, 0xb0, 0xb4, 0x23, 0x20, 0x0e, 0x99, 0x2e, 0xc8, 0x74, 0x41, 0xa6,
		0x0b, 0x3a, 0x2c, 0xa9, 0xbb, 0x0c, 0x74, 0x58, 0x02, 0x9a, 0x03, 0x9a, 0x03, 0x19, 0x07, 0x32,
		0x0e, 0x64, 0x1c, 0x70, 0x1c, 0xc8, 0x38, 0x80, 0x36, 0x6d, 0xa0, 0x0d, 0x8d, 0x95, 0x00, 0xdf,
		0x00, 0xdf, 0x76, 0x06, 0xbe, 0xa1, 0x38, 0x0c, 0x94, 0x19, 0xa0, 0x16, 0x28, 0x33, 0xa0, 0xaf,
		0x18, 0xa0, 0x2f, 0x34, 0x56, 0x02, 0xe6, 0x02, 0xe6, 0x02, 0x65, 0x06, 0xca, 0x0c, 0x94, 0x19,
		0x70, 0x1c, 0x28, 0x33, 0x80, 0xb6, 0x44, 0x80, 0x36, 0xf4, 0x53, 0x02, 0x7c, 0x03, 0x7c, 0x03,
		0x65, 0x06, 0xca, 0x0c, 0x94, 0x19, 0xa0, 0x16, 0x28, 0x33, 0xa0, 0xaf, 0x10, 0x9e, 0x4c, 0x75,
		0x3f, 0x25, 0xb5, 0x16, 0x3e, 0x19, 0x9d, 0xbd, 0x94, 0xfe, 0x67, 0xa8, 0x74, 0x31, 0x6e, 0xa4,
		0xe4, 0xb6, 0x2c, 0xa3, 0xe3, 0xbd, 0xa8, 0x37, 0x52, 0x1a, 0x2f, 0xa4, 0xd6, 0x48, 0x29, 0x87,
		0x46, 0x4a, 0xd4, 0x10, 0x1b, 0x8d, 0x94, 0x74, 0x5b, 0x49, 0x65, 0xd4, 0x3c, 0x53, 0xed, 0xe1,
		0x5a, 0xb6, 0x4a, 0x1f, 0xa4, 0x09, 0xc3, 0x79, 0x16, 0x63, 0x9b, 0xe3, 0xb1, 0x57, 0xe6, 0xb2,
		0xf6, 0x9b, 0xc1, 0x5c, 0xd7, 0x71, 0x59, 0xcb, 0x18, 0xd7, 0x8e, 0x28, 0x1b, 0xa1, 0xb5, 0x2b,
		0xc3, 0x2a, 0xc1, 0x2a, 0xc1, 0x2a, 0x49, 0x4a, 0x4e, 0xd3, 0xe9, 0xd9, 0x3e, 0x73, 0x95, 0x22,
		0x78, 0x82, 0xc8, 0x9d, 0x28, 0x62, 0x27, 0x20, 0x37, 0x28, 0x23, 0x74, 0xe2, 0x70, 0x8f, 0x3a,
		0x22, 0xd7, 0x11, 0xcb, 0x11, 0x44, 0xe0, 0xa4, 0x91, 0xb7, 0xae, 0x23, 0xd0, 0x17, 0x69, 0x6b,
		0x39, 0x95, 0x88, 0x22, 0xda, 0x7a, 0x8c, 0x91, 0x8a, 0xef, 0x5a, 0x4f, 0x3d, 0xdf, 0x74, 0xdf,
		0x0c, 0xaf, 0xed, 0xf8, 0xc6, 0x8b, 0x6b, 0xda, 0xbd, 0xb6, 0xe9, 0x5a, 0xfe, 0x9b, 0x3a, 0x56,
		0xd9, 0xb0, 0x36, 0xd0, 0x0a, 0xd0, 0x0a, 0xd0, 0x8a, 0xa4, 0xe4, 0x58, 0x2d, 0x66, 0xfb, 0x96,
		0xff, 0xe6, 0xb2, 0x67, 0x8a, 0x40, 0x4a, 0xc1, 0x62, 0x67, 0x2f, 0x47, 0x5f, 0xe5, 0xbd, 0xe9,
		0x11, 0x5e, 0x79, 0xd6, 0xee, 0x2f, 0xdf, 0x7f, 0xae, 0x55, 0xee, 0xbf, 0x34, 0x1e, 0xae, 0x6e,
		0x6b, 0x8d, 0x4f, 0xf7, 0x95, 0x9b, 0xcf, 0x57, 0x95, 0xfb, 0xcb, 0xda, 0x17, 0x55, 0xa1, 0x0c,
		0x1c, 0x97, 0x47, 0x72, 0x27, 0x42, 0xe4, 0x99, 0x67, 0xdf, 0x79, 0xf8, 0xba, 0xf9, 0xa3, 0x42,
		0xe9, 0x53, 0x36, 0x0e, 0x18, 0x44, 0xdb, 0x2b, 0x16, 0x8e, 0xd2, 0xfe, 0x86, 0x24, 0xef, 0xa7,
		0xb4, 0x42, 0x3d, 0x6c, 0xbb, 0x18, 0x0e, 0x5e, 0xf1, 0x03, 0x12, 0xd6, 0x30, 0x7b, 0xbe, 0x43,
		0x80, 0x50, 0x66, 0x57, 0x03, 0x26, 0x01, 0x26, 0x01, 0x26, 0x91, 0x94, 0x9c, 0x27, 0xc7, 0x69,
		0x33, 0xd3, 0xa6, 0xc0, 0x23, 0xf9, 0x04, 0x98, 0x1f, 0xf6, 0xa3, 0xcb, 0x9a, 0x3e, 0x6b, 0xd1,
		0x99, 0xa0, 0xc9, 0x8a, 0x30, 0x43, 0x30, 0x43, 0x30, 0x43, 0x92, 0x92, 0xb3, 0x1b, 0xd7, 0x4b,
		0x63, 0x9b, 0xe1, 0xb2, 0xe6, 0x2b, 0x9d, 0x05, 0x0a, 0x56, 0x83, 0xf5, 0x81, 0xf5, 0x81, 0xf5,
		0x81, 0xf5, 0xe1, 0xb0, 0x3e, 0xbe, 0x6b, 0xda, 0x5e, 0xc7, 0xf2, 0xe9, 0x2c, 0xd0, 0x64, 0x45,
		0x58, 0x21, 0x58, 0x21, 0x58, 0x21, 0x58, 0xa1, 0x0d, 0xdf, 0xb1, 0x67, 0x9b, 0xaf, 0xa6, 0xd5,
		0x36, 0x9f, 0xda, 0x8c, 0x2e, 0xbb, 0x66, 0xd5, 0xa2, 0xb0, 0x45, 0xb0, 0x45, 0xb0, 0x45, 0x92,
		0x92, 0x83, 0xc4, 0x9a, 0x85, 0x2f, 0x82, 0xc4, 0x1a, 0xa5, 0x5f, 0x48, 0xac, 0x89, 0xe5, 0xa9,
		0xa4, 0x3d, 0xb1, 0x66, 0x4f, 0xa3, 0x8c, 0xaa, 0x96, 0xa0, 0x68, 0x2d, 0x3d, 0xc9, 0xca, 0x24,
		0x3f, 0xeb, 0x29, 0x35, 0x11, 0x73, 0x9e, 0xfc, 0x47, 0xc6, 0xf7, 0x93, 0x9c, 0x87, 0x2a, 0x7b,
		0x98, 0x9a, 0x0e, 0x51, 0xe0, 0xf8, 0xe8, 0x8f, 0x8d, 0xef, 0xc0, 0xb6, 0x6f, 0x3f, 0xc7, 0xd6,
		0x67, 0x87, 0xc2, 0xca, 0xbb, 0xe3, 0x73, 0xb3, 0x27, 0x78, 0x65, 0x5c, 0x70, 0x12, 0xfa, 0x14,
		0xc1, 0x73, 0x36, 0xff, 0x90, 0x41, 0xec, 0x8a, 0x08, 0x5d, 0x16, 0x91, 0x2b, 0x23, 0x70, 0x65,
		0xc4, 0xad, 0x8e, 0xb0, 0x69, 0xd5, 0x5e, 0x74, 0xd2, 0x78, 0xd6, 0x6c, 0x75, 0x2c, 0xdb, 0x10,
		0x13, 0xdb, 0xa5, 0x53, 0x9f, 0x5d, 0x44, 0x70, 0xff, 0xe4, 0x70, 0x8b, 0x74, 0x58, 0xaa, 0x12,
		0x8e, 0x12, 0x85, 0xa1, 0xaa, 0xe1, 0x27, 0x59, 0xd8, 0x49, 0x16, 0x6e, 0xd2, 0x85, 0x99, 0x7a,
		0x01, 0x8e, 0x74, 0x38, 0xb9, 0x4a, 0xd0, 0x83, 0x36, 0x14, 0x32, 0xc7, 0x3f, 0x36, 0xdf, 0x45,
		0x89, 0x67, 0xab, 0x76, 0xaf, 0x33, 0x78, 0x83, 0xbe, 0x2e, 0x0c, 0x22, 0x60, 0xb3, 0x5b, 0xcc,
		0x6b, 0xba, 0x56, 0x57, 0x0a, 0x2f, 0xce, 0xf4, 0x1c, 0x9b, 0x2e, 0x02, 0xcb, 0x01, 0xcb, 0x91,
		0x5a, 0xcb, 0x21, 0x4d, 0x86, 0x4b, 0x92, 0xe0, 0x7a, 0x74, 0xde, 0xb2, 0x5b, 0xec, 0x87, 0xbc,
		0xb6, 0x0f, 0x1f, 0x87, 0x9e, 0x43, 0xcf, 0x53, 0xab, 0xe7, 0x3d, 0xcb, 0xf6, 0x4f, 0x0a, 0x0a,
		0x7a, 0x7e, 0x2a, 0xf1, 0xa8, 0x1a, 0xab, 0xac, 0x40, 0xaf, 0x53, 0xb0, 0xc8, 0x54, 0x0d, 0xe1,
		0x88, 0x58, 0x63, 0x4a, 0x5e, 0x52, 0xa5, 0x81, 0x1f, 0x05, 0x3b, 0x4c, 0xbd, 0xb5, 0xc5, 0xc2,
		0x79, 0xf1, 0xbc, 0x7c, 0x5a, 0x38, 0x2f, 0xc5, 0x68, 0x8f, 0x43, 0xe2, 0x5e, 0xeb, 0x31, 0x70,
		0xbf, 0x6d, 0xcb, 0xfe, 0xae, 0x1a, 0xab, 0xcf, 0xac, 0x01, 0x47, 0x0c, 0x47, 0x9c, 0x5a, 0x47,
		0xcc, 0xec, 0x5e, 0x87, 0xb9, 0xa6, 0x44, 0x64, 0x99, 0xaa, 0x28, 0x7d, 0x81, 0x95, 0x1f, 0xb2,
		0x16, 0xf2, 0xc6, 0x63, 0xd5, 0x6a, 0x30, 0x23, 0x30, 0x23, 0xa9, 0x35, 0x23, 0x6a, 0x35, 0xce,
		0x2a, 0xb5, 0xcd, 0x34, 0x35, 0xcd, 0x93, 0x17, 0xb9, 0xba, 0xfd, 0x74, 0x79, 0x51, 0xb9, 0x6a,
		0x54, 0xaf, 0xaa, 0xd7, 0xd5, 0x9b, 0x5a, 0xe3, 0xee, 0xfe, 0xb6, 0x76, 0x7b, 0x71, 0x7b, 0xd5,
		0xa8, 0x7d, 0xb9, 0xab, 0xca, 0xca, 0x13, 0x41, 0x19, 0x33, 0x51, 0xa9, 0xf6, 0xe0, 0x75, 0x1a,
		0xd5, 0xda, 0xef, 0xd5, 0xfb, 0x9b, 0x6a, 0x2d, 0x1b, 0x05, 0x62, 0xa7, 0x7c, 0x91, 0xdb, 0xda,
		0x4d, 0xd8, 0x39, 0x5a, 0x75, 0xdd, 0xaa, 0xab, 0xc9, 0xbd, 0x39, 0xdd, 0x27, 0xb3, 0xf9, 0xdd,
		0xe8, 0x38, 0x2d, 0x25, 0xbf, 0x36, 0xbb, 0x0c, 0x1c, 0x1a, 0x1c, 0x5a, 0x6a, 0x1d, 0xda, 0x9c,
		0xa8, 0x47, 0x7b, 0x89, 0x25, 0xf1, 0xec, 0x07, 0xf6, 0x6c, 0xf6, 0xda, 0xc1, 0x29, 0xdd, 0xdc,
		0xde, 0x54, 0xb3, 0x31, 0x30, 0x41, 0xae, 0xe9, 0x33, 0xa3, 0xd9, 0x36, 0x3d, 0x4f, 0xde, 0xfe,
		0xcc, 0xac, 0x01, 0xe3, 0x03, 0xe3, 0x03, 0x34, 0x1d, 0x77, 0x34, 0x3d, 0xed, 0x0c, 0x74, 0x5f,
		0xa9, 0x55, 0x1b, 0x17, 0x57, 0x95, 0x87, 0x87, 0x94, 0x20, 0xe9, 0xa0, 0x77, 0x4c, 0xf0, 0x56,
		0xf9, 0x7c, 0x2e, 0xf7, 0x29, 0xc9, 0x58, 0x7a, 0xfa, 0x2a, 0x67, 0xa9, 0x79, 0x93, 0x42, 0x7a,
		0xde, 0x44, 0xa9, 0xf9, 0x52, 0x9c, 0xde, 0x24, 0x5f, 0x4a, 0xcb, 0x99, 0xa4, 0x47, 0xe3, 0x4f,
		0x53, 0xf3, 0x26, 0xe7, 0xb9, 0x14, 0x49, 0x57, 0x6a, 0x5e, 0x25, 0x25, 0xef, 0x51, 0x4a, 0xcd,
		0x89, 0x14, 0xd3, 0xf2, 0x22, 0xe5, 0xf4, 0x78, 0xf8, 0x14, 0xf9, 0xc5, 0xd4, 0x68, 0x49, 0x5a,
		0xde, 0xe4, 0x44, 0xed, 0x4d, 0x76, 0x88, 0x24, 0xf7, 0x99, 0xe7, 0x1b, 0x9e, 0xf5, 0x62, 0x9b,
		0x6d, 0x79, 0x8a, 0x6a, 0x76, 0x11, 0x70, 0x54, 0xe0, 0xa8, 0x52, 0xcb, 0x51, 0xc9, 0x77, 0x90,
		0x94, 0xec, 0x1c, 0xa9, 0x49, 0xe9, 0x5d, 0xeb, 0xc9, 0xe8, 0xba, 0x8e, 0xef, 0x34, 0x1d, 0x15,
		0xb5, 0x9f, 0x5b, 0x06, 0x8a, 0x0f, 0xc5, 0x07, 0x39, 0xbd, 0x59, 0xf9, 0xe3, 0x44, 0x4e, 0xa7,
		0x31, 0xc9, 0xe3, 0xf6, 0xe2, 0xb4, 0x7c, 0x96, 0xfc, 0x0c, 0x8f, 0x0f, 0x9f, 0x0b, 0xd5, 0xc4,
		0xbf, 0x45, 0xfe, 0x53, 0xf2, 0xdf, 0xe1, 0xf6, 0xa2, 0x98, 0x0e, 0x71, 0x4a, 0x41, 0xd6, 0xd3,
		0xe7, 0x8b, 0x9b, 0x34, 0xbc, 0x45, 0x3e, 0xf9, 0x5a, 0x51, 0xcc, 0xa5, 0x40, 0xb5, 0x1f, 0x6a,
		0xd7, 0xe5, 0x62, 0x1a, 0x74, 0x3b, 0x05, 0x6a, 0xf1, 0x50, 0xbb, 0xce, 0x97, 0x93, 0xef, 0xf0,
		0x72, 0x9f, 0xaa, 0x8d, 0xab, 0x4a, 0x2a, 0xac, 0x54, 0x1a, 0xf0, 0x47, 0x2e, 0xf7, 0xa9, 0x71,
		0x7d, 0xf5, 0x29, 0x1d, 0x72, 0xf5, 0xef, 0x34, 0xc8, 0xd5, 0x87, 0xcf, 0x27, 0x69, 0x50, 0x8e,
		0x62, 0x1a, 0x5e, 0x22, 0x05, 0x27, 0x71, 0x91, 0x3f, 0x2f, 0xa4, 0x41, 0x29, 0x8a, 0xa9, 0xb0,
		0xb5, 0xd5, 0x54, 0xf8, 0xbd, 0x34, 0x60, 0xa9, 0x42, 0xa9, 0xbc, 0xc3, 0x97, 0x5f, 0x69, 0x6d,
		0x95, 0x28, 0x5a, 0x97, 0x4d, 0xdc, 0x2c, 0x51, 0xa0, 0xbf, 0x25, 0x47, 0xbb, 0xc4, 0x3d, 0x85,
		0xc3, 0xc9, 0xfe, 0xc1, 0xde, 0x78, 0x3b, 0xc6, 0x64, 0xaf, 0x2c, 0xcf, 0xaf, 0xf8, 0x3e, 0x5f,
		0xe7, 0xbb, 0xec, 0xb5, 0x65, 0x57, 0xdb, 0xac, 0xc3, 0xec, 0xa0, 0xf1, 0x80, 0xdd, 0x6b, 0xb7,
		0x39, 0xfa, 0x3a, 0x5e, 0x9b, 0x3f, 0xc4, 0x1f, 0xba, 0x75, 0x5b, 0xcc, 0x65, 0xad, 0xf7, 0x6f,
		0xa3, 0x47, 0x94, 0x36, 0x44, 0x50, 0x4a, 0x35, 0x48, 0x67, 0x96, 0xab, 0xff, 0x25, 0xa1, 0x3c,
		0x6e, 0x96, 0xc4, 0xf5, 0xf2, 0xb5, 0xfa, 0x5f, 0xd6, 0x6c, 0x30, 0xef, 0xc6, 0x12, 0x6e, 0xe8,
		0x86, 0x8d, 0xa4, 0xd9, 0xc0, 0xd5, 0x1b, 0xb7, 0xbc, 0x2d, 0x2b, 0xb6, 0x24, 0xeb, 0x74, 0x47,
		0x55, 0xf3, 0x66, 0x3b, 0x28, 0x11, 0x5a, 0x5f, 0xd5, 0x32, 0xbd, 0x32, 0x5b, 0x7a, 0x64, 0xcd,
		0x56, 0x6f, 0xee, 0x5c, 0xba, 0xf5, 0xde, 0x8f, 0xe7, 0x7e, 0x4f, 0xf0, 0x1e, 0x8f, 0xf7, 0xbe,
		0x4e, 0xf8, 0x5e, 0x4e, 0xf8, 0xfe, 0x4d, 0xfc, 0x9e, 0x4d, 0x4c, 0xcc, 0xb7, 0x75, 0x06, 0xcd,
		0x72, 0x55, 0x50, 0x4e, 0xb6, 0x97, 0xa3, 0x50, 0x92, 0xb3, 0x51, 0x2d, 0x77, 0x83, 0x5a, 0x91,
		0xeb, 0x5d, 0xc9, 0xeb, 0x5c, 0xd1, 0xeb, 0x5b, 0xe9, 0xeb, 0x5a, 0xe9, 0xeb, 0x59, 0xf9, 0xeb,
		0x58, 0x35, 0x7f, 0xcc, 0xdb, 0x58, 0x36, 0xdb, 0x1c, 0x9f, 0xa6, 0x60, 0x0b, 0xe4, 0xd1, 0x73,
		0x9a, 0x7b, 0x20, 0xe7, 0xd0, 0x03, 0x99, 0x4c, 0x14, 0xd5, 0x45, 0x32, 0x2d, 0x78, 0x7e, 0xc9,
		0x01, 0x1e, 0x0f, 0xfe, 0x7b, 0x2c, 0x24, 0xd2, 0x0a, 0xde, 0xff, 0x76, 0xfa, 0xf1, 0xd7, 0x83,
		0x4f, 0x6f, 0x0c, 0xfe, 0xdb, 0x18, 0xc9, 0x7c, 0x88, 0xcd, 0xcf, 0x83, 0x8a, 0x62, 0xab, 0x25,
		0xae, 0xfb, 0xe3, 0x07, 0xc5, 0x94, 0x3f, 0x07, 0xe5, 0x87, 0xf2, 0x2f, 0x7e, 0x1d, 0xe1, 0x34,
		0xa0, 0x69, 0x61, 0x3c, 0x33, 0x9f, 0xc5, 0x52, 0x7f, 0x26, 0x5e, 0x48, 0xa0, 0x67, 0x63, 0xf6,
		0x6e, 0x64, 0x5f, 0x8e, 0x8e, 0x86, 0xd1, 0xfe, 0xf1, 0x58, 0xf8, 0x31, 0xa5, 0x00, 0x53, 0x0a,
		0x76, 0x44, 0x49, 0x85, 0xa7, 0x14, 0xa0, 0xd7, 0x78, 0x26, 0x24, 0x21, 0x57, 0x15, 0x76, 0x32,
		0xa1, 0x27, 0x13, 0x7e, 0x3a, 0x25, 0x90, 0xa4, 0xb5, 0xd1, 0x6b, 0x5c, 0x66, 0x2f, 0x84, 0xd1,
		0xa4, 0x22, 0xaa, 0x84, 0xae, 0x43, 0xd7, 0x13, 0xa8, 0xeb, 0x3d, 0xcb, 0xf6, 0xf3, 0x65, 0x05,
		0x5d, 0x2f, 0xa3, 0xdf, 0xb8, 0xdc, 0x32, 0xe8, 0x37, 0xae, 0x7d, 0x6b, 0xcb, 0xa5, 0xd2, 0x09,
		0x5a, 0x8d, 0x47, 0xe2, 0x7d, 0x5f, 0x99, 0xdd, 0x72, 0x5c, 0x25, 0xff, 0x3b, 0x5d, 0x02, 0x1e,
		0x18, 0x1e, 0x18, 0x68, 0x3b, 0x7c, 0xb4, 0x9d, 0x4e, 0x5a, 0x3d, 0xa4, 0x24, 0x99, 0xd5, 0xac,
		0x7a, 0xfc, 0x52, 0x64, 0xf8, 0xc2, 0x1c, 0x24, 0xc9, 0x84, 0x21, 0x9b, 0xfa, 0x52, 0x64, 0x56,
		0x4a, 0x63, 0x5a, 0x12, 0x64, 0x78, 0x13, 0x48, 0x08, 0xf7, 0x4f, 0x25, 0x45, 0x66, 0x33, 0x7d,
		0xce, 0x45, 0x97, 0x73, 0xa7, 0xc2, 0x14, 0x90, 0x0a, 0x43, 0x9e, 0x0a, 0xa3, 0x5f, 0xa0, 0xb7,
		0xb9, 0x28, 0x49, 0x21, 0xde, 0xe0, 0x7c, 0x56, 0x48, 0xee, 0xde, 0x86, 0xbd, 0xd8, 0xb6, 0x07,
		0xf2, 0xef, 0x9e, 0x5d, 0xa9, 0x30, 0x12, 0x6f, 0x3b, 0xff, 0x9e, 0xd3, 0xb7, 0x19, 0xfe, 0x69,
		0xf4, 0x3e, 0xeb, 0xde, 0x23, 0x6b, 0x79, 0x1f, 0xcd, 0xef, 0xec, 0xde, 0x71, 0x96, 0x45, 0x6e,
		0xf1, 0xdd, 0xb2, 0xb3, 0xff, 0x34, 0xf7, 0x4d, 0x67, 0xbf, 0x48, 0x7f, 0xaf, 0xff, 0xff, 0x01,
		0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6d, 0xe0, 0x67, 0xbd, 0x1a, 0xcd, 0x1d,
		0x00,
	}
)

// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/components/component/port/breakout-mode/config/channel-speed": {
		reflect.TypeOf((E_OpenconfigIfEthernet_ETHERNET_SPEED)(0)),
	},
	"/components/component/port/breakout-mode/state/channel-speed": {
		reflect.TypeOf((E_OpenconfigIfEthernet_ETHERNET_SPEED)(0)),
	},
	"/components/component/state/oper-status": {
		reflect.TypeOf((E_OpenconfigPlatformTypes_COMPONENT_OPER_STATUS)(0)),
	},
	"/components/component/state/temperature/alarm-severity": {
		reflect.TypeOf((E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY)(0)),
	},
	"/components/component/state/type": {
		reflect.TypeOf((E_OpenconfigPlatformTypes_OPENCONFIG_SOFTWARE_COMPONENT)(0)),
		reflect.TypeOf((E_OpenconfigPlatformTypes_OPENCONFIG_HARDWARE_COMPONENT)(0)),
	},
	"/components/component/transceiver/config/ethernet-pmd-preconf": {
		reflect.TypeOf((E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE)(0)),
	},
	"/components/component/transceiver/config/fec-mode": {
		reflect.TypeOf((E_OpenconfigPlatformTypes_FEC_MODE_TYPE)(0)),
	},
	"/components/component/transceiver/config/form-factor-preconf": {
		reflect.TypeOf((E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE)(0)),
	},
	"/components/component/transceiver/state/connector-type": {
		reflect.TypeOf((E_OpenconfigTransportTypes_FIBER_CONNECTOR_TYPE)(0)),
	},
	"/components/component/transceiver/state/ethernet-pmd": {
		reflect.TypeOf((E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE)(0)),
	},
	"/components/component/transceiver/state/ethernet-pmd-preconf": {
		reflect.TypeOf((E_OpenconfigTransportTypes_ETHERNET_PMD_TYPE)(0)),
	},
	"/components/component/transceiver/state/fec-mode": {
		reflect.TypeOf((E_OpenconfigPlatformTypes_FEC_MODE_TYPE)(0)),
	},
	"/components/component/transceiver/state/fec-status": {
		reflect.TypeOf((E_OpenconfigPlatformTypes_FEC_STATUS_TYPE)(0)),
	},
	"/components/component/transceiver/state/form-factor": {
		reflect.TypeOf((E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE)(0)),
	},
	"/components/component/transceiver/state/form-factor-preconf": {
		reflect.TypeOf((E_OpenconfigTransportTypes_TRANSCEIVER_FORM_FACTOR_TYPE)(0)),
	},
	"/components/component/transceiver/state/otn-compliance-code": {
		reflect.TypeOf((E_OpenconfigTransportTypes_OTN_APPLICATION_CODE)(0)),
	},
	"/components/component/transceiver/state/present": {
		reflect.TypeOf((E_OpenconfigPlatform_Components_Component_Transceiver_State_Present)(0)),
	},
	"/components/component/transceiver/state/sonet-sdh-compliance-code": {
		reflect.TypeOf((E_OpenconfigTransportTypes_SONET_APPLICATION_CODE)(0)),
	},
	"/interfaces/interface/config/type": {
		reflect.TypeOf((E_IETFInterfaces_InterfaceType)(0)),
	},
	"/interfaces/interface/ethernet/config/client-als": {
		reflect.TypeOf((E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientAls)(0)),
	},
	"/interfaces/interface/ethernet/config/client-fec": {
		reflect.TypeOf((E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_ClientFec)(0)),
	},
	"/interfaces/interface/ethernet/config/duplex-mode": {
		reflect.TypeOf((E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode)(0)),
	},
	"/interfaces/interface/ethernet/config/port-speed": {
		reflect.TypeOf((E_OpenconfigIfEthernet_ETHERNET_SPEED)(0)),
	},
	"/interfaces/interface/ethernet/state/duplex-mode": {
		reflect.TypeOf((E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_Config_DuplexMode)(0)),
	},
	"/interfaces/interface/ethernet/state/negotiated-duplex-mode": {
		reflect.TypeOf((E_OpenconfigInterfaces_Interfaces_Interface_Ethernet_State_NegotiatedDuplexMode)(0)),
	},
	"/interfaces/interface/ethernet/state/negotiated-port-speed": {
		reflect.TypeOf((E_OpenconfigIfEthernet_ETHERNET_SPEED)(0)),
	},
	"/interfaces/interface/ethernet/state/port-speed": {
		reflect.TypeOf((E_OpenconfigIfEthernet_ETHERNET_SPEED)(0)),
	},
	"/interfaces/interface/state/admin-status": {
		reflect.TypeOf((E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus)(0)),
	},
	"/interfaces/interface/state/oper-status": {
		reflect.TypeOf((E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus)(0)),
	},
	"/interfaces/interface/state/type": {
		reflect.TypeOf((E_IETFInterfaces_InterfaceType)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/state/admin-status": {
		reflect.TypeOf((E_OpenconfigInterfaces_Interfaces_Interface_State_AdminStatus)(0)),
	},
	"/interfaces/interface/subinterfaces/subinterface/state/oper-status": {
		reflect.TypeOf((E_OpenconfigInterfaces_Interfaces_Interface_State_OperStatus)(0)),
	},
	"/lldp/config/chassis-id-type": {
		reflect.TypeOf((E_OpenconfigLldp_ChassisIdType)(0)),
	},
	"/lldp/config/suppress-tlv-advertisement": {
		reflect.TypeOf((E_OpenconfigLldpTypes_LLDP_TLV)(0)),
	},
	"/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/name": {
		reflect.TypeOf((E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY)(0)),
	},
	"/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/name": {
		reflect.TypeOf((E_OpenconfigLldpTypes_LLDP_SYSTEM_CAPABILITY)(0)),
	},
	"/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id-type": {
		reflect.TypeOf((E_OpenconfigLldp_ChassisIdType)(0)),
	},
	"/lldp/interfaces/interface/neighbors/neighbor/state/port-id-type": {
		reflect.TypeOf((E_OpenconfigLldp_PortIdType)(0)),
	},
	"/lldp/state/chassis-id-type": {
		reflect.TypeOf((E_OpenconfigLldp_ChassisIdType)(0)),
	},
	"/lldp/state/suppress-tlv-advertisement": {
		reflect.TypeOf((E_OpenconfigLldpTypes_LLDP_TLV)(0)),
	},
	"/system/aaa/accounting/config/accounting-method": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/system/aaa/accounting/events/event/config/event-type": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE)(0)),
	},
	"/system/aaa/accounting/events/event/config/record": {
		reflect.TypeOf((E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record)(0)),
	},
	"/system/aaa/accounting/events/event/event-type": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE)(0)),
	},
	"/system/aaa/accounting/events/event/state/event-type": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_ACCOUNTING_EVENT_TYPE)(0)),
	},
	"/system/aaa/accounting/events/event/state/record": {
		reflect.TypeOf((E_OpenconfigSystem_System_Aaa_Accounting_Events_Event_Config_Record)(0)),
	},
	"/system/aaa/accounting/state/accounting-method": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/system/aaa/authentication/config/authentication-method": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/system/aaa/authentication/state/authentication-method": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/system/aaa/authentication/users/user/config/role": {
		reflect.TypeOf((E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES)(0)),
	},
	"/system/aaa/authentication/users/user/state/role": {
		reflect.TypeOf((E_OpenconfigAaaTypes_SYSTEM_DEFINED_ROLES)(0)),
	},
	"/system/aaa/authorization/config/authorization-method": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/system/aaa/authorization/events/event/config/event-type": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE)(0)),
	},
	"/system/aaa/authorization/events/event/event-type": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE)(0)),
	},
	"/system/aaa/authorization/events/event/state/event-type": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_AUTHORIZATION_EVENT_TYPE)(0)),
	},
	"/system/aaa/authorization/state/authorization-method": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_METHOD_TYPE)(0)),
	},
	"/system/aaa/server-groups/server-group/config/type": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_SERVER_TYPE)(0)),
	},
	"/system/aaa/server-groups/server-group/state/type": {
		reflect.TypeOf((E_OpenconfigAaaTypes_AAA_SERVER_TYPE)(0)),
	},
	"/system/alarms/alarm/state/severity": {
		reflect.TypeOf((E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_SEVERITY)(0)),
	},
	"/system/alarms/alarm/state/type-id": {
		reflect.TypeOf((E_OpenconfigAlarmTypes_OPENCONFIG_ALARM_TYPE_ID)(0)),
	},
	"/system/cpus/cpu/index": {
		reflect.TypeOf((E_OpenconfigSystem_System_Cpus_Cpu_State_Index)(0)),
	},
	"/system/cpus/cpu/state/index": {
		reflect.TypeOf((E_OpenconfigSystem_System_Cpus_Cpu_State_Index)(0)),
	},
	"/system/grpc-server/config/listen-addresses": {
		reflect.TypeOf((E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses)(0)),
	},
	"/system/grpc-server/state/listen-addresses": {
		reflect.TypeOf((E_OpenconfigSystem_System_GrpcServer_Config_ListenAddresses)(0)),
	},
	"/system/logging/console/selectors/selector/config/facility": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/system/logging/console/selectors/selector/config/severity": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/system/logging/console/selectors/selector/facility": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/system/logging/console/selectors/selector/severity": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/system/logging/console/selectors/selector/state/facility": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/system/logging/console/selectors/selector/state/severity": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/system/logging/remote-servers/remote-server/selectors/selector/config/facility": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/system/logging/remote-servers/remote-server/selectors/selector/config/severity": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/system/logging/remote-servers/remote-server/selectors/selector/facility": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/system/logging/remote-servers/remote-server/selectors/selector/severity": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/system/logging/remote-servers/remote-server/selectors/selector/state/facility": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SYSLOG_FACILITY)(0)),
	},
	"/system/logging/remote-servers/remote-server/selectors/selector/state/severity": {
		reflect.TypeOf((E_OpenconfigSystemLogging_SyslogSeverity)(0)),
	},
	"/system/ntp/ntp-keys/ntp-key/config/key-type": {
		reflect.TypeOf((E_OpenconfigSystem_NTP_AUTH_TYPE)(0)),
	},
	"/system/ntp/ntp-keys/ntp-key/state/key-type": {
		reflect.TypeOf((E_OpenconfigSystem_NTP_AUTH_TYPE)(0)),
	},
	"/system/ntp/servers/server/config/association-type": {
		reflect.TypeOf((E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType)(0)),
	},
	"/system/ntp/servers/server/state/association-type": {
		reflect.TypeOf((E_OpenconfigSystem_System_Ntp_Servers_Server_Config_AssociationType)(0)),
	},
	"/system/ssh-server/config/protocol-version": {
		reflect.TypeOf((E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion)(0)),
	},
	"/system/ssh-server/state/protocol-version": {
		reflect.TypeOf((E_OpenconfigSystem_System_SshServer_Config_ProtocolVersion)(0)),
	},
	"/terminal-device/logical-channels/channel/config/admin-state": {
		reflect.TypeOf((E_OpenconfigTerminalDevice_AdminStateType)(0)),
	},
	"/terminal-device/logical-channels/channel/config/logical-channel-type": {
		reflect.TypeOf((E_OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE)(0)),
	},
	"/terminal-device/logical-channels/channel/config/loopback-mode": {
		reflect.TypeOf((E_OpenconfigTerminalDevice_LoopbackModeType)(0)),
	},
	"/terminal-device/logical-channels/channel/config/rate-class": {
		reflect.TypeOf((E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE)(0)),
	},
	"/terminal-device/logical-channels/channel/config/trib-protocol": {
		reflect.TypeOf((E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE)(0)),
	},
	"/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/assignment-type": {
		reflect.TypeOf((E_OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType)(0)),
	},
	"/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/config/mapping": {
		reflect.TypeOf((E_OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL)(0)),
	},
	"/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/assignment-type": {
		reflect.TypeOf((E_OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_LogicalChannelAssignments_Assignment_Config_AssignmentType)(0)),
	},
	"/terminal-device/logical-channels/channel/logical-channel-assignments/assignment/state/mapping": {
		reflect.TypeOf((E_OpenconfigTransportTypes_FRAME_MAPPING_PROTOCOL)(0)),
	},
	"/terminal-device/logical-channels/channel/otn/config/tributary-slot-granularity": {
		reflect.TypeOf((E_OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY)(0)),
	},
	"/terminal-device/logical-channels/channel/otn/state/tributary-slot-granularity": {
		reflect.TypeOf((E_OpenconfigTransportTypes_TRIBUTARY_SLOT_GRANULARITY)(0)),
	},
	"/terminal-device/logical-channels/channel/state/admin-state": {
		reflect.TypeOf((E_OpenconfigTerminalDevice_AdminStateType)(0)),
	},
	"/terminal-device/logical-channels/channel/state/link-state": {
		reflect.TypeOf((E_OpenconfigTerminalDevice_TerminalDevice_LogicalChannels_Channel_State_LinkState)(0)),
	},
	"/terminal-device/logical-channels/channel/state/logical-channel-type": {
		reflect.TypeOf((E_OpenconfigTransportTypes_LOGICAL_ELEMENT_PROTOCOL_TYPE)(0)),
	},
	"/terminal-device/logical-channels/channel/state/loopback-mode": {
		reflect.TypeOf((E_OpenconfigTerminalDevice_LoopbackModeType)(0)),
	},
	"/terminal-device/logical-channels/channel/state/rate-class": {
		reflect.TypeOf((E_OpenconfigTransportTypes_TRIBUTARY_RATE_CLASS_TYPE)(0)),
	},
	"/terminal-device/logical-channels/channel/state/trib-protocol": {
		reflect.TypeOf((E_OpenconfigTransportTypes_TRIBUTARY_PROTOCOL_TYPE)(0)),
	},
}
