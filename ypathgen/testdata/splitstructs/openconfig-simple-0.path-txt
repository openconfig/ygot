/*
Package ocstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- ../testdata/modules/openconfig-simple.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	oc "github.com/openconfig/ygot/ypathgen/testdata/exampleoc"
	"github.com/openconfig/ygot/ygot"
)

// Device represents the /device YANG schema element.
type Device struct {
	*ygot.DeviceRootBase
}

// DeviceRoot returns a new path object from which YANG paths can be constructed.
func DeviceRoot(id string) *Device {
	return &Device{ygot.NewDeviceRootBase(id)}
}

// Parent returns from Device the path struct for its child "parent".
func (n *Device) Parent() *Parent {
	return &Parent{
		NodePath: ygot.NewNodePath(
			[]string{"parent"},
			map[string]interface{}{},
			n,
		),
	}
}

// RemoteContainer returns from Device the path struct for its child "remote-container".
func (n *Device) RemoteContainer() *RemoteContainer {
	return &RemoteContainer{
		NodePath: ygot.NewNodePath(
			[]string{"remote-container"},
			map[string]interface{}{},
			n,
		),
	}
}

// Parent represents the /openconfig-simple/parent YANG schema element.
type Parent struct {
	*ygot.NodePath
}

// ParentAny represents the wildcard version of the /openconfig-simple/parent YANG schema element.
type ParentAny struct {
	*ygot.NodePath
}

// Child returns from Parent the path struct for its child "child".
func (n *Parent) Child() *Parent_Child {
	return &Parent_Child{
		NodePath: ygot.NewNodePath(
			[]string{"child"},
			map[string]interface{}{},
			n,
		),
	}
}

// Child returns from ParentAny the path struct for its child "child".
func (n *ParentAny) Child() *Parent_ChildAny {
	return &Parent_ChildAny{
		NodePath: ygot.NewNodePath(
			[]string{"child"},
			map[string]interface{}{},
			n,
		),
	}
}
