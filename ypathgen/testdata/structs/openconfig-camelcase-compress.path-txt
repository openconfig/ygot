/*
Package ocstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- ../testdata/modules/openconfig-camelcase.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"github.com/openconfig/ygot/ygot"
)

// BGPPath represents the /openconfig-camelcase/bgp YANG schema element.
type BGPPath struct {
	*ygot.NodePath
}

// BGPPathAny represents the wildcard version of the /openconfig-camelcase/bgp YANG schema element.
type BGPPathAny struct {
	*ygot.NodePath
}

// NeighborAny (list): 
// ----------------------------------------
// Defining module: "openconfig-camelcase"
// Instantiating module: "openconfig-camelcase"
// Path from parent: "neighbors/neighbor"
// Path from root: "/bgp/neighbors/neighbor"
// PeerIP (wildcarded): string
func (n *BGPPath) NeighborAny() *BGP_NeighborPathAny {
	return &BGP_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"peer-ip": "*"},
			n,
		),
	}
}

// NeighborAny (list): 
// ----------------------------------------
// Defining module: "openconfig-camelcase"
// Instantiating module: "openconfig-camelcase"
// Path from parent: "neighbors/neighbor"
// Path from root: "/bgp/neighbors/neighbor"
// PeerIP (wildcarded): string
func (n *BGPPathAny) NeighborAny() *BGP_NeighborPathAny {
	return &BGP_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"peer-ip": "*"},
			n,
		),
	}
}

// Neighbor (list): 
// ----------------------------------------
// Defining module: "openconfig-camelcase"
// Instantiating module: "openconfig-camelcase"
// Path from parent: "neighbors/neighbor"
// Path from root: "/bgp/neighbors/neighbor"
// PeerIP: string
func (n *BGPPath) Neighbor(PeerIP string) *BGP_NeighborPath {
	return &BGP_NeighborPath{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"peer-ip": PeerIP},
			n,
		),
	}
}

// Neighbor (list): 
// ----------------------------------------
// Defining module: "openconfig-camelcase"
// Instantiating module: "openconfig-camelcase"
// Path from parent: "neighbors/neighbor"
// Path from root: "/bgp/neighbors/neighbor"
// PeerIP: string
func (n *BGPPathAny) Neighbor(PeerIP string) *BGP_NeighborPathAny {
	return &BGP_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"peer-ip": PeerIP},
			n,
		),
	}
}

// BGP_NeighborPath represents the /openconfig-camelcase/bgp/neighbors/neighbor YANG schema element.
type BGP_NeighborPath struct {
	*ygot.NodePath
}

// BGP_NeighborPathAny represents the wildcard version of the /openconfig-camelcase/bgp/neighbors/neighbor YANG schema element.
type BGP_NeighborPathAny struct {
	*ygot.NodePath
}

// BGP_Neighbor_PeerIPPath represents the /openconfig-camelcase/bgp/neighbors/neighbor/state/peer-ip YANG schema element.
type BGP_Neighbor_PeerIPPath struct {
	*ygot.NodePath
}

// BGP_Neighbor_PeerIPPathAny represents the wildcard version of the /openconfig-camelcase/bgp/neighbors/neighbor/state/peer-ip YANG schema element.
type BGP_Neighbor_PeerIPPathAny struct {
	*ygot.NodePath
}

// PeerIP (leaf): 
// ----------------------------------------
// Defining module: "openconfig-camelcase"
// Instantiating module: "openconfig-camelcase"
// Path from parent: "state/peer-ip"
// Path from root: "/bgp/neighbors/neighbor/state/peer-ip"
func (n *BGP_NeighborPath) PeerIP() *BGP_Neighbor_PeerIPPath {
	return &BGP_Neighbor_PeerIPPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "peer-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// PeerIP (leaf): 
// ----------------------------------------
// Defining module: "openconfig-camelcase"
// Instantiating module: "openconfig-camelcase"
// Path from parent: "state/peer-ip"
// Path from root: "/bgp/neighbors/neighbor/state/peer-ip"
func (n *BGP_NeighborPathAny) PeerIP() *BGP_Neighbor_PeerIPPathAny {
	return &BGP_Neighbor_PeerIPPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "peer-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// DevicePath represents the /device YANG schema element.
type DevicePath struct {
	*ygot.DeviceRootBase
}

// DeviceRoot returns a new path object from which YANG paths can be constructed.
func DeviceRoot(id string) *DevicePath {
	return &DevicePath{ygot.NewDeviceRootBase(id)}
}

// BGP (container): 
// ----------------------------------------
// Defining module: "openconfig-camelcase"
// Instantiating module: "openconfig-camelcase"
// Path from parent: "bgp"
// Path from root: "/bgp"
func (n *DevicePath) BGP() *BGPPath {
	return &BGPPath{
		NodePath: ygot.NewNodePath(
			[]string{"bgp"},
			map[string]interface{}{},
			n,
		),
	}
}
