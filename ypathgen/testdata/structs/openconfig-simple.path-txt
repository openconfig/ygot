/*
Package ocpathstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- ../testdata/modules/openconfig-simple.yang
Imported modules were sourced from:
*/
package ocpathstructs

import (
	"fmt"

	gpb "github.com/openconfig/gnmi/proto/gnmi"
	oc "github.com/openconfig/ygot/ypathgen/testdata/exampleoc"
	"github.com/openconfig/ygot/ygot"
)

// Resolve is a helper which returns the resolved *gpb.Path of a PathStruct node.
func Resolve(n ygot.PathStruct) (*gpb.Path, []error) {
	n, p, errs := ygot.ResolvePath(n)
	root, ok := n.(*Device)
	if !ok {
		errs = append(errs, fmt.Errorf("Resolve(n ygot.PathStruct): got unexpected root of (type, value) (%T, %v)", n, n))
	}

	if errs != nil {
		return nil, errs
	}
	return &gpb.Path{Target: root.id, Elem: p}, nil
}

// Device represents the /device YANG schema element.
type Device struct {
	ygot.NodePath
	id string
}

func ForDevice(id string) *Device {
	return &Device{id: id}
}

// Parent returns from Device the path struct for its child "parent".
func (n *Device) Parent() *Parent {
	return &Parent{
		NodePath: ygot.NewNodePath(
			[]string{"parent"},
			map[string]interface{}{},
			n,
		),
	}
}

// RemoteContainer returns from Device the path struct for its child "remote-container".
func (n *Device) RemoteContainer() *RemoteContainer {
	return &RemoteContainer{
		NodePath: ygot.NewNodePath(
			[]string{"remote-container"},
			map[string]interface{}{},
			n,
		),
	}
}

// Parent represents the /openconfig-simple/parent YANG schema element.
type Parent struct {
	ygot.NodePath
}

// ParentΩ represents the wildcard version of the /openconfig-simple/parent YANG schema element.
type ParentΩ struct {
	ygot.NodePath
}

// Child returns from Parent the path struct for its child "child".
func (n *Parent) Child() *Parent_Child {
	return &Parent_Child{
		NodePath: ygot.NewNodePath(
			[]string{"child"},
			map[string]interface{}{},
			n,
		),
	}
}

// Parent_Child represents the /openconfig-simple/parent/child YANG schema element.
type Parent_Child struct {
	ygot.NodePath
}

// Parent_ChildΩ represents the wildcard version of the /openconfig-simple/parent/child YANG schema element.
type Parent_ChildΩ struct {
	ygot.NodePath
}

// Parent_Child_Four represents the /openconfig-simple/parent/child/state/four YANG schema element.
type Parent_Child_Four struct {
	ygot.NodePath
}

// Parent_Child_FourΩ represents the wildcard version of the /openconfig-simple/parent/child/state/four YANG schema element.
type Parent_Child_FourΩ struct {
	ygot.NodePath
}

// Parent_Child_One represents the /openconfig-simple/parent/child/state/one YANG schema element.
type Parent_Child_One struct {
	ygot.NodePath
}

// Parent_Child_OneΩ represents the wildcard version of the /openconfig-simple/parent/child/state/one YANG schema element.
type Parent_Child_OneΩ struct {
	ygot.NodePath
}

// Parent_Child_Three represents the /openconfig-simple/parent/child/state/three YANG schema element.
type Parent_Child_Three struct {
	ygot.NodePath
}

// Parent_Child_ThreeΩ represents the wildcard version of the /openconfig-simple/parent/child/state/three YANG schema element.
type Parent_Child_ThreeΩ struct {
	ygot.NodePath
}

// Parent_Child_Two represents the /openconfig-simple/parent/child/state/two YANG schema element.
type Parent_Child_Two struct {
	ygot.NodePath
}

// Parent_Child_TwoΩ represents the wildcard version of the /openconfig-simple/parent/child/state/two YANG schema element.
type Parent_Child_TwoΩ struct {
	ygot.NodePath
}

// Four returns from Parent_Child the path struct for its child "four".
func (n *Parent_Child) Four() *Parent_Child_Four {
	return &Parent_Child_Four{
		NodePath: ygot.NewNodePath(
			[]string{"state", "four"},
			map[string]interface{}{},
			n,
		),
	}
}

// One returns from Parent_Child the path struct for its child "one".
func (n *Parent_Child) One() *Parent_Child_One {
	return &Parent_Child_One{
		NodePath: ygot.NewNodePath(
			[]string{"state", "one"},
			map[string]interface{}{},
			n,
		),
	}
}

// Three returns from Parent_Child the path struct for its child "three".
func (n *Parent_Child) Three() *Parent_Child_Three {
	return &Parent_Child_Three{
		NodePath: ygot.NewNodePath(
			[]string{"state", "three"},
			map[string]interface{}{},
			n,
		),
	}
}

// Two returns from Parent_Child the path struct for its child "two".
func (n *Parent_Child) Two() *Parent_Child_Two {
	return &Parent_Child_Two{
		NodePath: ygot.NewNodePath(
			[]string{"state", "two"},
			map[string]interface{}{},
			n,
		),
	}
}

// RemoteContainer represents the /openconfig-simple/remote-container YANG schema element.
type RemoteContainer struct {
	ygot.NodePath
}

// RemoteContainerΩ represents the wildcard version of the /openconfig-simple/remote-container YANG schema element.
type RemoteContainerΩ struct {
	ygot.NodePath
}

// RemoteContainer_ALeaf represents the /openconfig-simple/remote-container/state/a-leaf YANG schema element.
type RemoteContainer_ALeaf struct {
	ygot.NodePath
}

// RemoteContainer_ALeafΩ represents the wildcard version of the /openconfig-simple/remote-container/state/a-leaf YANG schema element.
type RemoteContainer_ALeafΩ struct {
	ygot.NodePath
}

// ALeaf returns from RemoteContainer the path struct for its child "a-leaf".
func (n *RemoteContainer) ALeaf() *RemoteContainer_ALeaf {
	return &RemoteContainer_ALeaf{
		NodePath: ygot.NewNodePath(
			[]string{"state", "a-leaf"},
			map[string]interface{}{},
			n,
		),
	}
}
