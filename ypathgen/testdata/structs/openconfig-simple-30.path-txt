/*
Package ocpathstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- ../testdata/modules/openconfig-simple.yang
Imported modules were sourced from:
*/
package ocpathstructs

import (
	"fmt"

	gpb "github.com/openconfig/gnmi/proto/gnmi"
	oc "github.com/openconfig/ygot/ypathgen/testdata/exampleoc"
	"github.com/openconfig/ygot/ygot"
)

// Resolve is a helper which returns the resolved *gpb.Path of a PathStruct node.
func Resolve(n ygot.PathStruct) (*gpb.Path, map[string]interface{}, []error) {
	n, p, errs := ygot.ResolvePath(n)
	root, ok := n.(*Device)
	if !ok {
		errs = append(errs, fmt.Errorf("Resolve(n ygot.PathStruct): got unexpected root of (type, value) (%T, %v)", n, n))
	}

	if errs != nil {
		return nil, nil, errs
	}
	return &gpb.Path{Target: root.id, Elem: p}, root.customData, nil
}

// Device represents the /device YANG schema element.
type Device struct {
	*ygot.NodePath
	id string
	customData map[string]interface{}
}

func DeviceRoot(id string) *Device {
	return &Device{NodePath: &ygot.NodePath{}, id: id, customData: map[string]interface{}{}}
}

// Parent returns from Device the path struct for its child "parent".
func (n *Device) Parent() *Parent {
	return &Parent{
		NodePath: ygot.NewNodePath(
			[]string{"parent"},
			map[string]interface{}{},
			n,
		),
	}
}

// RemoteContainer returns from Device the path struct for its child "remote-container".
func (n *Device) RemoteContainer() *RemoteContainer {
	return &RemoteContainer{
		NodePath: ygot.NewNodePath(
			[]string{"remote-container"},
			map[string]interface{}{},
			n,
		),
	}
}
