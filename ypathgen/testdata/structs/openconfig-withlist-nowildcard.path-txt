/*
Package ocpathstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- ../testdata/modules/openconfig-withlist.yang
Imported modules were sourced from:
*/
package ocpathstructs

import (
	"github.com/openconfig/ygot/ygot"
)

// DevicePath represents the /device YANG schema element.
type DevicePath struct {
	*ygot.DeviceRootBase
}

// DeviceRoot returns a new path object from which YANG paths can be constructed.
func DeviceRoot(id string) *DevicePath {
	return &DevicePath{ygot.NewDeviceRootBase(id)}
}

// Model returns from DevicePath the path struct for its child "model".
func (n *DevicePath) Model() *ModelPath {
	return &ModelPath{
		NodePath: ygot.NewNodePath(
			[]string{"model"},
			map[string]interface{}{},
			n,
		),
	}
}

// ModelPath represents the /openconfig-withlist/model YANG schema element.
type ModelPath struct {
	*ygot.NodePath
}

// MultiKey returns from ModelPath the path struct for its child "multi-key".
// Key1: uint32
// Key2: uint64
func (n *ModelPath) MultiKey(Key1 uint32, Key2 uint64) *Model_MultiKeyPath {
	return &Model_MultiKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": Key1, "key2": Key2},
			n,
		),
	}
}

// SingleKey returns from ModelPath the path struct for its child "single-key".
// Key: string
func (n *ModelPath) SingleKey(Key string) *Model_SingleKeyPath {
	return &Model_SingleKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
}

// Model_MultiKeyPath represents the /openconfig-withlist/model/b/multi-key YANG schema element.
type Model_MultiKeyPath struct {
	*ygot.NodePath
}

// Model_MultiKey_Key1Path represents the /openconfig-withlist/model/b/multi-key/state/key1 YANG schema element.
type Model_MultiKey_Key1Path struct {
	*ygot.NodePath
}

// Model_MultiKey_Key2Path represents the /openconfig-withlist/model/b/multi-key/state/key2 YANG schema element.
type Model_MultiKey_Key2Path struct {
	*ygot.NodePath
}

// Key1 returns from Model_MultiKeyPath the path struct for its child "key1".
func (n *Model_MultiKeyPath) Key1() *Model_MultiKey_Key1Path {
	return &Model_MultiKey_Key1Path{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key1"},
			map[string]interface{}{},
			n,
		),
	}
}

// Key2 returns from Model_MultiKeyPath the path struct for its child "key2".
func (n *Model_MultiKeyPath) Key2() *Model_MultiKey_Key2Path {
	return &Model_MultiKey_Key2Path{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key2"},
			map[string]interface{}{},
			n,
		),
	}
}

// Model_SingleKeyPath represents the /openconfig-withlist/model/a/single-key YANG schema element.
type Model_SingleKeyPath struct {
	*ygot.NodePath
}

// Model_SingleKey_KeyPath represents the /openconfig-withlist/model/a/single-key/state/key YANG schema element.
type Model_SingleKey_KeyPath struct {
	*ygot.NodePath
}

// Key returns from Model_SingleKeyPath the path struct for its child "key".
func (n *Model_SingleKeyPath) Key() *Model_SingleKey_KeyPath {
	return &Model_SingleKey_KeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key"},
			map[string]interface{}{},
			n,
		),
	}
}
