/*
Package ocstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- ../testdata/modules/choice-case-example.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"github.com/openconfig/ygot/ygot"
)

// ChoiceCaseAnonymousCasePath represents the /choice-case-example/choice-case-anonymous-case YANG schema element.
type ChoiceCaseAnonymousCasePath struct {
	*ygot.NodePath
}

// ChoiceCaseAnonymousCasePathAny represents the wildcard version of the /choice-case-example/choice-case-anonymous-case YANG schema element.
type ChoiceCaseAnonymousCasePathAny struct {
	*ygot.NodePath
}

// ChoiceCaseAnonymousCase_APath represents the /choice-case-example/choice-case-anonymous-case/foo/a/a YANG schema element.
type ChoiceCaseAnonymousCase_APath struct {
	*ygot.NodePath
}

// ChoiceCaseAnonymousCase_APathAny represents the wildcard version of the /choice-case-example/choice-case-anonymous-case/foo/a/a YANG schema element.
type ChoiceCaseAnonymousCase_APathAny struct {
	*ygot.NodePath
}

// ChoiceCaseAnonymousCase_BPath represents the /choice-case-example/choice-case-anonymous-case/foo/b/b YANG schema element.
type ChoiceCaseAnonymousCase_BPath struct {
	*ygot.NodePath
}

// ChoiceCaseAnonymousCase_BPathAny represents the wildcard version of the /choice-case-example/choice-case-anonymous-case/foo/b/b YANG schema element.
type ChoiceCaseAnonymousCase_BPathAny struct {
	*ygot.NodePath
}

// A (leaf): 
// ----------------------------------------
// Defining module: "choice-case-example"
// Instantiating module: "choice-case-example"
// Path from parent: "a"
// Path from root: "/choice-case-anonymous-case/a"
func (n *ChoiceCaseAnonymousCasePath) A() *ChoiceCaseAnonymousCase_APath {
	return &ChoiceCaseAnonymousCase_APath{
		NodePath: ygot.NewNodePath(
			[]string{"a"},
			map[string]interface{}{},
			n,
		),
	}
}

// A (leaf): 
// ----------------------------------------
// Defining module: "choice-case-example"
// Instantiating module: "choice-case-example"
// Path from parent: "a"
// Path from root: "/choice-case-anonymous-case/a"
func (n *ChoiceCaseAnonymousCasePathAny) A() *ChoiceCaseAnonymousCase_APathAny {
	return &ChoiceCaseAnonymousCase_APathAny{
		NodePath: ygot.NewNodePath(
			[]string{"a"},
			map[string]interface{}{},
			n,
		),
	}
}

// B (leaf): 
// ----------------------------------------
// Defining module: "choice-case-example"
// Instantiating module: "choice-case-example"
// Path from parent: "b"
// Path from root: "/choice-case-anonymous-case/b"
func (n *ChoiceCaseAnonymousCasePath) B() *ChoiceCaseAnonymousCase_BPath {
	return &ChoiceCaseAnonymousCase_BPath{
		NodePath: ygot.NewNodePath(
			[]string{"b"},
			map[string]interface{}{},
			n,
		),
	}
}

// B (leaf): 
// ----------------------------------------
// Defining module: "choice-case-example"
// Instantiating module: "choice-case-example"
// Path from parent: "b"
// Path from root: "/choice-case-anonymous-case/b"
func (n *ChoiceCaseAnonymousCasePathAny) B() *ChoiceCaseAnonymousCase_BPathAny {
	return &ChoiceCaseAnonymousCase_BPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"b"},
			map[string]interface{}{},
			n,
		),
	}
}

// ChoiceCaseWithLeafrefPath represents the /choice-case-example/choice-case-with-leafref YANG schema element.
type ChoiceCaseWithLeafrefPath struct {
	*ygot.NodePath
}

// ChoiceCaseWithLeafrefPathAny represents the wildcard version of the /choice-case-example/choice-case-with-leafref YANG schema element.
type ChoiceCaseWithLeafrefPathAny struct {
	*ygot.NodePath
}

// ChoiceCaseWithLeafref_PtrPath represents the /choice-case-example/choice-case-with-leafref/foo/bar/ptr YANG schema element.
type ChoiceCaseWithLeafref_PtrPath struct {
	*ygot.NodePath
}

// ChoiceCaseWithLeafref_PtrPathAny represents the wildcard version of the /choice-case-example/choice-case-with-leafref/foo/bar/ptr YANG schema element.
type ChoiceCaseWithLeafref_PtrPathAny struct {
	*ygot.NodePath
}

// ChoiceCaseWithLeafref_ReferencedPath represents the /choice-case-example/choice-case-with-leafref/referenced YANG schema element.
type ChoiceCaseWithLeafref_ReferencedPath struct {
	*ygot.NodePath
}

// ChoiceCaseWithLeafref_ReferencedPathAny represents the wildcard version of the /choice-case-example/choice-case-with-leafref/referenced YANG schema element.
type ChoiceCaseWithLeafref_ReferencedPathAny struct {
	*ygot.NodePath
}

// Ptr (leaf): 
// ----------------------------------------
// Defining module: "choice-case-example"
// Instantiating module: "choice-case-example"
// Path from parent: "ptr"
// Path from root: "/choice-case-with-leafref/ptr"
func (n *ChoiceCaseWithLeafrefPath) Ptr() *ChoiceCaseWithLeafref_PtrPath {
	return &ChoiceCaseWithLeafref_PtrPath{
		NodePath: ygot.NewNodePath(
			[]string{"ptr"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ptr (leaf): 
// ----------------------------------------
// Defining module: "choice-case-example"
// Instantiating module: "choice-case-example"
// Path from parent: "ptr"
// Path from root: "/choice-case-with-leafref/ptr"
func (n *ChoiceCaseWithLeafrefPathAny) Ptr() *ChoiceCaseWithLeafref_PtrPathAny {
	return &ChoiceCaseWithLeafref_PtrPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ptr"},
			map[string]interface{}{},
			n,
		),
	}
}

// Referenced (leaf): 
// ----------------------------------------
// Defining module: "choice-case-example"
// Instantiating module: "choice-case-example"
// Path from parent: "referenced"
// Path from root: "/choice-case-with-leafref/referenced"
func (n *ChoiceCaseWithLeafrefPath) Referenced() *ChoiceCaseWithLeafref_ReferencedPath {
	return &ChoiceCaseWithLeafref_ReferencedPath{
		NodePath: ygot.NewNodePath(
			[]string{"referenced"},
			map[string]interface{}{},
			n,
		),
	}
}

// Referenced (leaf): 
// ----------------------------------------
// Defining module: "choice-case-example"
// Instantiating module: "choice-case-example"
// Path from parent: "referenced"
// Path from root: "/choice-case-with-leafref/referenced"
func (n *ChoiceCaseWithLeafrefPathAny) Referenced() *ChoiceCaseWithLeafref_ReferencedPathAny {
	return &ChoiceCaseWithLeafref_ReferencedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"referenced"},
			map[string]interface{}{},
			n,
		),
	}
}

// DevicePath represents the /device YANG schema element.
type DevicePath struct {
	*ygot.DeviceRootBase
}

// DeviceRoot returns a new path object from which YANG paths can be constructed.
func DeviceRoot(id string) *DevicePath {
	return &DevicePath{ygot.NewDeviceRootBase(id)}
}

// ChoiceCaseAnonymousCase (container): 
// ----------------------------------------
// Defining module: "choice-case-example"
// Instantiating module: "choice-case-example"
// Path from parent: "choice-case-anonymous-case"
// Path from root: "/choice-case-anonymous-case"
func (n *DevicePath) ChoiceCaseAnonymousCase() *ChoiceCaseAnonymousCasePath {
	return &ChoiceCaseAnonymousCasePath{
		NodePath: ygot.NewNodePath(
			[]string{"choice-case-anonymous-case"},
			map[string]interface{}{},
			n,
		),
	}
}

// ChoiceCaseWithLeafref (container): 
// ----------------------------------------
// Defining module: "choice-case-example"
// Instantiating module: "choice-case-example"
// Path from parent: "choice-case-with-leafref"
// Path from root: "/choice-case-with-leafref"
func (n *DevicePath) ChoiceCaseWithLeafref() *ChoiceCaseWithLeafrefPath {
	return &ChoiceCaseWithLeafrefPath{
		NodePath: ygot.NewNodePath(
			[]string{"choice-case-with-leafref"},
			map[string]interface{}{},
			n,
		),
	}
}

// SimpleChoiceCase (container): 
// ----------------------------------------
// Defining module: "choice-case-example"
// Instantiating module: "choice-case-example"
// Path from parent: "simple-choice-case"
// Path from root: "/simple-choice-case"
func (n *DevicePath) SimpleChoiceCase() *SimpleChoiceCasePath {
	return &SimpleChoiceCasePath{
		NodePath: ygot.NewNodePath(
			[]string{"simple-choice-case"},
			map[string]interface{}{},
			n,
		),
	}
}

// SimpleChoiceCasePath represents the /choice-case-example/simple-choice-case YANG schema element.
type SimpleChoiceCasePath struct {
	*ygot.NodePath
}

// SimpleChoiceCasePathAny represents the wildcard version of the /choice-case-example/simple-choice-case YANG schema element.
type SimpleChoiceCasePathAny struct {
	*ygot.NodePath
}

// SimpleChoiceCase_APath represents the /choice-case-example/simple-choice-case/foo/bar/a YANG schema element.
type SimpleChoiceCase_APath struct {
	*ygot.NodePath
}

// SimpleChoiceCase_APathAny represents the wildcard version of the /choice-case-example/simple-choice-case/foo/bar/a YANG schema element.
type SimpleChoiceCase_APathAny struct {
	*ygot.NodePath
}

// SimpleChoiceCase_BPath represents the /choice-case-example/simple-choice-case/foo/baz/b YANG schema element.
type SimpleChoiceCase_BPath struct {
	*ygot.NodePath
}

// SimpleChoiceCase_BPathAny represents the wildcard version of the /choice-case-example/simple-choice-case/foo/baz/b YANG schema element.
type SimpleChoiceCase_BPathAny struct {
	*ygot.NodePath
}

// A (leaf): 
// ----------------------------------------
// Defining module: "choice-case-example"
// Instantiating module: "choice-case-example"
// Path from parent: "a"
// Path from root: "/simple-choice-case/a"
func (n *SimpleChoiceCasePath) A() *SimpleChoiceCase_APath {
	return &SimpleChoiceCase_APath{
		NodePath: ygot.NewNodePath(
			[]string{"a"},
			map[string]interface{}{},
			n,
		),
	}
}

// A (leaf): 
// ----------------------------------------
// Defining module: "choice-case-example"
// Instantiating module: "choice-case-example"
// Path from parent: "a"
// Path from root: "/simple-choice-case/a"
func (n *SimpleChoiceCasePathAny) A() *SimpleChoiceCase_APathAny {
	return &SimpleChoiceCase_APathAny{
		NodePath: ygot.NewNodePath(
			[]string{"a"},
			map[string]interface{}{},
			n,
		),
	}
}

// B (leaf): 
// ----------------------------------------
// Defining module: "choice-case-example"
// Instantiating module: "choice-case-example"
// Path from parent: "b"
// Path from root: "/simple-choice-case/b"
func (n *SimpleChoiceCasePath) B() *SimpleChoiceCase_BPath {
	return &SimpleChoiceCase_BPath{
		NodePath: ygot.NewNodePath(
			[]string{"b"},
			map[string]interface{}{},
			n,
		),
	}
}

// B (leaf): 
// ----------------------------------------
// Defining module: "choice-case-example"
// Instantiating module: "choice-case-example"
// Path from parent: "b"
// Path from root: "/simple-choice-case/b"
func (n *SimpleChoiceCasePathAny) B() *SimpleChoiceCase_BPathAny {
	return &SimpleChoiceCase_BPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"b"},
			map[string]interface{}{},
			n,
		),
	}
}
