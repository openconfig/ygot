/*
Package ocpathstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- ../testdata/modules/openconfig-simple.yang
Imported modules were sourced from:
*/
package ocpathstructs

import (
	"fmt"

	gpb "github.com/openconfig/gnmi/proto/gnmi"
	oc "github.com/openconfig/ygot/ypathgen/testdata/exampleoc"
	"github.com/openconfig/ygot/ygot"
)

// Parent_Child represents the /openconfig-simple/parent/child YANG schema element.
type Parent_Child struct {
	*ygot.NodePath
}

// Parent_ChildAny represents the wildcard version of the /openconfig-simple/parent/child YANG schema element.
type Parent_ChildAny struct {
	*ygot.NodePath
}

// Parent_Child_Four represents the /openconfig-simple/parent/child/state/four YANG schema element.
type Parent_Child_Four struct {
	*ygot.NodePath
}

// Parent_Child_FourAny represents the wildcard version of the /openconfig-simple/parent/child/state/four YANG schema element.
type Parent_Child_FourAny struct {
	*ygot.NodePath
}

// Parent_Child_One represents the /openconfig-simple/parent/child/state/one YANG schema element.
type Parent_Child_One struct {
	*ygot.NodePath
}

// Parent_Child_OneAny represents the wildcard version of the /openconfig-simple/parent/child/state/one YANG schema element.
type Parent_Child_OneAny struct {
	*ygot.NodePath
}

// Parent_Child_Three represents the /openconfig-simple/parent/child/state/three YANG schema element.
type Parent_Child_Three struct {
	*ygot.NodePath
}

// Parent_Child_ThreeAny represents the wildcard version of the /openconfig-simple/parent/child/state/three YANG schema element.
type Parent_Child_ThreeAny struct {
	*ygot.NodePath
}

// Parent_Child_Two represents the /openconfig-simple/parent/child/state/two YANG schema element.
type Parent_Child_Two struct {
	*ygot.NodePath
}

// Parent_Child_TwoAny represents the wildcard version of the /openconfig-simple/parent/child/state/two YANG schema element.
type Parent_Child_TwoAny struct {
	*ygot.NodePath
}

// Four returns from Parent_Child the path struct for its child "four".
func (n *Parent_Child) Four() *Parent_Child_Four {
	return &Parent_Child_Four{
		NodePath: ygot.NewNodePath(
			[]string{"state", "four"},
			map[string]interface{}{},
			n,
		),
	}
}

// Four returns from Parent_ChildAny the path struct for its child "four".
func (n *Parent_ChildAny) Four() *Parent_Child_FourAny {
	return &Parent_Child_FourAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "four"},
			map[string]interface{}{},
			n,
		),
	}
}

// One returns from Parent_Child the path struct for its child "one".
func (n *Parent_Child) One() *Parent_Child_One {
	return &Parent_Child_One{
		NodePath: ygot.NewNodePath(
			[]string{"state", "one"},
			map[string]interface{}{},
			n,
		),
	}
}

// One returns from Parent_ChildAny the path struct for its child "one".
func (n *Parent_ChildAny) One() *Parent_Child_OneAny {
	return &Parent_Child_OneAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "one"},
			map[string]interface{}{},
			n,
		),
	}
}

// Three returns from Parent_Child the path struct for its child "three".
func (n *Parent_Child) Three() *Parent_Child_Three {
	return &Parent_Child_Three{
		NodePath: ygot.NewNodePath(
			[]string{"state", "three"},
			map[string]interface{}{},
			n,
		),
	}
}

// Three returns from Parent_ChildAny the path struct for its child "three".
func (n *Parent_ChildAny) Three() *Parent_Child_ThreeAny {
	return &Parent_Child_ThreeAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "three"},
			map[string]interface{}{},
			n,
		),
	}
}

// Two returns from Parent_Child the path struct for its child "two".
func (n *Parent_Child) Two() *Parent_Child_Two {
	return &Parent_Child_Two{
		NodePath: ygot.NewNodePath(
			[]string{"state", "two"},
			map[string]interface{}{},
			n,
		),
	}
}

// Two returns from Parent_ChildAny the path struct for its child "two".
func (n *Parent_ChildAny) Two() *Parent_Child_TwoAny {
	return &Parent_Child_TwoAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "two"},
			map[string]interface{}{},
			n,
		),
	}
}
