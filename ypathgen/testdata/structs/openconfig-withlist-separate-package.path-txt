/*
Package ocstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- ../testdata/modules/openconfig-withlist.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	oc "github.com/openconfig/ygot/ypathgen/testdata/exampleoc"
	"github.com/openconfig/ygot/ygot"
)

// Device represents the /device YANG schema element.
type Device struct {
	*ygot.DeviceRootBase
}

// DeviceRoot returns a new path object from which YANG paths can be constructed.
func DeviceRoot(id string) *Device {
	return &Device{ygot.NewDeviceRootBase(id)}
}

// Model (container): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "model"
// Path from root: "/model"
func (n *Device) Model() *Model {
	return &Model{
		NodePath: ygot.NewNodePath(
			[]string{"model"},
			map[string]interface{}{},
			n,
		),
	}
}

// Model represents the /openconfig-withlist/model YANG schema element.
type Model struct {
	*ygot.NodePath
}

// ModelAny represents the wildcard version of the /openconfig-withlist/model YANG schema element.
type ModelAny struct {
	*ygot.NodePath
}

// MultiKeyAny (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "b/multi-key"
// Path from root: "/model/b/multi-key"
// Key1 (wildcarded): uint32
// Key2 (wildcarded): uint64
func (n *Model) MultiKeyAny() *Model_MultiKeyAny {
	return &Model_MultiKeyAny{
		NodePath: ygot.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": "*", "key2": "*"},
			n,
		),
	}
}

// MultiKeyAny (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "b/multi-key"
// Path from root: "/model/b/multi-key"
// Key1 (wildcarded): uint32
// Key2 (wildcarded): uint64
func (n *ModelAny) MultiKeyAny() *Model_MultiKeyAny {
	return &Model_MultiKeyAny{
		NodePath: ygot.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": "*", "key2": "*"},
			n,
		),
	}
}

// MultiKeyAnyKey2 (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "b/multi-key"
// Path from root: "/model/b/multi-key"
// Key1: uint32
// Key2 (wildcarded): uint64
func (n *Model) MultiKeyAnyKey2(Key1 uint32) *Model_MultiKeyAny {
	return &Model_MultiKeyAny{
		NodePath: ygot.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": Key1, "key2": "*"},
			n,
		),
	}
}

// MultiKeyAnyKey2 (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "b/multi-key"
// Path from root: "/model/b/multi-key"
// Key1: uint32
// Key2 (wildcarded): uint64
func (n *ModelAny) MultiKeyAnyKey2(Key1 uint32) *Model_MultiKeyAny {
	return &Model_MultiKeyAny{
		NodePath: ygot.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": Key1, "key2": "*"},
			n,
		),
	}
}

// MultiKeyAnyKey1 (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "b/multi-key"
// Path from root: "/model/b/multi-key"
// Key1 (wildcarded): uint32
// Key2: uint64
func (n *Model) MultiKeyAnyKey1(Key2 uint64) *Model_MultiKeyAny {
	return &Model_MultiKeyAny{
		NodePath: ygot.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": "*", "key2": Key2},
			n,
		),
	}
}

// MultiKeyAnyKey1 (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "b/multi-key"
// Path from root: "/model/b/multi-key"
// Key1 (wildcarded): uint32
// Key2: uint64
func (n *ModelAny) MultiKeyAnyKey1(Key2 uint64) *Model_MultiKeyAny {
	return &Model_MultiKeyAny{
		NodePath: ygot.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": "*", "key2": Key2},
			n,
		),
	}
}

// MultiKey (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "b/multi-key"
// Path from root: "/model/b/multi-key"
// Key1: uint32
// Key2: uint64
func (n *Model) MultiKey(Key1 uint32, Key2 uint64) *Model_MultiKey {
	return &Model_MultiKey{
		NodePath: ygot.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": Key1, "key2": Key2},
			n,
		),
	}
}

// MultiKey (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "b/multi-key"
// Path from root: "/model/b/multi-key"
// Key1: uint32
// Key2: uint64
func (n *ModelAny) MultiKey(Key1 uint32, Key2 uint64) *Model_MultiKeyAny {
	return &Model_MultiKeyAny{
		NodePath: ygot.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": Key1, "key2": Key2},
			n,
		),
	}
}

// SingleKeyAny (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "a/single-key"
// Path from root: "/model/a/single-key"
// Key (wildcarded): string
func (n *Model) SingleKeyAny() *Model_SingleKeyAny {
	return &Model_SingleKeyAny{
		NodePath: ygot.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": "*"},
			n,
		),
	}
}

// SingleKeyAny (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "a/single-key"
// Path from root: "/model/a/single-key"
// Key (wildcarded): string
func (n *ModelAny) SingleKeyAny() *Model_SingleKeyAny {
	return &Model_SingleKeyAny{
		NodePath: ygot.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": "*"},
			n,
		),
	}
}

// SingleKey (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "a/single-key"
// Path from root: "/model/a/single-key"
// Key: string
func (n *Model) SingleKey(Key string) *Model_SingleKey {
	return &Model_SingleKey{
		NodePath: ygot.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
}

// SingleKey (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "a/single-key"
// Path from root: "/model/a/single-key"
// Key: string
func (n *ModelAny) SingleKey(Key string) *Model_SingleKeyAny {
	return &Model_SingleKeyAny{
		NodePath: ygot.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
}

// Model_MultiKey represents the /openconfig-withlist/model/b/multi-key YANG schema element.
type Model_MultiKey struct {
	*ygot.NodePath
}

// Model_MultiKeyAny represents the wildcard version of the /openconfig-withlist/model/b/multi-key YANG schema element.
type Model_MultiKeyAny struct {
	*ygot.NodePath
}

// Model_MultiKey_Key1 represents the /openconfig-withlist/model/b/multi-key/state/key1 YANG schema element.
type Model_MultiKey_Key1 struct {
	*ygot.NodePath
}

// Model_MultiKey_Key1Any represents the wildcard version of the /openconfig-withlist/model/b/multi-key/state/key1 YANG schema element.
type Model_MultiKey_Key1Any struct {
	*ygot.NodePath
}

// Model_MultiKey_Key2 represents the /openconfig-withlist/model/b/multi-key/state/key2 YANG schema element.
type Model_MultiKey_Key2 struct {
	*ygot.NodePath
}

// Model_MultiKey_Key2Any represents the wildcard version of the /openconfig-withlist/model/b/multi-key/state/key2 YANG schema element.
type Model_MultiKey_Key2Any struct {
	*ygot.NodePath
}

// Key1 (leaf): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "state/key1"
// Path from root: "/model/b/multi-key/state/key1"
func (n *Model_MultiKey) Key1() *Model_MultiKey_Key1 {
	return &Model_MultiKey_Key1{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key1"},
			map[string]interface{}{},
			n,
		),
	}
}

// Key1 (leaf): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "state/key1"
// Path from root: "/model/b/multi-key/state/key1"
func (n *Model_MultiKeyAny) Key1() *Model_MultiKey_Key1Any {
	return &Model_MultiKey_Key1Any{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key1"},
			map[string]interface{}{},
			n,
		),
	}
}

// Key2 (leaf): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "state/key2"
// Path from root: "/model/b/multi-key/state/key2"
func (n *Model_MultiKey) Key2() *Model_MultiKey_Key2 {
	return &Model_MultiKey_Key2{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key2"},
			map[string]interface{}{},
			n,
		),
	}
}

// Key2 (leaf): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "state/key2"
// Path from root: "/model/b/multi-key/state/key2"
func (n *Model_MultiKeyAny) Key2() *Model_MultiKey_Key2Any {
	return &Model_MultiKey_Key2Any{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key2"},
			map[string]interface{}{},
			n,
		),
	}
}

// Model_SingleKey represents the /openconfig-withlist/model/a/single-key YANG schema element.
type Model_SingleKey struct {
	*ygot.NodePath
}

// Model_SingleKeyAny represents the wildcard version of the /openconfig-withlist/model/a/single-key YANG schema element.
type Model_SingleKeyAny struct {
	*ygot.NodePath
}

// Model_SingleKey_Key represents the /openconfig-withlist/model/a/single-key/state/key YANG schema element.
type Model_SingleKey_Key struct {
	*ygot.NodePath
}

// Model_SingleKey_KeyAny represents the wildcard version of the /openconfig-withlist/model/a/single-key/state/key YANG schema element.
type Model_SingleKey_KeyAny struct {
	*ygot.NodePath
}

// Key (leaf): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "state/key"
// Path from root: "/model/a/single-key/state/key"
func (n *Model_SingleKey) Key() *Model_SingleKey_Key {
	return &Model_SingleKey_Key{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key"},
			map[string]interface{}{},
			n,
		),
	}
}

// Key (leaf): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "state/key"
// Path from root: "/model/a/single-key/state/key"
func (n *Model_SingleKeyAny) Key() *Model_SingleKey_KeyAny {
	return &Model_SingleKey_KeyAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key"},
			map[string]interface{}{},
			n,
		),
	}
}
