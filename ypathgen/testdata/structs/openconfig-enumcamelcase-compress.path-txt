/*
Package ocstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- ../testdata/modules/openconfig-enumcamelcase.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"github.com/openconfig/ygot/ygot"
)

// DevicePath represents the /device YANG schema element.
type DevicePath struct {
	*ygot.DeviceRootBase
}

// DeviceRoot returns a new path object from which YANG paths can be constructed.
func DeviceRoot(id string) *DevicePath {
	return &DevicePath{ygot.NewDeviceRootBase(id)}
}

// Foo returns from DevicePath the path struct for its child "foo".
func (n *DevicePath) Foo() *FooPath {
	return &FooPath{
		NodePath: ygot.NewNodePath(
			[]string{"foo"},
			map[string]interface{}{},
			n,
		),
	}
}

// FooPath represents the /openconfig-enumcamelcase/foo YANG schema element.
type FooPath struct {
	*ygot.NodePath
}

// FooPathAny represents the wildcard version of the /openconfig-enumcamelcase/foo YANG schema element.
type FooPathAny struct {
	*ygot.NodePath
}

// Foo_BarPath represents the /openconfig-enumcamelcase/foo/bar YANG schema element.
type Foo_BarPath struct {
	*ygot.NodePath
}

// Foo_BarPathAny represents the wildcard version of the /openconfig-enumcamelcase/foo/bar YANG schema element.
type Foo_BarPathAny struct {
	*ygot.NodePath
}

// Foo_BazPath represents the /openconfig-enumcamelcase/foo/baz YANG schema element.
type Foo_BazPath struct {
	*ygot.NodePath
}

// Foo_BazPathAny represents the wildcard version of the /openconfig-enumcamelcase/foo/baz YANG schema element.
type Foo_BazPathAny struct {
	*ygot.NodePath
}

// Bar returns from FooPath the path struct for its child "bar".
func (n *FooPath) Bar() *Foo_BarPath {
	return &Foo_BarPath{
		NodePath: ygot.NewNodePath(
			[]string{"bar"},
			map[string]interface{}{},
			n,
		),
	}
}

// Bar returns from FooPathAny the path struct for its child "bar".
func (n *FooPathAny) Bar() *Foo_BarPathAny {
	return &Foo_BarPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bar"},
			map[string]interface{}{},
			n,
		),
	}
}

// Baz returns from FooPath the path struct for its child "baz".
func (n *FooPath) Baz() *Foo_BazPath {
	return &Foo_BazPath{
		NodePath: ygot.NewNodePath(
			[]string{"baz"},
			map[string]interface{}{},
			n,
		),
	}
}

// Baz returns from FooPathAny the path struct for its child "baz".
func (n *FooPathAny) Baz() *Foo_BazPathAny {
	return &Foo_BazPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"baz"},
			map[string]interface{}{},
			n,
		),
	}
}
