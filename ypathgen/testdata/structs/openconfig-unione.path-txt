/*
Package ocpathstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- ../testdata/modules/openconfig-unione.yang
Imported modules were sourced from:
*/
package ocpathstructs

import (
	"fmt"

	gpb "github.com/openconfig/gnmi/proto/gnmi"
	oc "github.com/openconfig/ygot/ypathgen/testdata/exampleoc"
	"github.com/openconfig/ygot/ygot"
)

// Resolve is a helper which returns the resolved *gpb.Path of a PathStruct node.
func Resolve(n ygot.PathStruct) (*gpb.Path, []error) {
	n, p, errs := ygot.ResolvePath(n)
	root, ok := n.(*Device)
	if !ok {
		errs = append(errs, fmt.Errorf("Resolve(n ygot.PathStruct): got unexpected root of (type, value) (%T, %v)", n, n))
	}

	if errs != nil {
		return nil, errs
	}
	return &gpb.Path{Target: root.id, Elem: p}, nil
}

// Device represents the /device YANG schema element.
type Device struct {
	ygot.NodePath
	id string
}

func ForDevice(id string) *Device {
	return &Device{id: id}
}

// DupEnum returns from Device the path struct for its child "dup-enum".
func (n *Device) DupEnum() *DupEnum {
	return &DupEnum{
		NodePath: ygot.NewNodePath(
			[]string{"dup-enum"},
			map[string]interface{}{},
			n,
		),
	}
}

// Platform returns from Device the path struct for its child "platform".
func (n *Device) Platform() *Platform {
	return &Platform{
		NodePath: ygot.NewNodePath(
			[]string{"platform"},
			map[string]interface{}{},
			n,
		),
	}
}

// DupEnum represents the /openconfig-unione/dup-enum YANG schema element.
type DupEnum struct {
	ygot.NodePath
}

// DupEnumAny represents the wildcard version of the /openconfig-unione/dup-enum YANG schema element.
type DupEnumAny struct {
	ygot.NodePath
}

// DupEnum_A represents the /openconfig-unione/dup-enum/state/A YANG schema element.
type DupEnum_A struct {
	ygot.NodePath
}

// DupEnum_AAny represents the wildcard version of the /openconfig-unione/dup-enum/state/A YANG schema element.
type DupEnum_AAny struct {
	ygot.NodePath
}

// DupEnum_B represents the /openconfig-unione/dup-enum/state/B YANG schema element.
type DupEnum_B struct {
	ygot.NodePath
}

// DupEnum_BAny represents the wildcard version of the /openconfig-unione/dup-enum/state/B YANG schema element.
type DupEnum_BAny struct {
	ygot.NodePath
}

// A returns from DupEnum the path struct for its child "A".
func (n *DupEnum) A() *DupEnum_A {
	return &DupEnum_A{
		NodePath: ygot.NewNodePath(
			[]string{"state", "A"},
			map[string]interface{}{},
			n,
		),
	}
}

// A returns from DupEnumAny the path struct for its child "A".
func (n *DupEnumAny) A() *DupEnum_AAny {
	return &DupEnum_AAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "A"},
			map[string]interface{}{},
			n,
		),
	}
}

// B returns from DupEnum the path struct for its child "B".
func (n *DupEnum) B() *DupEnum_B {
	return &DupEnum_B{
		NodePath: ygot.NewNodePath(
			[]string{"state", "B"},
			map[string]interface{}{},
			n,
		),
	}
}

// B returns from DupEnumAny the path struct for its child "B".
func (n *DupEnumAny) B() *DupEnum_BAny {
	return &DupEnum_BAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "B"},
			map[string]interface{}{},
			n,
		),
	}
}

// Platform represents the /openconfig-unione/platform YANG schema element.
type Platform struct {
	ygot.NodePath
}

// PlatformAny represents the wildcard version of the /openconfig-unione/platform YANG schema element.
type PlatformAny struct {
	ygot.NodePath
}

// Component returns from Platform the path struct for its child "component".
func (n *Platform) Component() *Platform_Component {
	return &Platform_Component{
		NodePath: ygot.NewNodePath(
			[]string{"component"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component returns from PlatformAny the path struct for its child "component".
func (n *PlatformAny) Component() *Platform_ComponentAny {
	return &Platform_ComponentAny{
		NodePath: ygot.NewNodePath(
			[]string{"component"},
			map[string]interface{}{},
			n,
		),
	}
}

// Platform_Component represents the /openconfig-unione/platform/component YANG schema element.
type Platform_Component struct {
	ygot.NodePath
}

// Platform_ComponentAny represents the wildcard version of the /openconfig-unione/platform/component YANG schema element.
type Platform_ComponentAny struct {
	ygot.NodePath
}

// Platform_Component_E1 represents the /openconfig-unione/platform/component/state/e1 YANG schema element.
type Platform_Component_E1 struct {
	ygot.NodePath
}

// Platform_Component_E1Any represents the wildcard version of the /openconfig-unione/platform/component/state/e1 YANG schema element.
type Platform_Component_E1Any struct {
	ygot.NodePath
}

// Platform_Component_Enumerated represents the /openconfig-unione/platform/component/state/enumerated YANG schema element.
type Platform_Component_Enumerated struct {
	ygot.NodePath
}

// Platform_Component_EnumeratedAny represents the wildcard version of the /openconfig-unione/platform/component/state/enumerated YANG schema element.
type Platform_Component_EnumeratedAny struct {
	ygot.NodePath
}

// Platform_Component_Power represents the /openconfig-unione/platform/component/state/power YANG schema element.
type Platform_Component_Power struct {
	ygot.NodePath
}

// Platform_Component_PowerAny represents the wildcard version of the /openconfig-unione/platform/component/state/power YANG schema element.
type Platform_Component_PowerAny struct {
	ygot.NodePath
}

// Platform_Component_R1 represents the /openconfig-unione/platform/component/state/r1 YANG schema element.
type Platform_Component_R1 struct {
	ygot.NodePath
}

// Platform_Component_R1Any represents the wildcard version of the /openconfig-unione/platform/component/state/r1 YANG schema element.
type Platform_Component_R1Any struct {
	ygot.NodePath
}

// Platform_Component_Type represents the /openconfig-unione/platform/component/state/type YANG schema element.
type Platform_Component_Type struct {
	ygot.NodePath
}

// Platform_Component_TypeAny represents the wildcard version of the /openconfig-unione/platform/component/state/type YANG schema element.
type Platform_Component_TypeAny struct {
	ygot.NodePath
}

// E1 returns from Platform_Component the path struct for its child "e1".
func (n *Platform_Component) E1() *Platform_Component_E1 {
	return &Platform_Component_E1{
		NodePath: ygot.NewNodePath(
			[]string{"state", "e1"},
			map[string]interface{}{},
			n,
		),
	}
}

// E1 returns from Platform_ComponentAny the path struct for its child "e1".
func (n *Platform_ComponentAny) E1() *Platform_Component_E1Any {
	return &Platform_Component_E1Any{
		NodePath: ygot.NewNodePath(
			[]string{"state", "e1"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enumerated returns from Platform_Component the path struct for its child "enumerated".
func (n *Platform_Component) Enumerated() *Platform_Component_Enumerated {
	return &Platform_Component_Enumerated{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enumerated"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enumerated returns from Platform_ComponentAny the path struct for its child "enumerated".
func (n *Platform_ComponentAny) Enumerated() *Platform_Component_EnumeratedAny {
	return &Platform_Component_EnumeratedAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enumerated"},
			map[string]interface{}{},
			n,
		),
	}
}

// Power returns from Platform_Component the path struct for its child "power".
func (n *Platform_Component) Power() *Platform_Component_Power {
	return &Platform_Component_Power{
		NodePath: ygot.NewNodePath(
			[]string{"state", "power"},
			map[string]interface{}{},
			n,
		),
	}
}

// Power returns from Platform_ComponentAny the path struct for its child "power".
func (n *Platform_ComponentAny) Power() *Platform_Component_PowerAny {
	return &Platform_Component_PowerAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "power"},
			map[string]interface{}{},
			n,
		),
	}
}

// R1 returns from Platform_Component the path struct for its child "r1".
func (n *Platform_Component) R1() *Platform_Component_R1 {
	return &Platform_Component_R1{
		NodePath: ygot.NewNodePath(
			[]string{"state", "r1"},
			map[string]interface{}{},
			n,
		),
	}
}

// R1 returns from Platform_ComponentAny the path struct for its child "r1".
func (n *Platform_ComponentAny) R1() *Platform_Component_R1Any {
	return &Platform_Component_R1Any{
		NodePath: ygot.NewNodePath(
			[]string{"state", "r1"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type returns from Platform_Component the path struct for its child "type".
func (n *Platform_Component) Type() *Platform_Component_Type {
	return &Platform_Component_Type{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type returns from Platform_ComponentAny the path struct for its child "type".
func (n *Platform_ComponentAny) Type() *Platform_Component_TypeAny {
	return &Platform_Component_TypeAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}
