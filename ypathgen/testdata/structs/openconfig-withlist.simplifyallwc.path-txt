/*
Package ocstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- ../testdata/modules/openconfig-withlist.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"github.com/openconfig/ygot/ygot"
)

// DevicePath represents the /device YANG schema element.
type DevicePath struct {
	*ygot.DeviceRootBase
}

// DeviceRoot returns a new path object from which YANG paths can be constructed.
func DeviceRoot(id string) *DevicePath {
	return &DevicePath{ygot.NewDeviceRootBase(id)}
}

// Model (container): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "model"
// Path from root: "/model"
func (n *DevicePath) Model() *ModelPath {
	return &ModelPath{
		NodePath: ygot.NewNodePath(
			[]string{"model"},
			map[string]interface{}{},
			n,
		),
	}
}

// ModelPath represents the /openconfig-withlist/model YANG schema element.
type ModelPath struct {
	*ygot.NodePath
}

// ModelPathAny represents the wildcard version of the /openconfig-withlist/model YANG schema element.
type ModelPathAny struct {
	*ygot.NodePath
}

// MultiKeyAny (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "b/multi-key"
// Path from root: "/model/b/multi-key"
// Key1 (wildcarded): uint32
// Key2 (wildcarded): uint64
func (n *ModelPath) MultiKeyAny() *Model_MultiKeyPathAny {
	return &Model_MultiKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// MultiKeyAny (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "b/multi-key"
// Path from root: "/model/b/multi-key"
// Key1 (wildcarded): uint32
// Key2 (wildcarded): uint64
func (n *ModelPathAny) MultiKeyAny() *Model_MultiKeyPathAny {
	return &Model_MultiKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// MultiKeyAnyKey2 (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "b/multi-key"
// Path from root: "/model/b/multi-key"
// Key1: uint32
// Key2 (wildcarded): uint64
func (n *ModelPath) MultiKeyAnyKey2(Key1 uint32) *Model_MultiKeyPathAny {
	return &Model_MultiKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": Key1, "key2": "*"},
			n,
		),
	}
}

// MultiKeyAnyKey2 (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "b/multi-key"
// Path from root: "/model/b/multi-key"
// Key1: uint32
// Key2 (wildcarded): uint64
func (n *ModelPathAny) MultiKeyAnyKey2(Key1 uint32) *Model_MultiKeyPathAny {
	return &Model_MultiKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": Key1, "key2": "*"},
			n,
		),
	}
}

// MultiKeyAnyKey1 (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "b/multi-key"
// Path from root: "/model/b/multi-key"
// Key1 (wildcarded): uint32
// Key2: uint64
func (n *ModelPath) MultiKeyAnyKey1(Key2 uint64) *Model_MultiKeyPathAny {
	return &Model_MultiKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": "*", "key2": Key2},
			n,
		),
	}
}

// MultiKeyAnyKey1 (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "b/multi-key"
// Path from root: "/model/b/multi-key"
// Key1 (wildcarded): uint32
// Key2: uint64
func (n *ModelPathAny) MultiKeyAnyKey1(Key2 uint64) *Model_MultiKeyPathAny {
	return &Model_MultiKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": "*", "key2": Key2},
			n,
		),
	}
}

// MultiKey (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "b/multi-key"
// Path from root: "/model/b/multi-key"
// Key1: uint32
// Key2: uint64
func (n *ModelPath) MultiKey(Key1 uint32, Key2 uint64) *Model_MultiKeyPath {
	return &Model_MultiKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": Key1, "key2": Key2},
			n,
		),
	}
}

// MultiKey (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "b/multi-key"
// Path from root: "/model/b/multi-key"
// Key1: uint32
// Key2: uint64
func (n *ModelPathAny) MultiKey(Key1 uint32, Key2 uint64) *Model_MultiKeyPathAny {
	return &Model_MultiKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": Key1, "key2": Key2},
			n,
		),
	}
}

// SingleKeyAny (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "a/single-key"
// Path from root: "/model/a/single-key"
// Key (wildcarded): string
func (n *ModelPath) SingleKeyAny() *Model_SingleKeyPathAny {
	return &Model_SingleKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// SingleKeyAny (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "a/single-key"
// Path from root: "/model/a/single-key"
// Key (wildcarded): string
func (n *ModelPathAny) SingleKeyAny() *Model_SingleKeyPathAny {
	return &Model_SingleKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// SingleKey (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "a/single-key"
// Path from root: "/model/a/single-key"
// Key: string
func (n *ModelPath) SingleKey(Key string) *Model_SingleKeyPath {
	return &Model_SingleKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
}

// SingleKey (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "a/single-key"
// Path from root: "/model/a/single-key"
// Key: string
func (n *ModelPathAny) SingleKey(Key string) *Model_SingleKeyPathAny {
	return &Model_SingleKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
}

// SingleKeyOrderedAny (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "c/single-key-ordered"
// Path from root: "/model/c/single-key-ordered"
// Key (wildcarded): string
func (n *ModelPath) SingleKeyOrderedAny() *Model_SingleKeyOrderedPathAny {
	return &Model_SingleKeyOrderedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"c", "single-key-ordered"},
			map[string]interface{}{},
			n,
		),
	}
}

// SingleKeyOrderedAny (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "c/single-key-ordered"
// Path from root: "/model/c/single-key-ordered"
// Key (wildcarded): string
func (n *ModelPathAny) SingleKeyOrderedAny() *Model_SingleKeyOrderedPathAny {
	return &Model_SingleKeyOrderedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"c", "single-key-ordered"},
			map[string]interface{}{},
			n,
		),
	}
}

// SingleKeyOrdered (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "c/single-key-ordered"
// Path from root: "/model/c/single-key-ordered"
// Key: string
func (n *ModelPath) SingleKeyOrdered(Key string) *Model_SingleKeyOrderedPath {
	return &Model_SingleKeyOrderedPath{
		NodePath: ygot.NewNodePath(
			[]string{"c", "single-key-ordered"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
}

// SingleKeyOrdered (list): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "c/single-key-ordered"
// Path from root: "/model/c/single-key-ordered"
// Key: string
func (n *ModelPathAny) SingleKeyOrdered(Key string) *Model_SingleKeyOrderedPathAny {
	return &Model_SingleKeyOrderedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"c", "single-key-ordered"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
}

// Model_MultiKeyPath represents the /openconfig-withlist/model/b/multi-key YANG schema element.
type Model_MultiKeyPath struct {
	*ygot.NodePath
}

// Model_MultiKeyPathAny represents the wildcard version of the /openconfig-withlist/model/b/multi-key YANG schema element.
type Model_MultiKeyPathAny struct {
	*ygot.NodePath
}

// Model_MultiKey_Key1Path represents the /openconfig-withlist/model/b/multi-key/state/key1 YANG schema element.
type Model_MultiKey_Key1Path struct {
	*ygot.NodePath
}

// Model_MultiKey_Key1PathAny represents the wildcard version of the /openconfig-withlist/model/b/multi-key/state/key1 YANG schema element.
type Model_MultiKey_Key1PathAny struct {
	*ygot.NodePath
}

// Model_MultiKey_Key2Path represents the /openconfig-withlist/model/b/multi-key/state/key2 YANG schema element.
type Model_MultiKey_Key2Path struct {
	*ygot.NodePath
}

// Model_MultiKey_Key2PathAny represents the wildcard version of the /openconfig-withlist/model/b/multi-key/state/key2 YANG schema element.
type Model_MultiKey_Key2PathAny struct {
	*ygot.NodePath
}

// Key1 (leaf): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "state/key1"
// Path from root: "/model/b/multi-key/state/key1"
func (n *Model_MultiKeyPath) Key1() *Model_MultiKey_Key1Path {
	return &Model_MultiKey_Key1Path{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key1"},
			map[string]interface{}{},
			n,
		),
	}
}

// Key1 (leaf): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "state/key1"
// Path from root: "/model/b/multi-key/state/key1"
func (n *Model_MultiKeyPathAny) Key1() *Model_MultiKey_Key1PathAny {
	return &Model_MultiKey_Key1PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key1"},
			map[string]interface{}{},
			n,
		),
	}
}

// Key2 (leaf): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "state/key2"
// Path from root: "/model/b/multi-key/state/key2"
func (n *Model_MultiKeyPath) Key2() *Model_MultiKey_Key2Path {
	return &Model_MultiKey_Key2Path{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key2"},
			map[string]interface{}{},
			n,
		),
	}
}

// Key2 (leaf): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "state/key2"
// Path from root: "/model/b/multi-key/state/key2"
func (n *Model_MultiKeyPathAny) Key2() *Model_MultiKey_Key2PathAny {
	return &Model_MultiKey_Key2PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key2"},
			map[string]interface{}{},
			n,
		),
	}
}

// Model_SingleKeyPath represents the /openconfig-withlist/model/a/single-key YANG schema element.
type Model_SingleKeyPath struct {
	*ygot.NodePath
}

// Model_SingleKeyPathAny represents the wildcard version of the /openconfig-withlist/model/a/single-key YANG schema element.
type Model_SingleKeyPathAny struct {
	*ygot.NodePath
}

// Model_SingleKey_KeyPath represents the /openconfig-withlist/model/a/single-key/state/key YANG schema element.
type Model_SingleKey_KeyPath struct {
	*ygot.NodePath
}

// Model_SingleKey_KeyPathAny represents the wildcard version of the /openconfig-withlist/model/a/single-key/state/key YANG schema element.
type Model_SingleKey_KeyPathAny struct {
	*ygot.NodePath
}

// Key (leaf): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "state/key"
// Path from root: "/model/a/single-key/state/key"
func (n *Model_SingleKeyPath) Key() *Model_SingleKey_KeyPath {
	return &Model_SingleKey_KeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key"},
			map[string]interface{}{},
			n,
		),
	}
}

// Key (leaf): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "state/key"
// Path from root: "/model/a/single-key/state/key"
func (n *Model_SingleKeyPathAny) Key() *Model_SingleKey_KeyPathAny {
	return &Model_SingleKey_KeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key"},
			map[string]interface{}{},
			n,
		),
	}
}

// Model_SingleKeyOrderedPath represents the /openconfig-withlist/model/c/single-key-ordered YANG schema element.
type Model_SingleKeyOrderedPath struct {
	*ygot.NodePath
}

// Model_SingleKeyOrderedPathAny represents the wildcard version of the /openconfig-withlist/model/c/single-key-ordered YANG schema element.
type Model_SingleKeyOrderedPathAny struct {
	*ygot.NodePath
}

// Model_SingleKeyOrdered_KeyPath represents the /openconfig-withlist/model/c/single-key-ordered/state/key YANG schema element.
type Model_SingleKeyOrdered_KeyPath struct {
	*ygot.NodePath
}

// Model_SingleKeyOrdered_KeyPathAny represents the wildcard version of the /openconfig-withlist/model/c/single-key-ordered/state/key YANG schema element.
type Model_SingleKeyOrdered_KeyPathAny struct {
	*ygot.NodePath
}

// Key (leaf): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "state/key"
// Path from root: "/model/c/single-key-ordered/state/key"
func (n *Model_SingleKeyOrderedPath) Key() *Model_SingleKeyOrdered_KeyPath {
	return &Model_SingleKeyOrdered_KeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key"},
			map[string]interface{}{},
			n,
		),
	}
}

// Key (leaf): 
// ----------------------------------------
// Defining module: "openconfig-withlist"
// Instantiating module: "openconfig-withlist"
// Path from parent: "state/key"
// Path from root: "/model/c/single-key-ordered/state/key"
func (n *Model_SingleKeyOrderedPathAny) Key() *Model_SingleKeyOrdered_KeyPathAny {
	return &Model_SingleKeyOrdered_KeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key"},
			map[string]interface{}{},
			n,
		),
	}
}
