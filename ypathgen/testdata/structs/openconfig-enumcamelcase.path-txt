/*
Package ocpathstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- ../testdata/modules/openconfig-enumcamelcase.yang
Imported modules were sourced from:
*/
package ocpathstructs

import (
	oc "github.com/openconfig/ygot/ypathgen/testdata/exampleoc"
	"github.com/openconfig/ygot/ygot"
)

// Device represents the /device YANG schema element.
type Device struct {
	*ygot.DeviceRootBase
}

// DeviceRoot returns a new path object from which YANG paths can be constructed.
func DeviceRoot(id string) *Device {
	return &Device{ygot.NewDeviceRootBase(id)}
}

// Foo returns from Device the path struct for its child "foo".
func (n *Device) Foo() *Foo {
	return &Foo{
		NodePath: ygot.NewNodePath(
			[]string{"foo"},
			map[string]interface{}{},
			n,
		),
	}
}

// Foo represents the /openconfig-enumcamelcase/foo YANG schema element.
type Foo struct {
	*ygot.NodePath
}

// FooAny represents the wildcard version of the /openconfig-enumcamelcase/foo YANG schema element.
type FooAny struct {
	*ygot.NodePath
}

// Foo_Bar represents the /openconfig-enumcamelcase/foo/bar YANG schema element.
type Foo_Bar struct {
	*ygot.NodePath
}

// Foo_BarAny represents the wildcard version of the /openconfig-enumcamelcase/foo/bar YANG schema element.
type Foo_BarAny struct {
	*ygot.NodePath
}

// Foo_Baz represents the /openconfig-enumcamelcase/foo/baz YANG schema element.
type Foo_Baz struct {
	*ygot.NodePath
}

// Foo_BazAny represents the wildcard version of the /openconfig-enumcamelcase/foo/baz YANG schema element.
type Foo_BazAny struct {
	*ygot.NodePath
}

// Bar returns from Foo the path struct for its child "bar".
func (n *Foo) Bar() *Foo_Bar {
	return &Foo_Bar{
		NodePath: ygot.NewNodePath(
			[]string{"bar"},
			map[string]interface{}{},
			n,
		),
	}
}

// Bar returns from FooAny the path struct for its child "bar".
func (n *FooAny) Bar() *Foo_BarAny {
	return &Foo_BarAny{
		NodePath: ygot.NewNodePath(
			[]string{"bar"},
			map[string]interface{}{},
			n,
		),
	}
}

// Baz returns from Foo the path struct for its child "baz".
func (n *Foo) Baz() *Foo_Baz {
	return &Foo_Baz{
		NodePath: ygot.NewNodePath(
			[]string{"baz"},
			map[string]interface{}{},
			n,
		),
	}
}

// Baz returns from FooAny the path struct for its child "baz".
func (n *FooAny) Baz() *Foo_BazAny {
	return &Foo_BazAny{
		NodePath: ygot.NewNodePath(
			[]string{"baz"},
			map[string]interface{}{},
			n,
		),
	}
}
