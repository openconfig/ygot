/*
Package ocpathstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- ../testdata/modules/openconfig-simple-target.yang
	- ../testdata/modules/openconfig-simple-augment.yang
Imported modules were sourced from:
*/
package ocpathstructs

import (
	"fmt"

	gpb "github.com/openconfig/gnmi/proto/gnmi"
	oc "github.com/openconfig/ygot/ypathgen/testdata/exampleoc"
	"github.com/openconfig/ygot/ygot"
)

// Resolve is a helper which returns the resolved *gpb.Path of a PathStruct node.
func Resolve(n ygot.PathStruct) (*gpb.Path, []error) {
	n, p, errs := ygot.ResolvePath(n)
	root, ok := n.(*Device)
	if !ok {
		errs = append(errs, fmt.Errorf("Resolve(n ygot.PathStruct): got unexpected root of (type, value) (%T, %v)", n, n))
	}

	if errs != nil {
		return nil, errs
	}
	return &gpb.Path{Target: root.id, Elem: p}, nil
}

// Device represents the /device YANG schema element.
type Device struct {
	ygot.NodePath
	id string
}

func ForDevice(id string) *Device {
	return &Device{id: id}
}

// Native returns from Device the path struct for its child "native".
func (n *Device) Native() *Native {
	return &Native{
		NodePath: ygot.NewNodePath(
			[]string{"native"},
			map[string]interface{}{},
			n,
		),
	}
}

// Target returns from Device the path struct for its child "target".
func (n *Device) Target() *Target {
	return &Target{
		NodePath: ygot.NewNodePath(
			[]string{"target"},
			map[string]interface{}{},
			n,
		),
	}
}

// Native represents the /openconfig-simple-target/native YANG schema element.
type Native struct {
	ygot.NodePath
}

// NativeΩ represents the wildcard version of the /openconfig-simple-target/native YANG schema element.
type NativeΩ struct {
	ygot.NodePath
}

// Native_A represents the /openconfig-simple-target/native/state/a YANG schema element.
type Native_A struct {
	ygot.NodePath
}

// Native_AΩ represents the wildcard version of the /openconfig-simple-target/native/state/a YANG schema element.
type Native_AΩ struct {
	ygot.NodePath
}

// A returns from Native the path struct for its child "a".
func (n *Native) A() *Native_A {
	return &Native_A{
		NodePath: ygot.NewNodePath(
			[]string{"state", "a"},
			map[string]interface{}{},
			n,
		),
	}
}

// Target represents the /openconfig-simple-target/target YANG schema element.
type Target struct {
	ygot.NodePath
}

// TargetΩ represents the wildcard version of the /openconfig-simple-target/target YANG schema element.
type TargetΩ struct {
	ygot.NodePath
}

// Foo returns from Target the path struct for its child "foo".
func (n *Target) Foo() *Target_Foo {
	return &Target_Foo{
		NodePath: ygot.NewNodePath(
			[]string{"foo"},
			map[string]interface{}{},
			n,
		),
	}
}

// Target_Foo represents the /openconfig-simple-target/target/foo YANG schema element.
type Target_Foo struct {
	ygot.NodePath
}

// Target_FooΩ represents the wildcard version of the /openconfig-simple-target/target/foo YANG schema element.
type Target_FooΩ struct {
	ygot.NodePath
}

// Target_Foo_A represents the /openconfig-simple-target/target/foo/state/a YANG schema element.
type Target_Foo_A struct {
	ygot.NodePath
}

// Target_Foo_AΩ represents the wildcard version of the /openconfig-simple-target/target/foo/state/a YANG schema element.
type Target_Foo_AΩ struct {
	ygot.NodePath
}

// A returns from Target_Foo the path struct for its child "a".
func (n *Target_Foo) A() *Target_Foo_A {
	return &Target_Foo_A{
		NodePath: ygot.NewNodePath(
			[]string{"state", "a"},
			map[string]interface{}{},
			n,
		),
	}
}
