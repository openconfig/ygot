/*
Package ocpathstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- ../testdata/modules/openconfig-simple-target.yang
	- ../testdata/modules/openconfig-simple-augment.yang
Imported modules were sourced from:
*/
package ocpathstructs

import (
	oc "github.com/openconfig/ygot/ypathgen/testdata/exampleoc"
	"github.com/openconfig/ygot/ygot"
)

// Device represents the /device YANG schema element.
type Device struct {
	*ygot.DeviceRootBase
}

// DeviceRoot returns a new path object from which YANG paths can be constructed.
func DeviceRoot(id string) *Device {
	return &Device{ygot.NewDeviceRootBase(id)}
}

// PathAndStruct returns the path struct and an empty oc.Device for the path "/device".
func (n *Device) PathAndStruct() (*Device, *oc.Device) {
	return n, &oc.Device{}
}

// Native returns from Device the path struct for its child "native".
func (n *Device) Native() *Native {
	return &Native{
		NodePath: ygot.NewNodePath(
			[]string{"native"},
			map[string]interface{}{},
			n,
		),
	}
}

// Target returns from Device the path struct for its child "target".
func (n *Device) Target() *Target {
	return &Target{
		NodePath: ygot.NewNodePath(
			[]string{"target"},
			map[string]interface{}{},
			n,
		),
	}
}

// Native represents the /openconfig-simple-target/native YANG schema element.
type Native struct {
	*ygot.NodePath
}

// NativeAny represents the wildcard version of the /openconfig-simple-target/native YANG schema element.
type NativeAny struct {
	*ygot.NodePath
}

// PathAndStruct returns the path struct and an empty oc.Native for the path "/openconfig-simple-target/native".
func (n *Native) PathAndStruct() (*Native, *oc.Native) {
	return n, &oc.Native{}
}

// PathAndStruct returns the wildcard path struct and an empty oc.Native for the path "/openconfig-simple-target/native".
func (n *NativeAny) PathAndStruct() (*NativeAny, *oc.Native) {
	return n, &oc.Native{}
}

// Native_A represents the /openconfig-simple-target/native/state/a YANG schema element.
type Native_A struct {
	*ygot.NodePath
}

// Native_AAny represents the wildcard version of the /openconfig-simple-target/native/state/a YANG schema element.
type Native_AAny struct {
	*ygot.NodePath
}

// A returns from Native the path struct for its child "a".
func (n *Native) A() *Native_A {
	return &Native_A{
		NodePath: ygot.NewNodePath(
			[]string{"state", "a"},
			map[string]interface{}{},
			n,
		),
	}
}

// A returns from NativeAny the path struct for its child "a".
func (n *NativeAny) A() *Native_AAny {
	return &Native_AAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "a"},
			map[string]interface{}{},
			n,
		),
	}
}

// Target represents the /openconfig-simple-target/target YANG schema element.
type Target struct {
	*ygot.NodePath
}

// TargetAny represents the wildcard version of the /openconfig-simple-target/target YANG schema element.
type TargetAny struct {
	*ygot.NodePath
}

// PathAndStruct returns the path struct and an empty oc.Target for the path "/openconfig-simple-target/target".
func (n *Target) PathAndStruct() (*Target, *oc.Target) {
	return n, &oc.Target{}
}

// PathAndStruct returns the wildcard path struct and an empty oc.Target for the path "/openconfig-simple-target/target".
func (n *TargetAny) PathAndStruct() (*TargetAny, *oc.Target) {
	return n, &oc.Target{}
}

// Foo returns from Target the path struct for its child "foo".
func (n *Target) Foo() *Target_Foo {
	return &Target_Foo{
		NodePath: ygot.NewNodePath(
			[]string{"foo"},
			map[string]interface{}{},
			n,
		),
	}
}

// Foo returns from TargetAny the path struct for its child "foo".
func (n *TargetAny) Foo() *Target_FooAny {
	return &Target_FooAny{
		NodePath: ygot.NewNodePath(
			[]string{"foo"},
			map[string]interface{}{},
			n,
		),
	}
}

// Target_Foo represents the /openconfig-simple-target/target/foo YANG schema element.
type Target_Foo struct {
	*ygot.NodePath
}

// Target_FooAny represents the wildcard version of the /openconfig-simple-target/target/foo YANG schema element.
type Target_FooAny struct {
	*ygot.NodePath
}

// PathAndStruct returns the path struct and an empty oc.Target_Foo for the path "/openconfig-simple-target/target/foo".
func (n *Target_Foo) PathAndStruct() (*Target_Foo, *oc.Target_Foo) {
	return n, &oc.Target_Foo{}
}

// PathAndStruct returns the wildcard path struct and an empty oc.Target_Foo for the path "/openconfig-simple-target/target/foo".
func (n *Target_FooAny) PathAndStruct() (*Target_FooAny, *oc.Target_Foo) {
	return n, &oc.Target_Foo{}
}

// Target_Foo_A represents the /openconfig-simple-target/target/foo/state/a YANG schema element.
type Target_Foo_A struct {
	*ygot.NodePath
}

// Target_Foo_AAny represents the wildcard version of the /openconfig-simple-target/target/foo/state/a YANG schema element.
type Target_Foo_AAny struct {
	*ygot.NodePath
}

// A returns from Target_Foo the path struct for its child "a".
func (n *Target_Foo) A() *Target_Foo_A {
	return &Target_Foo_A{
		NodePath: ygot.NewNodePath(
			[]string{"state", "a"},
			map[string]interface{}{},
			n,
		),
	}
}

// A returns from Target_FooAny the path struct for its child "a".
func (n *Target_FooAny) A() *Target_Foo_AAny {
	return &Target_Foo_AAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "a"},
			map[string]interface{}{},
			n,
		),
	}
}
