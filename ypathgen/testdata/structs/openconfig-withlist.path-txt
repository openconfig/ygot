/*
Package ocpathstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- ../testdata/modules/openconfig-withlist.yang
Imported modules were sourced from:
*/
package ocpathstructs

import (
	"fmt"

	gpb "github.com/openconfig/gnmi/proto/gnmi"
	oc "github.com/openconfig/ygot/ypathgen/testdata/exampleoc"
	"github.com/openconfig/ygot/ygot"
)

// Resolve is a helper which returns the resolved *gpb.Path of a PathStruct node.
func Resolve(n ygot.PathStruct) (*gpb.Path, []error) {
	n, p, errs := ygot.ResolvePath(n)
	root, ok := n.(*Device)
	if !ok {
		errs = append(errs, fmt.Errorf("Resolve(n ygot.PathStruct): got unexpected root of (type, value) (%T, %v)", n, n))
	}

	if errs != nil {
		return nil, errs
	}
	return &gpb.Path{Target: root.id, Elem: p}, nil
}

// Device represents the /device YANG schema element.
type Device struct {
	ygot.NodePath
	id string
}

func ForDevice(id string) *Device {
	return &Device{id: id}
}

// Model returns from Device the path struct for its child "model".
func (n *Device) Model() *Model {
	return &Model{
		NodePath: ygot.NewNodePath(
			[]string{"model"},
			map[string]interface{}{},
			n,
		),
	}
}

// Model represents the /openconfig-withlist/model YANG schema element.
type Model struct {
	ygot.NodePath
}

// ModelΩ represents the wildcard version of the /openconfig-withlist/model YANG schema element.
type ModelΩ struct {
	ygot.NodePath
}

// MultiKey returns from Model the path struct for its child "multi-key".
func (n *Model) MultiKey(Key1 uint32, Key2 uint64) *Model_MultiKey {
	return &Model_MultiKey{
		NodePath: ygot.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": Key1, "key2": Key2},
			n,
		),
	}
}

// SingleKey returns from Model the path struct for its child "single-key".
func (n *Model) SingleKey(Key string) *Model_SingleKey {
	return &Model_SingleKey{
		NodePath: ygot.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
}

// Model_MultiKey represents the /openconfig-withlist/model/b/multi-key YANG schema element.
type Model_MultiKey struct {
	ygot.NodePath
}

// Model_MultiKeyΩ represents the wildcard version of the /openconfig-withlist/model/b/multi-key YANG schema element.
type Model_MultiKeyΩ struct {
	ygot.NodePath
}

// Model_MultiKey_Key1 represents the /openconfig-withlist/model/b/multi-key/state/key1 YANG schema element.
type Model_MultiKey_Key1 struct {
	ygot.NodePath
}

// Model_MultiKey_Key1Ω represents the wildcard version of the /openconfig-withlist/model/b/multi-key/state/key1 YANG schema element.
type Model_MultiKey_Key1Ω struct {
	ygot.NodePath
}

// Model_MultiKey_Key2 represents the /openconfig-withlist/model/b/multi-key/state/key2 YANG schema element.
type Model_MultiKey_Key2 struct {
	ygot.NodePath
}

// Model_MultiKey_Key2Ω represents the wildcard version of the /openconfig-withlist/model/b/multi-key/state/key2 YANG schema element.
type Model_MultiKey_Key2Ω struct {
	ygot.NodePath
}

// Key1 returns from Model_MultiKey the path struct for its child "key1".
func (n *Model_MultiKey) Key1() *Model_MultiKey_Key1 {
	return &Model_MultiKey_Key1{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key1"},
			map[string]interface{}{},
			n,
		),
	}
}

// Key2 returns from Model_MultiKey the path struct for its child "key2".
func (n *Model_MultiKey) Key2() *Model_MultiKey_Key2 {
	return &Model_MultiKey_Key2{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key2"},
			map[string]interface{}{},
			n,
		),
	}
}

// Model_SingleKey represents the /openconfig-withlist/model/a/single-key YANG schema element.
type Model_SingleKey struct {
	ygot.NodePath
}

// Model_SingleKeyΩ represents the wildcard version of the /openconfig-withlist/model/a/single-key YANG schema element.
type Model_SingleKeyΩ struct {
	ygot.NodePath
}

// Model_SingleKey_Key represents the /openconfig-withlist/model/a/single-key/state/key YANG schema element.
type Model_SingleKey_Key struct {
	ygot.NodePath
}

// Model_SingleKey_KeyΩ represents the wildcard version of the /openconfig-withlist/model/a/single-key/state/key YANG schema element.
type Model_SingleKey_KeyΩ struct {
	ygot.NodePath
}

// Key returns from Model_SingleKey the path struct for its child "key".
func (n *Model_SingleKey) Key() *Model_SingleKey_Key {
	return &Model_SingleKey_Key{
		NodePath: ygot.NewNodePath(
			[]string{"state", "key"},
			map[string]interface{}{},
			n,
		),
	}
}
