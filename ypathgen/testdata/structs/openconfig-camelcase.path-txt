/*
Package ocpathstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- ../testdata/modules/openconfig-camelcase.yang
Imported modules were sourced from:
*/
package ocpathstructs

import (
	"fmt"

	gpb "github.com/openconfig/gnmi/proto/gnmi"
	oc "github.com/openconfig/ygot/ypathgen/testdata/exampleoc"
	"github.com/openconfig/ygot/ygot"
)

// Resolve is a helper which returns the resolved *gpb.Path of a PathStruct node.
func Resolve(n ygot.PathStruct) (*gpb.Path, []error) {
	n, p, errs := ygot.ResolvePath(n)
	root, ok := n.(*Device)
	if !ok {
		errs = append(errs, fmt.Errorf("Resolve(n ygot.PathStruct): got unexpected root of (type, value) (%T, %v)", n, n))
	}

	if errs != nil {
		return nil, errs
	}
	return &gpb.Path{Target: root.id, Elem: p}, nil
}

// BGP represents the /openconfig-camelcase/bgp YANG schema element.
type BGP struct {
	ygot.NodePath
}

// BGPΩ represents the wildcard version of the /openconfig-camelcase/bgp YANG schema element.
type BGPΩ struct {
	ygot.NodePath
}

// Neighbor returns from BGP the path struct for its child "neighbor".
func (n *BGP) Neighbor(PeerIP string) *BGP_Neighbor {
	return &BGP_Neighbor{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"peer-ip": PeerIP},
			n,
		),
	}
}

// BGP_Neighbor represents the /openconfig-camelcase/bgp/neighbors/neighbor YANG schema element.
type BGP_Neighbor struct {
	ygot.NodePath
}

// BGP_NeighborΩ represents the wildcard version of the /openconfig-camelcase/bgp/neighbors/neighbor YANG schema element.
type BGP_NeighborΩ struct {
	ygot.NodePath
}

// BGP_Neighbor_PeerIP represents the /openconfig-camelcase/bgp/neighbors/neighbor/state/peer-ip YANG schema element.
type BGP_Neighbor_PeerIP struct {
	ygot.NodePath
}

// BGP_Neighbor_PeerIPΩ represents the wildcard version of the /openconfig-camelcase/bgp/neighbors/neighbor/state/peer-ip YANG schema element.
type BGP_Neighbor_PeerIPΩ struct {
	ygot.NodePath
}

// PeerIP returns from BGP_Neighbor the path struct for its child "peer-ip".
func (n *BGP_Neighbor) PeerIP() *BGP_Neighbor_PeerIP {
	return &BGP_Neighbor_PeerIP{
		NodePath: ygot.NewNodePath(
			[]string{"state", "peer-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Device represents the /device YANG schema element.
type Device struct {
	ygot.NodePath
	id string
}

func ForDevice(id string) *Device {
	return &Device{id: id}
}

// BGP returns from Device the path struct for its child "bgp".
func (n *Device) BGP() *BGP {
	return &BGP{
		NodePath: ygot.NewNodePath(
			[]string{"bgp"},
			map[string]interface{}{},
			n,
		),
	}
}
