/*
Package ocpathstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- ../testdata/modules/enum-module.yang
Imported modules were sourced from:
*/
package ocpathstructs

import (
	"fmt"

	gpb "github.com/openconfig/gnmi/proto/gnmi"
	oc "github.com/openconfig/ygot/ypathgen/testdata/exampleoc"
	"github.com/openconfig/ygot/ygot"
)

// Resolve is a helper which returns the resolved *gpb.Path of a PathStruct node.
func Resolve(n ygot.PathStruct) (*gpb.Path, []error) {
	n, p, errs := ygot.ResolvePath(n)
	root, ok := n.(*Device)
	if !ok {
		errs = append(errs, fmt.Errorf("Resolve(n ygot.PathStruct): got unexpected root of (type, value) (%T, %v)", n, n))
	}

	if errs != nil {
		return nil, errs
	}
	return &gpb.Path{Target: root.id, Elem: p}, nil
}

// AList represents the /enum-module/a-lists/a-list YANG schema element.
type AList struct {
	ygot.NodePath
}

// AListΩ represents the wildcard version of the /enum-module/a-lists/a-list YANG schema element.
type AListΩ struct {
	ygot.NodePath
}

// AList_Value represents the /enum-module/a-lists/a-list/state/value YANG schema element.
type AList_Value struct {
	ygot.NodePath
}

// AList_ValueΩ represents the wildcard version of the /enum-module/a-lists/a-list/state/value YANG schema element.
type AList_ValueΩ struct {
	ygot.NodePath
}

// Value returns from AList the path struct for its child "value".
func (n *AList) Value() *AList_Value {
	return &AList_Value{
		NodePath: ygot.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// BList represents the /enum-module/b-lists/b-list YANG schema element.
type BList struct {
	ygot.NodePath
}

// BListΩ represents the wildcard version of the /enum-module/b-lists/b-list YANG schema element.
type BListΩ struct {
	ygot.NodePath
}

// BList_Value represents the /enum-module/b-lists/b-list/state/value YANG schema element.
type BList_Value struct {
	ygot.NodePath
}

// BList_ValueΩ represents the wildcard version of the /enum-module/b-lists/b-list/state/value YANG schema element.
type BList_ValueΩ struct {
	ygot.NodePath
}

// Value returns from BList the path struct for its child "value".
func (n *BList) Value() *BList_Value {
	return &BList_Value{
		NodePath: ygot.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// C represents the /enum-module/c YANG schema element.
type C struct {
	ygot.NodePath
}

// CΩ represents the wildcard version of the /enum-module/c YANG schema element.
type CΩ struct {
	ygot.NodePath
}

// C_Cl represents the /enum-module/c/cl YANG schema element.
type C_Cl struct {
	ygot.NodePath
}

// C_ClΩ represents the wildcard version of the /enum-module/c/cl YANG schema element.
type C_ClΩ struct {
	ygot.NodePath
}

// Cl returns from C the path struct for its child "cl".
func (n *C) Cl() *C_Cl {
	return &C_Cl{
		NodePath: ygot.NewNodePath(
			[]string{"cl"},
			map[string]interface{}{},
			n,
		),
	}
}

// Device represents the /device YANG schema element.
type Device struct {
	ygot.NodePath
	id string
}

func ForDevice(id string) *Device {
	return &Device{id: id}
}

// AList returns from Device the path struct for its child "a-list".
func (n *Device) AList(Value oc.AList_Value_Union) *AList {
	return &AList{
		NodePath: ygot.NewNodePath(
			[]string{"a-lists", "a-list"},
			map[string]interface{}{"value": Value},
			n,
		),
	}
}

// BList returns from Device the path struct for its child "b-list".
func (n *Device) BList(Value oc.BList_Value_Union) *BList {
	return &BList{
		NodePath: ygot.NewNodePath(
			[]string{"b-lists", "b-list"},
			map[string]interface{}{"value": Value},
			n,
		),
	}
}

// C returns from Device the path struct for its child "c".
func (n *Device) C() *C {
	return &C{
		NodePath: ygot.NewNodePath(
			[]string{"c"},
			map[string]interface{}{},
			n,
		),
	}
}

// Parent returns from Device the path struct for its child "parent".
func (n *Device) Parent() *Parent {
	return &Parent{
		NodePath: ygot.NewNodePath(
			[]string{"parent"},
			map[string]interface{}{},
			n,
		),
	}
}

// Parent represents the /enum-module/parent YANG schema element.
type Parent struct {
	ygot.NodePath
}

// ParentΩ represents the wildcard version of the /enum-module/parent YANG schema element.
type ParentΩ struct {
	ygot.NodePath
}

// Child returns from Parent the path struct for its child "child".
func (n *Parent) Child() *Parent_Child {
	return &Parent_Child{
		NodePath: ygot.NewNodePath(
			[]string{"child"},
			map[string]interface{}{},
			n,
		),
	}
}

// Parent_Child represents the /enum-module/parent/child YANG schema element.
type Parent_Child struct {
	ygot.NodePath
}

// Parent_ChildΩ represents the wildcard version of the /enum-module/parent/child YANG schema element.
type Parent_ChildΩ struct {
	ygot.NodePath
}

// Parent_Child_Id represents the /enum-module/parent/child/state/id YANG schema element.
type Parent_Child_Id struct {
	ygot.NodePath
}

// Parent_Child_IdΩ represents the wildcard version of the /enum-module/parent/child/state/id YANG schema element.
type Parent_Child_IdΩ struct {
	ygot.NodePath
}

// Id returns from Parent_Child the path struct for its child "id".
func (n *Parent_Child) Id() *Parent_Child_Id {
	return &Parent_Child_Id{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}
