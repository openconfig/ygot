// openconfig.openconfig_rib_bgp is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - yang/rib/openconfig-rib-bgp.yang
// Include paths:
//   - yang/...

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.2
// source: ribproto/openconfig/openconfig_rib_bgp/openconfig_rib_bgp.proto

package openconfig_rib_bgp

import (
	enums "github.com/openconfig/ygot/demo/protobuf_getting_started/ribproto/openconfig/enums"
	_ "github.com/openconfig/ygot/proto/yext"
	ywrapper "github.com/openconfig/ygot/proto/ywrapper"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BgpRib struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfiSafis       *BgpRib_AfiSafis       `protobuf:"bytes,499663806,opt,name=afi_safis,json=afiSafis,proto3" json:"afi_safis,omitempty"`
	AttrSets       *BgpRib_AttrSets       `protobuf:"bytes,37129268,opt,name=attr_sets,json=attrSets,proto3" json:"attr_sets,omitempty"`
	Communities    *BgpRib_Communities    `protobuf:"bytes,387010942,opt,name=communities,proto3" json:"communities,omitempty"`
	ExtCommunities *BgpRib_ExtCommunities `protobuf:"bytes,52233596,opt,name=ext_communities,json=extCommunities,proto3" json:"ext_communities,omitempty"`
}

func (x *BgpRib) Reset() {
	*x = BgpRib{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib) ProtoMessage() {}

func (x *BgpRib) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib.ProtoReflect.Descriptor instead.
func (*BgpRib) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0}
}

func (x *BgpRib) GetAfiSafis() *BgpRib_AfiSafis {
	if x != nil {
		return x.AfiSafis
	}
	return nil
}

func (x *BgpRib) GetAttrSets() *BgpRib_AttrSets {
	if x != nil {
		return x.AttrSets
	}
	return nil
}

func (x *BgpRib) GetCommunities() *BgpRib_Communities {
	if x != nil {
		return x.Communities
	}
	return nil
}

func (x *BgpRib) GetExtCommunities() *BgpRib_ExtCommunities {
	if x != nil {
		return x.ExtCommunities
	}
	return nil
}

type BgpRib_AfiSafis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfiSafi []*BgpRib_AfiSafis_AfiSafiKey `protobuf:"bytes,24098293,rep,name=afi_safi,json=afiSafi,proto3" json:"afi_safi,omitempty"`
}

func (x *BgpRib_AfiSafis) Reset() {
	*x = BgpRib_AfiSafis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis) ProtoMessage() {}

func (x *BgpRib_AfiSafis) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0}
}

func (x *BgpRib_AfiSafis) GetAfiSafi() []*BgpRib_AfiSafis_AfiSafiKey {
	if x != nil {
		return x.AfiSafi
	}
	return nil
}

type BgpRib_AttrSets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrSet []*BgpRib_AttrSets_AttrSetKey `protobuf:"bytes,497479213,rep,name=attr_set,json=attrSet,proto3" json:"attr_set,omitempty"`
}

func (x *BgpRib_AttrSets) Reset() {
	*x = BgpRib_AttrSets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AttrSets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AttrSets) ProtoMessage() {}

func (x *BgpRib_AttrSets) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AttrSets.ProtoReflect.Descriptor instead.
func (*BgpRib_AttrSets) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 1}
}

func (x *BgpRib_AttrSets) GetAttrSet() []*BgpRib_AttrSets_AttrSetKey {
	if x != nil {
		return x.AttrSet
	}
	return nil
}

type BgpRib_Communities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Community []*BgpRib_Communities_CommunityKey `protobuf:"bytes,514191144,rep,name=community,proto3" json:"community,omitempty"`
}

func (x *BgpRib_Communities) Reset() {
	*x = BgpRib_Communities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_Communities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_Communities) ProtoMessage() {}

func (x *BgpRib_Communities) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_Communities.ProtoReflect.Descriptor instead.
func (*BgpRib_Communities) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 2}
}

func (x *BgpRib_Communities) GetCommunity() []*BgpRib_Communities_CommunityKey {
	if x != nil {
		return x.Community
	}
	return nil
}

type BgpRib_ExtCommunities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtCommunity []*BgpRib_ExtCommunities_ExtCommunityKey `protobuf:"bytes,282427112,rep,name=ext_community,json=extCommunity,proto3" json:"ext_community,omitempty"`
}

func (x *BgpRib_ExtCommunities) Reset() {
	*x = BgpRib_ExtCommunities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_ExtCommunities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_ExtCommunities) ProtoMessage() {}

func (x *BgpRib_ExtCommunities) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_ExtCommunities.ProtoReflect.Descriptor instead.
func (*BgpRib_ExtCommunities) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 3}
}

func (x *BgpRib_ExtCommunities) GetExtCommunity() []*BgpRib_ExtCommunities_ExtCommunityKey {
	if x != nil {
		return x.ExtCommunity
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4Unicast *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast `protobuf:"bytes,512037877,opt,name=ipv4_unicast,json=ipv4Unicast,proto3" json:"ipv4_unicast,omitempty"`
	Ipv6Unicast *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast `protobuf:"bytes,531070027,opt,name=ipv6_unicast,json=ipv6Unicast,proto3" json:"ipv6_unicast,omitempty"`
	State       *BgpRib_AfiSafis_AfiSafi_State       `protobuf:"bytes,502380343,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi) GetIpv4Unicast() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast {
	if x != nil {
		return x.Ipv4Unicast
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi) GetIpv6Unicast() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast {
	if x != nil {
		return x.Ipv6Unicast
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi) GetState() *BgpRib_AfiSafis_AfiSafi_State {
	if x != nil {
		return x.State
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafiKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfiSafiName enums.OpenconfigBgpTypesAFISAFITYPE `protobuf:"varint,1,opt,name=afi_safi_name,json=afiSafiName,proto3,enum=openconfig.enums.OpenconfigBgpTypesAFISAFITYPE" json:"afi_safi_name,omitempty"`
	AfiSafi     *BgpRib_AfiSafis_AfiSafi            `protobuf:"bytes,2,opt,name=afi_safi,json=afiSafi,proto3" json:"afi_safi,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafiKey) Reset() {
	*x = BgpRib_AfiSafis_AfiSafiKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafiKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafiKey) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafiKey) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafiKey.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafiKey) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *BgpRib_AfiSafis_AfiSafiKey) GetAfiSafiName() enums.OpenconfigBgpTypesAFISAFITYPE {
	if x != nil {
		return x.AfiSafiName
	}
	return enums.OpenconfigBgpTypesAFISAFITYPE(0)
}

func (x *BgpRib_AfiSafis_AfiSafiKey) GetAfiSafi() *BgpRib_AfiSafis_AfiSafi {
	if x != nil {
		return x.AfiSafi
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocRib    *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib    `protobuf:"bytes,45315874,opt,name=loc_rib,json=locRib,proto3" json:"loc_rib,omitempty"`
	Neighbors *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors `protobuf:"bytes,495677417,opt,name=neighbors,proto3" json:"neighbors,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast) GetLocRib() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib {
	if x != nil {
		return x.LocRib
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast) GetNeighbors() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocRib    *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib    `protobuf:"bytes,375662204,opt,name=loc_rib,json=locRib,proto3" json:"loc_rib,omitempty"`
	Neighbors *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors `protobuf:"bytes,103263699,opt,name=neighbors,proto3" json:"neighbors,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast) GetLocRib() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib {
	if x != nil {
		return x.LocRib
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast) GetNeighbors() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfiSafiName enums.OpenconfigBgpTypesAFISAFITYPE `protobuf:"varint,473483886,opt,name=afi_safi_name,json=afiSafiName,proto3,enum=openconfig.enums.OpenconfigBgpTypesAFISAFITYPE" json:"afi_safi_name,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_State) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (x *BgpRib_AfiSafis_AfiSafi_State) GetAfiSafiName() enums.OpenconfigBgpTypesAFISAFITYPE {
	if x != nil {
		return x.AfiSafiName
	}
	return enums.OpenconfigBgpTypesAFISAFITYPE(0)
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes `protobuf:"bytes,113460555,opt,name=routes,proto3" json:"routes,omitempty"`
	State  *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_State  `protobuf:"bytes,15975588,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib) GetRoutes() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_State {
	if x != nil {
		return x.State
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbor []*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey `protobuf:"bytes,215432738,rep,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors) GetNeighbor() []*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey `protobuf:"bytes,492966521,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes) GetRoute() []*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_State) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 1}
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State             `protobuf:"bytes,37693051,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes `protobuf:"bytes,531222128,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route) GetUnknownAttributes() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Types that are assignable to Origin:
	//	*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_OriginOpenconfigpolicytypesinstallprotocoltype
	//	*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_OriginString
	Origin isBgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_Origin `protobuf_oneof:"origin"`
	PathId uint64                                                              `protobuf:"varint,3,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Route  *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route            `protobuf:"bytes,4,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (m *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey) GetOrigin() isBgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_Origin {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey) GetOriginOpenconfigpolicytypesinstallprotocoltype() enums.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE {
	if x, ok := x.GetOrigin().(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_OriginOpenconfigpolicytypesinstallprotocoltype); ok {
		return x.OriginOpenconfigpolicytypesinstallprotocoltype
	}
	return enums.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE(0)
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey) GetOriginString() string {
	if x, ok := x.GetOrigin().(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_OriginString); ok {
		return x.OriginString
	}
	return ""
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey) GetRoute() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type isBgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_Origin interface {
	isBgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_Origin()
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_OriginOpenconfigpolicytypesinstallprotocoltype struct {
	OriginOpenconfigpolicytypesinstallprotocoltype enums.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE `protobuf:"varint,521134615,opt,name=origin_openconfigpolicytypesinstallprotocoltype,json=originOpenconfigpolicytypesinstallprotocoltype,proto3,enum=openconfig.enums.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE,oneof"`
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_OriginString struct {
	OriginString string `protobuf:"bytes,77131532,opt,name=origin_string,json=originString,proto3,oneof"`
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_OriginOpenconfigpolicytypesinstallprotocoltype) isBgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_Origin() {
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_OriginString) isBgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_Origin() {
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                           `protobuf:"bytes,249798664,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	CommunityIndex    *ywrapper.UintValue                           `protobuf:"bytes,293088414,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                           `protobuf:"bytes,274430144,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     enums.OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,259513288,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.enums.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                           `protobuf:"bytes,32947458,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	// Types that are assignable to Origin:
	//	*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_OriginOpenconfigpolicytypesinstallprotocoltype
	//	*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_OriginString
	Origin     isBgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin `protobuf_oneof:"origin"`
	PathId     *ywrapper.UintValue                                                    `protobuf:"bytes,346893675,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Prefix     *ywrapper.StringValue                                                  `protobuf:"bytes,242977882,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ValidRoute *ywrapper.BoolValue                                                    `protobuf:"bytes,241493520,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) GetInvalidReason() enums.OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return enums.OpenconfigRibBgpTypesINVALIDROUTEREASON(0)
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (m *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) GetOrigin() isBgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) GetOriginOpenconfigpolicytypesinstallprotocoltype() enums.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE {
	if x, ok := x.GetOrigin().(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_OriginOpenconfigpolicytypesinstallprotocoltype); ok {
		return x.OriginOpenconfigpolicytypesinstallprotocoltype
	}
	return enums.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE(0)
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) GetOriginString() string {
	if x, ok := x.GetOrigin().(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_OriginString); ok {
		return x.OriginString
	}
	return ""
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) GetPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type isBgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin interface {
	isBgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin()
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_OriginOpenconfigpolicytypesinstallprotocoltype struct {
	OriginOpenconfigpolicytypesinstallprotocoltype enums.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE `protobuf:"varint,521134615,opt,name=origin_openconfigpolicytypesinstallprotocoltype,json=originOpenconfigpolicytypesinstallprotocoltype,proto3,enum=openconfig.enums.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE,oneof"`
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_OriginString struct {
	OriginString string `protobuf:"bytes,77131532,opt,name=origin_string,json=originString,proto3,oneof"`
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_OriginOpenconfigpolicytypesinstallprotocoltype) isBgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin() {
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_OriginString) isBgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_Origin() {
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,456853868,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,130829654,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 1, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                      `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 1, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,385524722,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,120572005,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,405222804,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,218987618,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,291030421,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,295340356,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,120172996,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0, 0, 0, 1, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdjRibInPost  *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost  `protobuf:"bytes,278159707,opt,name=adj_rib_in_post,json=adjRibInPost,proto3" json:"adj_rib_in_post,omitempty"`
	AdjRibInPre   *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre   `protobuf:"bytes,72057032,opt,name=adj_rib_in_pre,json=adjRibInPre,proto3" json:"adj_rib_in_pre,omitempty"`
	AdjRibOutPost *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost `protobuf:"bytes,71013918,opt,name=adj_rib_out_post,json=adjRibOutPost,proto3" json:"adj_rib_out_post,omitempty"`
	AdjRibOutPre  *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre  `protobuf:"bytes,27279219,opt,name=adj_rib_out_pre,json=adjRibOutPre,proto3" json:"adj_rib_out_pre,omitempty"`
	State         *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_State         `protobuf:"bytes,364991396,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor) GetAdjRibInPost() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost {
	if x != nil {
		return x.AdjRibInPost
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor) GetAdjRibInPre() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre {
	if x != nil {
		return x.AdjRibInPre
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor) GetAdjRibOutPost() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost {
	if x != nil {
		return x.AdjRibOutPost
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor) GetAdjRibOutPre() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre {
	if x != nil {
		return x.AdjRibOutPre
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_State {
	if x != nil {
		return x.State
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeighborAddress string                                                  `protobuf:"bytes,1,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	Neighbor        *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor `protobuf:"bytes,2,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey) GetNeighborAddress() string {
	if x != nil {
		return x.NeighborAddress
	}
	return ""
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey) GetNeighbor() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes `protobuf:"bytes,368725496,opt,name=routes,proto3" json:"routes,omitempty"`
	State  *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_State  `protobuf:"bytes,520029445,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost) GetRoutes() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_State {
	if x != nil {
		return x.State
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes `protobuf:"bytes,484278557,opt,name=routes,proto3" json:"routes,omitempty"`
	State  *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_State  `protobuf:"bytes,155689186,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre) GetRoutes() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_State {
	if x != nil {
		return x.State
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes `protobuf:"bytes,232858151,opt,name=routes,proto3" json:"routes,omitempty"`
	State  *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_State  `protobuf:"bytes,351165280,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 2}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost) GetRoutes() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_State {
	if x != nil {
		return x.State
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes `protobuf:"bytes,166980896,opt,name=routes,proto3" json:"routes,omitempty"`
	State  *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_State  `protobuf:"bytes,492240813,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 3}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre) GetRoutes() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_State {
	if x != nil {
		return x.State
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeighborAddress *ywrapper.StringValue `protobuf:"bytes,195840746,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_State) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 4}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_State) GetNeighborAddress() *ywrapper.StringValue {
	if x != nil {
		return x.NeighborAddress
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey `protobuf:"bytes,455055402,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes) GetRoute() []*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_State) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 0, 1}
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State             `protobuf:"bytes,437135484,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes `protobuf:"bytes,269146021,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 0, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) GetUnknownAttributes() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string                                                                            `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PathId uint64                                                                            `protobuf:"varint,2,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Route  *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 0, 0, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) GetRoute() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                           `protobuf:"bytes,244992933,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	BestPath          *ywrapper.BoolValue                           `protobuf:"bytes,203523011,opt,name=best_path,json=bestPath,proto3" json:"best_path,omitempty"`
	CommunityIndex    *ywrapper.UintValue                           `protobuf:"bytes,358771729,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                           `protobuf:"bytes,66259831,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     enums.OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,460645909,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.enums.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                           `protobuf:"bytes,79835773,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PathId            *ywrapper.UintValue                           `protobuf:"bytes,240441104,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Prefix            *ywrapper.StringValue                         `protobuf:"bytes,516642455,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ValidRoute        *ywrapper.BoolValue                           `protobuf:"bytes,499095615,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 0, 0, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetBestPath() *ywrapper.BoolValue {
	if x != nil {
		return x.BestPath
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetInvalidReason() enums.OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return enums.OpenconfigRibBgpTypesINVALIDROUTEREASON(0)
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,187117077,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 0, 0, 0, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,354916695,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                                               `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,171128381,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,279121112,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,315340459,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,422278321,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,457911066,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,318891453,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,126537931,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey `protobuf:"bytes,226589255,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 1, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes) GetRoute() []*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_State) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 1, 1}
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State             `protobuf:"bytes,323045233,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes `protobuf:"bytes,315025570,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 1, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) GetUnknownAttributes() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string                                                                           `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PathId uint64                                                                           `protobuf:"varint,2,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Route  *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 1, 0, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) GetRoute() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                           `protobuf:"bytes,424461446,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	CommunityIndex    *ywrapper.UintValue                           `protobuf:"bytes,92330448,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                           `protobuf:"bytes,420559002,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     enums.OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,78393854,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.enums.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                           `protobuf:"bytes,514043992,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PathId            *ywrapper.UintValue                           `protobuf:"bytes,183442669,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Prefix            *ywrapper.StringValue                         `protobuf:"bytes,296493376,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ValidRoute        *ywrapper.BoolValue                           `protobuf:"bytes,75510694,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 1, 0, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetInvalidReason() enums.OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return enums.OpenconfigRibBgpTypesINVALIDROUTEREASON(0)
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,413279402,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 1, 0, 0, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,169365756,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                                              `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,382412224,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,240177787,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,370509874,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,138191596,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,321864911,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,32731914,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,192906418,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey `protobuf:"bytes,182754797,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 2, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes) GetRoute() []*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_State) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 2, 1}
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State             `protobuf:"bytes,386860095,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes `protobuf:"bytes,284206804,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 2, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) GetUnknownAttributes() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string                                                                             `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PathId uint64                                                                             `protobuf:"varint,2,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Route  *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 2, 0, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) GetRoute() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                           `protobuf:"bytes,228232636,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	CommunityIndex    *ywrapper.UintValue                           `protobuf:"bytes,79928330,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                           `protobuf:"bytes,302147348,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     enums.OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,198678492,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.enums.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                           `protobuf:"bytes,40669990,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PathId            *ywrapper.UintValue                           `protobuf:"bytes,180726351,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Prefix            *ywrapper.StringValue                         `protobuf:"bytes,249933630,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ValidRoute        *ywrapper.BoolValue                           `protobuf:"bytes,319876204,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 2, 0, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetInvalidReason() enums.OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return enums.OpenconfigRibBgpTypesINVALIDROUTEREASON(0)
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,334087048,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 2, 0, 0, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,18151714,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 2, 0, 0, 1, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                                                `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 2, 0, 0, 1, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,249311342,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,60516801,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,296337688,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,185414998,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,385325641,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,203526104,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,298931512,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 2, 0, 0, 1, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey `protobuf:"bytes,28417138,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 3, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes) GetRoute() []*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_State) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 3, 1}
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State             `protobuf:"bytes,104939668,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes `protobuf:"bytes,528635933,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 3, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) GetUnknownAttributes() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string                                                                            `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PathId uint64                                                                            `protobuf:"varint,2,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Route  *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 3, 0, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) GetRoute() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                           `protobuf:"bytes,473431773,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	CommunityIndex    *ywrapper.UintValue                           `protobuf:"bytes,391723769,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                           `protobuf:"bytes,86571359,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     enums.OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,421427261,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.enums.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                           `protobuf:"bytes,460533381,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PathId            *ywrapper.UintValue                           `protobuf:"bytes,526541032,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Prefix            *ywrapper.StringValue                         `protobuf:"bytes,224111247,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ValidRoute        *ywrapper.BoolValue                           `protobuf:"bytes,219596615,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 3, 0, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetInvalidReason() enums.OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return enums.OpenconfigRibBgpTypesINVALIDROUTEREASON(0)
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,313014509,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 3, 0, 0, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,366855999,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 3, 0, 0, 1, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                                               `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 3, 0, 0, 1, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,488870837,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,454153744,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,193718131,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,153217753,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,263989522,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,518361493,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,70598403,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 0, 1, 0, 3, 0, 0, 1, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes `protobuf:"bytes,157622369,opt,name=routes,proto3" json:"routes,omitempty"`
	State  *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_State  `protobuf:"bytes,246501702,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib) GetRoutes() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_State {
	if x != nil {
		return x.State
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbor []*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey `protobuf:"bytes,6342216,rep,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors) GetNeighbor() []*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey `protobuf:"bytes,523030147,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes) GetRoute() []*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_State) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 1}
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State             `protobuf:"bytes,147598109,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes `protobuf:"bytes,275474750,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route) GetUnknownAttributes() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Types that are assignable to Origin:
	//	*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_OriginOpenconfigpolicytypesinstallprotocoltype
	//	*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_OriginString
	Origin isBgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_Origin `protobuf_oneof:"origin"`
	PathId uint64                                                              `protobuf:"varint,3,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Route  *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route            `protobuf:"bytes,4,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 0, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (m *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey) GetOrigin() isBgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_Origin {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey) GetOriginOpenconfigpolicytypesinstallprotocoltype() enums.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE {
	if x, ok := x.GetOrigin().(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_OriginOpenconfigpolicytypesinstallprotocoltype); ok {
		return x.OriginOpenconfigpolicytypesinstallprotocoltype
	}
	return enums.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE(0)
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey) GetOriginString() string {
	if x, ok := x.GetOrigin().(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_OriginString); ok {
		return x.OriginString
	}
	return ""
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey) GetRoute() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type isBgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_Origin interface {
	isBgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_Origin()
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_OriginOpenconfigpolicytypesinstallprotocoltype struct {
	OriginOpenconfigpolicytypesinstallprotocoltype enums.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE `protobuf:"varint,465497525,opt,name=origin_openconfigpolicytypesinstallprotocoltype,json=originOpenconfigpolicytypesinstallprotocoltype,proto3,enum=openconfig.enums.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE,oneof"`
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_OriginString struct {
	OriginString string `protobuf:"bytes,376223214,opt,name=origin_string,json=originString,proto3,oneof"`
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_OriginOpenconfigpolicytypesinstallprotocoltype) isBgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_Origin() {
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_OriginString) isBgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_Origin() {
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                           `protobuf:"bytes,55727794,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	CommunityIndex    *ywrapper.UintValue                           `protobuf:"bytes,231701524,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                           `protobuf:"bytes,480504854,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     enums.OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,468268730,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.enums.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                           `protobuf:"bytes,371385156,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	// Types that are assignable to Origin:
	//	*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_OriginOpenconfigpolicytypesinstallprotocoltype
	//	*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_OriginString
	Origin     isBgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin `protobuf_oneof:"origin"`
	PathId     *ywrapper.UintValue                                                    `protobuf:"bytes,347750169,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Prefix     *ywrapper.StringValue                                                  `protobuf:"bytes,369963996,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ValidRoute *ywrapper.BoolValue                                                    `protobuf:"bytes,477283082,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 0, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) GetInvalidReason() enums.OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return enums.OpenconfigRibBgpTypesINVALIDROUTEREASON(0)
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (m *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) GetOrigin() isBgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) GetOriginOpenconfigpolicytypesinstallprotocoltype() enums.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE {
	if x, ok := x.GetOrigin().(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_OriginOpenconfigpolicytypesinstallprotocoltype); ok {
		return x.OriginOpenconfigpolicytypesinstallprotocoltype
	}
	return enums.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE(0)
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) GetOriginString() string {
	if x, ok := x.GetOrigin().(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_OriginString); ok {
		return x.OriginString
	}
	return ""
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) GetPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type isBgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin interface {
	isBgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin()
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_OriginOpenconfigpolicytypesinstallprotocoltype struct {
	OriginOpenconfigpolicytypesinstallprotocoltype enums.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE `protobuf:"varint,465497525,opt,name=origin_openconfigpolicytypesinstallprotocoltype,json=originOpenconfigpolicytypesinstallprotocoltype,proto3,enum=openconfig.enums.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE,oneof"`
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_OriginString struct {
	OriginString string `protobuf:"bytes,376223214,opt,name=origin_string,json=originString,proto3,oneof"`
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_OriginOpenconfigpolicytypesinstallprotocoltype) isBgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin() {
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_OriginString) isBgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_Origin() {
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,255576830,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 0, 0, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,234739392,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 0, 0, 1, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                      `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 0, 0, 1, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,374690980,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,287109503,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,27690414,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,114192680,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,368731227,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,2946390,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,56217726,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 0, 0, 0, 1, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdjRibInPost  *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost  `protobuf:"bytes,388034421,opt,name=adj_rib_in_post,json=adjRibInPost,proto3" json:"adj_rib_in_post,omitempty"`
	AdjRibInPre   *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre   `protobuf:"bytes,118021018,opt,name=adj_rib_in_pre,json=adjRibInPre,proto3" json:"adj_rib_in_pre,omitempty"`
	AdjRibOutPost *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost `protobuf:"bytes,154975084,opt,name=adj_rib_out_post,json=adjRibOutPost,proto3" json:"adj_rib_out_post,omitempty"`
	AdjRibOutPre  *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre  `protobuf:"bytes,521635465,opt,name=adj_rib_out_pre,json=adjRibOutPre,proto3" json:"adj_rib_out_pre,omitempty"`
	State         *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_State         `protobuf:"bytes,327596642,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor) GetAdjRibInPost() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost {
	if x != nil {
		return x.AdjRibInPost
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor) GetAdjRibInPre() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre {
	if x != nil {
		return x.AdjRibInPre
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor) GetAdjRibOutPost() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost {
	if x != nil {
		return x.AdjRibOutPost
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor) GetAdjRibOutPre() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre {
	if x != nil {
		return x.AdjRibOutPre
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_State {
	if x != nil {
		return x.State
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeighborAddress string                                                  `protobuf:"bytes,1,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
	Neighbor        *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor `protobuf:"bytes,2,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey) GetNeighborAddress() string {
	if x != nil {
		return x.NeighborAddress
	}
	return ""
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey) GetNeighbor() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes `protobuf:"bytes,428521470,opt,name=routes,proto3" json:"routes,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost) GetRoutes() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes `protobuf:"bytes,511697299,opt,name=routes,proto3" json:"routes,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre) GetRoutes() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes `protobuf:"bytes,69616817,opt,name=routes,proto3" json:"routes,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 2}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost) GetRoutes() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes `protobuf:"bytes,395325794,opt,name=routes,proto3" json:"routes,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 3}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre) GetRoutes() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeighborAddress *ywrapper.StringValue `protobuf:"bytes,156719128,opt,name=neighbor_address,json=neighborAddress,proto3" json:"neighbor_address,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_State) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 4}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_State) GetNeighborAddress() *ywrapper.StringValue {
	if x != nil {
		return x.NeighborAddress
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey `protobuf:"bytes,496468540,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes) GetRoute() []*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State             `protobuf:"bytes,266961030,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes `protobuf:"bytes,424914787,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 0, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route) GetUnknownAttributes() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string                                                                            `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PathId uint64                                                                            `protobuf:"varint,2,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Route  *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 0, 0, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey) GetRoute() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                           `protobuf:"bytes,504849551,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	BestPath          *ywrapper.BoolValue                           `protobuf:"bytes,468339177,opt,name=best_path,json=bestPath,proto3" json:"best_path,omitempty"`
	CommunityIndex    *ywrapper.UintValue                           `protobuf:"bytes,171125135,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                           `protobuf:"bytes,7913045,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     enums.OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,259373607,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.enums.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                           `protobuf:"bytes,136270487,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PathId            *ywrapper.UintValue                           `protobuf:"bytes,7075150,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Prefix            *ywrapper.StringValue                         `protobuf:"bytes,422599417,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ValidRoute        *ywrapper.BoolValue                           `protobuf:"bytes,260669065,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 0, 0, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetBestPath() *ywrapper.BoolValue {
	if x != nil {
		return x.BestPath
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetInvalidReason() enums.OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return enums.OpenconfigRibBgpTypesINVALIDROUTEREASON(0)
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,317388287,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 0, 0, 0, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,118796089,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                                               `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,54393615,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,169889394,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,185291421,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,504424471,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,266792960,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,367993167,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,399407245,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey `protobuf:"bytes,133139169,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 1, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes) GetRoute() []*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State             `protobuf:"bytes,194333267,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes `protobuf:"bytes,193894184,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 1, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route) GetUnknownAttributes() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string                                                                           `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PathId uint64                                                                           `protobuf:"varint,2,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Route  *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 1, 0, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey) GetRoute() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                           `protobuf:"bytes,325821312,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	CommunityIndex    *ywrapper.UintValue                           `protobuf:"bytes,193508550,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                           `protobuf:"bytes,268288936,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     enums.OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,315246608,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.enums.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                           `protobuf:"bytes,295605322,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PathId            *ywrapper.UintValue                           `protobuf:"bytes,529501123,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Prefix            *ywrapper.StringValue                         `protobuf:"bytes,515686418,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ValidRoute        *ywrapper.BoolValue                           `protobuf:"bytes,109437464,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 1, 0, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetInvalidReason() enums.OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return enums.OpenconfigRibBgpTypesINVALIDROUTEREASON(0)
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,77233348,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 1, 0, 0, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,148066238,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                                              `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,182315786,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,279191933,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,536060284,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,275590282,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,18215245,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,206231068,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,407111996,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey `protobuf:"bytes,412928307,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 2, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes) GetRoute() []*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State             `protobuf:"bytes,115212013,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes `protobuf:"bytes,9623054,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 2, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route) GetUnknownAttributes() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string                                                                             `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PathId uint64                                                                             `protobuf:"varint,2,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Route  *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 2, 0, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey) GetRoute() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                           `protobuf:"bytes,334431074,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	CommunityIndex    *ywrapper.UintValue                           `protobuf:"bytes,397198180,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                           `protobuf:"bytes,96622054,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     enums.OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,28268554,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.enums.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                           `protobuf:"bytes,137581780,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PathId            *ywrapper.UintValue                           `protobuf:"bytes,138652777,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Prefix            *ywrapper.StringValue                         `protobuf:"bytes,168687148,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ValidRoute        *ywrapper.BoolValue                           `protobuf:"bytes,24289498,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 2, 0, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetInvalidReason() enums.OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return enums.OpenconfigRibBgpTypesINVALIDROUTEREASON(0)
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,401280942,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 2, 0, 0, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,380755344,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 2, 0, 0, 1, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                                                `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 2, 0, 0, 1, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,193545908,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,69158607,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,419320574,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,87996952,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,68345611,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,341071622,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,214114190,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 2, 0, 0, 1, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey `protobuf:"bytes,349780136,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes) ProtoMessage() {}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 3, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes) GetRoute() []*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey {
	if x != nil {
		return x.Route
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State             `protobuf:"bytes,498799298,opt,name=state,proto3" json:"state,omitempty"`
	UnknownAttributes *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes `protobuf:"bytes,265378175,opt,name=unknown_attributes,json=unknownAttributes,proto3" json:"unknown_attributes,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 3, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route) GetUnknownAttributes() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes {
	if x != nil {
		return x.UnknownAttributes
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string                                                                            `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PathId uint64                                                                            `protobuf:"varint,2,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Route  *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 3, 0, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) GetPathId() uint64 {
	if x != nil {
		return x.PathId
	}
	return 0
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey) GetRoute() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrIndex         *ywrapper.UintValue                           `protobuf:"bytes,439983611,opt,name=attr_index,json=attrIndex,proto3" json:"attr_index,omitempty"`
	CommunityIndex    *ywrapper.UintValue                           `protobuf:"bytes,336473075,opt,name=community_index,json=communityIndex,proto3" json:"community_index,omitempty"`
	ExtCommunityIndex *ywrapper.UintValue                           `protobuf:"bytes,67215777,opt,name=ext_community_index,json=extCommunityIndex,proto3" json:"ext_community_index,omitempty"`
	InvalidReason     enums.OpenconfigRibBgpTypesINVALIDROUTEREASON `protobuf:"varint,333233475,opt,name=invalid_reason,json=invalidReason,proto3,enum=openconfig.enums.OpenconfigRibBgpTypesINVALIDROUTEREASON" json:"invalid_reason,omitempty"`
	LastModified      *ywrapper.UintValue                           `protobuf:"bytes,514066771,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	PathId            *ywrapper.UintValue                           `protobuf:"bytes,424864762,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	Prefix            *ywrapper.StringValue                         `protobuf:"bytes,509858181,opt,name=prefix,proto3" json:"prefix,omitempty"`
	ValidRoute        *ywrapper.BoolValue                           `protobuf:"bytes,213607293,opt,name=valid_route,json=validRoute,proto3" json:"valid_route,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 3, 0, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetAttrIndex() *ywrapper.UintValue {
	if x != nil {
		return x.AttrIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.CommunityIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetExtCommunityIndex() *ywrapper.UintValue {
	if x != nil {
		return x.ExtCommunityIndex
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetInvalidReason() enums.OpenconfigRibBgpTypesINVALIDROUTEREASON {
	if x != nil {
		return x.InvalidReason
	}
	return enums.OpenconfigRibBgpTypesINVALIDROUTEREASON(0)
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetLastModified() *ywrapper.UintValue {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetPathId() *ywrapper.UintValue {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetPrefix() *ywrapper.StringValue {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State) GetValidRoute() *ywrapper.BoolValue {
	if x != nil {
		return x.ValidRoute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnknownAttribute []*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey `protobuf:"bytes,476814115,rep,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 3, 0, 0, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes) GetUnknownAttribute() []*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State `protobuf:"bytes,199872189,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 3, 0, 0, 1, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute) GetState() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State {
	if x != nil {
		return x.State
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrType         uint64                                                                                                               `protobuf:"varint,1,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	UnknownAttribute *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute `protobuf:"bytes,2,opt,name=unknown_attribute,json=unknownAttribute,proto3" json:"unknown_attribute,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 3, 0, 0, 1, 1}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetAttrType() uint64 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey) GetUnknownAttribute() *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute {
	if x != nil {
		return x.UnknownAttribute
	}
	return nil
}

type BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttrLen    *ywrapper.UintValue  `protobuf:"bytes,533051571,opt,name=attr_len,json=attrLen,proto3" json:"attr_len,omitempty"`
	AttrType   *ywrapper.UintValue  `protobuf:"bytes,661030,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	AttrValue  *ywrapper.BytesValue `protobuf:"bytes,197287785,opt,name=attr_value,json=attrValue,proto3" json:"attr_value,omitempty"`
	Extended   *ywrapper.BoolValue  `protobuf:"bytes,224135027,opt,name=extended,proto3" json:"extended,omitempty"`
	Optional   *ywrapper.BoolValue  `protobuf:"bytes,124030204,opt,name=optional,proto3" json:"optional,omitempty"`
	Partial    *ywrapper.BoolValue  `protobuf:"bytes,155112219,opt,name=partial,proto3" json:"partial,omitempty"`
	Transitive *ywrapper.BoolValue  `protobuf:"bytes,39114025,opt,name=transitive,proto3" json:"transitive,omitempty"`
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) Reset() {
	*x = BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoMessage() {
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 0, 0, 1, 1, 0, 3, 0, 0, 1, 0, 0}
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrLen() *ywrapper.UintValue {
	if x != nil {
		return x.AttrLen
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrType() *ywrapper.UintValue {
	if x != nil {
		return x.AttrType
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetAttrValue() *ywrapper.BytesValue {
	if x != nil {
		return x.AttrValue
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetExtended() *ywrapper.BoolValue {
	if x != nil {
		return x.Extended
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetOptional() *ywrapper.BoolValue {
	if x != nil {
		return x.Optional
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetPartial() *ywrapper.BoolValue {
	if x != nil {
		return x.Partial
	}
	return nil
}

func (x *BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State) GetTransitive() *ywrapper.BoolValue {
	if x != nil {
		return x.Transitive
	}
	return nil
}

type BgpRib_AttrSets_AttrSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aggregator *BgpRib_AttrSets_AttrSet_Aggregator `protobuf:"bytes,137048699,opt,name=aggregator,proto3" json:"aggregator,omitempty"`
	AsPath     *BgpRib_AttrSets_AttrSet_AsPath     `protobuf:"bytes,210884328,opt,name=as_path,json=asPath,proto3" json:"as_path,omitempty"`
	As4Path    *BgpRib_AttrSets_AttrSet_As4Path    `protobuf:"bytes,355590116,opt,name=as4_path,json=as4Path,proto3" json:"as4_path,omitempty"`
	State      *BgpRib_AttrSets_AttrSet_State      `protobuf:"bytes,355687167,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BgpRib_AttrSets_AttrSet) Reset() {
	*x = BgpRib_AttrSets_AttrSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AttrSets_AttrSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AttrSets_AttrSet) ProtoMessage() {}

func (x *BgpRib_AttrSets_AttrSet) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AttrSets_AttrSet.ProtoReflect.Descriptor instead.
func (*BgpRib_AttrSets_AttrSet) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *BgpRib_AttrSets_AttrSet) GetAggregator() *BgpRib_AttrSets_AttrSet_Aggregator {
	if x != nil {
		return x.Aggregator
	}
	return nil
}

func (x *BgpRib_AttrSets_AttrSet) GetAsPath() *BgpRib_AttrSets_AttrSet_AsPath {
	if x != nil {
		return x.AsPath
	}
	return nil
}

func (x *BgpRib_AttrSets_AttrSet) GetAs4Path() *BgpRib_AttrSets_AttrSet_As4Path {
	if x != nil {
		return x.As4Path
	}
	return nil
}

func (x *BgpRib_AttrSets_AttrSet) GetState() *BgpRib_AttrSets_AttrSet_State {
	if x != nil {
		return x.State
	}
	return nil
}

type BgpRib_AttrSets_AttrSetKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index   uint64                   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	AttrSet *BgpRib_AttrSets_AttrSet `protobuf:"bytes,2,opt,name=attr_set,json=attrSet,proto3" json:"attr_set,omitempty"`
}

func (x *BgpRib_AttrSets_AttrSetKey) Reset() {
	*x = BgpRib_AttrSets_AttrSetKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AttrSets_AttrSetKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AttrSets_AttrSetKey) ProtoMessage() {}

func (x *BgpRib_AttrSets_AttrSetKey) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AttrSets_AttrSetKey.ProtoReflect.Descriptor instead.
func (*BgpRib_AttrSets_AttrSetKey) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *BgpRib_AttrSets_AttrSetKey) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BgpRib_AttrSets_AttrSetKey) GetAttrSet() *BgpRib_AttrSets_AttrSet {
	if x != nil {
		return x.AttrSet
	}
	return nil
}

type BgpRib_AttrSets_AttrSet_Aggregator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *BgpRib_AttrSets_AttrSet_Aggregator_State `protobuf:"bytes,418162597,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BgpRib_AttrSets_AttrSet_Aggregator) Reset() {
	*x = BgpRib_AttrSets_AttrSet_Aggregator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AttrSets_AttrSet_Aggregator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AttrSets_AttrSet_Aggregator) ProtoMessage() {}

func (x *BgpRib_AttrSets_AttrSet_Aggregator) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AttrSets_AttrSet_Aggregator.ProtoReflect.Descriptor instead.
func (*BgpRib_AttrSets_AttrSet_Aggregator) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *BgpRib_AttrSets_AttrSet_Aggregator) GetState() *BgpRib_AttrSets_AttrSet_Aggregator_State {
	if x != nil {
		return x.State
	}
	return nil
}

type BgpRib_AttrSets_AttrSet_As4Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segment []*BgpRib_AttrSets_AttrSet_As4Path_Segment `protobuf:"bytes,492891894,rep,name=segment,proto3" json:"segment,omitempty"`
}

func (x *BgpRib_AttrSets_AttrSet_As4Path) Reset() {
	*x = BgpRib_AttrSets_AttrSet_As4Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AttrSets_AttrSet_As4Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AttrSets_AttrSet_As4Path) ProtoMessage() {}

func (x *BgpRib_AttrSets_AttrSet_As4Path) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AttrSets_AttrSet_As4Path.ProtoReflect.Descriptor instead.
func (*BgpRib_AttrSets_AttrSet_As4Path) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

func (x *BgpRib_AttrSets_AttrSet_As4Path) GetSegment() []*BgpRib_AttrSets_AttrSet_As4Path_Segment {
	if x != nil {
		return x.Segment
	}
	return nil
}

type BgpRib_AttrSets_AttrSet_AsPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segment []*BgpRib_AttrSets_AttrSet_AsPath_Segment `protobuf:"bytes,268345330,rep,name=segment,proto3" json:"segment,omitempty"`
}

func (x *BgpRib_AttrSets_AttrSet_AsPath) Reset() {
	*x = BgpRib_AttrSets_AttrSet_AsPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AttrSets_AttrSet_AsPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AttrSets_AttrSet_AsPath) ProtoMessage() {}

func (x *BgpRib_AttrSets_AttrSet_AsPath) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AttrSets_AttrSet_AsPath.ProtoReflect.Descriptor instead.
func (*BgpRib_AttrSets_AttrSet_AsPath) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 2}
}

func (x *BgpRib_AttrSets_AttrSet_AsPath) GetSegment() []*BgpRib_AttrSets_AttrSet_AsPath_Segment {
	if x != nil {
		return x.Segment
	}
	return nil
}

type BgpRib_AttrSets_AttrSet_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aigp            *ywrapper.UintValue                       `protobuf:"bytes,363380265,opt,name=aigp,proto3" json:"aigp,omitempty"`
	AtomicAggregate *ywrapper.BoolValue                       `protobuf:"bytes,20428863,opt,name=atomic_aggregate,json=atomicAggregate,proto3" json:"atomic_aggregate,omitempty"`
	ClusterList     []*ywrapper.StringValue                   `protobuf:"bytes,312146437,rep,name=cluster_list,json=clusterList,proto3" json:"cluster_list,omitempty"`
	Index           *ywrapper.UintValue                       `protobuf:"bytes,515942798,opt,name=index,proto3" json:"index,omitempty"`
	LocalPref       *ywrapper.UintValue                       `protobuf:"bytes,525049791,opt,name=local_pref,json=localPref,proto3" json:"local_pref,omitempty"`
	Med             *ywrapper.UintValue                       `protobuf:"bytes,251657528,opt,name=med,proto3" json:"med,omitempty"`
	NextHop         *ywrapper.StringValue                     `protobuf:"bytes,447040595,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	Origin          enums.OpenconfigBgpTypesBgpOriginAttrType `protobuf:"varint,65205360,opt,name=origin,proto3,enum=openconfig.enums.OpenconfigBgpTypesBgpOriginAttrType" json:"origin,omitempty"`
	OriginatorId    *ywrapper.StringValue                     `protobuf:"bytes,64713458,opt,name=originator_id,json=originatorId,proto3" json:"originator_id,omitempty"`
}

func (x *BgpRib_AttrSets_AttrSet_State) Reset() {
	*x = BgpRib_AttrSets_AttrSet_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AttrSets_AttrSet_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AttrSets_AttrSet_State) ProtoMessage() {}

func (x *BgpRib_AttrSets_AttrSet_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AttrSets_AttrSet_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AttrSets_AttrSet_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 3}
}

func (x *BgpRib_AttrSets_AttrSet_State) GetAigp() *ywrapper.UintValue {
	if x != nil {
		return x.Aigp
	}
	return nil
}

func (x *BgpRib_AttrSets_AttrSet_State) GetAtomicAggregate() *ywrapper.BoolValue {
	if x != nil {
		return x.AtomicAggregate
	}
	return nil
}

func (x *BgpRib_AttrSets_AttrSet_State) GetClusterList() []*ywrapper.StringValue {
	if x != nil {
		return x.ClusterList
	}
	return nil
}

func (x *BgpRib_AttrSets_AttrSet_State) GetIndex() *ywrapper.UintValue {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *BgpRib_AttrSets_AttrSet_State) GetLocalPref() *ywrapper.UintValue {
	if x != nil {
		return x.LocalPref
	}
	return nil
}

func (x *BgpRib_AttrSets_AttrSet_State) GetMed() *ywrapper.UintValue {
	if x != nil {
		return x.Med
	}
	return nil
}

func (x *BgpRib_AttrSets_AttrSet_State) GetNextHop() *ywrapper.StringValue {
	if x != nil {
		return x.NextHop
	}
	return nil
}

func (x *BgpRib_AttrSets_AttrSet_State) GetOrigin() enums.OpenconfigBgpTypesBgpOriginAttrType {
	if x != nil {
		return x.Origin
	}
	return enums.OpenconfigBgpTypesBgpOriginAttrType(0)
}

func (x *BgpRib_AttrSets_AttrSet_State) GetOriginatorId() *ywrapper.StringValue {
	if x != nil {
		return x.OriginatorId
	}
	return nil
}

type BgpRib_AttrSets_AttrSet_Aggregator_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *ywrapper.StringValue `protobuf:"bytes,534738928,opt,name=address,proto3" json:"address,omitempty"`
	As      *ywrapper.UintValue   `protobuf:"bytes,22493040,opt,name=as,proto3" json:"as,omitempty"`
	As4     *ywrapper.UintValue   `protobuf:"bytes,206325092,opt,name=as4,proto3" json:"as4,omitempty"`
}

func (x *BgpRib_AttrSets_AttrSet_Aggregator_State) Reset() {
	*x = BgpRib_AttrSets_AttrSet_Aggregator_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AttrSets_AttrSet_Aggregator_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AttrSets_AttrSet_Aggregator_State) ProtoMessage() {}

func (x *BgpRib_AttrSets_AttrSet_Aggregator_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AttrSets_AttrSet_Aggregator_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AttrSets_AttrSet_Aggregator_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 0, 0}
}

func (x *BgpRib_AttrSets_AttrSet_Aggregator_State) GetAddress() *ywrapper.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *BgpRib_AttrSets_AttrSet_Aggregator_State) GetAs() *ywrapper.UintValue {
	if x != nil {
		return x.As
	}
	return nil
}

func (x *BgpRib_AttrSets_AttrSet_Aggregator_State) GetAs4() *ywrapper.UintValue {
	if x != nil {
		return x.As4
	}
	return nil
}

type BgpRib_AttrSets_AttrSet_As4Path_Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *BgpRib_AttrSets_AttrSet_As4Path_Segment_State `protobuf:"bytes,183426056,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BgpRib_AttrSets_AttrSet_As4Path_Segment) Reset() {
	*x = BgpRib_AttrSets_AttrSet_As4Path_Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AttrSets_AttrSet_As4Path_Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AttrSets_AttrSet_As4Path_Segment) ProtoMessage() {}

func (x *BgpRib_AttrSets_AttrSet_As4Path_Segment) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AttrSets_AttrSet_As4Path_Segment.ProtoReflect.Descriptor instead.
func (*BgpRib_AttrSets_AttrSet_As4Path_Segment) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0}
}

func (x *BgpRib_AttrSets_AttrSet_As4Path_Segment) GetState() *BgpRib_AttrSets_AttrSet_As4Path_Segment_State {
	if x != nil {
		return x.State
	}
	return nil
}

type BgpRib_AttrSets_AttrSet_As4Path_Segment_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member []*ywrapper.UintValue                     `protobuf:"bytes,361324129,rep,name=member,proto3" json:"member,omitempty"`
	Type   enums.OpenconfigBgpTypesAsPathSegmentType `protobuf:"varint,138477295,opt,name=type,proto3,enum=openconfig.enums.OpenconfigBgpTypesAsPathSegmentType" json:"type,omitempty"`
}

func (x *BgpRib_AttrSets_AttrSet_As4Path_Segment_State) Reset() {
	*x = BgpRib_AttrSets_AttrSet_As4Path_Segment_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AttrSets_AttrSet_As4Path_Segment_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AttrSets_AttrSet_As4Path_Segment_State) ProtoMessage() {}

func (x *BgpRib_AttrSets_AttrSet_As4Path_Segment_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AttrSets_AttrSet_As4Path_Segment_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AttrSets_AttrSet_As4Path_Segment_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 1, 0, 0}
}

func (x *BgpRib_AttrSets_AttrSet_As4Path_Segment_State) GetMember() []*ywrapper.UintValue {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *BgpRib_AttrSets_AttrSet_As4Path_Segment_State) GetType() enums.OpenconfigBgpTypesAsPathSegmentType {
	if x != nil {
		return x.Type
	}
	return enums.OpenconfigBgpTypesAsPathSegmentType(0)
}

type BgpRib_AttrSets_AttrSet_AsPath_Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *BgpRib_AttrSets_AttrSet_AsPath_Segment_State `protobuf:"bytes,118106132,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BgpRib_AttrSets_AttrSet_AsPath_Segment) Reset() {
	*x = BgpRib_AttrSets_AttrSet_AsPath_Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AttrSets_AttrSet_AsPath_Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AttrSets_AttrSet_AsPath_Segment) ProtoMessage() {}

func (x *BgpRib_AttrSets_AttrSet_AsPath_Segment) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AttrSets_AttrSet_AsPath_Segment.ProtoReflect.Descriptor instead.
func (*BgpRib_AttrSets_AttrSet_AsPath_Segment) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0}
}

func (x *BgpRib_AttrSets_AttrSet_AsPath_Segment) GetState() *BgpRib_AttrSets_AttrSet_AsPath_Segment_State {
	if x != nil {
		return x.State
	}
	return nil
}

type BgpRib_AttrSets_AttrSet_AsPath_Segment_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member []*ywrapper.UintValue                     `protobuf:"bytes,390574813,rep,name=member,proto3" json:"member,omitempty"`
	Type   enums.OpenconfigBgpTypesAsPathSegmentType `protobuf:"varint,334992795,opt,name=type,proto3,enum=openconfig.enums.OpenconfigBgpTypesAsPathSegmentType" json:"type,omitempty"`
}

func (x *BgpRib_AttrSets_AttrSet_AsPath_Segment_State) Reset() {
	*x = BgpRib_AttrSets_AttrSet_AsPath_Segment_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_AttrSets_AttrSet_AsPath_Segment_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_AttrSets_AttrSet_AsPath_Segment_State) ProtoMessage() {}

func (x *BgpRib_AttrSets_AttrSet_AsPath_Segment_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_AttrSets_AttrSet_AsPath_Segment_State.ProtoReflect.Descriptor instead.
func (*BgpRib_AttrSets_AttrSet_AsPath_Segment_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 1, 0, 2, 0, 0}
}

func (x *BgpRib_AttrSets_AttrSet_AsPath_Segment_State) GetMember() []*ywrapper.UintValue {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *BgpRib_AttrSets_AttrSet_AsPath_Segment_State) GetType() enums.OpenconfigBgpTypesAsPathSegmentType {
	if x != nil {
		return x.Type
	}
	return enums.OpenconfigBgpTypesAsPathSegmentType(0)
}

type BgpRib_Communities_Community struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *BgpRib_Communities_Community_State `protobuf:"bytes,40768834,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BgpRib_Communities_Community) Reset() {
	*x = BgpRib_Communities_Community{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_Communities_Community) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_Communities_Community) ProtoMessage() {}

func (x *BgpRib_Communities_Community) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_Communities_Community.ProtoReflect.Descriptor instead.
func (*BgpRib_Communities_Community) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *BgpRib_Communities_Community) GetState() *BgpRib_Communities_Community_State {
	if x != nil {
		return x.State
	}
	return nil
}

type BgpRib_Communities_CommunityKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index     uint64                        `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Community *BgpRib_Communities_Community `protobuf:"bytes,2,opt,name=community,proto3" json:"community,omitempty"`
}

func (x *BgpRib_Communities_CommunityKey) Reset() {
	*x = BgpRib_Communities_CommunityKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_Communities_CommunityKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_Communities_CommunityKey) ProtoMessage() {}

func (x *BgpRib_Communities_CommunityKey) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_Communities_CommunityKey.ProtoReflect.Descriptor instead.
func (*BgpRib_Communities_CommunityKey) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *BgpRib_Communities_CommunityKey) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BgpRib_Communities_CommunityKey) GetCommunity() *BgpRib_Communities_Community {
	if x != nil {
		return x.Community
	}
	return nil
}

type BgpRib_Communities_Community_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Community []*BgpRib_Communities_Community_State_CommunityUnion `protobuf:"bytes,369233892,rep,name=community,proto3" json:"community,omitempty"`
	Index     *ywrapper.UintValue                                  `protobuf:"bytes,113519803,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *BgpRib_Communities_Community_State) Reset() {
	*x = BgpRib_Communities_Community_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_Communities_Community_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_Communities_Community_State) ProtoMessage() {}

func (x *BgpRib_Communities_Community_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_Communities_Community_State.ProtoReflect.Descriptor instead.
func (*BgpRib_Communities_Community_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

func (x *BgpRib_Communities_Community_State) GetCommunity() []*BgpRib_Communities_Community_State_CommunityUnion {
	if x != nil {
		return x.Community
	}
	return nil
}

func (x *BgpRib_Communities_Community_State) GetIndex() *ywrapper.UintValue {
	if x != nil {
		return x.Index
	}
	return nil
}

type BgpRib_Communities_Community_State_CommunityUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommunityOpenconfigbgptypesbgpwellknownstdcommunity enums.OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY `protobuf:"varint,181609153,opt,name=community_openconfigbgptypesbgpwellknownstdcommunity,json=communityOpenconfigbgptypesbgpwellknownstdcommunity,proto3,enum=openconfig.enums.OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY" json:"community_openconfigbgptypesbgpwellknownstdcommunity,omitempty"`
	CommunityString                                     string                                           `protobuf:"bytes,486091916,opt,name=community_string,json=communityString,proto3" json:"community_string,omitempty"`
	CommunityUint64                                     uint64                                           `protobuf:"varint,61537173,opt,name=community_uint64,json=communityUint64,proto3" json:"community_uint64,omitempty"`
}

func (x *BgpRib_Communities_Community_State_CommunityUnion) Reset() {
	*x = BgpRib_Communities_Community_State_CommunityUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_Communities_Community_State_CommunityUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_Communities_Community_State_CommunityUnion) ProtoMessage() {}

func (x *BgpRib_Communities_Community_State_CommunityUnion) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_Communities_Community_State_CommunityUnion.ProtoReflect.Descriptor instead.
func (*BgpRib_Communities_Community_State_CommunityUnion) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 2, 0, 0, 0}
}

func (x *BgpRib_Communities_Community_State_CommunityUnion) GetCommunityOpenconfigbgptypesbgpwellknownstdcommunity() enums.OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY {
	if x != nil {
		return x.CommunityOpenconfigbgptypesbgpwellknownstdcommunity
	}
	return enums.OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY(0)
}

func (x *BgpRib_Communities_Community_State_CommunityUnion) GetCommunityString() string {
	if x != nil {
		return x.CommunityString
	}
	return ""
}

func (x *BgpRib_Communities_Community_State_CommunityUnion) GetCommunityUint64() uint64 {
	if x != nil {
		return x.CommunityUint64
	}
	return 0
}

type BgpRib_ExtCommunities_ExtCommunity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *BgpRib_ExtCommunities_ExtCommunity_State `protobuf:"bytes,467292802,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *BgpRib_ExtCommunities_ExtCommunity) Reset() {
	*x = BgpRib_ExtCommunities_ExtCommunity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_ExtCommunities_ExtCommunity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_ExtCommunities_ExtCommunity) ProtoMessage() {}

func (x *BgpRib_ExtCommunities_ExtCommunity) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_ExtCommunities_ExtCommunity.ProtoReflect.Descriptor instead.
func (*BgpRib_ExtCommunities_ExtCommunity) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *BgpRib_ExtCommunities_ExtCommunity) GetState() *BgpRib_ExtCommunities_ExtCommunity_State {
	if x != nil {
		return x.State
	}
	return nil
}

type BgpRib_ExtCommunities_ExtCommunityKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index        uint64                              `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	ExtCommunity *BgpRib_ExtCommunities_ExtCommunity `protobuf:"bytes,2,opt,name=ext_community,json=extCommunity,proto3" json:"ext_community,omitempty"`
}

func (x *BgpRib_ExtCommunities_ExtCommunityKey) Reset() {
	*x = BgpRib_ExtCommunities_ExtCommunityKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_ExtCommunities_ExtCommunityKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_ExtCommunities_ExtCommunityKey) ProtoMessage() {}

func (x *BgpRib_ExtCommunities_ExtCommunityKey) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_ExtCommunities_ExtCommunityKey.ProtoReflect.Descriptor instead.
func (*BgpRib_ExtCommunities_ExtCommunityKey) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *BgpRib_ExtCommunities_ExtCommunityKey) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BgpRib_ExtCommunities_ExtCommunityKey) GetExtCommunity() *BgpRib_ExtCommunities_ExtCommunity {
	if x != nil {
		return x.ExtCommunity
	}
	return nil
}

type BgpRib_ExtCommunities_ExtCommunity_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtCommunity []*BgpRib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion `protobuf:"bytes,317762854,rep,name=ext_community,json=extCommunity,proto3" json:"ext_community,omitempty"`
	Index        *ywrapper.UintValue                                           `protobuf:"bytes,174612859,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *BgpRib_ExtCommunities_ExtCommunity_State) Reset() {
	*x = BgpRib_ExtCommunities_ExtCommunity_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_ExtCommunities_ExtCommunity_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_ExtCommunities_ExtCommunity_State) ProtoMessage() {}

func (x *BgpRib_ExtCommunities_ExtCommunity_State) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_ExtCommunities_ExtCommunity_State.ProtoReflect.Descriptor instead.
func (*BgpRib_ExtCommunities_ExtCommunity_State) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0}
}

func (x *BgpRib_ExtCommunities_ExtCommunity_State) GetExtCommunity() []*BgpRib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion {
	if x != nil {
		return x.ExtCommunity
	}
	return nil
}

func (x *BgpRib_ExtCommunities_ExtCommunity_State) GetIndex() *ywrapper.UintValue {
	if x != nil {
		return x.Index
	}
	return nil
}

type BgpRib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtCommunityBytes  []byte `protobuf:"bytes,410295638,opt,name=ext_community_bytes,json=extCommunityBytes,proto3" json:"ext_community_bytes,omitempty"`
	ExtCommunityString string `protobuf:"bytes,123223126,opt,name=ext_community_string,json=extCommunityString,proto3" json:"ext_community_string,omitempty"`
}

func (x *BgpRib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion) Reset() {
	*x = BgpRib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion) ProtoMessage() {}

func (x *BgpRib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion) ProtoReflect() protoreflect.Message {
	mi := &file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion.ProtoReflect.Descriptor instead.
func (*BgpRib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion) Descriptor() ([]byte, []int) {
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP(), []int{0, 3, 0, 0, 0}
}

func (x *BgpRib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion) GetExtCommunityBytes() []byte {
	if x != nil {
		return x.ExtCommunityBytes
	}
	return nil
}

func (x *BgpRib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion) GetExtCommunityString() string {
	if x != nil {
		return x.ExtCommunityString
	}
	return ""
}

var File_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto protoreflect.FileDescriptor

var file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDesc = []byte{
	0x0a, 0x3f, 0x72, 0x69, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1d, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70,
	0x1a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x79, 0x67, 0x6f, 0x74, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2f, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x79, 0x67, 0x6f, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x65, 0x78,
	0x74, 0x2f, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x5e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x79, 0x67, 0x6f, 0x74, 0x2f, 0x64, 0x65, 0x6d, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x67, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x2f, 0x72, 0x69, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0xff, 0x03,
	0x0a, 0x06, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x12, 0x66, 0x0a, 0x09, 0x61, 0x66, 0x69, 0x5f,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x18, 0xbe, 0x87, 0xa1, 0xee, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e,
	0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x42,
	0x15, 0x82, 0x41, 0x12, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x52, 0x08, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x12, 0x65, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0xb4, 0x98,
	0xda, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72,
	0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x42, 0x15, 0x82, 0x41, 0x12, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x52, 0x08, 0x61,
	0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x12, 0x70, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0xfe, 0xa2, 0xc5, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70,
	0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x42, 0x17, 0x82, 0x41, 0x14, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x7d, 0x0a, 0x0f, 0x65, 0x78, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0xfc, 0x8a, 0xf4,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x45, 0x78, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x1b, 0x82, 0x41, 0x18,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x81, 0xd1, 0x03, 0x0a, 0x08, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x12, 0x77, 0x0a, 0x08, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61,
	0x66, 0x69, 0x18, 0xf5, 0xeb, 0xbe, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52,
	0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x4b, 0x65, 0x79, 0x42, 0x1e, 0x82, 0x41, 0x1b, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x52, 0x07, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x1a,
	0x94, 0xce, 0x03, 0x0a, 0x07, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x12, 0x96, 0x01, 0x0a,
	0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0xf5, 0xa7,
	0x94, 0xf4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x42, 0x2b, 0x82, 0x41, 0x28,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x96, 0x01, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0xcb, 0xf8, 0x9d, 0xfd, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70,
	0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x7c,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xb7, 0xee, 0xc6, 0xef, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67,
	0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x24, 0x82, 0x41, 0x21, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xa6, 0xe8, 0x01,
	0x0a, 0x0b, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x9a, 0x01,
	0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x5f, 0x72, 0x69, 0x62, 0x18, 0xa2, 0xee, 0xcd, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62,
	0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x42, 0x33, 0x82,
	0x41, 0x30, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72,
	0x69, 0x62, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x12, 0xa5, 0x01, 0x0a, 0x09, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0xe9, 0xdf, 0xad, 0xec, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62,
	0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x1a, 0xf8, 0x27, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x12, 0xa7, 0x01,
	0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0xcb, 0x8a, 0x8d, 0x36, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x50, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67,
	0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xa4, 0x89, 0xcf, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69,
	0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4c,
	0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x94, 0x25,
	0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x18, 0xf9, 0xa4, 0x88, 0xeb, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x62, 0x67, 0x70,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x1a, 0xb2, 0x1f, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0xbd, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xfb, 0xcc, 0xfc, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67,
	0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xf0, 0x01, 0x0a, 0x12, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0xf0, 0x9c, 0xa7, 0xfd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x68, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52,
	0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x53, 0x82, 0x41, 0x50, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x11, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x96, 0x0b,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x88, 0xc0, 0x8e, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x51, 0x82, 0x41, 0x4e, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74,
	0x72, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x98, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x9e, 0xd9, 0xe0, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xa3, 0x01,
	0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xc0, 0xf1, 0xed, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74,
	0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x11, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0xba, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0xc8, 0xb7, 0xdf, 0x7b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62,
	0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x91, 0x01, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x82, 0xfa, 0xda, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f,
	0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0xa9, 0x01, 0x0a, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x18, 0x97, 0xc4, 0xbf, 0xf8, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x48, 0x00,
	0x52, 0x2e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x73, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x8c, 0xde, 0xe3, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x80, 0x01, 0x0a, 0x07, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0xeb, 0xda, 0xb4, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61,
	0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x7f, 0x0a,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0xda, 0x98, 0xee, 0x73, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x62, 0x67, 0x70,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x8b,
	0x01, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x90,
	0xcc, 0x93, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41,
	0x4f, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69,
	0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x1a, 0xdc, 0x10, 0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x94, 0x02, 0x0a,
	0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x18, 0xec, 0x92, 0xec, 0xd9, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x7c, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x1a, 0xdf, 0x0b, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x85, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xd6, 0x9a, 0xb1, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7f, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52,
	0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6b, 0x82, 0x41,
	0x68, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69,
	0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xc2, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x08, 0x61,
	0x74, 0x74, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0xf2, 0xc7, 0xea, 0xb7, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x6c, 0x65, 0x6e, 0x52, 0x07, 0x61, 0x74,
	0x74, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0xaa, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0xe5, 0x90, 0xbf, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x75, 0x82, 0x41, 0x72, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c,
	0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x94, 0xeb, 0x9c, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x76, 0x82, 0x41, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c,
	0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x18, 0xe2, 0xf8, 0xb5, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x74, 0x82, 0x41, 0x71, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12,
	0xa9, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x95, 0x8b, 0xe3,
	0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x82, 0x41, 0x71,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0xa6, 0x01, 0x0a, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0xc4, 0x92, 0xea, 0x8c, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x73, 0x82, 0x41, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0xae, 0x01, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x18, 0xc4, 0xe3, 0xa6, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x76, 0x82, 0x41, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c,
	0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0xcd, 0x02, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x8c, 0x01,
	0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c,
	0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xa6, 0x01, 0x0a,
	0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x79, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x63,
	0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0x9c, 0x04, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x5f, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x47, 0x82, 0x41, 0x44, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0xa9, 0x01, 0x0a, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x18, 0x97, 0xc4, 0xbf, 0xf8, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c,
	0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x48, 0x00, 0x52,
	0x2e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x73, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x28, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x8c, 0xde, 0xe3, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x61, 0x0a, 0x07, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74,
	0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x05,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52,
	0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x1a, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xd5, 0xbd,
	0x01, 0x0a, 0x09, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0xb7, 0x01, 0x0a,
	0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0xa2, 0xfc, 0xdc, 0x66, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62,
	0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x3e, 0x82, 0x41,
	0x3b, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0x8d, 0xba, 0x01, 0x0a, 0x08, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x12, 0xdd, 0x01, 0x0a, 0x0f, 0x61, 0x64, 0x6a, 0x5f, 0x72, 0x69, 0x62,
	0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0xdb, 0xc2, 0xd1, 0x84, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x62, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62,
	0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62,
	0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69,
	0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e,
	0x50, 0x6f, 0x73, 0x74, 0x12, 0xd8, 0x01, 0x0a, 0x0e, 0x61, 0x64, 0x6a, 0x5f, 0x72, 0x69, 0x62,
	0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x18, 0xc8, 0x81, 0xae, 0x22, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x61, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70,
	0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e,
	0x50, 0x72, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70,
	0x72, 0x65, 0x52, 0x0b, 0x61, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x12,
	0xe0, 0x01, 0x0a, 0x10, 0x61, 0x64, 0x6a, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x6f, 0x75, 0x74, 0x5f,
	0x70, 0x6f, 0x73, 0x74, 0x18, 0x9e, 0xac, 0xee, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67,
	0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x6f, 0x73, 0x74, 0x52, 0x0d, 0x61, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x12, 0xdc, 0x01, 0x0a, 0x0f, 0x61, 0x64, 0x6a, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x6f,
	0x75, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x18, 0xf3, 0xfe, 0x80, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x62, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e,
	0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74,
	0x50, 0x72, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d,
	0x70, 0x72, 0x65, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72,
	0x65, 0x12, 0xbb, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa4, 0xa7, 0x85, 0xae,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x83, 0x2d, 0x0a, 0x0c, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74,
	0x12, 0xdc, 0x01, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0xf8, 0x9b, 0xe9, 0xaf,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a,
	0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12,
	0xd8, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x85, 0x8a, 0xfc, 0xf7, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x68, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f,
	0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69,
	0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x54, 0x82,
	0x41, 0x51, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xaf, 0x29, 0x0a, 0x06, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0xe9, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18,
	0xaa, 0xb0, 0xfe, 0xd8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x72, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x5b, 0x82,
	0x41, 0x58, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x1a, 0xa9, 0x24, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0xf2, 0x01, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xfc, 0xd0, 0xb8, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x75, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e,
	0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50,
	0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69,
	0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0xa5, 0x02, 0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0xa5, 0xaf, 0xab, 0x80, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x81, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62,
	0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62,
	0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e,
	0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xb3, 0x0c, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0xa5, 0x97, 0xe9, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x6c, 0x82, 0x41, 0x69, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x61,
	0x74, 0x74, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xa0, 0x01, 0x0a, 0x09, 0x62, 0x65, 0x73,
	0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0xc3, 0x87, 0x86, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d,
	0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x65, 0x73, 0x74, 0x2d, 0x70, 0x61, 0x74,
	0x68, 0x52, 0x08, 0x62, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0xb3, 0x01, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x91, 0xd8, 0x89, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x71,
	0x82, 0x41, 0x6e, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0xbd, 0x01, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xf7, 0x96, 0xcc, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x75, 0x82, 0x41, 0x72, 0x2f, 0x62, 0x67, 0x70,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x11,
	0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0xd6, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x95, 0xcc, 0xd3, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42,
	0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x62,
	0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0xac, 0x01, 0x0a, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0xfd, 0xe4, 0x88,
	0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61,
	0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x9a, 0x01, 0x0a, 0x07, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x90, 0xae, 0xd3, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70,
	0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06,
	0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x9b, 0x01, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x97, 0xad, 0xad, 0xf6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f,
	0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0xa7, 0x01, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x18, 0xbf, 0xb0, 0xfe, 0xed, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70,
	0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xcc,
	0x13, 0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0xc9, 0x02, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x95, 0xdc, 0x9c, 0x59, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x95, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62,
	0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52,
	0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x80, 0x01, 0x82, 0x41,
	0x7d, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x1a, 0xe3, 0x0d, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0xbd, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xd7, 0xb2, 0x9e, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x98, 0x01, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69,
	0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x87, 0x01, 0x82, 0x41, 0x83, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69,
	0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8e, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0xc4, 0x01, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0xbd, 0xec, 0xcc,
	0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x90, 0x01, 0x82, 0x41, 0x8c,
	0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x6c, 0x65, 0x6e, 0x52, 0x07, 0x61,
	0x74, 0x74, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0xc8, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0xd8, 0x99, 0x8c, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x91, 0x01, 0x82, 0x41, 0x8d, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e,
	0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0xcc, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0xab, 0xed, 0xae, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x92, 0x01, 0x82, 0x41, 0x8e, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f,
	0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0xc6, 0x01, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0xb1, 0xe9,
	0xad, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x90, 0x01, 0x82,
	0x41, 0x8c, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52,
	0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0xc6, 0x01, 0x0a, 0x08, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x9a, 0xd6, 0xac, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x90, 0x01, 0x82, 0x41, 0x8c, 0x01, 0x2f, 0x62, 0x67, 0x70,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x12, 0xc3, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0xbd,
	0xcb, 0x87, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x8f, 0x01,
	0x82, 0x41, 0x8b, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0xcb, 0x01, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0xcb, 0xa1, 0xab, 0x3c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x92, 0x01, 0x82, 0x41, 0x8e, 0x01, 0x2f, 0x62, 0x67, 0x70,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x84, 0x03, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0xa9,
	0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x8b, 0x01, 0x82, 0x41, 0x87, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d,
	0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xc0, 0x01, 0x0a, 0x11, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x92, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41,
	0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0x8c, 0x03,
	0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x7a, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x7c, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x62, 0x67, 0x70,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61,
	0x74, 0x68, 0x49, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62,
	0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52,
	0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0x07, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb8, 0x2b, 0x0a, 0x0b, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62,
	0x49, 0x6e, 0x50, 0x72, 0x65, 0x12, 0xda, 0x01, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x9d, 0x82, 0xf6, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x68, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69,
	0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x42, 0x54, 0x82, 0x41, 0x51, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d,
	0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x12, 0xd5, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe2, 0xc1, 0x9e,
	0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a,
	0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x53,
	0x82, 0x41, 0x50, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xea, 0x27, 0x0a, 0x06, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0xe6, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18,
	0xc7, 0xf4, 0x85, 0x6c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x71, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x5a, 0x82, 0x41, 0x57,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xea,
	0x22, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0xf0, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xf1, 0x8e, 0x85, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa3, 0x02, 0x0a, 0x12,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0xa2, 0xd1, 0x9b, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x80, 0x01, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67,
	0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42,
	0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x11,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x1a, 0x88, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x86, 0x89, 0xb3, 0xca, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x62,
	0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72,
	0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0xb1, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xd0, 0xb3, 0x83, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70,
	0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xbd, 0x01, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x9a, 0xf1,
	0xc4, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x82, 0x41,
	0x71, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65,
	0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x11, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xd4, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0xfe, 0xe3, 0xb0, 0x25, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x42, 0x6f, 0x82, 0x41,
	0x6c, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0xac, 0x01, 0x0a,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0xd8,
	0xe0, 0x8e, 0xf5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6e, 0x82,
	0x41, 0x6b, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6c, 0x61, 0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x99, 0x01, 0x0a, 0x07,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0xed, 0xb9, 0xbc, 0x57, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e,
	0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52,
	0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x9a, 0x01, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0xc0, 0xc2, 0xb0, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70,
	0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0xa5, 0x01, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x18, 0xa6, 0xe7, 0x80, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xbc, 0x13, 0x0a,
	0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0xc7, 0x02, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0xaa, 0xc9, 0x88, 0xc5, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x94, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f,
	0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69,
	0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x7f, 0x82, 0x41, 0x7c, 0x2f, 0x62,
	0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0xd7, 0x0d, 0x0a,
	0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0xba, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xfc, 0xa1, 0xe1, 0x50,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x97, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a,
	0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x86,
	0x01, 0x82, 0x41, 0x82, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x85,
	0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xc4, 0x01, 0x0a, 0x08, 0x61, 0x74, 0x74,
	0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0xc0, 0xcb, 0xac, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x8f, 0x01, 0x82, 0x41, 0x8b, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69,
	0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x2d, 0x6c, 0x65, 0x6e, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x4c, 0x65, 0x6e, 0x12,
	0xc6, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xfb, 0xa4,
	0xc3, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x90, 0x01, 0x82, 0x41,
	0x8c, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xcb, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xb2, 0x90, 0xd6, 0xb0, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x91, 0x01, 0x82, 0x41, 0x8d, 0x01, 0x2f, 0x62,
	0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xc4, 0x01, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x18, 0xec, 0xc5, 0xf2, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x8f, 0x01, 0x82, 0x41, 0x8b, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70,
	0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0xc5, 0x01,
	0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0xcf, 0x89, 0xbd, 0x99, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x8f, 0x01, 0x82, 0x41, 0x8b, 0x01,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0xc1, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x8a, 0xe6, 0xcd, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x8e, 0x01, 0x82, 0x41, 0x8a, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0xca, 0x01, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0xb2, 0x89, 0xfe, 0x5b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x91, 0x01, 0x82, 0x41, 0x8d, 0x01, 0x2f, 0x62, 0x67,
	0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x82, 0x03, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0xa8,
	0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x8a, 0x01, 0x82, 0x41, 0x86, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d,
	0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xbf, 0x01, 0x0a, 0x11, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x91, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72,
	0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49,
	0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64,
	0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0x89, 0x03, 0x0a, 0x08,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x79, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x62, 0x67,
	0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x7b, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d,
	0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64,
	0x12, 0x84, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x6e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70,
	0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e,
	0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xfd, 0x2b, 0x0a, 0x0d, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x12, 0xdd, 0x01, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0xa7, 0xc4,
	0x84, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72,
	0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49,
	0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64,
	0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x12, 0xda, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe0, 0xb6, 0xb9,
	0xa7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72,
	0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49,
	0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64,
	0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f,
	0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0xa5, 0x28, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0xea, 0x01, 0x0a, 0x05, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x18, 0xed, 0xbb, 0x92, 0x57, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x73, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67,
	0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x42, 0x5c, 0x82, 0x41, 0x59, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0x9b, 0x23, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0xf4, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xbf, 0x88, 0xbc, 0xb8,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x76, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a,
	0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x62, 0x82,
	0x41, 0x5f, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa7, 0x02, 0x0a, 0x12, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0xd4, 0xcd, 0xc2, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x82, 0x01, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69,
	0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x6f,
	0x82, 0x41, 0x6c, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x1a, 0x96, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa4, 0x01, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xbc, 0x9b, 0xea, 0x6c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x62,
	0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0xb3, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x8a, 0xb8, 0x8e, 0x26, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x72, 0x82, 0x41, 0x6f, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75,
	0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xbf, 0x01, 0x0a, 0x13, 0x65, 0x78,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x94, 0xce, 0x89, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x76, 0x82, 0x41, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73,
	0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x11, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xd6, 0x01, 0x0a, 0x0e,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0xdc,
	0xaf, 0xde, 0x5e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0xad, 0x01, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0xa6, 0xa6, 0xb2, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74,
	0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x9b, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0xcf, 0xd4, 0x96, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6a,
	0x82, 0x41, 0x67, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68,
	0x49, 0x64, 0x12, 0x9b, 0x01, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0xbe, 0xde,
	0x96, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x69, 0x82,
	0x41, 0x66, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0xa8, 0x01, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x18, 0xec, 0xd8, 0xc3, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xd7, 0x13, 0x0a, 0x11,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0xcc, 0x02, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x88, 0x87, 0xa7, 0x9f, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x96, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62,
	0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62,
	0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x81, 0x01, 0x82, 0x41, 0x7e,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x1a, 0xe9, 0x0d, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0xbe, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xa2, 0xf2, 0xd3, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x99, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x88, 0x01, 0x82, 0x41, 0x84, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f,
	0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x93, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0xc5, 0x01, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0xee, 0xe0,
	0xf0, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x91, 0x01, 0x82, 0x41,
	0x8d, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x6c, 0x65, 0x6e, 0x52,
	0x07, 0x61, 0x74, 0x74, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0xc8, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xc1, 0xd3, 0xed, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x92, 0x01, 0x82, 0x41, 0x8e, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f,
	0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0xcd, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x98, 0x82, 0xa7, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x93, 0x01, 0x82, 0x41, 0x8f, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74,
	0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0xc6, 0x01, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x18, 0xd6, 0xea, 0xb4, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x91,
	0x01, 0x82, 0x41, 0x8d, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73,
	0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0xc7, 0x01, 0x0a,
	0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0xc9, 0xb4, 0xde, 0xb7, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x91, 0x01, 0x82, 0x41, 0x8d, 0x01, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0xc3, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x18, 0xd8, 0x9f, 0x86, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x90, 0x01, 0x82, 0x41, 0x8c, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0xcd, 0x01, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0xb8, 0xaa, 0xc5, 0x8e,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x93, 0x01, 0x82, 0x41, 0x8f,
	0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x86, 0x03, 0x0a,
	0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0xaa, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x8c, 0x01, 0x82, 0x41, 0x88, 0x01, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0xc1, 0x01, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x93, 0x01,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42,
	0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50,
	0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0x8f, 0x03, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x7b, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x7d, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73,
	0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70,
	0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x86,
	0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x70,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42,
	0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50,
	0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xdd, 0x2b, 0x0a, 0x0c, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72,
	0x65, 0x12, 0xdb, 0x01, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0xa0, 0xda, 0xcf,
	0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a,
	0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12,
	0xd8, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xad, 0xff, 0xdb, 0xea, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x68, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f,
	0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69,
	0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x54, 0x82,
	0x41, 0x51, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8a, 0x28, 0x0a, 0x06, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0xe8, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18,
	0xf2, 0xb8, 0xc6, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x72, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e,
	0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x5b, 0x82, 0x41,
	0x58, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x1a, 0x85, 0x23, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0xf1, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x94, 0x81, 0x85, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x75, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67,
	0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72,
	0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74,
	0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa5,
	0x02, 0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x9d, 0xb0, 0x89, 0xfc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x81, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70,
	0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75,
	0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d,
	0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x52, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x91, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0xa4, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0xdd, 0xfd, 0xdf, 0xe1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c,
	0x82, 0x41, 0x69, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x61, 0x74,
	0x74, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xb3, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xf9, 0xf5, 0xe4, 0xba,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xbd, 0x01,
	0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xdf, 0xf2, 0xa3, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x75, 0x82, 0x41, 0x72, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d,
	0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x11, 0x65, 0x78, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xd6, 0x01,
	0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0xbd, 0xf0, 0xf9, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75,
	0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0xad, 0x01, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x85, 0xdd, 0xcc, 0xdb, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x62, 0x67, 0x70,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x9b, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0xe8, 0xc1, 0x89, 0xfb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61,
	0x74, 0x68, 0x49, 0x64, 0x12, 0x9a, 0x01, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x8f, 0xd5, 0xee, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x68, 0x82, 0x41, 0x65, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0xa6, 0x01, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x18, 0xc7, 0x8e, 0xdb, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0a,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xcb, 0x13, 0x0a, 0x11, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0xca, 0x02, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0xed, 0xf1, 0xa0, 0x95, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x95, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67,
	0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f,
	0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x80, 0x01, 0x82, 0x41, 0x7d, 0x2f, 0x62,
	0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0xe1, 0x0d,
	0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0xbd, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xbf, 0x8e, 0xf7,
	0xae, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x98, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41,
	0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x87, 0x01, 0x82, 0x41, 0x83, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d,
	0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x1a, 0x8c, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xc5, 0x01, 0x0a,
	0x08, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0xb5, 0xa7, 0x8e, 0xe9, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x90, 0x01, 0x82, 0x41, 0x8c, 0x01, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x6c, 0x65, 0x6e, 0x52, 0x07, 0x61, 0x74, 0x74,
	0x72, 0x4c, 0x65, 0x6e, 0x12, 0xc8, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x90, 0xac, 0xc7, 0xd8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x91, 0x01, 0x82, 0x41, 0x8d, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d,
	0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0xcb, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xf3,
	0xce, 0xaf, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x92, 0x01,
	0x82, 0x41, 0x8e, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xc5, 0x01,
	0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0xd9, 0xd5, 0x87, 0x49, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x90, 0x01, 0x82, 0x41, 0x8c, 0x01, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x08, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0xc5, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x18, 0x92, 0xd2, 0xf0, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x90, 0x01, 0x82, 0x41, 0x8c, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0xc3, 0x01,
	0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x95, 0xa3, 0x96, 0xf7, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x8f, 0x01, 0x82, 0x41, 0x8b, 0x01, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x12, 0xcb, 0x01, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x83, 0xfe, 0xd4, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x92, 0x01, 0x82, 0x41, 0x8e, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x1a, 0x84, 0x03, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0xa9, 0x01, 0x0a, 0x09, 0x61, 0x74,
	0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x8b, 0x01,
	0x82, 0x41, 0x87, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xc0, 0x01, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x92, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62,
	0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62,
	0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0x8c, 0x03, 0x0a, 0x08, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x7a, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75,
	0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x7c, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12,
	0x85, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e,
	0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e,
	0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74,
	0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xa4, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x10, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0xea, 0x95, 0xb1, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x55, 0x82, 0x41, 0x52, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xfc, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x7a, 0x0a, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x34, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x71, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a, 0x95, 0xe1, 0x01, 0x0a, 0x0b, 0x49, 0x70, 0x76, 0x36,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x9b, 0x01, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x5f,
	0x72, 0x69, 0x62, 0x18, 0xfc, 0xcc, 0x90, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67,
	0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f, 0x62, 0x67,
	0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x52, 0x06, 0x6c,
	0x6f, 0x63, 0x52, 0x69, 0x62, 0x12, 0xa4, 0x01, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x18, 0xd3, 0xdb, 0x9e, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x1a, 0xfc, 0x27, 0x0a,
	0x06, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x12, 0xa7, 0x01, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x18, 0xe1, 0xc0, 0x94, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52,
	0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x42, 0x3a, 0x82,
	0x41, 0x37, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x12, 0xa3, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc6, 0xa2, 0xc5, 0x75,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62,
	0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x98, 0x25, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x83, 0x9d, 0xb3,
	0xf9, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72,
	0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49,
	0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69,
	0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x42, 0x40, 0x82, 0x41, 0x3d, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c,
	0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xb5, 0x1f, 0x0a, 0x05, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x12, 0xbd, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9d,
	0xd6, 0xb0, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e,
	0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x52,
	0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x46, 0x82, 0x41, 0x43, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0xf0, 0x01, 0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0xbe, 0xd2, 0xad, 0x83,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x68, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42,
	0x53, 0x82, 0x41, 0x50, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x52, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x9b, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x88, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0xb2, 0xad, 0xc9, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x51,
	0x82, 0x41, 0x4e, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x97, 0x01, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x94, 0xf8, 0xbd, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x56,
	0x82, 0x41, 0x53, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xa3, 0x01, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x96,
	0xd8, 0x8f, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x5a, 0x82,
	0x41, 0x57, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x11, 0x65, 0x78, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xbb, 0x01, 0x0a,
	0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0xba, 0xed, 0xa4, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x92, 0x01, 0x0a, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0xc4, 0xc6, 0x8b,
	0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x54, 0x82, 0x41, 0x51,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0xa9, 0x01, 0x0a, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x74,
	0x79, 0x70, 0x65, 0x18, 0xb5, 0xdb, 0xfb, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x48, 0x00, 0x52, 0x2e, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x0d, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xee, 0xeb, 0xb2,
	0xb3, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x80, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x99, 0xfe, 0xe8, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c,
	0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69,
	0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x80, 0x01, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0xdc, 0xe7, 0xb4, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x8c, 0x01, 0x0a,
	0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x8a, 0x86, 0xcb,
	0xe3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x52, 0x82, 0x41, 0x4f,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x1a, 0xda, 0x10, 0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x93, 0x02, 0x0a, 0x11,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x18, 0xfe, 0x95, 0xef, 0x79, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x7c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69,
	0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4c,
	0x6f, 0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x65, 0x82, 0x41, 0x62, 0x2f, 0x62, 0x67,
	0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x1a, 0xde, 0x0b, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x85, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xc0, 0xad, 0xf7, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x7f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f,
	0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xc1,
	0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x08, 0x61, 0x74, 0x74,
	0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0xa4, 0xa9, 0xd5, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x6c, 0x65, 0x6e, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72,
	0x4c, 0x65, 0x6e, 0x12, 0xab, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0xff, 0xe2, 0xf3, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x75, 0x82, 0x41, 0x72, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f,
	0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0xae, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0xae, 0x8b, 0x9a, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x76, 0x82, 0x41, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74,
	0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0xa8, 0x01, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18,
	0xa8, 0xe2, 0xb9, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x82,
	0x41, 0x71, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0xa9, 0x01,
	0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0xdb, 0xc8, 0xe9, 0xaf, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x62,
	0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52,
	0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0xa5, 0x01, 0x0a, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0xd6, 0xea, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x73, 0x82, 0x41, 0x70, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x12, 0xae, 0x01, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x18, 0xfe, 0xa0, 0xe7, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x76,
	0x82, 0x41, 0x73, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x1a, 0xcd, 0x02, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x8c, 0x01, 0x0a, 0x09, 0x61,
	0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x6f,
	0x82, 0x41, 0x6c, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xa6, 0x01, 0x0a, 0x11, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x79, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x52, 0x69, 0x62,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x1a, 0x9d, 0x04, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x5f, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x47, 0x82, 0x41, 0x44, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0xa9, 0x01, 0x0a, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x74, 0x79, 0x70, 0x65, 0x18, 0xb5, 0xdb, 0xfb, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x48, 0x00, 0x52, 0x2e, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x0d,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xee, 0xeb,
	0xb2, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x61, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x48, 0x82, 0x41, 0x45, 0x2f, 0x62, 0x67,
	0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x63, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d,
	0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x05, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4c, 0x6f,
	0x63, 0x52, 0x69, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x1a, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xc0, 0xb6, 0x01, 0x0a,
	0x09, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x08, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0xc8, 0x8c, 0x83, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x58, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70,
	0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x3e, 0x82, 0x41, 0x3b, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x1a, 0xf8, 0xb2, 0x01, 0x0a, 0x08, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x12, 0xdd, 0x01, 0x0a, 0x0f, 0x61, 0x64, 0x6a, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69,
	0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0xf5, 0xde, 0x83, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x62, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70,
	0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e,
	0x50, 0x6f, 0x73, 0x74, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d,
	0x70, 0x6f, 0x73, 0x74, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f,
	0x73, 0x74, 0x12, 0xd8, 0x01, 0x0a, 0x0e, 0x61, 0x64, 0x6a, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x69,
	0x6e, 0x5f, 0x70, 0x72, 0x65, 0x18, 0x9a, 0xb7, 0xa3, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x61,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42,
	0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72,
	0x65, 0x42, 0x4d, 0x82, 0x41, 0x4a, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65,
	0x52, 0x0b, 0x61, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x12, 0xe0, 0x01,
	0x0a, 0x10, 0x61, 0x64, 0x6a, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x74, 0x18, 0xec, 0xf6, 0xf2, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52,
	0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74,
	0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73,
	0x74, 0x52, 0x0d, 0x61, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74,
	0x12, 0xdd, 0x01, 0x0a, 0x0f, 0x61, 0x64, 0x6a, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x70, 0x72, 0x65, 0x18, 0x89, 0x8d, 0xde, 0xf8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x62,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42,
	0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50,
	0x72, 0x65, 0x42, 0x4e, 0x82, 0x41, 0x4b, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x72, 0x65, 0x52, 0x0c, 0x61, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65,
	0x12, 0xbb, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xe2, 0xf4, 0x9a, 0x9c, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62,
	0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x44, 0x82, 0x41, 0x41, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x9b,
	0x2b, 0x0a, 0x0c, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x12,
	0xdc, 0x01, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0xfe, 0xef, 0xaa, 0xcc, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62,
	0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52,
	0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x42,
	0x55, 0x82, 0x41, 0x52, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xab,
	0x29, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0xe9, 0x01, 0x0a, 0x05, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x18, 0xbc, 0x84, 0xde, 0xec, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x72, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67,
	0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73,
	0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73,
	0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xa5, 0x24, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0xf1, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x86, 0x81, 0xa6, 0x7f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x75, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62,
	0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62,
	0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x62,
	0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0xa5, 0x02, 0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0xe3, 0xde, 0xce, 0xca, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x81, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a,
	0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x62, 0x67,
	0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xb2, 0x0c, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x8f, 0xc9, 0xdd, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70,
	0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xa1, 0x01, 0x0a,
	0x09, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0xe9, 0x93, 0xa9, 0xdf, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x62,
	0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x62, 0x65, 0x73,
	0x74, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x52, 0x08, 0x62, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x12, 0xb2, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x8f, 0xd3, 0xcc, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f,
	0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xbd, 0x01, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xd5, 0xfc,
	0xe2, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x75, 0x82, 0x41, 0x72,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65,
	0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x11, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xd5, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0xa7, 0xf4, 0xd6, 0x7b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x69, 0x62, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x42, 0x70, 0x82, 0x41,
	0x6d, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0xac, 0x01,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x97, 0xa5, 0xfd, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x82,
	0x41, 0x6c, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x9a, 0x01, 0x0a,
	0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0xce, 0xea, 0xaf, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69,
	0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69,
	0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x9b, 0x01, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0xf9, 0xb5, 0xc1, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e,
	0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0xa6, 0x01, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x89, 0xfd, 0xa5, 0x7c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e,
	0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x1a, 0xca, 0x13, 0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xca, 0x02, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0xff, 0xeb, 0xab,
	0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x95, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e,
	0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41,
	0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x80,
	0x01, 0x82, 0x41, 0x7d, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x1a, 0xe0, 0x0d, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0xbc, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xb9, 0xde, 0xd2, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x98, 0x01, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x87, 0x01, 0x82, 0x41, 0x83, 0x01, 0x2f, 0x62, 0x67,
	0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8c, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0xc4, 0x01, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x8f,
	0xf6, 0xf7, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x90, 0x01, 0x82,
	0x41, 0x8c, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x6c, 0x65, 0x6e, 0x52,
	0x07, 0x61, 0x74, 0x74, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0xc7, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xf2, 0x9c, 0x81, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x91, 0x01, 0x82, 0x41, 0x8d, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69,
	0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0xcb, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x9d, 0xa5, 0xad, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x92, 0x01, 0x82, 0x41, 0x8e, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f,
	0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0xc6, 0x01, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x97, 0xd0,
	0xc3, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x90, 0x01, 0x82,
	0x41, 0x8c, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52,
	0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0xc5, 0x01, 0x0a, 0x08, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x80, 0xe0, 0x9b, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x90, 0x01, 0x82, 0x41, 0x8c, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69,
	0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x12, 0xc3, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0xcf, 0xc2,
	0xbc, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x8f, 0x01, 0x82,
	0x41, 0x8b, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0xcc, 0x01, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x8d, 0xf1, 0xb9, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x92, 0x01, 0x82, 0x41, 0x8e, 0x01, 0x2f, 0x62, 0x67, 0x70,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x84, 0x03, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0xa9,
	0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x8b, 0x01, 0x82, 0x41, 0x87, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d,
	0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xc0, 0x01, 0x0a, 0x11, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x92, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e,
	0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41,
	0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0x8c, 0x03,
	0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x7a, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x7c, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x62, 0x67, 0x70,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x69, 0x6e, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61,
	0x74, 0x68, 0x49, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62,
	0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52,
	0x69, 0x62, 0x49, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xd6, 0x29, 0x0a,
	0x0b, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x12, 0xda, 0x01, 0x0a,
	0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x93, 0xc3, 0xff, 0xf3, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x68, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67,
	0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49,
	0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x42, 0x54, 0x82, 0x41, 0x51,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xe9, 0x27, 0x0a, 0x06, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x12, 0xe6, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xe1,
	0x95, 0xbe, 0x3f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x71, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e,
	0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41,
	0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x5a, 0x82, 0x41, 0x57, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xe9, 0x22,
	0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0xef, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xd3, 0x94, 0xd5, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x74, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69,
	0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x60, 0x82, 0x41, 0x5d, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa2, 0x02, 0x0a, 0x12, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0xa8, 0xae, 0xba, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x80, 0x01, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69,
	0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x6d, 0x82, 0x41,
	0x6a, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x11, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x89,
	0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x80, 0xc7, 0xae, 0x9b, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6b, 0x82, 0x41, 0x68, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69,
	0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xb1,
	0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0xc6, 0xe9, 0xa2, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0xbc, 0x01, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xa8, 0x87, 0xf7, 0x7f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x74, 0x82, 0x41, 0x71, 0x2f, 0x62, 0x67,
	0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x11,
	0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0xd5, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x90, 0x90, 0xa9, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42,
	0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x62,
	0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0xac, 0x01, 0x0a, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0xca, 0xa8, 0xfa, 0x8c,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c, 0x61, 0x73,
	0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x9a, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0xc3, 0x97, 0xbe, 0xfc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70,
	0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70,
	0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x9a, 0x01, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x92, 0x80, 0xf3, 0xf5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x67, 0x82, 0x41, 0x64, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0xa5, 0x01, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x18, 0x98, 0xc4, 0x97, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0a,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xbc, 0x13, 0x0a, 0x11, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0xc6, 0x02, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0xc4, 0xf9, 0xe9, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x94, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70,
	0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e,
	0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x7f, 0x82, 0x41, 0x7c, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69,
	0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0xd8, 0x0d, 0x0a, 0x10, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0xba,
	0x02, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xbe, 0x9f, 0xcd, 0x46, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x97, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62,
	0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62,
	0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x86, 0x01, 0x82, 0x41,
	0x82, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x86, 0x0b, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xc3, 0x01, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6c,
	0x65, 0x6e, 0x18, 0x8a, 0xd6, 0xf7, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x8f, 0x01, 0x82, 0x41, 0x8b, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x6c,
	0x65, 0x6e, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0xc7, 0x01, 0x0a, 0x09,
	0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xfd, 0xc2, 0x90, 0x85, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x90, 0x01, 0x82, 0x41, 0x8c, 0x01, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xcb, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0xfc, 0xc2, 0xce, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x91, 0x01, 0x82, 0x41, 0x8d, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69,
	0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0xc5, 0x01, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x18, 0x8a, 0xd9, 0xb4, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x8f, 0x01, 0x82, 0x41, 0x8b, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0xc4, 0x01, 0x0a, 0x08,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0xcd, 0xe2, 0xd7, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x8f, 0x01, 0x82, 0x41, 0x8b, 0x01, 0x2f, 0x62, 0x67,
	0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x12, 0xc1, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x9c,
	0xac, 0xab, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x8e, 0x01, 0x82,
	0x41, 0x8a, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x07, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0xcb, 0x01, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0xbc, 0x92, 0x90, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x91, 0x01, 0x82, 0x41, 0x8d, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69,
	0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x1a, 0x82, 0x03, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0xa8, 0x01, 0x0a,
	0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x8a, 0x01, 0x82, 0x41, 0x86, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61,
	0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xbf, 0x01, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x91, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62,
	0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52,
	0x69, 0x62, 0x49, 0x6e, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0x89, 0x03, 0x0a, 0x08, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x79, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69,
	0x6e, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x7b, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70,
	0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x84,
	0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6e,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42,
	0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x49, 0x6e, 0x50, 0x72,
	0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0x96, 0x2a, 0x0a, 0x0d, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62,
	0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x12, 0xdd, 0x01, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x18, 0xb1, 0x89, 0x99, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52,
	0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x42, 0x56, 0x82, 0x41, 0x53, 0x2f, 0x62, 0x67, 0x70,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0xa4, 0x28, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x12, 0xeb, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xb3, 0x92, 0xf3,
	0xc4, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72,
	0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49,
	0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64,
	0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x5c, 0x82, 0x41, 0x59,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36,
	0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d,
	0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x1a, 0x99, 0x23, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0xf3, 0x01, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xed, 0xfd, 0xf7, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x76, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67,
	0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75,
	0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0xa6, 0x02, 0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x8e, 0xac, 0xcb, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x82, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67,
	0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f,
	0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x6f, 0x82, 0x41, 0x6c, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75,
	0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x96, 0x0b, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0xe2, 0x86, 0xbc, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f,
	0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xb4, 0x01, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0xe4, 0x86, 0xb3, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x72,
	0x82, 0x41, 0x6f, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0xbe, 0x01, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xe6, 0xab, 0x89, 0x2e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x76, 0x82, 0x41, 0x73, 0x2f, 0x62, 0x67,
	0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74,
	0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x11, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0xd6, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x8a, 0xb0, 0xbd, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62,
	0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x42, 0x71, 0x82, 0x41, 0x6e, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0xad, 0x01, 0x0a,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0xd4,
	0xa9, 0xcd, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x70, 0x82, 0x41,
	0x6d, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x9b, 0x01, 0x0a,
	0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0xe9, 0xd8, 0x8e, 0x42, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6a, 0x82, 0x41, 0x67, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f,
	0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d,
	0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x9b, 0x01, 0x0a, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0xac, 0xec, 0xb7, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75,
	0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0xa7, 0x01, 0x0a, 0x0b, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xda, 0xc1, 0xca, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f,
	0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x1a, 0xd7, 0x13, 0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xcc, 0x02, 0x0a, 0x11, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0xae,
	0x9f, 0xac, 0xbf, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x96, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62,
	0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x42, 0x81, 0x01, 0x82, 0x41, 0x7e, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0xe9, 0x0d, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0xbf, 0x02, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x90, 0xbb, 0xc7, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x99, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67,
	0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f,
	0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x88, 0x01, 0x82,
	0x41, 0x84, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x92,
	0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xc5, 0x01, 0x0a, 0x08, 0x61, 0x74, 0x74,
	0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0xb4, 0x8d, 0xa5, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x91, 0x01, 0x82, 0x41, 0x8d, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75,
	0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x6c, 0x65, 0x6e, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x4c, 0x65, 0x6e,
	0x12, 0xc8, 0x01, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xcf,
	0x8d, 0xfd, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x92, 0x01, 0x82,
	0x41, 0x8e, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69,
	0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61,
	0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xcd, 0x01, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xfe, 0xa5, 0xf9, 0xc7, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x93, 0x01, 0x82, 0x41, 0x8f,
	0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0xc6, 0x01, 0x0a, 0x08,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x98, 0xf4, 0xfa, 0x29, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x91, 0x01, 0x82, 0x41, 0x8d, 0x01, 0x2f, 0x62, 0x67,
	0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x12, 0xc6, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x18, 0x8b, 0xbe, 0xcb, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x91, 0x01, 0x82, 0x41, 0x8d, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f,
	0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0xc4, 0x01,
	0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x86, 0xae, 0xd1, 0xa2, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x90, 0x01, 0x82, 0x41, 0x8c, 0x01, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0xcc, 0x01, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x8e, 0xbf, 0x8c, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x93, 0x01, 0x82, 0x41, 0x8f, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d,
	0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x1a, 0x86, 0x03, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0xaa, 0x01, 0x0a, 0x09,
	0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x8c, 0x01, 0x82, 0x41, 0x88, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f,
	0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xc1, 0x01, 0x0a, 0x11, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x93, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a,
	0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0x8f, 0x03, 0x0a,
	0x08, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x7b, 0x0a, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x62,
	0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69,
	0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x7d, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x64, 0x82, 0x41, 0x61, 0x2f, 0x62, 0x67, 0x70,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x6f, 0x75, 0x74, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70,
	0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x70, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a,
	0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xf8,
	0x29, 0x0a, 0x0c, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x12,
	0xdc, 0x01, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0xe2, 0xe2, 0xc0, 0xbc, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62,
	0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52,
	0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x42,
	0x55, 0x82, 0x41, 0x52, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x88,
	0x28, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0xe9, 0x01, 0x0a, 0x05, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x18, 0xa8, 0xf1, 0xe4, 0xa6, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x72, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67,
	0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72,
	0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x42, 0x5b, 0x82, 0x41, 0x58, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0x82, 0x23, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0xf2, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc2, 0xa5, 0xec, 0xed, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x75, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f,
	0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61,
	0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69,
	0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x61, 0x82, 0x41, 0x5e, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0xa4, 0x02, 0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0xff, 0xb2, 0xc5, 0x7e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x81, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70,
	0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a,
	0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x6e, 0x82, 0x41, 0x6b, 0x2f, 0x62, 0x67,
	0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x92, 0x0b, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0xfb, 0xbb, 0xe6, 0xd1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x6c, 0x82, 0x41, 0x69, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d,
	0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0xb3, 0x01, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0xf3, 0xd7, 0xb8, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x71, 0x82, 0x41, 0x6e, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0xbd, 0x01, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xa1, 0xc3, 0x86, 0x20, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x75, 0x82, 0x41, 0x72, 0x2f, 0x62, 0x67,
	0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x2d,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x11, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0xd6, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0xc3, 0xfa, 0xf2, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62,
	0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x42, 0x70, 0x82, 0x41, 0x6d, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72,
	0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0xad, 0x01, 0x0a, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0xd3, 0x92,
	0x90, 0xf5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x82, 0x41,
	0x6c, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6c, 0x61, 0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x52, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x9b, 0x01, 0x0a, 0x07,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0xfa, 0xd7, 0xcb, 0xca, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x69, 0x82, 0x41, 0x66, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f,
	0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69,
	0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x9b, 0x01, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x85, 0xa3, 0x8f, 0xf3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x68, 0x82, 0x41, 0x65, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75,
	0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0xa6, 0x01, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0xfd, 0xc6, 0xed, 0x65, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d, 0x82, 0x41, 0x6a, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75,
	0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2d, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x1a, 0xc7, 0x13, 0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0xca, 0x02, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0xa3, 0xb6, 0xae,
	0xe3, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x95, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e,
	0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41,
	0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x80,
	0x01, 0x82, 0x41, 0x7d, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x1a, 0xdd, 0x0d, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0xbc, 0x02, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xbd, 0x9d, 0xa7, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x98, 0x01, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x87, 0x01, 0x82, 0x41, 0x83, 0x01, 0x2f, 0x62, 0x67,
	0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62,
	0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x89, 0x0b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0xc5, 0x01, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0xb3,
	0xf1, 0x96, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x90, 0x01,
	0x82, 0x41, 0x8c, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f,
	0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x6c, 0x65, 0x6e,
	0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0xc6, 0x01, 0x0a, 0x09, 0x61, 0x74,
	0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xa6, 0xac, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x91, 0x01, 0x82, 0x41, 0x8d, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f,
	0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0xcb, 0x01, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0xe9, 0xbe, 0x89, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x92, 0x01, 0x82, 0x41, 0x8e, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70,
	0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0xc5, 0x01, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0xf3, 0x8e,
	0xf0, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x90, 0x01, 0x82, 0x41,
	0x8c, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73,
	0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70,
	0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64,
	0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x08,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0xc5, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0xfc, 0x99, 0x92, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x90, 0x01, 0x82, 0x41, 0x8c, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75,
	0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x12, 0xc2, 0x01, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x9b, 0xa6, 0xfb,
	0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x8f, 0x01, 0x82, 0x41, 0x8b,
	0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61,
	0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76,
	0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a,
	0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0xcb, 0x01, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x18, 0xa9, 0xaa, 0xd3, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x92, 0x01, 0x82, 0x41, 0x8e, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74,
	0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x1a, 0x84, 0x03, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0xa9, 0x01, 0x0a, 0x09,
	0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x8b, 0x01, 0x82, 0x41, 0x87, 0x01, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66,
	0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72,
	0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61,
	0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0xc0, 0x01, 0x0a, 0x11, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x92, 0x01, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62,
	0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76,
	0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52,
	0x69, 0x62, 0x4f, 0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x1a, 0x8c, 0x03, 0x0a, 0x08, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x7a, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x62, 0x82, 0x41, 0x5f, 0x2f, 0x62, 0x67, 0x70,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61,
	0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d,
	0x6f, 0x75, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x7c, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x63, 0x82, 0x41, 0x60, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d,
	0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x2f, 0x61, 0x64, 0x6a, 0x2d, 0x72, 0x69, 0x62, 0x2d, 0x6f, 0x75, 0x74,
	0x2d, 0x70, 0x72, 0x65, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2d, 0x69, 0x64, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49,
	0x64, 0x12, 0x85, 0x01, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x6f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67,
	0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69,
	0x73, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x52, 0x69, 0x62, 0x4f,
	0x75, 0x74, 0x50, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x1a, 0xa4, 0x01, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x98, 0xb0, 0xdd, 0x4a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x55, 0x82, 0x41, 0x52, 0x2f, 0x62, 0x67,
	0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x1a, 0xfc, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4b, 0x65, 0x79,
	0x12, 0x7a, 0x0a, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0x82, 0x41, 0x4c, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69,
	0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x69, 0x70, 0x76, 0x36, 0x2d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x2f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x2d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x71, 0x0a, 0x08,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42,
	0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x1a,
	0x95, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x0d, 0x61, 0x66,
	0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xee, 0x94, 0xe3, 0xe1,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x46, 0x49, 0x53, 0x41,
	0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x42, 0x32, 0x82, 0x41, 0x2f, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66,
	0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x61, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xe3, 0x01, 0x0a, 0x0a, 0x41, 0x66, 0x69, 0x53,
	0x61, 0x66, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x81, 0x01, 0x0a, 0x0d, 0x61, 0x66, 0x69, 0x5f, 0x73,
	0x61, 0x66, 0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x42,
	0x2c, 0x82, 0x41, 0x29, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x66, 0x69,
	0x2d, 0x73, 0x61, 0x66, 0x69, 0x73, 0x2f, 0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2f,
	0x61, 0x66, 0x69, 0x2d, 0x73, 0x61, 0x66, 0x69, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x61,
	0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x61, 0x66,
	0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x73, 0x2e, 0x41, 0x66, 0x69,
	0x53, 0x61, 0x66, 0x69, 0x52, 0x07, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x1a, 0xfd, 0x1a,
	0x0a, 0x08, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x12, 0x78, 0x0a, 0x08, 0x61, 0x74,
	0x74, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0xad, 0xdc, 0x9b, 0xed, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70,
	0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x1e, 0x82, 0x41, 0x1b,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x52, 0x07, 0x61, 0x74, 0x74,
	0x72, 0x53, 0x65, 0x74, 0x1a, 0xd8, 0x18, 0x0a, 0x07, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74,
	0x12, 0x8f, 0x01, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0xfb, 0xe4, 0xac, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e,
	0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74,
	0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x29, 0x82, 0x41, 0x26,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x81, 0x01, 0x0a, 0x07, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0xe8,
	0xad, 0xc7, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e,
	0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x42, 0x26, 0x82, 0x41, 0x23, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x52, 0x06,
	0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x86, 0x01, 0x0a, 0x08, 0x61, 0x73, 0x34, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0xe4, 0xbf, 0xc7, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67,
	0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x34, 0x50, 0x61, 0x74, 0x68, 0x42, 0x27, 0x82,
	0x41, 0x24, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x73,
	0x34, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x52, 0x07, 0x61, 0x73, 0x34, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x7c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xff, 0xb5, 0xcd, 0xa9, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62,
	0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65,
	0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x24, 0x82, 0x41, 0x21, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xd4, 0x03,
	0x0a, 0x0a, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x92, 0x01, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa5, 0xcf, 0xb2, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70,
	0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x62,
	0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0xb0, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6c, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xf0, 0xef, 0xfd, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x37, 0x82, 0x41, 0x34, 0x2f, 0x62, 0x67, 0x70,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5a, 0x0a, 0x02, 0x61, 0x73, 0x18,
	0xf0, 0xee, 0xdc, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82,
	0x41, 0x2f, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x73, 0x52, 0x02, 0x61, 0x73, 0x12, 0x5d, 0x0a, 0x03, 0x61, 0x73, 0x34, 0x18, 0xe4, 0x8a, 0xb1,
	0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x33, 0x82, 0x41, 0x30, 0x2f,
	0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x73, 0x34, 0x52,
	0x03, 0x61, 0x73, 0x34, 0x1a, 0xd0, 0x04, 0x0a, 0x07, 0x41, 0x73, 0x34, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x95, 0x01, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xf6, 0xdd, 0x83,
	0xeb, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72,
	0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x41,
	0x73, 0x34, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x2f,
	0x82, 0x41, 0x2c, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72,
	0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61,
	0x73, 0x34, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xac, 0x03, 0x0a, 0x07, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x9c, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x88,
	0xb8, 0xbb, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e,
	0x41, 0x73, 0x34, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74,
	0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x73, 0x34, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0x81, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6d, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0xe1, 0xbc, 0xa5, 0xac, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x3c, 0x82, 0x41, 0x39, 0x2f, 0x62, 0x67, 0x70, 0x2d,
	0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x73, 0x34, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2f,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x88, 0x01, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0xef, 0xfd, 0x83, 0x42, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x3a, 0x82, 0x41, 0x37, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74,
	0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61, 0x73, 0x34, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xc9, 0x04, 0x0a, 0x06, 0x41, 0x73, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x92, 0x01, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xf2,
	0xbf, 0xfa, 0x7f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e,
	0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x2e,
	0x82, 0x41, 0x2b, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72,
	0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x61,
	0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xa9, 0x03, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x9a, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x94, 0xd0,
	0xa8, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72,
	0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x2e, 0x41,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x34, 0x82, 0x41, 0x31, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d,
	0x73, 0x65, 0x74, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0x80, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6c, 0x0a, 0x06, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0xdd, 0xe5, 0x9e, 0xba, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x3b, 0x82, 0x41, 0x38, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62,
	0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d,
	0x73, 0x65, 0x74, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x88, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x9b, 0xab, 0xde, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x39, 0x82, 0x41, 0x36, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73,
	0x65, 0x74, 0x2f, 0x61, 0x73, 0x2d, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x1a, 0xb9, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a,
	0x04, 0x61, 0x69, 0x67, 0x70, 0x18, 0xa9, 0xfc, 0xa2, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x82, 0x41, 0x26, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69,
	0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72,
	0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x69, 0x67, 0x70, 0x52,
	0x04, 0x61, 0x69, 0x67, 0x70, 0x12, 0x78, 0x0a, 0x10, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0xbf, 0xf0, 0xde, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x35, 0x82, 0x41, 0x32, 0x2f, 0x62, 0x67, 0x70,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x74,
	0x6f, 0x6d, 0x69, 0x63, 0x2d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x0f,
	0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12,
	0x6f, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x85, 0xf4, 0xeb, 0x94, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x31, 0x82, 0x41, 0x2e, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x59, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x8e, 0xd3, 0x82, 0xf6, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2a, 0x82, 0x41, 0x27, 0x2f, 0x62, 0x67,
	0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x67, 0x0a, 0x0a, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x18, 0xbf, 0xbf, 0xae, 0xfa, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x62, 0x67,
	0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x70, 0x72, 0x65, 0x66, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x72, 0x65, 0x66, 0x12, 0x52, 0x0a, 0x03, 0x6d, 0x65, 0x64, 0x18, 0xb8, 0xfa, 0xff, 0x77,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x28, 0x82, 0x41, 0x25, 0x2f, 0x62,
	0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f,
	0x6d, 0x65, 0x64, 0x52, 0x03, 0x6d, 0x65, 0x64, 0x12, 0x63, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x6f, 0x70, 0x18, 0xd3, 0x98, 0x95, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74,
	0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x78, 0x74,
	0x2d, 0x68, 0x6f, 0x70, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x7d, 0x0a,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0xf0, 0xe8, 0x8b, 0x1f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x35, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x67, 0x70, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2b, 0x82, 0x41, 0x28, 0x2f, 0x62, 0x67, 0x70,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x71, 0x0a, 0x0d,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0xf2, 0xe5,
	0xed, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x32, 0x82,
	0x41, 0x2f, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x69,
	0x64, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x1a,
	0x9b, 0x01, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x3a,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x24, 0x82,
	0x41, 0x21, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x2d, 0x73, 0x65, 0x74, 0x2f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x51, 0x0a, 0x08, 0x61, 0x74,
	0x74, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70,
	0x52, 0x69, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x53, 0x65, 0x74, 0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x53, 0x65, 0x74, 0x1a, 0x86, 0x08,
	0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x83, 0x01,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0xa8, 0xde, 0x97, 0xf5,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x4b, 0x65, 0x79, 0x42, 0x21, 0x82, 0x41, 0x1e, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72,
	0x69, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x1a, 0xc5, 0x05, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x12, 0x83, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc2, 0xaa, 0xb8, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62,
	0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x27, 0x82, 0x41, 0x24, 0x2f, 0x62, 0x67, 0x70,
	0x2d, 0x72, 0x69, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xb1, 0x04, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0xa5, 0x01, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18,
	0xe4, 0x9f, 0x88, 0xb0, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x31, 0x82, 0x41, 0x2e,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x5b, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0xbb, 0xd9, 0x90, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x2d, 0x82, 0x41, 0x2a, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0xa2, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0xb2, 0x01, 0x0a, 0x34, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x62, 0x67, 0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x67, 0x70, 0x77, 0x65, 0x6c,
	0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x18, 0xc1, 0xc5, 0xcc, 0x56, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x42, 0x47, 0x50, 0x57, 0x45, 0x4c, 0x4c, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x53, 0x54, 0x44,
	0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x52, 0x33, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x67,
	0x70, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x67, 0x70, 0x77, 0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x73, 0x74, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x2d,
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x8c, 0xd9, 0xe4, 0xe7, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a,
	0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x95, 0xf7, 0xab, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0xa8, 0x01, 0x0a, 0x0c,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x27, 0x82, 0x41, 0x24,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x59, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42,
	0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x1a, 0xc5, 0x07, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x0d, 0x65, 0x78,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0xe8, 0xfd, 0xd5, 0x86,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x45, 0x78, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x42, 0x29, 0x82, 0x41, 0x26,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x1a, 0xd4, 0x04, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x92, 0x01, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x82, 0xa5, 0xe9, 0xde, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62,
	0x2e, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x2f, 0x82, 0x41, 0x2c, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f,
	0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f,
	0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xae, 0x03, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0xc1, 0x01, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0xa6, 0xda, 0xc2, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x59, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70,
	0x2e, 0x42, 0x67, 0x70, 0x52, 0x69, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x42, 0x3d, 0x82, 0x41, 0x3a,
	0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x74,
	0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x63, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0xfb, 0xc2, 0xa1, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x35, 0x82, 0x41, 0x32, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x65, 0x78, 0x74,
	0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x65, 0x78, 0x74,
	0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x7c, 0x0a,
	0x11, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xd6, 0xba, 0xd2, 0xc3, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x11, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xd6,
	0xf8, 0xe0, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0xc0, 0x01, 0x0a, 0x0f,
	0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12,
	0x45, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2f,
	0x82, 0x41, 0x2c, 0x2f, 0x62, 0x67, 0x70, 0x2d, 0x72, 0x69, 0x62, 0x2f, 0x65, 0x78, 0x74, 0x2d,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x2d,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x66, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67, 0x70, 0x2e, 0x42, 0x67,
	0x70, 0x52, 0x69, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x52, 0x0c, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x42, 0x61,
	0x5a, 0x5f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x79, 0x67, 0x6f, 0x74, 0x2f, 0x64, 0x65, 0x6d,
	0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x67, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x2f, 0x72, 0x69, 0x62, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x67,
	0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescOnce sync.Once
	file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescData = file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDesc
)

func file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescGZIP() []byte {
	file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescOnce.Do(func() {
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescData = protoimpl.X.CompressGZIP(file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescData)
	})
	return file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDescData
}

var file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes = make([]protoimpl.MessageInfo, 133)
var file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_goTypes = []interface{}{
	(*BgpRib)(nil),                                                                                                                     // 0: openconfig.openconfig_rib_bgp.BgpRib
	(*BgpRib_AfiSafis)(nil),                                                                                                            // 1: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis
	(*BgpRib_AttrSets)(nil),                                                                                                            // 2: openconfig.openconfig_rib_bgp.BgpRib.AttrSets
	(*BgpRib_Communities)(nil),                                                                                                         // 3: openconfig.openconfig_rib_bgp.BgpRib.Communities
	(*BgpRib_ExtCommunities)(nil),                                                                                                      // 4: openconfig.openconfig_rib_bgp.BgpRib.ExtCommunities
	(*BgpRib_AfiSafis_AfiSafi)(nil),                                                                                                    // 5: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi
	(*BgpRib_AfiSafis_AfiSafiKey)(nil),                                                                                                 // 6: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafiKey
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast)(nil),                                                                                        // 7: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast)(nil),                                                                                        // 8: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast
	(*BgpRib_AfiSafis_AfiSafi_State)(nil),                                                                                              // 9: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib)(nil),                                                                                 // 10: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors)(nil),                                                                              // 11: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes)(nil),                                                                          // 12: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_State)(nil),                                                                           // 13: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route)(nil),                                                                    // 14: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey)(nil),                                                                 // 15: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.RouteKey
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State)(nil),                                                              // 16: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes)(nil),                                                  // 17: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),                                 // 18: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),                              // 19: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil),                           // 20: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor)(nil),                                                                     // 21: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey)(nil),                                                                  // 22: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.NeighborKey
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost)(nil),                                                        // 23: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre)(nil),                                                         // 24: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost)(nil),                                                       // 25: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre)(nil),                                                        // 26: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_State)(nil),                                                               // 27: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes)(nil),                                                 // 28: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_State)(nil),                                                  // 29: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route)(nil),                                           // 30: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey)(nil),                                        // 31: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.RouteKey
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State)(nil),                                     // 32: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes)(nil),                         // 33: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),        // 34: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),     // 35: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil),  // 36: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes)(nil),                                                  // 37: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_State)(nil),                                                   // 38: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route)(nil),                                            // 39: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey)(nil),                                         // 40: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.RouteKey
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State)(nil),                                      // 41: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes)(nil),                          // 42: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),         // 43: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),      // 44: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil),   // 45: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes)(nil),                                                // 46: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_State)(nil),                                                 // 47: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route)(nil),                                          // 48: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey)(nil),                                       // 49: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.RouteKey
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State)(nil),                                    // 50: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes)(nil),                        // 51: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),       // 52: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),    // 53: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil), // 54: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes)(nil),                                                 // 55: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_State)(nil),                                                  // 56: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route)(nil),                                           // 57: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey)(nil),                                        // 58: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.RouteKey
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State)(nil),                                     // 59: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes)(nil),                         // 60: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),        // 61: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),     // 62: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil),  // 63: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib)(nil),                                                                                 // 64: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors)(nil),                                                                              // 65: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes)(nil),                                                                          // 66: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_State)(nil),                                                                           // 67: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route)(nil),                                                                    // 68: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey)(nil),                                                                 // 69: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.RouteKey
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State)(nil),                                                              // 70: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes)(nil),                                                  // 71: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),                                 // 72: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),                              // 73: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil),                           // 74: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor)(nil),                                                                     // 75: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey)(nil),                                                                  // 76: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.NeighborKey
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost)(nil),                                                        // 77: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre)(nil),                                                         // 78: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost)(nil),                                                       // 79: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre)(nil),                                                        // 80: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_State)(nil),                                                               // 81: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes)(nil),                                                 // 82: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route)(nil),                                           // 83: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey)(nil),                                        // 84: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.RouteKey
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State)(nil),                                     // 85: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes)(nil),                         // 86: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),        // 87: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),     // 88: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil),  // 89: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes)(nil),                                                  // 90: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route)(nil),                                            // 91: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey)(nil),                                         // 92: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.RouteKey
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State)(nil),                                      // 93: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes)(nil),                          // 94: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),         // 95: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),      // 96: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil),   // 97: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes)(nil),                                                // 98: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route)(nil),                                          // 99: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey)(nil),                                       // 100: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.RouteKey
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State)(nil),                                    // 101: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes)(nil),                        // 102: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),       // 103: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),    // 104: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil), // 105: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes)(nil),                                                 // 106: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route)(nil),                                           // 107: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey)(nil),                                        // 108: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.RouteKey
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State)(nil),                                     // 109: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes)(nil),                         // 110: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute)(nil),        // 111: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey)(nil),     // 112: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttributeKey
	(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State)(nil),  // 113: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State
	(*BgpRib_AttrSets_AttrSet)(nil),                                    // 114: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet
	(*BgpRib_AttrSets_AttrSetKey)(nil),                                 // 115: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSetKey
	(*BgpRib_AttrSets_AttrSet_Aggregator)(nil),                         // 116: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.Aggregator
	(*BgpRib_AttrSets_AttrSet_As4Path)(nil),                            // 117: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.As4Path
	(*BgpRib_AttrSets_AttrSet_AsPath)(nil),                             // 118: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.AsPath
	(*BgpRib_AttrSets_AttrSet_State)(nil),                              // 119: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.State
	(*BgpRib_AttrSets_AttrSet_Aggregator_State)(nil),                   // 120: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.Aggregator.State
	(*BgpRib_AttrSets_AttrSet_As4Path_Segment)(nil),                    // 121: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.As4Path.Segment
	(*BgpRib_AttrSets_AttrSet_As4Path_Segment_State)(nil),              // 122: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.As4Path.Segment.State
	(*BgpRib_AttrSets_AttrSet_AsPath_Segment)(nil),                     // 123: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.AsPath.Segment
	(*BgpRib_AttrSets_AttrSet_AsPath_Segment_State)(nil),               // 124: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.AsPath.Segment.State
	(*BgpRib_Communities_Community)(nil),                               // 125: openconfig.openconfig_rib_bgp.BgpRib.Communities.Community
	(*BgpRib_Communities_CommunityKey)(nil),                            // 126: openconfig.openconfig_rib_bgp.BgpRib.Communities.CommunityKey
	(*BgpRib_Communities_Community_State)(nil),                         // 127: openconfig.openconfig_rib_bgp.BgpRib.Communities.Community.State
	(*BgpRib_Communities_Community_State_CommunityUnion)(nil),          // 128: openconfig.openconfig_rib_bgp.BgpRib.Communities.Community.State.CommunityUnion
	(*BgpRib_ExtCommunities_ExtCommunity)(nil),                         // 129: openconfig.openconfig_rib_bgp.BgpRib.ExtCommunities.ExtCommunity
	(*BgpRib_ExtCommunities_ExtCommunityKey)(nil),                      // 130: openconfig.openconfig_rib_bgp.BgpRib.ExtCommunities.ExtCommunityKey
	(*BgpRib_ExtCommunities_ExtCommunity_State)(nil),                   // 131: openconfig.openconfig_rib_bgp.BgpRib.ExtCommunities.ExtCommunity.State
	(*BgpRib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion)(nil), // 132: openconfig.openconfig_rib_bgp.BgpRib.ExtCommunities.ExtCommunity.State.ExtCommunityUnion
	(enums.OpenconfigBgpTypesAFISAFITYPE)(0),                           // 133: openconfig.enums.OpenconfigBgpTypesAFISAFITYPE
	(enums.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE)(0),                // 134: openconfig.enums.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE
	(*ywrapper.UintValue)(nil),                                         // 135: ywrapper.UintValue
	(enums.OpenconfigRibBgpTypesINVALIDROUTEREASON)(0),                 // 136: openconfig.enums.OpenconfigRibBgpTypesINVALIDROUTEREASON
	(*ywrapper.StringValue)(nil),                                       // 137: ywrapper.StringValue
	(*ywrapper.BoolValue)(nil),                                         // 138: ywrapper.BoolValue
	(*ywrapper.BytesValue)(nil),                                        // 139: ywrapper.BytesValue
	(enums.OpenconfigBgpTypesBgpOriginAttrType)(0),                     // 140: openconfig.enums.OpenconfigBgpTypesBgpOriginAttrType
	(enums.OpenconfigBgpTypesAsPathSegmentType)(0),                     // 141: openconfig.enums.OpenconfigBgpTypesAsPathSegmentType
	(enums.OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY)(0),              // 142: openconfig.enums.OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY
}
var file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_depIdxs = []int32{
	1,   // 0: openconfig.openconfig_rib_bgp.BgpRib.afi_safis:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis
	2,   // 1: openconfig.openconfig_rib_bgp.BgpRib.attr_sets:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AttrSets
	3,   // 2: openconfig.openconfig_rib_bgp.BgpRib.communities:type_name -> openconfig.openconfig_rib_bgp.BgpRib.Communities
	4,   // 3: openconfig.openconfig_rib_bgp.BgpRib.ext_communities:type_name -> openconfig.openconfig_rib_bgp.BgpRib.ExtCommunities
	6,   // 4: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.afi_safi:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafiKey
	115, // 5: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.attr_set:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSetKey
	126, // 6: openconfig.openconfig_rib_bgp.BgpRib.Communities.community:type_name -> openconfig.openconfig_rib_bgp.BgpRib.Communities.CommunityKey
	130, // 7: openconfig.openconfig_rib_bgp.BgpRib.ExtCommunities.ext_community:type_name -> openconfig.openconfig_rib_bgp.BgpRib.ExtCommunities.ExtCommunityKey
	7,   // 8: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.ipv4_unicast:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast
	8,   // 9: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.ipv6_unicast:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast
	9,   // 10: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.State
	133, // 11: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafiKey.afi_safi_name:type_name -> openconfig.enums.OpenconfigBgpTypesAFISAFITYPE
	5,   // 12: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafiKey.afi_safi:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi
	10,  // 13: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.loc_rib:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib
	11,  // 14: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.neighbors:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors
	64,  // 15: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.loc_rib:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib
	65,  // 16: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.neighbors:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors
	133, // 17: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.State.afi_safi_name:type_name -> openconfig.enums.OpenconfigBgpTypesAFISAFITYPE
	12,  // 18: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.routes:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes
	13,  // 19: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.State
	22,  // 20: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.neighbor:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.NeighborKey
	15,  // 21: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.route:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.RouteKey
	16,  // 22: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.State
	17,  // 23: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.unknown_attributes:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes
	134, // 24: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.RouteKey.origin_openconfigpolicytypesinstallprotocoltype:type_name -> openconfig.enums.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE
	14,  // 25: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.RouteKey.route:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route
	135, // 26: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	135, // 27: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	135, // 28: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	136, // 29: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.State.invalid_reason:type_name -> openconfig.enums.OpenconfigRibBgpTypesINVALIDROUTEREASON
	135, // 30: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	134, // 31: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.State.origin_openconfigpolicytypesinstallprotocoltype:type_name -> openconfig.enums.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE
	135, // 32: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	137, // 33: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.State.prefix:type_name -> ywrapper.StringValue
	138, // 34: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	19,  // 35: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttributeKey
	20,  // 36: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State
	18,  // 37: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute
	135, // 38: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	135, // 39: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	139, // 40: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	138, // 41: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	138, // 42: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	138, // 43: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	138, // 44: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	23,  // 45: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.adj_rib_in_post:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost
	24,  // 46: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.adj_rib_in_pre:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre
	25,  // 47: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.adj_rib_out_post:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost
	26,  // 48: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.adj_rib_out_pre:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre
	27,  // 49: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.State
	21,  // 50: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.NeighborKey.neighbor:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor
	28,  // 51: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.routes:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes
	29,  // 52: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.State
	37,  // 53: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.routes:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes
	38,  // 54: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.State
	46,  // 55: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.routes:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes
	47,  // 56: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.State
	55,  // 57: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.routes:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes
	56,  // 58: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.State
	137, // 59: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.State.neighbor_address:type_name -> ywrapper.StringValue
	31,  // 60: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.route:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.RouteKey
	32,  // 61: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State
	33,  // 62: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.unknown_attributes:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes
	30,  // 63: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.RouteKey.route:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route
	135, // 64: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	138, // 65: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.best_path:type_name -> ywrapper.BoolValue
	135, // 66: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	135, // 67: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	136, // 68: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.invalid_reason:type_name -> openconfig.enums.OpenconfigRibBgpTypesINVALIDROUTEREASON
	135, // 69: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	135, // 70: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	137, // 71: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.prefix:type_name -> ywrapper.StringValue
	138, // 72: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	35,  // 73: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttributeKey
	36,  // 74: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State
	34,  // 75: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute
	135, // 76: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	135, // 77: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	139, // 78: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	138, // 79: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	138, // 80: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	138, // 81: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	138, // 82: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	40,  // 83: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.route:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.RouteKey
	41,  // 84: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State
	42,  // 85: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.unknown_attributes:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes
	39,  // 86: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.RouteKey.route:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route
	135, // 87: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	135, // 88: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	135, // 89: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	136, // 90: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.invalid_reason:type_name -> openconfig.enums.OpenconfigRibBgpTypesINVALIDROUTEREASON
	135, // 91: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	135, // 92: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	137, // 93: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.prefix:type_name -> ywrapper.StringValue
	138, // 94: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	44,  // 95: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttributeKey
	45,  // 96: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State
	43,  // 97: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute
	135, // 98: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	135, // 99: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	139, // 100: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	138, // 101: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	138, // 102: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	138, // 103: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	138, // 104: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	49,  // 105: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.route:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.RouteKey
	50,  // 106: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State
	51,  // 107: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.unknown_attributes:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes
	48,  // 108: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.RouteKey.route:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route
	135, // 109: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	135, // 110: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	135, // 111: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	136, // 112: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.invalid_reason:type_name -> openconfig.enums.OpenconfigRibBgpTypesINVALIDROUTEREASON
	135, // 113: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	135, // 114: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	137, // 115: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.prefix:type_name -> ywrapper.StringValue
	138, // 116: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	53,  // 117: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttributeKey
	54,  // 118: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State
	52,  // 119: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute
	135, // 120: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	135, // 121: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	139, // 122: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	138, // 123: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	138, // 124: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	138, // 125: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	138, // 126: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	58,  // 127: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.route:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.RouteKey
	59,  // 128: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State
	60,  // 129: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.unknown_attributes:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes
	57,  // 130: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.RouteKey.route:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route
	135, // 131: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	135, // 132: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	135, // 133: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	136, // 134: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.invalid_reason:type_name -> openconfig.enums.OpenconfigRibBgpTypesINVALIDROUTEREASON
	135, // 135: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	135, // 136: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	137, // 137: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.prefix:type_name -> ywrapper.StringValue
	138, // 138: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	62,  // 139: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttributeKey
	63,  // 140: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State
	61,  // 141: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute
	135, // 142: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	135, // 143: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	139, // 144: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	138, // 145: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	138, // 146: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	138, // 147: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	138, // 148: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv4Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	66,  // 149: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.routes:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes
	67,  // 150: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.State
	76,  // 151: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.neighbor:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.NeighborKey
	69,  // 152: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.route:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.RouteKey
	70,  // 153: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.State
	71,  // 154: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.unknown_attributes:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes
	134, // 155: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.RouteKey.origin_openconfigpolicytypesinstallprotocoltype:type_name -> openconfig.enums.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE
	68,  // 156: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.RouteKey.route:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route
	135, // 157: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	135, // 158: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	135, // 159: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	136, // 160: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.State.invalid_reason:type_name -> openconfig.enums.OpenconfigRibBgpTypesINVALIDROUTEREASON
	135, // 161: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	134, // 162: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.State.origin_openconfigpolicytypesinstallprotocoltype:type_name -> openconfig.enums.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE
	135, // 163: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	137, // 164: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.State.prefix:type_name -> ywrapper.StringValue
	138, // 165: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	73,  // 166: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttributeKey
	74,  // 167: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State
	72,  // 168: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute
	135, // 169: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	135, // 170: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	139, // 171: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	138, // 172: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	138, // 173: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	138, // 174: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	138, // 175: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.LocRib.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	77,  // 176: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.adj_rib_in_post:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost
	78,  // 177: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.adj_rib_in_pre:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre
	79,  // 178: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.adj_rib_out_post:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost
	80,  // 179: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.adj_rib_out_pre:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre
	81,  // 180: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.State
	75,  // 181: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.NeighborKey.neighbor:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor
	82,  // 182: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.routes:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes
	90,  // 183: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.routes:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes
	98,  // 184: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.routes:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes
	106, // 185: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.routes:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes
	137, // 186: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.State.neighbor_address:type_name -> ywrapper.StringValue
	84,  // 187: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.route:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.RouteKey
	85,  // 188: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State
	86,  // 189: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.unknown_attributes:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes
	83,  // 190: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.RouteKey.route:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route
	135, // 191: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	138, // 192: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.best_path:type_name -> ywrapper.BoolValue
	135, // 193: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	135, // 194: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	136, // 195: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.invalid_reason:type_name -> openconfig.enums.OpenconfigRibBgpTypesINVALIDROUTEREASON
	135, // 196: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	135, // 197: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	137, // 198: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.prefix:type_name -> ywrapper.StringValue
	138, // 199: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	88,  // 200: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttributeKey
	89,  // 201: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State
	87,  // 202: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute
	135, // 203: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	135, // 204: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	139, // 205: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	138, // 206: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	138, // 207: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	138, // 208: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	138, // 209: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	92,  // 210: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.route:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.RouteKey
	93,  // 211: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State
	94,  // 212: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.unknown_attributes:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes
	91,  // 213: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.RouteKey.route:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route
	135, // 214: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	135, // 215: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	135, // 216: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	136, // 217: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.invalid_reason:type_name -> openconfig.enums.OpenconfigRibBgpTypesINVALIDROUTEREASON
	135, // 218: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	135, // 219: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	137, // 220: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.prefix:type_name -> ywrapper.StringValue
	138, // 221: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	96,  // 222: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttributeKey
	97,  // 223: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State
	95,  // 224: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute
	135, // 225: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	135, // 226: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	139, // 227: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	138, // 228: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	138, // 229: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	138, // 230: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	138, // 231: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibInPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	100, // 232: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.route:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.RouteKey
	101, // 233: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State
	102, // 234: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.unknown_attributes:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes
	99,  // 235: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.RouteKey.route:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route
	135, // 236: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	135, // 237: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	135, // 238: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	136, // 239: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.invalid_reason:type_name -> openconfig.enums.OpenconfigRibBgpTypesINVALIDROUTEREASON
	135, // 240: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	135, // 241: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	137, // 242: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.prefix:type_name -> ywrapper.StringValue
	138, // 243: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	104, // 244: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttributeKey
	105, // 245: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State
	103, // 246: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute
	135, // 247: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	135, // 248: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	139, // 249: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	138, // 250: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	138, // 251: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	138, // 252: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	138, // 253: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPost.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	108, // 254: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.route:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.RouteKey
	109, // 255: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State
	110, // 256: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.unknown_attributes:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes
	107, // 257: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.RouteKey.route:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route
	135, // 258: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.attr_index:type_name -> ywrapper.UintValue
	135, // 259: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.community_index:type_name -> ywrapper.UintValue
	135, // 260: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.ext_community_index:type_name -> ywrapper.UintValue
	136, // 261: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.invalid_reason:type_name -> openconfig.enums.OpenconfigRibBgpTypesINVALIDROUTEREASON
	135, // 262: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.last_modified:type_name -> ywrapper.UintValue
	135, // 263: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.path_id:type_name -> ywrapper.UintValue
	137, // 264: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.prefix:type_name -> ywrapper.StringValue
	138, // 265: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.State.valid_route:type_name -> ywrapper.BoolValue
	112, // 266: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.unknown_attribute:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttributeKey
	113, // 267: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State
	111, // 268: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttributeKey.unknown_attribute:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute
	135, // 269: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_len:type_name -> ywrapper.UintValue
	135, // 270: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_type:type_name -> ywrapper.UintValue
	139, // 271: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.attr_value:type_name -> ywrapper.BytesValue
	138, // 272: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.extended:type_name -> ywrapper.BoolValue
	138, // 273: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.optional:type_name -> ywrapper.BoolValue
	138, // 274: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.partial:type_name -> ywrapper.BoolValue
	138, // 275: openconfig.openconfig_rib_bgp.BgpRib.AfiSafis.AfiSafi.Ipv6Unicast.Neighbors.Neighbor.AdjRibOutPre.Routes.Route.UnknownAttributes.UnknownAttribute.State.transitive:type_name -> ywrapper.BoolValue
	116, // 276: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.aggregator:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.Aggregator
	118, // 277: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.as_path:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.AsPath
	117, // 278: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.as4_path:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.As4Path
	119, // 279: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.State
	114, // 280: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSetKey.attr_set:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet
	120, // 281: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.Aggregator.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.Aggregator.State
	121, // 282: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.As4Path.segment:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.As4Path.Segment
	123, // 283: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.AsPath.segment:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.AsPath.Segment
	135, // 284: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.State.aigp:type_name -> ywrapper.UintValue
	138, // 285: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.State.atomic_aggregate:type_name -> ywrapper.BoolValue
	137, // 286: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.State.cluster_list:type_name -> ywrapper.StringValue
	135, // 287: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.State.index:type_name -> ywrapper.UintValue
	135, // 288: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.State.local_pref:type_name -> ywrapper.UintValue
	135, // 289: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.State.med:type_name -> ywrapper.UintValue
	137, // 290: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.State.next_hop:type_name -> ywrapper.StringValue
	140, // 291: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.State.origin:type_name -> openconfig.enums.OpenconfigBgpTypesBgpOriginAttrType
	137, // 292: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.State.originator_id:type_name -> ywrapper.StringValue
	137, // 293: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.Aggregator.State.address:type_name -> ywrapper.StringValue
	135, // 294: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.Aggregator.State.as:type_name -> ywrapper.UintValue
	135, // 295: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.Aggregator.State.as4:type_name -> ywrapper.UintValue
	122, // 296: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.As4Path.Segment.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.As4Path.Segment.State
	135, // 297: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.As4Path.Segment.State.member:type_name -> ywrapper.UintValue
	141, // 298: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.As4Path.Segment.State.type:type_name -> openconfig.enums.OpenconfigBgpTypesAsPathSegmentType
	124, // 299: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.AsPath.Segment.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.AsPath.Segment.State
	135, // 300: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.AsPath.Segment.State.member:type_name -> ywrapper.UintValue
	141, // 301: openconfig.openconfig_rib_bgp.BgpRib.AttrSets.AttrSet.AsPath.Segment.State.type:type_name -> openconfig.enums.OpenconfigBgpTypesAsPathSegmentType
	127, // 302: openconfig.openconfig_rib_bgp.BgpRib.Communities.Community.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.Communities.Community.State
	125, // 303: openconfig.openconfig_rib_bgp.BgpRib.Communities.CommunityKey.community:type_name -> openconfig.openconfig_rib_bgp.BgpRib.Communities.Community
	128, // 304: openconfig.openconfig_rib_bgp.BgpRib.Communities.Community.State.community:type_name -> openconfig.openconfig_rib_bgp.BgpRib.Communities.Community.State.CommunityUnion
	135, // 305: openconfig.openconfig_rib_bgp.BgpRib.Communities.Community.State.index:type_name -> ywrapper.UintValue
	142, // 306: openconfig.openconfig_rib_bgp.BgpRib.Communities.Community.State.CommunityUnion.community_openconfigbgptypesbgpwellknownstdcommunity:type_name -> openconfig.enums.OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY
	131, // 307: openconfig.openconfig_rib_bgp.BgpRib.ExtCommunities.ExtCommunity.state:type_name -> openconfig.openconfig_rib_bgp.BgpRib.ExtCommunities.ExtCommunity.State
	129, // 308: openconfig.openconfig_rib_bgp.BgpRib.ExtCommunities.ExtCommunityKey.ext_community:type_name -> openconfig.openconfig_rib_bgp.BgpRib.ExtCommunities.ExtCommunity
	132, // 309: openconfig.openconfig_rib_bgp.BgpRib.ExtCommunities.ExtCommunity.State.ext_community:type_name -> openconfig.openconfig_rib_bgp.BgpRib.ExtCommunities.ExtCommunity.State.ExtCommunityUnion
	135, // 310: openconfig.openconfig_rib_bgp.BgpRib.ExtCommunities.ExtCommunity.State.index:type_name -> ywrapper.UintValue
	311, // [311:311] is the sub-list for method output_type
	311, // [311:311] is the sub-list for method input_type
	311, // [311:311] is the sub-list for extension type_name
	311, // [311:311] is the sub-list for extension extendee
	0,   // [0:311] is the sub-list for field type_name
}

func init() { file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_init() }
func file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_init() {
	if File_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AttrSets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_Communities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_ExtCommunities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafiKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_NeighborKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_NeighborKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPost_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibInPre_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPost_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_RouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttributeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_Neighbors_Neighbor_AdjRibOutPre_Routes_Route_UnknownAttributes_UnknownAttribute_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AttrSets_AttrSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AttrSets_AttrSetKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AttrSets_AttrSet_Aggregator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AttrSets_AttrSet_As4Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AttrSets_AttrSet_AsPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AttrSets_AttrSet_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AttrSets_AttrSet_Aggregator_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AttrSets_AttrSet_As4Path_Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AttrSets_AttrSet_As4Path_Segment_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AttrSets_AttrSet_AsPath_Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_AttrSets_AttrSet_AsPath_Segment_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_Communities_Community); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_Communities_CommunityKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_Communities_Community_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_Communities_Community_State_CommunityUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_ExtCommunities_ExtCommunity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_ExtCommunities_ExtCommunityKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_ExtCommunities_ExtCommunity_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRib_ExtCommunities_ExtCommunity_State_ExtCommunityUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_OriginOpenconfigpolicytypesinstallprotocoltype)(nil),
		(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_RouteKey_OriginString)(nil),
	}
	file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_OriginOpenconfigpolicytypesinstallprotocoltype)(nil),
		(*BgpRib_AfiSafis_AfiSafi_Ipv4Unicast_LocRib_Routes_Route_State_OriginString)(nil),
	}
	file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[69].OneofWrappers = []interface{}{
		(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_OriginOpenconfigpolicytypesinstallprotocoltype)(nil),
		(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_RouteKey_OriginString)(nil),
	}
	file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes[70].OneofWrappers = []interface{}{
		(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_OriginOpenconfigpolicytypesinstallprotocoltype)(nil),
		(*BgpRib_AfiSafis_AfiSafi_Ipv6Unicast_LocRib_Routes_Route_State_OriginString)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   133,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_goTypes,
		DependencyIndexes: file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_depIdxs,
		MessageInfos:      file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_msgTypes,
	}.Build()
	File_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto = out.File
	file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_rawDesc = nil
	file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_goTypes = nil
	file_ribproto_openconfig_openconfig_rib_bgp_openconfig_rib_bgp_proto_depIdxs = nil
}
