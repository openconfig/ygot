// openconfig.enums is generated by proto_generator as a protobuf
// representation of a YANG schema.
//
// Input schema modules:
//  - yang/rib/openconfig-rib-bgp.yang
// Include paths:
//   - yang/...

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.2
// source: ribproto/openconfig/enums/enums.proto

package enums

import (
	_ "github.com/openconfig/ygot/proto/yext"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OpenconfigBgpTypesAFISAFITYPE represents an enumerated type generated for the YANG identity AFI_SAFI_TYPE.
type OpenconfigBgpTypesAFISAFITYPE int32

const (
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_UNSET                OpenconfigBgpTypesAFISAFITYPE = 0
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV4_MULTICAST OpenconfigBgpTypesAFISAFITYPE = 53601692
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV6_MULTICAST OpenconfigBgpTypesAFISAFITYPE = 171618750
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_IPV4_UNICAST         OpenconfigBgpTypesAFISAFITYPE = 196909421
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_L2VPN_EVPN           OpenconfigBgpTypesAFISAFITYPE = 213517208
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_IPV6_UNICAST         OpenconfigBgpTypesAFISAFITYPE = 270342995
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_IPV4_LABELED_UNICAST OpenconfigBgpTypesAFISAFITYPE = 279108253
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV4_UNICAST   OpenconfigBgpTypesAFISAFITYPE = 358537365
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_IPV6_LABELED_UNICAST OpenconfigBgpTypesAFISAFITYPE = 420698035
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV6_UNICAST   OpenconfigBgpTypesAFISAFITYPE = 421890363
	OpenconfigBgpTypesAFISAFITYPE_OPENCONFIGBGPTYPESAFISAFITYPE_L2VPN_VPLS           OpenconfigBgpTypesAFISAFITYPE = 533405094
)

// Enum value maps for OpenconfigBgpTypesAFISAFITYPE.
var (
	OpenconfigBgpTypesAFISAFITYPE_name = map[int32]string{
		0:         "OPENCONFIGBGPTYPESAFISAFITYPE_UNSET",
		53601692:  "OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV4_MULTICAST",
		171618750: "OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV6_MULTICAST",
		196909421: "OPENCONFIGBGPTYPESAFISAFITYPE_IPV4_UNICAST",
		213517208: "OPENCONFIGBGPTYPESAFISAFITYPE_L2VPN_EVPN",
		270342995: "OPENCONFIGBGPTYPESAFISAFITYPE_IPV6_UNICAST",
		279108253: "OPENCONFIGBGPTYPESAFISAFITYPE_IPV4_LABELED_UNICAST",
		358537365: "OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV4_UNICAST",
		420698035: "OPENCONFIGBGPTYPESAFISAFITYPE_IPV6_LABELED_UNICAST",
		421890363: "OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV6_UNICAST",
		533405094: "OPENCONFIGBGPTYPESAFISAFITYPE_L2VPN_VPLS",
	}
	OpenconfigBgpTypesAFISAFITYPE_value = map[string]int32{
		"OPENCONFIGBGPTYPESAFISAFITYPE_UNSET":                0,
		"OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV4_MULTICAST": 53601692,
		"OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV6_MULTICAST": 171618750,
		"OPENCONFIGBGPTYPESAFISAFITYPE_IPV4_UNICAST":         196909421,
		"OPENCONFIGBGPTYPESAFISAFITYPE_L2VPN_EVPN":           213517208,
		"OPENCONFIGBGPTYPESAFISAFITYPE_IPV6_UNICAST":         270342995,
		"OPENCONFIGBGPTYPESAFISAFITYPE_IPV4_LABELED_UNICAST": 279108253,
		"OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV4_UNICAST":   358537365,
		"OPENCONFIGBGPTYPESAFISAFITYPE_IPV6_LABELED_UNICAST": 420698035,
		"OPENCONFIGBGPTYPESAFISAFITYPE_L3VPN_IPV6_UNICAST":   421890363,
		"OPENCONFIGBGPTYPESAFISAFITYPE_L2VPN_VPLS":           533405094,
	}
)

func (x OpenconfigBgpTypesAFISAFITYPE) Enum() *OpenconfigBgpTypesAFISAFITYPE {
	p := new(OpenconfigBgpTypesAFISAFITYPE)
	*p = x
	return p
}

func (x OpenconfigBgpTypesAFISAFITYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBgpTypesAFISAFITYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_ribproto_openconfig_enums_enums_proto_enumTypes[0].Descriptor()
}

func (OpenconfigBgpTypesAFISAFITYPE) Type() protoreflect.EnumType {
	return &file_ribproto_openconfig_enums_enums_proto_enumTypes[0]
}

func (x OpenconfigBgpTypesAFISAFITYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBgpTypesAFISAFITYPE.Descriptor instead.
func (OpenconfigBgpTypesAFISAFITYPE) EnumDescriptor() ([]byte, []int) {
	return file_ribproto_openconfig_enums_enums_proto_rawDescGZIP(), []int{0}
}

// OpenconfigBgpTypesAsPathSegmentType represents an enumerated type generated for the YANG enumerated type as-path-segment-type.
type OpenconfigBgpTypesAsPathSegmentType int32

const (
	OpenconfigBgpTypesAsPathSegmentType_OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_UNSET              OpenconfigBgpTypesAsPathSegmentType = 0
	OpenconfigBgpTypesAsPathSegmentType_OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_AS_SEQ             OpenconfigBgpTypesAsPathSegmentType = 1
	OpenconfigBgpTypesAsPathSegmentType_OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_AS_SET             OpenconfigBgpTypesAsPathSegmentType = 2
	OpenconfigBgpTypesAsPathSegmentType_OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_AS_CONFED_SEQUENCE OpenconfigBgpTypesAsPathSegmentType = 3
	OpenconfigBgpTypesAsPathSegmentType_OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_AS_CONFED_SET      OpenconfigBgpTypesAsPathSegmentType = 4
)

// Enum value maps for OpenconfigBgpTypesAsPathSegmentType.
var (
	OpenconfigBgpTypesAsPathSegmentType_name = map[int32]string{
		0: "OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_UNSET",
		1: "OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_AS_SEQ",
		2: "OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_AS_SET",
		3: "OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_AS_CONFED_SEQUENCE",
		4: "OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_AS_CONFED_SET",
	}
	OpenconfigBgpTypesAsPathSegmentType_value = map[string]int32{
		"OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_UNSET":              0,
		"OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_AS_SEQ":             1,
		"OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_AS_SET":             2,
		"OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_AS_CONFED_SEQUENCE": 3,
		"OPENCONFIGBGPTYPESASPATHSEGMENTTYPE_AS_CONFED_SET":      4,
	}
)

func (x OpenconfigBgpTypesAsPathSegmentType) Enum() *OpenconfigBgpTypesAsPathSegmentType {
	p := new(OpenconfigBgpTypesAsPathSegmentType)
	*p = x
	return p
}

func (x OpenconfigBgpTypesAsPathSegmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBgpTypesAsPathSegmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_ribproto_openconfig_enums_enums_proto_enumTypes[1].Descriptor()
}

func (OpenconfigBgpTypesAsPathSegmentType) Type() protoreflect.EnumType {
	return &file_ribproto_openconfig_enums_enums_proto_enumTypes[1]
}

func (x OpenconfigBgpTypesAsPathSegmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBgpTypesAsPathSegmentType.Descriptor instead.
func (OpenconfigBgpTypesAsPathSegmentType) EnumDescriptor() ([]byte, []int) {
	return file_ribproto_openconfig_enums_enums_proto_rawDescGZIP(), []int{1}
}

// OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY represents an enumerated type generated for the YANG identity BGP_WELL_KNOWN_STD_COMMUNITY.
type OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY int32

const (
	OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_UNSET               OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY = 0
	OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_EXPORT           OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY = 7425995
	OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_EXPORT_SUBCONFED OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY = 75227749
	OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NOPEER              OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY = 77476850
	OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_ADVERTISE        OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY = 126797620
)

// Enum value maps for OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY.
var (
	OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_name = map[int32]string{
		0:         "OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_UNSET",
		7425995:   "OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_EXPORT",
		75227749:  "OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_EXPORT_SUBCONFED",
		77476850:  "OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NOPEER",
		126797620: "OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_ADVERTISE",
	}
	OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY_value = map[string]int32{
		"OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_UNSET":               0,
		"OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_EXPORT":           7425995,
		"OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_EXPORT_SUBCONFED": 75227749,
		"OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NOPEER":              77476850,
		"OPENCONFIGBGPTYPESBGPWELLKNOWNSTDCOMMUNITY_NO_ADVERTISE":        126797620,
	}
)

func (x OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY) Enum() *OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY {
	p := new(OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY)
	*p = x
	return p
}

func (x OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY) Descriptor() protoreflect.EnumDescriptor {
	return file_ribproto_openconfig_enums_enums_proto_enumTypes[2].Descriptor()
}

func (OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY) Type() protoreflect.EnumType {
	return &file_ribproto_openconfig_enums_enums_proto_enumTypes[2]
}

func (x OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY.Descriptor instead.
func (OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY) EnumDescriptor() ([]byte, []int) {
	return file_ribproto_openconfig_enums_enums_proto_rawDescGZIP(), []int{2}
}

// OpenconfigBgpTypesBgpOriginAttrType represents an enumerated type generated for the YANG enumerated type bgp-origin-attr-type.
type OpenconfigBgpTypesBgpOriginAttrType int32

const (
	OpenconfigBgpTypesBgpOriginAttrType_OPENCONFIGBGPTYPESBGPORIGINATTRTYPE_UNSET      OpenconfigBgpTypesBgpOriginAttrType = 0
	OpenconfigBgpTypesBgpOriginAttrType_OPENCONFIGBGPTYPESBGPORIGINATTRTYPE_IGP        OpenconfigBgpTypesBgpOriginAttrType = 1
	OpenconfigBgpTypesBgpOriginAttrType_OPENCONFIGBGPTYPESBGPORIGINATTRTYPE_EGP        OpenconfigBgpTypesBgpOriginAttrType = 2
	OpenconfigBgpTypesBgpOriginAttrType_OPENCONFIGBGPTYPESBGPORIGINATTRTYPE_INCOMPLETE OpenconfigBgpTypesBgpOriginAttrType = 3
)

// Enum value maps for OpenconfigBgpTypesBgpOriginAttrType.
var (
	OpenconfigBgpTypesBgpOriginAttrType_name = map[int32]string{
		0: "OPENCONFIGBGPTYPESBGPORIGINATTRTYPE_UNSET",
		1: "OPENCONFIGBGPTYPESBGPORIGINATTRTYPE_IGP",
		2: "OPENCONFIGBGPTYPESBGPORIGINATTRTYPE_EGP",
		3: "OPENCONFIGBGPTYPESBGPORIGINATTRTYPE_INCOMPLETE",
	}
	OpenconfigBgpTypesBgpOriginAttrType_value = map[string]int32{
		"OPENCONFIGBGPTYPESBGPORIGINATTRTYPE_UNSET":      0,
		"OPENCONFIGBGPTYPESBGPORIGINATTRTYPE_IGP":        1,
		"OPENCONFIGBGPTYPESBGPORIGINATTRTYPE_EGP":        2,
		"OPENCONFIGBGPTYPESBGPORIGINATTRTYPE_INCOMPLETE": 3,
	}
)

func (x OpenconfigBgpTypesBgpOriginAttrType) Enum() *OpenconfigBgpTypesBgpOriginAttrType {
	p := new(OpenconfigBgpTypesBgpOriginAttrType)
	*p = x
	return p
}

func (x OpenconfigBgpTypesBgpOriginAttrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigBgpTypesBgpOriginAttrType) Descriptor() protoreflect.EnumDescriptor {
	return file_ribproto_openconfig_enums_enums_proto_enumTypes[3].Descriptor()
}

func (OpenconfigBgpTypesBgpOriginAttrType) Type() protoreflect.EnumType {
	return &file_ribproto_openconfig_enums_enums_proto_enumTypes[3]
}

func (x OpenconfigBgpTypesBgpOriginAttrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigBgpTypesBgpOriginAttrType.Descriptor instead.
func (OpenconfigBgpTypesBgpOriginAttrType) EnumDescriptor() ([]byte, []int) {
	return file_ribproto_openconfig_enums_enums_proto_rawDescGZIP(), []int{3}
}

// OpenconfigPolicyTypesINSTALLPROTOCOLTYPE represents an enumerated type generated for the YANG identity INSTALL_PROTOCOL_TYPE.
type OpenconfigPolicyTypesINSTALLPROTOCOLTYPE int32

const (
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_UNSET              OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 0
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_STATIC             OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 164198026
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_LOCAL_AGGREGATE    OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 167243989
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_OSPF               OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 187006448
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_ISIS               OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 308545656
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_BGP                OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 436650411
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_DIRECTLY_CONNECTED OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 463126862
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_OSPF3              OpenconfigPolicyTypesINSTALLPROTOCOLTYPE = 470106339
)

// Enum value maps for OpenconfigPolicyTypesINSTALLPROTOCOLTYPE.
var (
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_name = map[int32]string{
		0:         "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_UNSET",
		164198026: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_STATIC",
		167243989: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_LOCAL_AGGREGATE",
		187006448: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_OSPF",
		308545656: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_ISIS",
		436650411: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_BGP",
		463126862: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_DIRECTLY_CONNECTED",
		470106339: "OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_OSPF3",
	}
	OpenconfigPolicyTypesINSTALLPROTOCOLTYPE_value = map[string]int32{
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_UNSET":              0,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_STATIC":             164198026,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_LOCAL_AGGREGATE":    167243989,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_OSPF":               187006448,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_ISIS":               308545656,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_BGP":                436650411,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_DIRECTLY_CONNECTED": 463126862,
		"OPENCONFIGPOLICYTYPESINSTALLPROTOCOLTYPE_OSPF3":              470106339,
	}
)

func (x OpenconfigPolicyTypesINSTALLPROTOCOLTYPE) Enum() *OpenconfigPolicyTypesINSTALLPROTOCOLTYPE {
	p := new(OpenconfigPolicyTypesINSTALLPROTOCOLTYPE)
	*p = x
	return p
}

func (x OpenconfigPolicyTypesINSTALLPROTOCOLTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigPolicyTypesINSTALLPROTOCOLTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_ribproto_openconfig_enums_enums_proto_enumTypes[4].Descriptor()
}

func (OpenconfigPolicyTypesINSTALLPROTOCOLTYPE) Type() protoreflect.EnumType {
	return &file_ribproto_openconfig_enums_enums_proto_enumTypes[4]
}

func (x OpenconfigPolicyTypesINSTALLPROTOCOLTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigPolicyTypesINSTALLPROTOCOLTYPE.Descriptor instead.
func (OpenconfigPolicyTypesINSTALLPROTOCOLTYPE) EnumDescriptor() ([]byte, []int) {
	return file_ribproto_openconfig_enums_enums_proto_rawDescGZIP(), []int{4}
}

// OpenconfigRibBgpTypesINVALIDROUTEREASON represents an enumerated type generated for the YANG identity INVALID_ROUTE_REASON.
type OpenconfigRibBgpTypesINVALIDROUTEREASON int32

const (
	OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET                OpenconfigRibBgpTypesINVALIDROUTEREASON = 0
	OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_AS_LOOP      OpenconfigRibBgpTypesINVALIDROUTEREASON = 281940072
	OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_ORIGINATOR   OpenconfigRibBgpTypesINVALIDROUTEREASON = 329543457
	OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_CLUSTER_LOOP OpenconfigRibBgpTypesINVALIDROUTEREASON = 363552896
	OpenconfigRibBgpTypesINVALIDROUTEREASON_OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_CONFED       OpenconfigRibBgpTypesINVALIDROUTEREASON = 404003798
)

// Enum value maps for OpenconfigRibBgpTypesINVALIDROUTEREASON.
var (
	OpenconfigRibBgpTypesINVALIDROUTEREASON_name = map[int32]string{
		0:         "OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET",
		281940072: "OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_AS_LOOP",
		329543457: "OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_ORIGINATOR",
		363552896: "OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_CLUSTER_LOOP",
		404003798: "OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_CONFED",
	}
	OpenconfigRibBgpTypesINVALIDROUTEREASON_value = map[string]int32{
		"OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_UNSET":                0,
		"OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_AS_LOOP":      281940072,
		"OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_ORIGINATOR":   329543457,
		"OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_CLUSTER_LOOP": 363552896,
		"OPENCONFIGRIBBGPTYPESINVALIDROUTEREASON_INVALID_CONFED":       404003798,
	}
)

func (x OpenconfigRibBgpTypesINVALIDROUTEREASON) Enum() *OpenconfigRibBgpTypesINVALIDROUTEREASON {
	p := new(OpenconfigRibBgpTypesINVALIDROUTEREASON)
	*p = x
	return p
}

func (x OpenconfigRibBgpTypesINVALIDROUTEREASON) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenconfigRibBgpTypesINVALIDROUTEREASON) Descriptor() protoreflect.EnumDescriptor {
	return file_ribproto_openconfig_enums_enums_proto_enumTypes[5].Descriptor()
}

func (OpenconfigRibBgpTypesINVALIDROUTEREASON) Type() protoreflect.EnumType {
	return &file_ribproto_openconfig_enums_enums_proto_enumTypes[5]
}

func (x OpenconfigRibBgpTypesINVALIDROUTEREASON) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenconfigRibBgpTypesINVALIDROUTEREASON.Descriptor instead.
func (OpenconfigRibBgpTypesINVALIDROUTEREASON) EnumDescriptor() ([]byte, []int) {
	return file_ribproto_openconfig_enums_enums_proto_rawDescGZIP(), []int{5}
}

var File_ribproto_openconfig_enums_enums_proto protoreflect.FileDescriptor

var file_ribproto_openconfig_enums_enums_proto_rawDesc = []byte{
	0x0a, 0x25, 0x72, 0x69, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x1a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x79, 0x67, 0x6f, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x65, 0x78, 0x74,
	0x2f, 0x79, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0xc6, 0x06, 0x0a, 0x1d,
	0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x12, 0x27, 0x0a,
	0x23, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x52, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53,
	0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x33, 0x56, 0x50, 0x4e, 0x5f, 0x49, 0x50,
	0x56, 0x34, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x9c, 0xcb, 0xc7,
	0x19, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x4c, 0x33, 0x56, 0x50, 0x4e, 0x5f, 0x49, 0x50, 0x56, 0x34,
	0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x12, 0x52, 0x0a, 0x32, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x33, 0x56, 0x50,
	0x4e, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54,
	0x10, 0xbe, 0xe3, 0xea, 0x51, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x4c, 0x33, 0x56, 0x50, 0x4e, 0x5f,
	0x49, 0x50, 0x56, 0x36, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x12, 0x42,
	0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x50, 0x56, 0x34, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0xed, 0xb2, 0xf2,
	0x5d, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41,
	0x53, 0x54, 0x12, 0x3e, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x32, 0x56, 0x50, 0x4e, 0x5f, 0x45, 0x56, 0x50, 0x4e, 0x10, 0x98,
	0x87, 0xe8, 0x65, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x4c, 0x32, 0x56, 0x50, 0x4e, 0x5f, 0x45, 0x56,
	0x50, 0x4e, 0x12, 0x43, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54,
	0x10, 0xd3, 0xb6, 0xf4, 0x80, 0x01, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x49, 0x50, 0x56, 0x36, 0x5f,
	0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x12, 0x53, 0x0a, 0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49,
	0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x9d, 0xb5,
	0x8b, 0x85, 0x01, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x12, 0x4f, 0x0a, 0x30,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x33,
	0x56, 0x50, 0x4e, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54,
	0x10, 0x95, 0xb1, 0xfb, 0xaa, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x4c, 0x33, 0x56, 0x50, 0x4e,
	0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x12, 0x53, 0x0a,
	0x32, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x50, 0x56, 0x36, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x43,
	0x41, 0x53, 0x54, 0x10, 0xb3, 0xaf, 0xcd, 0xc8, 0x01, 0x1a, 0x17, 0x82, 0x41, 0x14, 0x49, 0x50,
	0x56, 0x36, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41,
	0x53, 0x54, 0x12, 0x4f, 0x0a, 0x30, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x33, 0x56, 0x50, 0x4e, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x55,
	0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0xbb, 0x92, 0x96, 0xc9, 0x01, 0x1a, 0x15, 0x82, 0x41,
	0x12, 0x4c, 0x33, 0x56, 0x50, 0x4e, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x55, 0x4e, 0x49, 0x43,
	0x41, 0x53, 0x54, 0x12, 0x3f, 0x0a, 0x28, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x46, 0x49, 0x53, 0x41, 0x46, 0x49,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x32, 0x56, 0x50, 0x4e, 0x5f, 0x56, 0x50, 0x4c, 0x53, 0x10,
	0xa6, 0xbb, 0xac, 0xfe, 0x01, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x4c, 0x32, 0x56, 0x50, 0x4e, 0x5f,
	0x56, 0x50, 0x4c, 0x53, 0x2a, 0xe6, 0x02, 0x0a, 0x23, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x73, 0x50, 0x61, 0x74,
	0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x29,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x41, 0x53, 0x50, 0x41, 0x54, 0x48, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x39, 0x0a, 0x2a, 0x4f,
	0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x41, 0x53, 0x50, 0x41, 0x54, 0x48, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x53, 0x45, 0x51, 0x10, 0x01, 0x1a, 0x09, 0x82, 0x41, 0x06,
	0x41, 0x53, 0x5f, 0x53, 0x45, 0x51, 0x12, 0x39, 0x0a, 0x2a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x53, 0x50, 0x41,
	0x54, 0x48, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53,
	0x5f, 0x53, 0x45, 0x54, 0x10, 0x02, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x41, 0x53, 0x5f, 0x53, 0x45,
	0x54, 0x12, 0x51, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42,
	0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x53, 0x50, 0x41, 0x54, 0x48, 0x53, 0x45, 0x47,
	0x4d, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x45, 0x44, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x1a, 0x15, 0x82,
	0x41, 0x12, 0x41, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x51, 0x55,
	0x45, 0x4e, 0x43, 0x45, 0x12, 0x47, 0x0a, 0x31, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x41, 0x53, 0x50, 0x41, 0x54, 0x48,
	0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x04, 0x1a, 0x10, 0x82, 0x41, 0x0d,
	0x41, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x54, 0x2a, 0xa2, 0x03,
	0x0a, 0x2a, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x67, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x42, 0x47, 0x50, 0x57, 0x45, 0x4c, 0x4c, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x53, 0x54, 0x44, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x12, 0x34, 0x0a, 0x30,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x42, 0x47, 0x50, 0x57, 0x45, 0x4c, 0x4c, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x53, 0x54,
	0x44, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x49, 0x0a, 0x34, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x57, 0x45, 0x4c, 0x4c, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x53, 0x54, 0x44, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59,
	0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x10, 0xcb, 0x9f, 0xc5, 0x03, 0x1a,
	0x0c, 0x82, 0x41, 0x09, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x12, 0x5d, 0x0a,
	0x3e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x57, 0x45, 0x4c, 0x4c, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x53,
	0x54, 0x44, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x45,
	0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x44, 0x10,
	0xe5, 0xc4, 0xef, 0x23, 0x1a, 0x16, 0x82, 0x41, 0x13, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x44, 0x12, 0x43, 0x0a, 0x31,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x42, 0x47, 0x50, 0x57, 0x45, 0x4c, 0x4c, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x53, 0x54,
	0x44, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x50, 0x45, 0x45,
	0x52, 0x10, 0xf2, 0xe7, 0xf8, 0x24, 0x1a, 0x09, 0x82, 0x41, 0x06, 0x4e, 0x4f, 0x50, 0x45, 0x45,
	0x52, 0x12, 0x4f, 0x0a, 0x37, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42,
	0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x57, 0x45, 0x4c, 0x4c, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x53, 0x54, 0x44, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f,
	0x4e, 0x4f, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x10, 0xb4, 0x8e, 0xbb,
	0x3c, 0x1a, 0x0f, 0x82, 0x41, 0x0c, 0x4e, 0x4f, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49,
	0x53, 0x45, 0x2a, 0x81, 0x02, 0x0a, 0x23, 0x4f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x67, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x67, 0x70, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x42, 0x47, 0x50, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x33, 0x0a, 0x27, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42,
	0x47, 0x50, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x47, 0x50, 0x10, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x49, 0x47, 0x50, 0x12, 0x33,
	0x0a, 0x27, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x42, 0x47, 0x50, 0x54,
	0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x54, 0x54,
	0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x47, 0x50, 0x10, 0x02, 0x1a, 0x06, 0x82, 0x41, 0x03,
	0x45, 0x47, 0x50, 0x12, 0x41, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x42, 0x47, 0x50, 0x4f, 0x52, 0x49, 0x47,
	0x49, 0x4e, 0x41, 0x54, 0x54, 0x52, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x1a, 0x0d, 0x82, 0x41, 0x0a, 0x49, 0x4e, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x2a, 0xd1, 0x04, 0x0a, 0x28, 0x4f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54,
	0x59, 0x50, 0x45, 0x12, 0x32, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x41, 0x0a, 0x2f, 0x4f, 0x50, 0x45, 0x4e, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x8a, 0xed, 0xa5, 0x4e, 0x1a,
	0x09, 0x82, 0x41, 0x06, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x12, 0x53, 0x0a, 0x38, 0x4f, 0x50,
	0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54, 0x59,
	0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x41, 0x47, 0x47,
	0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x10, 0xd5, 0xe1, 0xdf, 0x4f, 0x1a, 0x12, 0x82, 0x41, 0x0f,
	0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x12,
	0x3d, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x53, 0x50, 0x46,
	0x10, 0xf0, 0xfb, 0x95, 0x59, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x4f, 0x53, 0x50, 0x46, 0x12, 0x3e,
	0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x10,
	0xf8, 0x90, 0x90, 0x93, 0x01, 0x1a, 0x07, 0x82, 0x41, 0x04, 0x49, 0x53, 0x49, 0x53, 0x12, 0x3c,
	0x0a, 0x2c, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x47, 0x50, 0x10, 0xab,
	0x83, 0x9b, 0xd0, 0x01, 0x1a, 0x06, 0x82, 0x41, 0x03, 0x42, 0x47, 0x50, 0x12, 0x5a, 0x0a, 0x3b,
	0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4c,
	0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0xce, 0x82, 0xeb, 0xdc,
	0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4c, 0x59, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x12, 0x40, 0x0a, 0x2e, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x33, 0x10, 0xe3, 0x81, 0x95, 0xe0, 0x01,
	0x1a, 0x08, 0x82, 0x41, 0x05, 0x4f, 0x53, 0x50, 0x46, 0x33, 0x2a, 0xbe, 0x03, 0x0a, 0x27, 0x4f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x69, 0x62, 0x42, 0x67, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x53, 0x0a, 0x37, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x53, 0x5f,
	0x4c, 0x4f, 0x4f, 0x50, 0x10, 0xe8, 0xa0, 0xb8, 0x86, 0x01, 0x1a, 0x12, 0x82, 0x41, 0x0f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x53, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x12, 0x59,
	0x0a, 0x3a, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42,
	0x47, 0x50, 0x54, 0x59, 0x50, 0x45, 0x53, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x10, 0xa1, 0xde, 0x91,
	0x9d, 0x01, 0x1a, 0x15, 0x82, 0x41, 0x12, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f,
	0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x12, 0x5d, 0x0a, 0x3c, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50,
	0x45, 0x53, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x55,
	0x53, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x10, 0x80, 0xc1, 0xad, 0xad, 0x01, 0x1a,
	0x17, 0x82, 0x41, 0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x55, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x12, 0x51, 0x0a, 0x36, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x52, 0x49, 0x42, 0x42, 0x47, 0x50, 0x54, 0x59, 0x50, 0x45,
	0x53, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x45, 0x44, 0x10, 0xd6, 0xb7, 0xd2, 0xc0, 0x01, 0x1a, 0x11, 0x82, 0x41, 0x0e, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x44, 0x42, 0x54, 0x5a, 0x52, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x79, 0x67, 0x6f, 0x74, 0x2f, 0x64, 0x65, 0x6d, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x67, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x2f, 0x72, 0x69, 0x62, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ribproto_openconfig_enums_enums_proto_rawDescOnce sync.Once
	file_ribproto_openconfig_enums_enums_proto_rawDescData = file_ribproto_openconfig_enums_enums_proto_rawDesc
)

func file_ribproto_openconfig_enums_enums_proto_rawDescGZIP() []byte {
	file_ribproto_openconfig_enums_enums_proto_rawDescOnce.Do(func() {
		file_ribproto_openconfig_enums_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_ribproto_openconfig_enums_enums_proto_rawDescData)
	})
	return file_ribproto_openconfig_enums_enums_proto_rawDescData
}

var file_ribproto_openconfig_enums_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_ribproto_openconfig_enums_enums_proto_goTypes = []interface{}{
	(OpenconfigBgpTypesAFISAFITYPE)(0),              // 0: openconfig.enums.OpenconfigBgpTypesAFISAFITYPE
	(OpenconfigBgpTypesAsPathSegmentType)(0),        // 1: openconfig.enums.OpenconfigBgpTypesAsPathSegmentType
	(OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY)(0), // 2: openconfig.enums.OpenconfigBgpTypesBGPWELLKNOWNSTDCOMMUNITY
	(OpenconfigBgpTypesBgpOriginAttrType)(0),        // 3: openconfig.enums.OpenconfigBgpTypesBgpOriginAttrType
	(OpenconfigPolicyTypesINSTALLPROTOCOLTYPE)(0),   // 4: openconfig.enums.OpenconfigPolicyTypesINSTALLPROTOCOLTYPE
	(OpenconfigRibBgpTypesINVALIDROUTEREASON)(0),    // 5: openconfig.enums.OpenconfigRibBgpTypesINVALIDROUTEREASON
}
var file_ribproto_openconfig_enums_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ribproto_openconfig_enums_enums_proto_init() }
func file_ribproto_openconfig_enums_enums_proto_init() {
	if File_ribproto_openconfig_enums_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ribproto_openconfig_enums_enums_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ribproto_openconfig_enums_enums_proto_goTypes,
		DependencyIndexes: file_ribproto_openconfig_enums_enums_proto_depIdxs,
		EnumInfos:         file_ribproto_openconfig_enums_enums_proto_enumTypes,
	}.Build()
	File_ribproto_openconfig_enums_enums_proto = out.File
	file_ribproto_openconfig_enums_enums_proto_rawDesc = nil
	file_ribproto_openconfig_enums_enums_proto_goTypes = nil
	file_ribproto_openconfig_enums_enums_proto_depIdxs = nil
}
