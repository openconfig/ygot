/*
Package ocstructs is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by codegen-tests
using the following YANG input files:
	- ../testdata/modules/openconfig-withlist.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

// Model represents the /openconfig-withlist/model YANG schema element.
type Model struct {
	MultiKey	map[Model_MultiKey_Key]*Model_MultiKey	`path:"b/multi-key" module:"openconfig-withlist/openconfig-withlist"`
	SingleKey	map[string]*Model_SingleKey	`path:"a/single-key" module:"openconfig-withlist/openconfig-withlist"`
	SingleKeyOrdered	*Model_SingleKeyOrdered_OrderedMap	`path:"c/single-key-ordered" module:"openconfig-withlist/openconfig-withlist"`
}

// IsYANGGoStruct ensures that Model implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Model) IsYANGGoStruct() {}

// Model_MultiKey_Key represents the key for list MultiKey of element /openconfig-withlist/model.
type Model_MultiKey_Key struct {
	Key1	uint32	`path:"key1"`
	Key2	uint64	`path:"key2"`
}

// IsYANGGoKeyStruct ensures that Model_MultiKey_Key partially implements the
// yang.GoKeyStruct interface. This allows functions that need to
// handle this key struct to identify it as being generated by gogen.
func (Model_MultiKey_Key) IsYANGGoKeyStruct() {}

// ΛListKeyMap returns the values of the Model_MultiKey_Key key struct.
func (t Model_MultiKey_Key) ΛListKeyMap() (map[string]interface{}, error) {
	return map[string]interface{}{
		"key1": t.Key1,
		"key2": t.Key2,
	}, nil
}

// NewMultiKey creates a new entry in the MultiKey list of the
// Model struct. The keys of the list are populated from the input
// arguments.
func (t *Model) NewMultiKey(Key1 uint32, Key2 uint64) (*Model_MultiKey, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MultiKey == nil {
		t.MultiKey = make(map[Model_MultiKey_Key]*Model_MultiKey)
	}

	key := Model_MultiKey_Key{
		Key1: Key1,
		Key2: Key2,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MultiKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MultiKey", key)
	}

	t.MultiKey[key] = &Model_MultiKey{
		Key1: &Key1,
		Key2: &Key2,
	}

	return t.MultiKey[key], nil
}

// RenameMultiKey renames an entry in the list MultiKey within
// the Model struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Model) RenameMultiKey(oldK, newK Model_MultiKey_Key) error {
	if _, ok := t.MultiKey[newK]; ok {
		return fmt.Errorf("key %v already exists in MultiKey", newK)
	}

	e, ok := t.MultiKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MultiKey", oldK)
	}
	e.Key1 = &newK.Key1
	e.Key2 = &newK.Key2

	t.MultiKey[newK] = e
	delete(t.MultiKey, oldK)
	return nil
}

// NewSingleKey creates a new entry in the SingleKey list of the
// Model struct. The keys of the list are populated from the input
// arguments.
func (t *Model) NewSingleKey(Key string) (*Model_SingleKey, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SingleKey == nil {
		t.SingleKey = make(map[string]*Model_SingleKey)
	}

	key := Key

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SingleKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SingleKey", key)
	}

	t.SingleKey[key] = &Model_SingleKey{
		Key: &Key,
	}

	return t.SingleKey[key], nil
}

// RenameSingleKey renames an entry in the list SingleKey within
// the Model struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Model) RenameSingleKey(oldK, newK string) error {
	if _, ok := t.SingleKey[newK]; ok {
		return fmt.Errorf("key %v already exists in SingleKey", newK)
	}

	e, ok := t.SingleKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SingleKey", oldK)
	}
	e.Key = &newK

	t.SingleKey[newK] = e
	delete(t.SingleKey, oldK)
	return nil
}

// GetOrCreateSingleKeyOrderedMap returns the ordered map field
// SingleKeyOrdered from Model.
//
// It initializes the field if not already initialized.
func (s *Model) GetOrCreateSingleKeyOrderedMap() *Model_SingleKeyOrdered_OrderedMap {
	if s.SingleKeyOrdered == nil {
		s.SingleKeyOrdered = &Model_SingleKeyOrdered_OrderedMap{}
	}
	return s.SingleKeyOrdered
}

// AppendNewSingleKeyOrdered creates a new entry in the SingleKeyOrdered
// ordered map of the Model struct. The keys of the list are
// populated from the input arguments.
func (s *Model) AppendNewSingleKeyOrdered(Key string) (*Model_SingleKeyOrdered, error) {
	if s.SingleKeyOrdered == nil {
		s.SingleKeyOrdered = &Model_SingleKeyOrdered_OrderedMap{}
	}
	return s.SingleKeyOrdered.AppendNew(Key)
}

// AppendSingleKeyOrdered appends the supplied Model_SingleKeyOrdered struct
// to the list SingleKeyOrdered of Model. If the key value(s)
// specified in the supplied Model_SingleKeyOrdered already exist in the list, an
// error is returned.
func (s *Model) AppendSingleKeyOrdered(v *Model_SingleKeyOrdered) error {
	if s.SingleKeyOrdered == nil {
		s.SingleKeyOrdered = &Model_SingleKeyOrdered_OrderedMap{}
	}
	return s.SingleKeyOrdered.Append(v)
}

// GetSingleKeyOrdered retrieves the value with the specified key from the
// SingleKeyOrdered map field of Model. If the receiver
// is nil, or the specified key is not present in the list, nil is returned
// such that Get* methods may be safely chained.
func (s *Model) GetSingleKeyOrdered(Key string) *Model_SingleKeyOrdered {
	if s == nil {
		return nil
	}
	key := Key
	return s.SingleKeyOrdered.Get(key)
}

// DeleteSingleKeyOrdered deletes the value with the specified keys from
// the receiver Model. If there is no such element, the
// function is a no-op.
func (s *Model) DeleteSingleKeyOrdered(Key string) bool {
	key := Key
	return s.SingleKeyOrdered.Delete(key)
}

// Model_SingleKeyOrdered_OrderedMap is an ordered map that represents the "ordered-by user"
// list elements at /openconfig-withlist/model/c/single-key-ordered.
type Model_SingleKeyOrdered_OrderedMap struct {
	keys []string
	valueMap map[string]*Model_SingleKeyOrdered
}

// IsYANGOrderedList ensures that Model_SingleKeyOrdered_OrderedMap implements the
// ygot.GoOrderedMap interface.
func (*Model_SingleKeyOrdered_OrderedMap) IsYANGOrderedList() {}

// init initializes any uninitialized values.
func (o *Model_SingleKeyOrdered_OrderedMap) init() {
	if o == nil {
		return
	}
	if o.valueMap == nil {
		o.valueMap = map[string]*Model_SingleKeyOrdered{}
	}
}

// Keys returns a copy of the list's keys.
func (o *Model_SingleKeyOrdered_OrderedMap) Keys() []string {
	if o == nil {
		return nil
	}
	return append([]string{}, o.keys...)
}

// Values returns the current set of the list's values in order.
func (o *Model_SingleKeyOrdered_OrderedMap) Values() []*Model_SingleKeyOrdered {
	if o == nil {
		return nil
	}
	var values []*Model_SingleKeyOrdered
	for _, key := range o.keys {
		values = append(values, o.valueMap[key])
	}
	return values
}

// Len returns a size of Model_SingleKeyOrdered_OrderedMap
func (o *Model_SingleKeyOrdered_OrderedMap) Len() int {
	if o == nil {
		return 0
	}
	return len(o.keys)
}

// Get returns the value corresponding to the key. If the key is not found, nil
// is returned.
func (o *Model_SingleKeyOrdered_OrderedMap) Get(key string) *Model_SingleKeyOrdered {
	if o == nil {
		return nil
	}
	val, _ := o.valueMap[key]
	return val
}

// Delete deletes an element.
func (o *Model_SingleKeyOrdered_OrderedMap) Delete(key string) bool {
	if o == nil {
		return false
	}
	if _, ok := o.valueMap[key]; !ok {
		return false
	}
	for i, k := range o.keys {
		if k == key {
			o.keys = append(o.keys[:i], o.keys[i+1:]...)
			delete(o.valueMap, key)
			return true
		}
	}
	return false
}

// Append appends a Model_SingleKeyOrdered, returning an error if the key
// already exists in the ordered list or if the key is unspecified.
func (o *Model_SingleKeyOrdered_OrderedMap) Append(v *Model_SingleKeyOrdered) error {
	if o == nil {
		return fmt.Errorf("nil ordered map, cannot append Model_SingleKeyOrdered")
	}
	if v == nil {
		return fmt.Errorf("nil Model_SingleKeyOrdered")
	}
	if v.Key == nil {
		return fmt.Errorf("invalid nil key received for Key")
	}

	key := *v.Key

	if _, ok := o.valueMap[key]; ok {
		return fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	o.init()
	o.valueMap[key] = v
	return nil
}

// AppendNew creates and appends a new Model_SingleKeyOrdered, returning the
// newly-initialized v. It returns an error if the v already exists.
func (o *Model_SingleKeyOrdered_OrderedMap) AppendNew(Key string) (*Model_SingleKeyOrdered, error) {
	if o == nil {
		return nil, fmt.Errorf("nil ordered map, cannot append Model_SingleKeyOrdered")
	}
	key := Key

	if _, ok := o.valueMap[key]; ok {
		return nil, fmt.Errorf("duplicate key for list Statement %v", key)
	}
	o.keys = append(o.keys, key)
	newElement := &Model_SingleKeyOrdered{
		Key: &Key,
	}
	o.init()
	o.valueMap[key] = newElement
	return newElement, nil
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Model.
func (*Model) ΛBelongingModule() string {
	return "openconfig-withlist"
}

// Model_MultiKey represents the /openconfig-withlist/model/b/multi-key YANG schema element.
type Model_MultiKey struct {
	Key1	*uint32	`path:"config/key1|key1" module:"openconfig-withlist/openconfig-withlist|openconfig-withlist"`
	Key2	*uint64	`path:"config/key2|key2" module:"openconfig-withlist/openconfig-withlist|openconfig-withlist"`
}

// IsYANGGoStruct ensures that Model_MultiKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Model_MultiKey) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Model_MultiKey struct, which is a YANG list entry.
func (t *Model_MultiKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Key1 == nil {
		return nil, fmt.Errorf("nil value for key Key1")
	}

	if t.Key2 == nil {
		return nil, fmt.Errorf("nil value for key Key2")
	}

	return map[string]interface{}{
		"key1": *t.Key1,
		"key2": *t.Key2,
	}, nil
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Model_MultiKey.
func (*Model_MultiKey) ΛBelongingModule() string {
	return "openconfig-withlist"
}

// Model_SingleKey represents the /openconfig-withlist/model/a/single-key YANG schema element.
type Model_SingleKey struct {
	Key	*string	`path:"config/key|key" module:"openconfig-withlist/openconfig-withlist|openconfig-withlist"`
}

// IsYANGGoStruct ensures that Model_SingleKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Model_SingleKey) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Model_SingleKey struct, which is a YANG list entry.
func (t *Model_SingleKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Key == nil {
		return nil, fmt.Errorf("nil value for key Key")
	}

	return map[string]interface{}{
		"key": *t.Key,
	}, nil
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Model_SingleKey.
func (*Model_SingleKey) ΛBelongingModule() string {
	return "openconfig-withlist"
}

// Model_SingleKeyOrdered represents the /openconfig-withlist/model/c/single-key-ordered YANG schema element.
type Model_SingleKeyOrdered struct {
	Key	*string	`path:"config/key|key" module:"openconfig-withlist/openconfig-withlist|openconfig-withlist"`
}

// IsYANGGoStruct ensures that Model_SingleKeyOrdered implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Model_SingleKeyOrdered) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Model_SingleKeyOrdered struct, which is a YANG list entry.
func (t *Model_SingleKeyOrdered) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Key == nil {
		return nil, fmt.Errorf("nil value for key Key")
	}

	return map[string]interface{}{
		"key": *t.Key,
	}, nil
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Model_SingleKeyOrdered.
func (*Model_SingleKeyOrdered) ΛBelongingModule() string {
	return "openconfig-withlist"
}
