/*
Package ocstructs is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by codegen-tests
using the following YANG input files:
	- ../testdata/modules/openconfig-simple.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

// OpenconfigSimple_Parent represents the /openconfig-simple/parent YANG schema element.
type OpenconfigSimple_Parent struct {
	Child	*OpenconfigSimple_Parent_Child	`path:"child" module:"openconfig-simple"`
}

// IsYANGGoStruct ensures that OpenconfigSimple_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSimple_Parent) IsYANGGoStruct() {}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSimple_Parent.
func (*OpenconfigSimple_Parent) ΛBelongingModule() string {
	return "openconfig-simple"
}

// OpenconfigSimple_Parent_Child represents the /openconfig-simple/parent/child YANG schema element.
type OpenconfigSimple_Parent_Child struct {
	Config	*OpenconfigSimple_Parent_Child_Config	`path:"config" module:"openconfig-simple"`
	State	*OpenconfigSimple_Parent_Child_State	`path:"state" module:"openconfig-simple"`
}

// IsYANGGoStruct ensures that OpenconfigSimple_Parent_Child implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSimple_Parent_Child) IsYANGGoStruct() {}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSimple_Parent_Child.
func (*OpenconfigSimple_Parent_Child) ΛBelongingModule() string {
	return "openconfig-simple"
}

// OpenconfigSimple_Parent_Child_Config represents the /openconfig-simple/parent/child/config YANG schema element.
type OpenconfigSimple_Parent_Child_Config struct {
	Four	Binary	`path:"four" module:"openconfig-simple"`
	One	*string	`path:"one" module:"openconfig-simple"`
	Three	E_Simple_Parent_Child_Config_Three	`path:"three" module:"openconfig-simple"`
}

// IsYANGGoStruct ensures that OpenconfigSimple_Parent_Child_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSimple_Parent_Child_Config) IsYANGGoStruct() {}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSimple_Parent_Child_Config.
func (*OpenconfigSimple_Parent_Child_Config) ΛBelongingModule() string {
	return "openconfig-simple"
}

// OpenconfigSimple_Parent_Child_State represents the /openconfig-simple/parent/child/state YANG schema element.
type OpenconfigSimple_Parent_Child_State struct {
	Four	Binary	`path:"four" module:"openconfig-simple"`
	One	*string	`path:"one" module:"openconfig-simple"`
	Three	E_Simple_Parent_Child_Config_Three	`path:"three" module:"openconfig-simple"`
	Two	*string	`path:"two" module:"openconfig-simple"`
}

// IsYANGGoStruct ensures that OpenconfigSimple_Parent_Child_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSimple_Parent_Child_State) IsYANGGoStruct() {}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSimple_Parent_Child_State.
func (*OpenconfigSimple_Parent_Child_State) ΛBelongingModule() string {
	return "openconfig-simple"
}

// OpenconfigSimple_RemoteContainer represents the /openconfig-simple/remote-container YANG schema element.
type OpenconfigSimple_RemoteContainer struct {
	Config	*OpenconfigSimple_RemoteContainer_Config	`path:"config" module:"openconfig-simple"`
	State	*OpenconfigSimple_RemoteContainer_State	`path:"state" module:"openconfig-simple"`
}

// IsYANGGoStruct ensures that OpenconfigSimple_RemoteContainer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSimple_RemoteContainer) IsYANGGoStruct() {}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSimple_RemoteContainer.
func (*OpenconfigSimple_RemoteContainer) ΛBelongingModule() string {
	return "openconfig-simple"
}

// OpenconfigSimple_RemoteContainer_Config represents the /openconfig-simple/remote-container/config YANG schema element.
type OpenconfigSimple_RemoteContainer_Config struct {
	ALeaf	*string	`path:"a-leaf" module:"openconfig-simple"`
}

// IsYANGGoStruct ensures that OpenconfigSimple_RemoteContainer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSimple_RemoteContainer_Config) IsYANGGoStruct() {}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSimple_RemoteContainer_Config.
func (*OpenconfigSimple_RemoteContainer_Config) ΛBelongingModule() string {
	return "openconfig-simple"
}

// OpenconfigSimple_RemoteContainer_State represents the /openconfig-simple/remote-container/state YANG schema element.
type OpenconfigSimple_RemoteContainer_State struct {
	ALeaf	*string	`path:"a-leaf" module:"openconfig-simple"`
}

// IsYANGGoStruct ensures that OpenconfigSimple_RemoteContainer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigSimple_RemoteContainer_State) IsYANGGoStruct() {}

// ΛBelongingModule returns the name of the module that defines the namespace
// of OpenconfigSimple_RemoteContainer_State.
func (*OpenconfigSimple_RemoteContainer_State) ΛBelongingModule() string {
	return "openconfig-simple"
}

// E_Simple_Parent_Child_Config_Three is a derived int64 type which is used to represent
// the enumerated node Simple_Parent_Child_Config_Three. An additional value named
// Simple_Parent_Child_Config_Three_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Simple_Parent_Child_Config_Three int64

// IsYANGGoEnum ensures that Simple_Parent_Child_Config_Three implements the yang.GoEnum
// interface. This ensures that Simple_Parent_Child_Config_Three can be identified as a
// mapped type for a YANG enumeration.
func (E_Simple_Parent_Child_Config_Three) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Simple_Parent_Child_Config_Three.
func (E_Simple_Parent_Child_Config_Three) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Simple_Parent_Child_Config_Three.
func (e E_Simple_Parent_Child_Config_Three) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Simple_Parent_Child_Config_Three")
}

const (
	// Simple_Parent_Child_Config_Three_UNSET corresponds to the value UNSET of Simple_Parent_Child_Config_Three
	Simple_Parent_Child_Config_Three_UNSET E_Simple_Parent_Child_Config_Three = 0
	// Simple_Parent_Child_Config_Three_ONE corresponds to the value ONE of Simple_Parent_Child_Config_Three
	Simple_Parent_Child_Config_Three_ONE E_Simple_Parent_Child_Config_Three = 1
	// Simple_Parent_Child_Config_Three_TWO corresponds to the value TWO of Simple_Parent_Child_Config_Three
	Simple_Parent_Child_Config_Three_TWO E_Simple_Parent_Child_Config_Three = 2
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_Simple_Parent_Child_Config_Three": {
		1: {Name: "ONE"},
		2: {Name: "TWO"},
	},
}
