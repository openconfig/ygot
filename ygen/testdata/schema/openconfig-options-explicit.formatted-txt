/*
Package ocstructs is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by testcase
using the following YANG input files:
	- testdata/structs/openconfig-simple.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"encoding/json"
	"fmt"
	"reflect"

	"bar/ygot"
	"foo/goyang"
	"baz/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Fakeroot{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Fakeroot represents the /fakeroot YANG schema element.
type Fakeroot struct {
	Parent	*Parent	`path:"parent" module:"openconfig-simple"`
	RemoteContainer	*RemoteContainer	`path:"remote-container" module:"openconfig-simple"`
}

// IsYANGGoStruct ensures that Fakeroot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Fakeroot) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Fakeroot) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Fakeroot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Fakeroot) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Parent represents the /openconfig-simple/parent YANG schema element.
type Parent struct {
	Child	*Parent_Child	`path:"child" module:"openconfig-simple"`
}

// IsYANGGoStruct ensures that Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Parent) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Parent) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Parent) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Parent_Child represents the /openconfig-simple/parent/child YANG schema element.
type Parent_Child struct {
	Four	Binary	`path:"config/four" module:"openconfig-simple"`
	One	*string	`path:"config/one" module:"openconfig-simple"`
	Three	E_OpenconfigSimple_Child_Three	`path:"config/three" module:"openconfig-simple"`
	Two	*string	`path:"state/two" module:"openconfig-simple"`
}

// IsYANGGoStruct ensures that Parent_Child implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Parent_Child) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Parent_Child) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Parent_Child"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Parent_Child) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// RemoteContainer represents the /openconfig-simple/remote-container YANG schema element.
type RemoteContainer struct {
	ALeaf	*string	`path:"config/a-leaf" module:"openconfig-simple"`
}

// IsYANGGoStruct ensures that RemoteContainer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RemoteContainer) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RemoteContainer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RemoteContainer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RemoteContainer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// E_OpenconfigSimple_Child_Three is a derived int64 type which is used to represent
// the enumerated node OpenconfigSimple_Child_Three. An additional value named
// OpenconfigSimple_Child_Three_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigSimple_Child_Three int64

// IsYANGGoEnum ensures that OpenconfigSimple_Child_Three implements the yang.GoEnum
// interface. This ensures that OpenconfigSimple_Child_Three can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigSimple_Child_Three) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigSimple_Child_Three.
func (E_OpenconfigSimple_Child_Three) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigSimple_Child_Three_UNSET corresponds to the value UNSET of OpenconfigSimple_Child_Three
	OpenconfigSimple_Child_Three_UNSET E_OpenconfigSimple_Child_Three = 0
	// OpenconfigSimple_Child_Three_ONE corresponds to the value ONE of OpenconfigSimple_Child_Three
	OpenconfigSimple_Child_Three_ONE E_OpenconfigSimple_Child_Three = 1
	// OpenconfigSimple_Child_Three_TWO corresponds to the value TWO of OpenconfigSimple_Child_Three
	OpenconfigSimple_Child_Three_TWO E_OpenconfigSimple_Child_Three = 2
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_OpenconfigSimple_Child_Three": {
		1: {Name: "ONE"},
		2: {Name: "TWO"},
	},
}

var (
	// YANGSchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	YANGSchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0x4f, 0x8f, 0xda, 0x3e,
		0x10, 0xbd, 0xe7, 0x53, 0x44, 0x3e, 0x83, 0x60, 0x7f, 0xfa, 0x1d, 0x5a, 0x6e, 0x2b, 0xda, 0x55,
		0xa5, 0x4a, 0xd5, 0x6a, 0xb7, 0xf7, 0xca, 0x0d, 0x03, 0x58, 0x4b, 0xec, 0x68, 0xe2, 0x88, 0xa2,
		0x8a, 0xef, 0x5e, 0x11, 0x87, 0x2c, 0x09, 0xf9, 0x33, 0x36, 0x34, 0xa5, 0x5d, 0x1f, 0xb1, 0xc7,
		0x78, 0xc6, 0xf3, 0x9e, 0xed, 0xe7, 0xcc, 0xcf, 0x20, 0x0c, 0xc3, 0x90, 0x7d, 0xe1, 0x31, 0xb0,
		0x59, 0xc8, 0x96, 0xfc, 0x05, 0x50, 0x29, 0xcd, 0x46, 0xa6, 0xfd, 0xb3, 0x90, 0x0b, 0x36, 0x0b,
		0xef, 0x8a, 0x9f, 0x73, 0x25, 0x97, 0x62, 0xc5, 0x66, 0xe1, 0xb4, 0x68, 0xf8, 0x20, 0x90, 0xcd,
		0x42, 0xf3, 0x27, 0x79, 0x43, 0xc2, 0x11, 0xa4, 0xae, 0xb4, 0x55, 0x26, 0x28, 0xfa, 0x47, 0xd5,
		0xde, 0xea, 0x34, 0x65, 0x73, 0x7d, 0xba, 0xb2, 0xe3, 0x11, 0x61, 0x29, 0x7e, 0x9c, 0xcd, 0x52,
		0x99, 0x49, 0x45, 0x69, 0x6d, 0x9a, 0xbc, 0xfb, 0x59, 0x65, 0x18, 0x41, 0xe3, 0x50, 0xe3, 0x0a,
		0xec, 0xb6, 0x0a, 0x17, 0xb9, 0xaf, 0x66, 0x96, 0x51, 0xb3, 0xe1, 0x27, 0x9e, 0xde, 0xe3, 0x2a,
		0x8b, 0x4d, 0xb8, 0x1a, 0x33, 0x68, 0x31, 0x3c, 0xb1, 0xca, 0x9d, 0x3a, 0xb3, 0xda, 0x57, 0x5a,
		0xf6, 0xb5, 0x58, 0xeb, 0x4b, 0x5c, 0x76, 0x44, 0x6b, 0xb1, 0x59, 0xb4, 0x07, 0x72, 0x5c, 0x07,
		0x63, 0xd6, 0xe2, 0x5b, 0xf3, 0xc2, 0xf7, 0x26, 0x80, 0x92, 0x08, 0x62, 0x42, 0xa8, 0x89, 0xb1,
		0x4e, 0x90, 0x75, 0xa2, 0xe8, 0x09, 0x6b, 0x4e, 0x5c, 0x4b, 0x02, 0x7b, 0x13, 0xf9, 0x9a, 0xd0,
		0xe3, 0x6a, 0xf7, 0xac, 0x40, 0x99, 0x59, 0x63, 0xdf, 0x13, 0x4d, 0x77, 0x8a, 0xc9, 0xa9, 0xb6,
		0x49, 0xb9, 0x65, 0xea, 0x6d, 0x21, 0xe0, 0x0c, 0x05, 0x67, 0x48, 0xd8, 0x43, 0xa3, 0x1b, 0x22,
		0x3d, 0x50, 0x21, 0x43, 0xa6, 0x34, 0x5c, 0xaa, 0x0c, 0xe9, 0xeb, 0x56, 0xee, 0xf6, 0x87, 0x51,
		0xc4, 0xc8, 0x0b, 0x18, 0x4d, 0x89, 0xe6, 0x54, 0x38, 0xb9, 0xc0, 0xca, 0x11, 0x5e, 0xae, 0x30,
		0xbb, 0x18, 0x6e, 0x17, 0xc3, 0xce, 0x1d, 0x7e, 0x34, 0x18, 0x12, 0xe1, 0x58, 0xba, 0xf1, 0x75,
		0x97, 0x80, 0x5b, 0xa6, 0xbe, 0x0b, 0xc9, 0x71, 0x67, 0x93, 0xac, 0x02, 0x77, 0xef, 0x83, 0xeb,
		0x84, 0x49, 0x08, 0x91, 0x29, 0x09, 0xf6, 0x5c, 0x3a, 0x0c, 0xf2, 0x54, 0xf2, 0x54, 0x1a, 0x8c,
		0x4a, 0xa9, 0x46, 0x21, 0x57, 0x0e, 0x54, 0xba, 0x7b, 0x37, 0x20, 0x97, 0xf4, 0x1a, 0xc1, 0x81,
		0x4d, 0x66, 0x98, 0xe7, 0x93, 0xe7, 0xd3, 0x60, 0x7c, 0x02, 0x99, 0xc5, 0x80, 0x5c, 0x0b, 0x25,
		0x5d, 0x48, 0xf5, 0xbf, 0xc5, 0x98, 0x8f, 0x32, 0x8b, 0x0f, 0x4e, 0xee, 0xaf, 0x45, 0xc4, 0x8b,
		0x2e, 0x99, 0xf7, 0x52, 0x2a, 0x6d, 0xe2, 0x26, 0xdd, 0x35, 0xd3, 0x68, 0x0d, 0x31, 0x4f, 0xb8,
		0x5e, 0x1f, 0x96, 0x6d, 0xa2, 0x12, 0x90, 0x46, 0x89, 0x8c, 0x53, 0x11, 0x27, 0x1b, 0x98, 0x18,
		0x8d, 0x3f, 0xc9, 0x85, 0xe7, 0xa4, 0x10, 0x29, 0x81, 0x9b, 0xff, 0x1d, 0xbe, 0xb3, 0x54, 0x73,
		0x0d, 0x74, 0xb5, 0x64, 0xcc, 0xbd, 0x58, 0xf2, 0x62, 0xc9, 0x8b, 0x25, 0x7f, 0x22, 0x79, 0xb1,
		0xe4, 0xc5, 0x92, 0xa7, 0x92, 0x17, 0x4b, 0x5e, 0x2c, 0x79, 0x3e, 0x79, 0x3e, 0xbd, 0x29, 0xb1,
		0x44, 0x21, 0xe2, 0x56, 0x39, 0xd0, 0x70, 0xab, 0x3c, 0x09, 0x3d, 0x09, 0xdf, 0xd4, 0xa1, 0x76,
		0xc3, 0x0f, 0x0f, 0x46, 0xef, 0xbb, 0xbe, 0x3b, 0x58, 0x7d, 0xd9, 0x25, 0x06, 0x62, 0x17, 0x00,
		0xeb, 0x7c, 0xfa, 0xc0, 0x2c, 0xd2, 0xb2, 0xc0, 0xc1, 0x63, 0x3e, 0xea, 0xdb, 0x3c, 0x1f, 0x15,
		0xd0, 0xc2, 0xe9, 0xae, 0x39, 0xe8, 0x09, 0x88, 0x1a, 0x48, 0x53, 0xfd, 0x45, 0x93, 0xeb, 0x55,
		0xa7, 0x5f, 0x5d, 0x3b, 0x71, 0x8b, 0x21, 0xc4, 0x4a, 0xc3, 0x38, 0x52, 0x52, 0x73, 0x21, 0x01,
		0xdb, 0x4b, 0x4c, 0xce, 0x2c, 0x07, 0x29, 0x36, 0xc1, 0x5b, 0x2c, 0x36, 0xc1, 0xeb, 0x15, 0x9b,
		0x74, 0xd7, 0x26, 0xd0, 0x6a, 0x12, 0x06, 0x2e, 0x37, 0xc1, 0xbf, 0xb1, 0xdc, 0x04, 0x07, 0x2b,
		0x37, 0xe1, 0xe3, 0x0d, 0xf0, 0x25, 0xfd, 0x01, 0xb5, 0xb0, 0xa7, 0xbd, 0xa0, 0x4e, 0xff, 0xec,
		0x0b, 0x2a, 0xfe, 0x8b, 0x2f, 0xa8, 0xf8, 0xbb, 0x5f, 0x50, 0xc9, 0x57, 0x11, 0xfb, 0x2b, 0x08,
		0xf1, 0xea, 0x71, 0x73, 0x27, 0x72, 0xfd, 0x30, 0xe9, 0xfc, 0x9e, 0xd1, 0x70, 0xcc, 0x36, 0x9e,
		0x80, 0x5d, 0xdf, 0x2d, 0x48, 0xdf, 0x2b, 0xc8, 0x1b, 0xe9, 0x7f, 0x7e, 0x23, 0xf5, 0x1b, 0xa9,
		0xdf, 0x48, 0xfd, 0x46, 0x7a, 0x7b, 0x1b, 0x69, 0x87, 0x3e, 0x1b, 0x5c, 0xae, 0xf4, 0x48, 0x86,
		0x06, 0xe1, 0xf2, 0x94, 0x8f, 0x98, 0x97, 0x03, 0xda, 0x14, 0x4c, 0x70, 0xe2, 0x6f, 0x9b, 0x9f,
		0x4c, 0xa4, 0x73, 0x15, 0x27, 0x08, 0x69, 0x0a, 0x8b, 0xe7, 0xdc, 0xd7, 0x33, 0x74, 0x33, 0x91,
		0x3e, 0xf0, 0x17, 0x78, 0x52, 0xea, 0x1c, 0xf9, 0xf5, 0xf8, 0xd8, 0x69, 0x57, 0xc5, 0xeb, 0x87,
		0x63, 0x79, 0xbf, 0x71, 0x2b, 0xd8, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff,
		0xff, 0xb3, 0xb5, 0x6f, 0x08, 0xff, 0x2f, 0x00, 0x00,
	}
)

// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/parent/child/config/three": []reflect.Type{
		reflect.TypeOf((E_OpenconfigSimple_Child_Three)(0)),
	},
}
