/*
Package ocstructs is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by codegen-tests
using the following YANG input files:
	- testdata/schema/openconfig-options.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: nil,
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Bgp represents the /openconfig-options/bgp YANG schema element.
type Bgp struct {
	Neighbor	map[string]*Bgp_Neighbor	`path:"neighbors/neighbor" module:"openconfig-options/openconfig-options"`
}

// IsYANGGoStruct ensures that Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// Bgp struct. The keys of the list are populated from the input
// arguments.
func (t *Bgp) NewNeighbor(PeerAddress string) (*Bgp_Neighbor, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*Bgp_Neighbor)
	}

	key := PeerAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &Bgp_Neighbor{
		PeerAddress: &PeerAddress,
	}

	return t.Neighbor[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Neighbor represents the /openconfig-options/bgp/neighbors/neighbor YANG schema element.
type Bgp_Neighbor struct {
	EnabledAddressFamily	[]Bgp_Neighbor_EnabledAddressFamily_Union	`path:"state/enabled-address-family" module:"openconfig-options/openconfig-options"`
	HoldTime	*uint32	`path:"config/hold-time" module:"openconfig-options/openconfig-options"`
	PeerAddress	*string	`path:"config/peer-address|peer-address" module:"openconfig-options/openconfig-options|openconfig-options"`
	SessionState	E_Neighbor_SessionState	`path:"state/session-state" module:"openconfig-options/openconfig-options"`
}

// IsYANGGoStruct ensures that Bgp_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Bgp_Neighbor) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Bgp_Neighbor struct, which is a YANG list entry.
func (t *Bgp_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PeerAddress == nil {
		return nil, fmt.Errorf("nil value for key PeerAddress")
	}

	return map[string]interface{}{
		"peer-address": *t.PeerAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Bgp_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Bgp_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Bgp_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// Bgp_Neighbor_EnabledAddressFamily_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-options/bgp/neighbors/neighbor/state/enabled-address-family within the YANG schema.
// Union type can be one of [E_OpenconfigOptions_AFI, UnionUint32].
type Bgp_Neighbor_EnabledAddressFamily_Union interface {
	// Union type can be one of [E_OpenconfigOptions_AFI, UnionUint32]
	Documentation_for_Bgp_Neighbor_EnabledAddressFamily_Union()
}

// Documentation_for_Bgp_Neighbor_EnabledAddressFamily_Union ensures that E_OpenconfigOptions_AFI
// implements the Bgp_Neighbor_EnabledAddressFamily_Union interface.
func (E_OpenconfigOptions_AFI) Documentation_for_Bgp_Neighbor_EnabledAddressFamily_Union() {}

// Documentation_for_Bgp_Neighbor_EnabledAddressFamily_Union ensures that UnionUint32
// implements the Bgp_Neighbor_EnabledAddressFamily_Union interface.
func (UnionUint32) Documentation_for_Bgp_Neighbor_EnabledAddressFamily_Union() {}

// To_Bgp_Neighbor_EnabledAddressFamily_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Bgp_Neighbor_EnabledAddressFamily_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Bgp_Neighbor) To_Bgp_Neighbor_EnabledAddressFamily_Union(i interface{}) (Bgp_Neighbor_EnabledAddressFamily_Union, error) {
	if v, ok := i.(Bgp_Neighbor_EnabledAddressFamily_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to Bgp_Neighbor_EnabledAddressFamily_Union, unknown union type, got: %T, want any of [E_OpenconfigOptions_AFI, uint32]", i, i)
}

// E_Neighbor_SessionState is a derived int64 type which is used to represent
// the enumerated node Neighbor_SessionState. An additional value named
// Neighbor_SessionState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Neighbor_SessionState int64

// IsYANGGoEnum ensures that Neighbor_SessionState implements the yang.GoEnum
// interface. This ensures that Neighbor_SessionState can be identified as a
// mapped type for a YANG enumeration.
func (E_Neighbor_SessionState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Neighbor_SessionState.
func (E_Neighbor_SessionState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Neighbor_SessionState.
func (e E_Neighbor_SessionState) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Neighbor_SessionState")
}

const (
	// Neighbor_SessionState_UNSET corresponds to the value UNSET of Neighbor_SessionState
	Neighbor_SessionState_UNSET E_Neighbor_SessionState = 0
	// Neighbor_SessionState_ACTIVE corresponds to the value ACTIVE of Neighbor_SessionState
	Neighbor_SessionState_ACTIVE E_Neighbor_SessionState = 1
	// Neighbor_SessionState_OPENSENT corresponds to the value OPENSENT of Neighbor_SessionState
	Neighbor_SessionState_OPENSENT E_Neighbor_SessionState = 2
	// Neighbor_SessionState_OPENCONFIRM corresponds to the value OPENCONFIRM of Neighbor_SessionState
	Neighbor_SessionState_OPENCONFIRM E_Neighbor_SessionState = 3
	// Neighbor_SessionState_ESTABLISHED corresponds to the value ESTABLISHED of Neighbor_SessionState
	Neighbor_SessionState_ESTABLISHED E_Neighbor_SessionState = 4
	// Neighbor_SessionState_IDLE corresponds to the value IDLE of Neighbor_SessionState
	Neighbor_SessionState_IDLE E_Neighbor_SessionState = 5
	// Neighbor_SessionState_IDLE_PFXLIMIT corresponds to the value IDLE_PFXLIMIT of Neighbor_SessionState
	Neighbor_SessionState_IDLE_PFXLIMIT E_Neighbor_SessionState = 6
)

// E_OpenconfigOptions_AFI is a derived int64 type which is used to represent
// the enumerated node OpenconfigOptions_AFI. An additional value named
// OpenconfigOptions_AFI_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigOptions_AFI int64

// IsYANGGoEnum ensures that OpenconfigOptions_AFI implements the yang.GoEnum
// interface. This ensures that OpenconfigOptions_AFI can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigOptions_AFI) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigOptions_AFI.
func (E_OpenconfigOptions_AFI) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigOptions_AFI.
func (e E_OpenconfigOptions_AFI) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigOptions_AFI")
}

const (
	// OpenconfigOptions_AFI_UNSET corresponds to the value UNSET of OpenconfigOptions_AFI
	OpenconfigOptions_AFI_UNSET E_OpenconfigOptions_AFI = 0
	// OpenconfigOptions_AFI_IPV4_UNICAST corresponds to the value IPV4_UNICAST of OpenconfigOptions_AFI
	OpenconfigOptions_AFI_IPV4_UNICAST E_OpenconfigOptions_AFI = 1
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_Neighbor_SessionState": {
		1: {Name: "ACTIVE"},
		2: {Name: "OPENSENT"},
		3: {Name: "OPENCONFIRM"},
		4: {Name: "ESTABLISHED"},
		5: {Name: "IDLE"},
		6: {Name: "IDLE_PFXLIMIT"},
	},
	"E_OpenconfigOptions_AFI": {
		1: {Name: "IPV4_UNICAST", DefiningModule: "openconfig-options"},
	},
}

var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5c, 0x5f, 0x6f, 0xdb, 0x36,
		0x10, 0x7f, 0xf7, 0xa7, 0x30, 0x88, 0xbd, 0x2d, 0x8a, 0x9d, 0xd4, 0x89, 0x6b, 0xbf, 0x39, 0x69,
		0x83, 0x19, 0x5d, 0xd3, 0xa0, 0xe9, 0x8a, 0x01, 0x6d, 0x56, 0x30, 0x12, 0xad, 0x10, 0x93, 0x48,
		0x81, 0xa4, 0xb0, 0x1a, 0x83, 0xbf, 0x7b, 0x21, 0xeb, 0x4f, 0x22, 0x5b, 0x8a, 0xf9, 0xcf, 0x8e,
		0x63, 0xf0, 0x2d, 0x91, 0xc4, 0xe3, 0xdd, 0xfd, 0x7e, 0x27, 0x9e, 0xee, 0x0e, 0xfe, 0xbf, 0xd3,
		0xed, 0x76, 0xbb, 0xe0, 0x1a, 0xc6, 0x08, 0x8c, 0xbb, 0x00, 0x1c, 0xe5, 0xff, 0x7f, 0xc0, 0x24,
		0x00, 0xe3, 0x6e, 0xbf, 0xf8, 0xf7, 0x92, 0x92, 0x19, 0x0e, 0x9f, 0x5c, 0x78, 0x87, 0x19, 0x18,
		0x77, 0xf3, 0xc5, 0xcb, 0x0b, 0xf7, 0x61, 0x52, 0xbb, 0x50, 0x93, 0x9a, 0xdd, 0x3c, 0xaa, 0xdf,
		0x2a, 0x36, 0x38, 0x59, 0xb9, 0xbc, 0xba, 0x51, 0x75, 0xe3, 0x86, 0xa1, 0x19, 0xfe, 0xb9, 0xb6,
		0x45, 0x6d, 0x1b, 0xea, 0xd3, 0x95, 0x6d, 0x96, 0xb7, 0x6f, 0x69, 0xca, 0x7c, 0xd4, 0xb8, 0x34,
		0x57, 0x05, 0xcd, 0xff, 0xa3, 0x2c, 0xd3, 0x06, 0x24, 0xf9, 0x2e, 0x47, 0xcd, 0x0f, 0xfe, 0x01,
		0xf9, 0x84, 0x85, 0x69, 0x8c, 0x88, 0x00, 0xe3, 0xae, 0x60, 0x29, 0x6a, 0x79, 0xf0, 0xc9, 0x53,
		0x4b, 0xa5, 0xd6, 0x9e, 0x5a, 0xd4, 0xae, 0x2c, 0x56, 0x6c, 0x5d, 0x75, 0x6e, 0x75, 0x83, 0x20,
		0x1c, 0x3e, 0xdc, 0x53, 0xc6, 0xdb, 0x8d, 0x29, 0x7d, 0xf1, 0xf8, 0x68, 0x8b, 0x8e, 0xcd, 0x00,
		0x6c, 0x04, 0x42, 0x06, 0x10, 0x49, 0x60, 0x64, 0x01, 0x52, 0x06, 0x4a, 0x19, 0x30, 0x79, 0xe0,
		0x9a, 0x01, 0x6c, 0x01, 0x72, 0x23, 0xa0, 0x6b, 0xc0, 0x6e, 0xf6, 0xc1, 0x2a, 0xbe, 0x9b, 0x5c,
		0xf0, 0x3c, 0xcc, 0xd2, 0x70, 0xab, 0xc0, 0xae, 0x08, 0xbf, 0x2a, 0x0d, 0xb4, 0xe9, 0xa0, 0x4d,
		0x0b, 0x75, 0x7a, 0x3c, 0x4f, 0x93, 0x0d, 0x74, 0x91, 0xa6, 0x4d, 0xf5, 0xa0, 0x5f, 0xa2, 0x27,
		0xe9, 0xb9, 0x12, 0x98, 0x62, 0x9d, 0xa4, 0xf5, 0x72, 0x54, 0x52, 0xa6, 0x94, 0x0e, 0xb5, 0x34,
		0x29, 0xa6, 0x4b, 0x35, 0x63, 0xca, 0x19, 0x53, 0x4f, 0x9f, 0x82, 0x72, 0x54, 0x94, 0xa4, 0xa4,
		0x32, 0x35, 0xab, 0x05, 0x0f, 0x34, 0x0a, 0x3c, 0x81, 0x63, 0x0d, 0xa7, 0x97, 0x18, 0x3f, 0x8a,
		0x50, 0xf4, 0x59, 0x3d, 0x99, 0x91, 0x5e, 0xa6, 0x4a, 0x60, 0x13, 0x22, 0x1b, 0x12, 0xda, 0x94,
		0xd8, 0xd6, 0x08, 0x6e, 0x8d, 0xe8, 0xe6, 0x84, 0x57, 0x23, 0xbe, 0x62, 0x00, 0x54, 0xea, 0x7d,
		0x99, 0x27, 0xc8, 0x0c, 0xe9, 0x14, 0x13, 0xf1, 0xe6, 0x54, 0x07, 0xec, 0x82, 0xd7, 0x43, 0x8d,
		0xa5, 0x9f, 0x21, 0x09, 0xb3, 0xdd, 0xbf, 0x69, 0x81, 0xa2, 0x47, 0xae, 0xe5, 0xc6, 0x1f, 0x31,
		0xd1, 0x66, 0xa7, 0x61, 0x40, 0xaf, 0x89, 0xf9, 0x0a, 0xa3, 0x14, 0x59, 0x90, 0x73, 0xc5, 0xa0,
		0x2f, 0x30, 0x25, 0xef, 0x70, 0x88, 0x45, 0x96, 0x9b, 0xf7, 0xb5, 0xe5, 0x2d, 0x8e, 0x0c, 0x5c,
		0x0b, 0x7f, 0xee, 0x9d, 0x6b, 0x07, 0xa7, 0xa3, 0xc1, 0xe8, 0x7c, 0x78, 0x3a, 0x3a, 0xdb, 0x23,
		0x1f, 0x77, 0x76, 0xb3, 0xea, 0x6e, 0xab, 0x2f, 0x9e, 0x09, 0x21, 0x54, 0xc0, 0xcc, 0x25, 0x7a,
		0xaf, 0x9f, 0x79, 0x48, 0x85, 0x47, 0x7d, 0xcf, 0xa7, 0x71, 0xc2, 0x10, 0xe7, 0x28, 0xf0, 0x22,
		0x04, 0x67, 0x99, 0x30, 0xc5, 0x37, 0x66, 0x67, 0x0b, 0x26, 0x82, 0x04, 0x21, 0xe6, 0xc1, 0x20,
		0xc8, 0x54, 0xd3, 0x4f, 0x19, 0x6a, 0x52, 0x5c, 0xd6, 0xe0, 0xb2, 0x86, 0xc3, 0xc9, 0x1a, 0x48,
		0x16, 0xf9, 0xfa, 0x49, 0xc3, 0xc9, 0x48, 0x63, 0x6d, 0xa1, 0xf6, 0xce, 0x93, 0x86, 0xd2, 0x68,
		0x2e, 0x18, 0x26, 0x21, 0x30, 0x38, 0x23, 0x4b, 0xeb, 0xdf, 0x1a, 0xc8, 0xb8, 0x81, 0x42, 0x20,
		0x46, 0xb4, 0x1d, 0x51, 0x09, 0xfa, 0xd6, 0xf7, 0x46, 0xdf, 0xbf, 0x1f, 0xdf, 0xfd, 0x0e, 0xb4,
		0xe5, 0xdc, 0x99, 0xd8, 0xf1, 0xe9, 0x76, 0xfa, 0xb7, 0x35, 0x63, 0xfe, 0xa9, 0xac, 0xf9, 0xcd,
		0xc0, 0x9c, 0xce, 0x0e, 0x93, 0x26, 0x47, 0xc8, 0x26, 0x42, 0x4e, 0xbc, 0xab, 0xf1, 0x01, 0x31,
		0x32, 0x37, 0x67, 0xf7, 0x94, 0x74, 0xd9, 0xa2, 0x71, 0xb6, 0x68, 0xb5, 0x60, 0xa5, 0xe9, 0x00,
		0xc0, 0xfd, 0x07, 0x14, 0xc3, 0x04, 0x8a, 0x87, 0x2c, 0xde, 0x7b, 0x34, 0x41, 0x24, 0xaf, 0x9a,
		0x7a, 0x34, 0xc9, 0xa4, 0xf1, 0xde, 0x7d, 0x98, 0xf4, 0xaa, 0x6e, 0x4b, 0xf5, 0x57, 0xaf, 0xa8,
		0xad, 0x76, 0xec, 0x98, 0x2a, 0x61, 0xa6, 0x5e, 0xca, 0x6c, 0x92, 0x2a, 0x2b, 0xa6, 0xc8, 0xae,
		0x22, 0xbc, 0x8d, 0x94, 0x77, 0x5f, 0x2a, 0xc2, 0xca, 0x29, 0x6d, 0x85, 0x54, 0xf6, 0x22, 0x61,
		0x68, 0xa6, 0x82, 0x56, 0x79, 0x6a, 0x2a, 0x94, 0xbe, 0xb2, 0x53, 0x72, 0x19, 0xc3, 0xc7, 0xc7,
		0x45, 0x6c, 0xf6, 0x6a, 0x94, 0xdf, 0x61, 0xa0, 0x72, 0x01, 0x05, 0x52, 0x8f, 0xd0, 0x7c, 0xd9,
		0x96, 0x9b, 0x35, 0xa7, 0x2e, 0x34, 0x0f, 0x2e, 0x34, 0x95, 0x9b, 0x35, 0x88, 0xc0, 0xfb, 0x08,
		0x05, 0x65, 0x6c, 0x78, 0x33, 0x18, 0xe3, 0x68, 0xae, 0x5f, 0x86, 0x69, 0x91, 0xe7, 0x0a, 0x32,
		0xae, 0x20, 0xe3, 0x0a, 0x32, 0xaf, 0xb9, 0x20, 0x83, 0x03, 0x44, 0x04, 0x16, 0x73, 0xb5, 0xe3,
		0xbb, 0xd5, 0x05, 0x06, 0x4d, 0x02, 0x30, 0x2d, 0x54, 0xb9, 0x80, 0x1c, 0x99, 0xb7, 0x41, 0x4a,
		0x03, 0x27, 0x57, 0x53, 0x60, 0xa3, 0x15, 0xc2, 0x8d, 0x3f, 0x67, 0xcd, 0x10, 0x6b, 0x34, 0x6e,
		0x7a, 0xf3, 0x75, 0xf0, 0xe3, 0xaf, 0xeb, 0xe9, 0xe5, 0xe4, 0xf6, 0x0b, 0x30, 0x16, 0xbd, 0x30,
		0x92, 0x70, 0xb7, 0xeb, 0x76, 0xce, 0x8b, 0xd5, 0x8c, 0xb4, 0xfb, 0xbd, 0xab, 0xe1, 0x32, 0x34,
		0x10, 0x61, 0xd6, 0xff, 0xb5, 0xc7, 0x47, 0x2b, 0xfd, 0x60, 0xc3, 0x0c, 0xe1, 0xf9, 0xc8, 0xb5,
		0x28, 0xcf, 0x62, 0x0f, 0xd3, 0x90, 0xc6, 0x75, 0x08, 0x2c, 0xf4, 0x8d, 0xb7, 0x0d, 0x81, 0xad,
		0x3e, 0xf2, 0x56, 0xb1, 0xe8, 0xbc, 0xcc, 0xea, 0xc3, 0xa8, 0x50, 0xfe, 0x89, 0xb9, 0x98, 0x08,
		0xc1, 0xf4, 0xb2, 0xb0, 0x8f, 0x98, 0xbc, 0x8f, 0x50, 0x96, 0x60, 0x72, 0x3d, 0xf6, 0x65, 0x51,
		0xf0, 0x44, 0xc2, 0xc9, 0xdb, 0xc1, 0xe0, 0x7c, 0x38, 0x18, 0xf4, 0x87, 0x6f, 0x86, 0xfd, 0xd1,
		0xd9, 0xd9, 0xc9, 0xb9, 0x4e, 0x72, 0x02, 0x3e, 0xb1, 0x00, 0x31, 0x14, 0x5c, 0x64, 0xdf, 0x4e,
		0x24, 0x8d, 0xa2, 0x3d, 0x68, 0xac, 0xbb, 0x41, 0x3c, 0xf7, 0x05, 0xe7, 0xbe, 0xe0, 0xac, 0x26,
		0x66, 0x6e, 0x10, 0xcf, 0x0d, 0xe2, 0xd9, 0x4e, 0xa8, 0xdc, 0x20, 0xde, 0x8b, 0x25, 0x2e, 0x6e,
		0x9e, 0xcd, 0x1d, 0xbe, 0xee, 0xf0, 0xdd, 0xf5, 0xe1, 0xeb, 0xe6, 0xd9, 0x0c, 0x4e, 0x09, 0x37,
		0xcf, 0xe6, 0xe6, 0xd9, 0x1c, 0x21, 0x1b, 0x09, 0xe9, 0xe6, 0xd9, 0x5e, 0x45, 0xb5, 0x68, 0x2b,
		0x49, 0x17, 0x47, 0x9c, 0x63, 0x4a, 0x3c, 0xb5, 0x81, 0x8b, 0xf5, 0xa8, 0xa8, 0x89, 0x71, 0x69,
		0x97, 0x4b, 0xbb, 0x0e, 0x26, 0xed, 0x42, 0x24, 0x8d, 0x11, 0xcb, 0xe7, 0x22, 0x0d, 0x92, 0xaf,
		0x81, 0xc6, 0xda, 0xf7, 0x24, 0x8d, 0xdd, 0xfc, 0x68, 0xeb, 0xfc, 0x68, 0xfe, 0xb2, 0xb1, 0x35,
		0x95, 0x66, 0xf4, 0x3b, 0x04, 0x1f, 0xd0, 0x5c, 0xf1, 0xe3, 0x53, 0xad, 0x9a, 0xaf, 0x5e, 0xbd,
		0xb7, 0x52, 0xad, 0x57, 0xab, 0xce, 0x6f, 0x72, 0x92, 0x22, 0x41, 0xb4, 0x89, 0x01, 0xa4, 0x06,
		0x0c, 0x59, 0xea, 0x0b, 0x52, 0xc4, 0xf8, 0x45, 0x98, 0xfc, 0xb8, 0x2e, 0x57, 0x77, 0xf4, 0x68,
		0xa2, 0xf6, 0x7b, 0x27, 0x92, 0xbe, 0x50, 0xf5, 0x41, 0xb3, 0xf2, 0x0b, 0xc5, 0x5f, 0xd7, 0xd9,
		0xa0, 0x9c, 0x9c, 0x52, 0x4d, 0xbf, 0x33, 0xb4, 0xe6, 0xf5, 0xba, 0xbe, 0x8f, 0x5a, 0xe5, 0x7f,
		0x15, 0x7a, 0xb5, 0xe9, 0x03, 0x30, 0xbf, 0xac, 0x86, 0xed, 0x6f, 0x97, 0x3a, 0xad, 0x9d, 0x65,
		0x00, 0xf3, 0x2b, 0xf8, 0x2f, 0xfa, 0x4c, 0x69, 0x79, 0xce, 0xe5, 0x92, 0x3b, 0x8b, 0x5f, 0x00,
		0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x3f, 0xc8, 0x36, 0xd7, 0x49, 0x00,
		0x00,
	}
)

// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/bgp/neighbors/neighbor/state/enabled-address-family": []reflect.Type{
		reflect.TypeOf((E_OpenconfigOptions_AFI)(0)),
	},
	"/bgp/neighbors/neighbor/state/session-state": []reflect.Type{
		reflect.TypeOf((E_Neighbor_SessionState)(0)),
	},
}
