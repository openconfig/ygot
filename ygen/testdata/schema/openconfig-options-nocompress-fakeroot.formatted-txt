/*
Package ocstructs is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by codegen-tests
using the following YANG input files:
	- testdata/schema/openconfig-options.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"fmt"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Device represents the /device YANG schema element.
type Device struct {
	Bgp	*OpenconfigOptions_Bgp	`path:"" rootname:"bgp" module:"openconfig-options"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *Device) Validate() error {
	if err := ytypes.Validate(SchemaTree["Device"], s); err != nil {
		return err
	}
	return nil
}

// OpenconfigOptions_Bgp represents the /openconfig-options/bgp YANG schema element.
type OpenconfigOptions_Bgp struct {
	Neighbors	*OpenconfigOptions_Bgp_Neighbors	`path:"/bgp/neighbors" module:"openconfig-options"`
}

// IsYANGGoStruct ensures that OpenconfigOptions_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigOptions_Bgp) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigOptions_Bgp) Validate() error {
	if err := ytypes.Validate(SchemaTree["OpenconfigOptions_Bgp"], s); err != nil {
		return err
	}
	return nil
}

// OpenconfigOptions_Bgp_Neighbors represents the /openconfig-options/bgp/neighbors YANG schema element.
type OpenconfigOptions_Bgp_Neighbors struct {
	Neighbor	map[string]*OpenconfigOptions_Bgp_Neighbors_Neighbor	`path:"neighbor" module:"openconfig-options"`
}

// IsYANGGoStruct ensures that OpenconfigOptions_Bgp_Neighbors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigOptions_Bgp_Neighbors) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// OpenconfigOptions_Bgp_Neighbors struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigOptions_Bgp_Neighbors) NewNeighbor(PeerAddress string) (*OpenconfigOptions_Bgp_Neighbors_Neighbor, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*OpenconfigOptions_Bgp_Neighbors_Neighbor)
	}

	key := PeerAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &OpenconfigOptions_Bgp_Neighbors_Neighbor{
		PeerAddress: &PeerAddress,
	}

	return t.Neighbor[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigOptions_Bgp_Neighbors) Validate() error {
	if err := ytypes.Validate(SchemaTree["OpenconfigOptions_Bgp_Neighbors"], s); err != nil {
		return err
	}
	return nil
}

// OpenconfigOptions_Bgp_Neighbors_Neighbor represents the /openconfig-options/bgp/neighbors/neighbor YANG schema element.
type OpenconfigOptions_Bgp_Neighbors_Neighbor struct {
	Config	*OpenconfigOptions_Bgp_Neighbors_Neighbor_Config	`path:"config" module:"openconfig-options"`
	PeerAddress	*string	`path:"peer-address" module:"openconfig-options"`
	State	*OpenconfigOptions_Bgp_Neighbors_Neighbor_State	`path:"state" module:"openconfig-options"`
}

// IsYANGGoStruct ensures that OpenconfigOptions_Bgp_Neighbors_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigOptions_Bgp_Neighbors_Neighbor) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigOptions_Bgp_Neighbors_Neighbor) Validate() error {
	if err := ytypes.Validate(SchemaTree["OpenconfigOptions_Bgp_Neighbors_Neighbor"], s); err != nil {
		return err
	}
	return nil
}

// OpenconfigOptions_Bgp_Neighbors_Neighbor_Config represents the /openconfig-options/bgp/neighbors/neighbor/config YANG schema element.
type OpenconfigOptions_Bgp_Neighbors_Neighbor_Config struct {
	HoldTime	*uint32	`path:"hold-time" module:"openconfig-options"`
	PeerAddress	*string	`path:"peer-address" module:"openconfig-options"`
}

// IsYANGGoStruct ensures that OpenconfigOptions_Bgp_Neighbors_Neighbor_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigOptions_Bgp_Neighbors_Neighbor_Config) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigOptions_Bgp_Neighbors_Neighbor_Config) Validate() error {
	if err := ytypes.Validate(SchemaTree["OpenconfigOptions_Bgp_Neighbors_Neighbor_Config"], s); err != nil {
		return err
	}
	return nil
}

// OpenconfigOptions_Bgp_Neighbors_Neighbor_State represents the /openconfig-options/bgp/neighbors/neighbor/state YANG schema element.
type OpenconfigOptions_Bgp_Neighbors_Neighbor_State struct {
	EnabledAddressFamily	[]OpenconfigOptions_Bgp_Neighbors_Neighbor_State_EnabledAddressFamily_Union	`path:"enabled-address-family" module:"openconfig-options"`
	HoldTime	*uint32	`path:"hold-time" module:"openconfig-options"`
	PeerAddress	*string	`path:"peer-address" module:"openconfig-options"`
	SessionState	E_OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState	`path:"session-state" module:"openconfig-options"`
}

// IsYANGGoStruct ensures that OpenconfigOptions_Bgp_Neighbors_Neighbor_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigOptions_Bgp_Neighbors_Neighbor_State) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (s *OpenconfigOptions_Bgp_Neighbors_Neighbor_State) Validate() error {
	if err := ytypes.Validate(SchemaTree["OpenconfigOptions_Bgp_Neighbors_Neighbor_State"], s); err != nil {
		return err
	}
	return nil
}

// OpenconfigOptions_Bgp_Neighbors_Neighbor_State_EnabledAddressFamily_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-options/bgp/neighbors/neighbor/state/enabled-address-family within the YANG schema.
type OpenconfigOptions_Bgp_Neighbors_Neighbor_State_EnabledAddressFamily_Union interface {
	Is_OpenconfigOptions_Bgp_Neighbors_Neighbor_State_EnabledAddressFamily_Union()
}

// OpenconfigOptions_Bgp_Neighbors_Neighbor_State_EnabledAddressFamily_Union_E_OpenconfigOptions_AFI is used when /openconfig-options/bgp/neighbors/neighbor/state/enabled-address-family
// is to be set to a E_OpenconfigOptions_AFI value.
type OpenconfigOptions_Bgp_Neighbors_Neighbor_State_EnabledAddressFamily_Union_E_OpenconfigOptions_AFI struct {
	E_OpenconfigOptions_AFI	E_OpenconfigOptions_AFI
}

// Is_OpenconfigOptions_Bgp_Neighbors_Neighbor_State_EnabledAddressFamily_Union ensures that OpenconfigOptions_Bgp_Neighbors_Neighbor_State_EnabledAddressFamily_Union_E_OpenconfigOptions_AFI
// implements the OpenconfigOptions_Bgp_Neighbors_Neighbor_State_EnabledAddressFamily_Union interface.
func (*OpenconfigOptions_Bgp_Neighbors_Neighbor_State_EnabledAddressFamily_Union_E_OpenconfigOptions_AFI) Is_OpenconfigOptions_Bgp_Neighbors_Neighbor_State_EnabledAddressFamily_Union() {}

// OpenconfigOptions_Bgp_Neighbors_Neighbor_State_EnabledAddressFamily_Union_Uint32 is used when /openconfig-options/bgp/neighbors/neighbor/state/enabled-address-family
// is to be set to a uint32 value.
type OpenconfigOptions_Bgp_Neighbors_Neighbor_State_EnabledAddressFamily_Union_Uint32 struct {
	Uint32	uint32
}

// Is_OpenconfigOptions_Bgp_Neighbors_Neighbor_State_EnabledAddressFamily_Union ensures that OpenconfigOptions_Bgp_Neighbors_Neighbor_State_EnabledAddressFamily_Union_Uint32
// implements the OpenconfigOptions_Bgp_Neighbors_Neighbor_State_EnabledAddressFamily_Union interface.
func (*OpenconfigOptions_Bgp_Neighbors_Neighbor_State_EnabledAddressFamily_Union_Uint32) Is_OpenconfigOptions_Bgp_Neighbors_Neighbor_State_EnabledAddressFamily_Union() {}

// E_OpenconfigOptions_AFI is a derived int64 type which is used to represent
// the enumerated node OpenconfigOptions_AFI. An additional value named
// OpenconfigOptions_AFI_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigOptions_AFI int64

// IsYANGGoEnum ensures that OpenconfigOptions_AFI implements the yang.GoEnum
// interface. This ensures that OpenconfigOptions_AFI can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigOptions_AFI) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigOptions_AFI.
func (E_OpenconfigOptions_AFI) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigOptions_AFI_UNSET corresponds to the value UNSET of OpenconfigOptions_AFI
	OpenconfigOptions_AFI_UNSET E_OpenconfigOptions_AFI = 0
	// OpenconfigOptions_AFI_IPV4_UNICAST corresponds to the value IPV4_UNICAST of OpenconfigOptions_AFI
	OpenconfigOptions_AFI_IPV4_UNICAST E_OpenconfigOptions_AFI = 1
)

// E_OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState is a derived int64 type which is used to represent
// the enumerated node OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState. An additional value named
// OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState int64

// IsYANGGoEnum ensures that OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState implements the yang.GoEnum
// interface. This ensures that OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState.
func (E_OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState_UNSET corresponds to the value UNSET of OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState
	OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState_UNSET E_OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState = 0
	// OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState_ACTIVE corresponds to the value ACTIVE of OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState
	OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState_ACTIVE E_OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState = 1
	// OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState_OPENSENT corresponds to the value OPENSENT of OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState
	OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState_OPENSENT E_OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState = 2
	// OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState_OPENCONFIRM corresponds to the value OPENCONFIRM of OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState
	OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState_OPENCONFIRM E_OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState = 3
	// OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState_ESTABLISHED corresponds to the value ESTABLISHED of OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState
	OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState_ESTABLISHED E_OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState = 4
	// OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState_IDLE corresponds to the value IDLE of OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState
	OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState_IDLE E_OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState = 5
	// OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState_IDLE_PFXLIMIT corresponds to the value IDLE_PFXLIMIT of OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState
	OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState_IDLE_PFXLIMIT E_OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState = 6
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_OpenconfigOptions_AFI": {
		1: {Name: "IPV4_UNICAST", DefiningModule: "openconfig-options"},
	},
	"E_OpenconfigOptions_Bgp_Neighbors_Neighbor_State_SessionState": {
		1: {Name: "ACTIVE"},
		2: {Name: "OPENSENT"},
		3: {Name: "OPENCONFIRM"},
		4: {Name: "ESTABLISHED"},
		5: {Name: "IDLE"},
		6: {Name: "IDLE_PFXLIMIT"},
	},
}

var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5b, 0xdd, 0x8f, 0xe2, 0x36,
		0x10, 0x7f, 0xcf, 0x5f, 0x11, 0xe5, 0xb5, 0xb0, 0x70, 0x94, 0x76, 0x0b, 0x6f, 0xec, 0xed, 0xa1,
		0xa2, 0xeb, 0x7e, 0xe8, 0xf6, 0x7a, 0x2f, 0x77, 0x08, 0x19, 0x62, 0x82, 0xd5, 0xe0, 0x44, 0x8e,
		0xd3, 0x2e, 0x3a, 0xe5, 0x7f, 0xaf, 0x42, 0x3e, 0x20, 0x24, 0x80, 0x3d, 0x36, 0x1f, 0xab, 0xcd,
		0x3e, 0x2d, 0x8e, 0x67, 0xc6, 0xf3, 0x9b, 0x5f, 0x3c, 0xf6, 0x38, 0xfe, 0x69, 0x98, 0xa6, 0x69,
		0x5a, 0xf7, 0xf8, 0x5f, 0x32, 0xc3, 0x56, 0xdf, 0x4c, 0x7e, 0xaf, 0xdb, 0x1e, 0xd1, 0x32, 0x6e,
		0xb1, 0xec, 0xe4, 0x59, 0x63, 0xf3, 0xe4, 0x33, 0xa1, 0xb6, 0xd5, 0x37, 0x3f, 0x6c, 0x35, 0x7d,
		0xf4, 0xe8, 0x9c, 0x38, 0x56, 0xdf, 0x6c, 0x6f, 0x35, 0xde, 0x13, 0x56, 0x50, 0xb9, 0x6e, 0x9c,
		0x3a, 0x7e, 0xa9, 0xb1, 0x60, 0x2f, 0xee, 0xd0, 0x28, 0x3f, 0x2e, 0x1b, 0x3d, 0x68, 0x3c, 0x7f,
		0xf8, 0xcc, 0xf0, 0x9c, 0xbc, 0x56, 0x9a, 0x2c, 0x98, 0xf5, 0x66, 0x5e, 0x85, 0xd9, 0x75, 0x97,
		0x17, 0x2f, 0x64, 0x3b, 0xe8, 0x94, 0x87, 0x87, 0x57, 0xff, 0x79, 0x2c, 0x1e, 0xa1, 0xe5, 0x27,
		0x16, 0x1b, 0xfb, 0x3b, 0xff, 0x89, 0x82, 0x01, 0x73, 0xc2, 0x25, 0xa6, 0xdc, 0xea, 0x9b, 0x9c,
		0x85, 0xf8, 0x40, 0xe7, 0xad, 0x9e, 0xeb, 0x41, 0x56, 0xf6, 0x8c, 0x4a, 0xad, 0x51, 0x05, 0x16,
		0x55, 0x01, 0xc9, 0x1f, 0x52, 0x4c, 0x9c, 0xc5, 0xd4, 0x63, 0xc1, 0x61, 0x47, 0x33, 0xbc, 0x36,
		0xdd, 0x0f, 0x8c, 0x7d, 0x7f, 0xd0, 0x84, 0x82, 0x27, 0x1a, 0x44, 0x89, 0x60, 0xca, 0x04, 0x15,
		0x14, 0x5c, 0x50, 0x90, 0xe5, 0x82, 0xbd, 0x3f, 0xe8, 0x07, 0x82, 0x2f, 0x44, 0x82, 0x12, 0x19,
		0xc4, 0xf0, 0xd9, 0xe5, 0x84, 0x08, 0x3c, 0xc7, 0xa9, 0x21, 0x45, 0x11, 0x59, 0xaa, 0x00, 0x28,
		0x03, 0xa1, 0x8e, 0x12, 0x85, 0x94, 0xa8, 0x04, 0xa3, 0xd4, 0x71, 0x6a, 0x09, 0x50, 0x4c, 0x8a,
		0x6a, 0x79, 0xe7, 0x59, 0x16, 0x65, 0x09, 0x54, 0xb3, 0xe0, 0xa5, 0xb2, 0x12, 0xa8, 0x88, 0xd3,
		0x0f, 0x44, 0x43, 0x28, 0x1d, 0x15, 0x68, 0xa9, 0x42, 0x4f, 0x2d, 0x34, 0xd5, 0x42, 0x57, 0x35,
		0xda, 0x8a, 0xd3, 0x57, 0x82, 0xc6, 0x20, 0x3a, 0xe7, 0x42, 0x0b, 0xcf, 0xb5, 0x9b, 0x9c, 0x2c,
		0x81, 0x01, 0xc9, 0x78, 0xb0, 0x51, 0x03, 0xc0, 0x32, 0x25, 0x7b, 0x1b, 0x20, 0x0a, 0x21, 0x7d,
		0x2e, 0xfc, 0x75, 0xe5, 0xc3, 0xdc, 0x2e, 0xb8, 0x1e, 0x12, 0xca, 0x7f, 0xed, 0x00, 0xfc, 0xde,
		0xf6, 0xfd, 0x16, 0x28, 0xfe, 0x05, 0x51, 0x27, 0x1e, 0xc5, 0x77, 0x90, 0x78, 0xfc, 0xf7, 0x13,
		0x2c, 0xb9, 0x1e, 0xc0, 0x03, 0xa1, 0x60, 0x08, 0x35, 0x91, 0xa0, 0xa4, 0xea, 0x1b, 0x72, 0x43,
		0xac, 0x49, 0xd7, 0x90, 0xa1, 0x19, 0x27, 0x1e, 0xbd, 0x27, 0x0e, 0xe1, 0xf1, 0xda, 0xb3, 0xad,
		0xa4, 0x33, 0x6a, 0x28, 0xc2, 0x8d, 0x5e, 0xaf, 0x16, 0xee, 0x6e, 0xa7, 0xd7, 0xed, 0xfd, 0x7e,
		0xdb, 0xe9, 0xfd, 0x76, 0x85, 0xb8, 0x1b, 0xe7, 0x95, 0x1c, 0x1b, 0xa7, 0xb5, 0x23, 0xc9, 0x23,
		0xcb, 0xc7, 0x98, 0x35, 0x91, 0x6d, 0x33, 0x1c, 0x04, 0x6a, 0x33, 0x7d, 0x41, 0xd3, 0xfb, 0x9b,
		0xec, 0x29, 0xf1, 0xa8, 0xe2, 0x5c, 0xff, 0xa1, 0x07, 0x94, 0x4f, 0x5d, 0xb8, 0xd8, 0x5c, 0x9f,
		0x81, 0x10, 0x70, 0x46, 0xa8, 0x63, 0x29, 0x4e, 0x65, 0x19, 0x1a, 0x7f, 0x28, 0xea, 0x79, 0x46,
		0x9c, 0x63, 0x46, 0x95, 0x80, 0xc9, 0x95, 0x7d, 0x6f, 0x37, 0x7b, 0x3f, 0x7e, 0xdc, 0x8c, 0x7f,
		0xb1, 0x94, 0x74, 0x8d, 0x8d, 0x0b, 0x24, 0x88, 0x3a, 0xba, 0x22, 0xd1, 0x1d, 0x34, 0x87, 0xfd,
		0x0b, 0x86, 0xf7, 0x3a, 0xb3, 0xc9, 0x49, 0xf6, 0x23, 0x03, 0x4a, 0x3d, 0x8e, 0xe2, 0x24, 0x2e,
		0xbf, 0x2d, 0x09, 0x66, 0x0b, 0xbc, 0x44, 0x3e, 0xe2, 0x8b, 0x98, 0x92, 0x2d, 0xcf, 0xc7, 0x34,
		0xd9, 0x44, 0x37, 0x3d, 0x3f, 0xd6, 0x18, 0xb4, 0xa6, 0x8e, 0xdf, 0xca, 0x8b, 0x7c, 0xf9, 0x7f,
		0x2d, 0xe9, 0xad, 0x76, 0x62, 0x8e, 0xb3, 0x70, 0xc6, 0x69, 0xfa, 0x06, 0x3c, 0xe5, 0xd6, 0x9e,
		0x12, 0x63, 0x93, 0x3b, 0xc7, 0x9f, 0x3c, 0x66, 0xc6, 0xf2, 0xff, 0x26, 0x69, 0x42, 0x32, 0xf4,
		0xe2, 0x2c, 0x88, 0x31, 0x3c, 0xa7, 0xab, 0xe6, 0x72, 0x40, 0x0e, 0x87, 0x55, 0x27, 0x40, 0x39,
		0x3b, 0xf7, 0xce, 0xc5, 0x68, 0xce, 0xf0, 0x5c, 0x96, 0x0b, 0xd9, 0xcc, 0x25, 0xb9, 0x25, 0x8b,
		0x67, 0xaa, 0x35, 0x59, 0x6f, 0x6e, 0x52, 0x12, 0xb6, 0x0a, 0xf0, 0x5e, 0x88, 0x24, 0x01, 0x47,
		0x1c, 0xc3, 0xd8, 0x91, 0x88, 0x9e, 0xa9, 0x68, 0xd5, 0xa9, 0x8b, 0x56, 0x75, 0xd1, 0x4a, 0x54,
		0x08, 0x53, 0x34, 0x75, 0xb1, 0x9d, 0xbd, 0x5b, 0xcd, 0x39, 0x5a, 0x12, 0x77, 0xa5, 0xb6, 0xaf,
		0xd9, 0xa3, 0xb3, 0xde, 0xe1, 0xbc, 0xc7, 0x1d, 0x0e, 0xb1, 0x31, 0xe5, 0x84, 0xaf, 0xe4, 0xd3,
		0xc7, 0x5e, 0x48, 0x14, 0x8b, 0x22, 0xd6, 0x28, 0x1d, 0xd2, 0x1d, 0x0a, 0xb0, 0x9e, 0x12, 0x50,
		0xe6, 0xec, 0x60, 0x38, 0xb2, 0x74, 0x95, 0x81, 0x02, 0x2d, 0x0b, 0x75, 0xf5, 0x48, 0x56, 0x3a,
		0x3a, 0x7a, 0xfe, 0xd6, 0x9d, 0xfc, 0xfd, 0x38, 0xfa, 0x38, 0x78, 0xf9, 0x6a, 0x69, 0x51, 0x1f,
		0x29, 0x6b, 0x19, 0x5f, 0xaa, 0xac, 0x75, 0xf1, 0x7d, 0xa6, 0x52, 0xdd, 0x7c, 0xf7, 0xf5, 0xba,
		0x55, 0x54, 0xa3, 0x5e, 0x47, 0xd7, 0xcb, 0x5b, 0x6d, 0x75, 0x75, 0x0d, 0x59, 0xe9, 0xf0, 0x1b,
		0xaf, 0x59, 0xa7, 0xe6, 0xba, 0xaf, 0x06, 0xba, 0x17, 0xc3, 0xa2, 0xa9, 0xfe, 0x7e, 0x8e, 0xb0,
		0xe8, 0xac, 0xc7, 0x9f, 0x3c, 0x3e, 0xc6, 0x65, 0x35, 0xbc, 0x81, 0x8a, 0x0e, 0x60, 0x45, 0xf8,
		0x17, 0x09, 0xf8, 0x80, 0x73, 0x06, 0x5f, 0x15, 0x3e, 0x10, 0xfa, 0xc9, 0xc5, 0xf1, 0x9e, 0x21,
		0x8e, 0x35, 0x0d, 0x5d, 0x17, 0xb8, 0xb2, 0x7b, 0x40, 0xaf, 0x7a, 0x14, 0x3d, 0x31, 0x1b, 0x33,
		0x6c, 0xdf, 0xad, 0x52, 0x35, 0x57, 0x76, 0xd0, 0x52, 0x9f, 0xa7, 0xd7, 0xe7, 0xe9, 0xd7, 0x90,
		0xf7, 0xeb, 0xf3, 0xf4, 0xb3, 0xe6, 0xf3, 0xfa, 0x3c, 0xfd, 0xea, 0xf2, 0x65, 0x7d, 0x9e, 0x5e,
		0x57, 0x9b, 0xde, 0x46, 0xb5, 0xa9, 0x3e, 0x4f, 0x3f, 0xe1, 0xf2, 0xbc, 0x3e, 0x4f, 0x3f, 0x6d,
		0x74, 0xeb, 0xf3, 0x74, 0xf5, 0x6c, 0x12, 0xe0, 0x20, 0x20, 0x1e, 0x6d, 0xca, 0x1f, 0xd6, 0x95,
		0xd9, 0x56, 0x50, 0xf5, 0xee, 0xf2, 0x09, 0xa6, 0xe1, 0x12, 0xb3, 0xe4, 0xa3, 0x03, 0xc5, 0xac,
		0xd2, 0x05, 0xca, 0x7f, 0xa2, 0xe1, 0x32, 0x76, 0x24, 0xaa, 0x3f, 0xda, 0x10, 0xfd, 0x68, 0x03,
		0x42, 0x56, 0xe8, 0x37, 0x1b, 0x2f, 0x6b, 0x5b, 0xba, 0x4f, 0xe3, 0xb5, 0xdc, 0x47, 0xf9, 0x8c,
		0x57, 0x80, 0x15, 0xa1, 0x7c, 0x95, 0x07, 0x5c, 0xd5, 0x01, 0x57, 0x71, 0xe4, 0xab, 0x36, 0x22,
		0x78, 0x01, 0xb8, 0x0a, 0xe6, 0xa8, 0x25, 0xfc, 0xbd, 0x05, 0x84, 0x95, 0xc7, 0xf9, 0x18, 0x9d,
		0xe0, 0xaa, 0x9d, 0x04, 0x7e, 0xb2, 0xb8, 0x1d, 0xbb, 0xde, 0x28, 0x05, 0xd3, 0x7e, 0x74, 0x22,
		0x85, 0xdb, 0xa6, 0x02, 0xde, 0x8b, 0x79, 0xbd, 0xef, 0x5e, 0xae, 0x80, 0x8f, 0x65, 0xcf, 0x8a,
		0x63, 0xdf, 0xfc, 0xda, 0xf2, 0xe0, 0xd0, 0xc8, 0x2d, 0x12, 0x0c, 0xd1, 0x3f, 0xf8, 0x8b, 0xe7,
		0x55, 0x7f, 0x26, 0xb2, 0xeb, 0x51, 0xe9, 0xf6, 0x74, 0xc5, 0xc8, 0xd3, 0xdb, 0xd7, 0x46, 0x71,
		0x50, 0x91, 0x11, 0xfd, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa3, 0xe8,
		0xcb, 0xf6, 0x9e, 0x3d, 0x00, 0x00,
	}
)