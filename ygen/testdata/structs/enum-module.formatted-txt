/*
Package ocstructs is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by codegen-tests
using the following YANG input files:
	- testdata/structs/enum-module.yang
Imported modules were sourced from:
	- testdata/structs
*/
package ocstructs

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// AList represents the /enum-module/a-lists/a-list YANG schema element.
type AList struct {
	Value	AList_Value_Union	`path:"state/value|value" module:"enum-module"`
}

// IsYANGGoStruct ensures that AList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*AList) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the AList struct, which is a YANG list entry.
func (t *AList) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"value": t.Value,
	}, nil
}

// AList_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /enum-module/a-lists/a-list/state/value within the YANG schema.
type AList_Value_Union interface {
	Is_AList_Value_Union()
}

// AList_Value_Union_E_EnumModule_AList_Value is used when /enum-module/a-lists/a-list/state/value
// is to be set to a E_EnumModule_AList_Value value.
type AList_Value_Union_E_EnumModule_AList_Value struct {
	E_EnumModule_AList_Value	E_EnumModule_AList_Value
}

// Is_AList_Value_Union ensures that AList_Value_Union_E_EnumModule_AList_Value
// implements the AList_Value_Union interface.
func (*AList_Value_Union_E_EnumModule_AList_Value) Is_AList_Value_Union() {}

// AList_Value_Union_Uint32 is used when /enum-module/a-lists/a-list/state/value
// is to be set to a uint32 value.
type AList_Value_Union_Uint32 struct {
	Uint32	uint32
}

// Is_AList_Value_Union ensures that AList_Value_Union_Uint32
// implements the AList_Value_Union interface.
func (*AList_Value_Union_Uint32) Is_AList_Value_Union() {}

// To_AList_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the AList_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *AList) To_AList_Value_Union(i interface{}) (AList_Value_Union, error) {
	switch v := i.(type) {
	case E_EnumModule_AList_Value:
		return &AList_Value_Union_E_EnumModule_AList_Value{v}, nil
	case uint32:
		return &AList_Value_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to AList_Value_Union, unknown union type, got: %T, want any of [E_EnumModule_AList_Value, uint32]", i, i)
	}
}

// BList represents the /enum-module/b-lists/b-list YANG schema element.
type BList struct {
	Value	BList_Value_Union	`path:"state/value|value" module:"enum-module"`
}

// IsYANGGoStruct ensures that BList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BList) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the BList struct, which is a YANG list entry.
func (t *BList) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"value": t.Value,
	}, nil
}

// BList_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /enum-module/b-lists/b-list/state/value within the YANG schema.
type BList_Value_Union interface {
	Is_BList_Value_Union()
}

// BList_Value_Union_E_EnumModule_BList_Value is used when /enum-module/b-lists/b-list/state/value
// is to be set to a E_EnumModule_BList_Value value.
type BList_Value_Union_E_EnumModule_BList_Value struct {
	E_EnumModule_BList_Value	E_EnumModule_BList_Value
}

// Is_BList_Value_Union ensures that BList_Value_Union_E_EnumModule_BList_Value
// implements the BList_Value_Union interface.
func (*BList_Value_Union_E_EnumModule_BList_Value) Is_BList_Value_Union() {}

// BList_Value_Union_Uint32 is used when /enum-module/b-lists/b-list/state/value
// is to be set to a uint32 value.
type BList_Value_Union_Uint32 struct {
	Uint32	uint32
}

// Is_BList_Value_Union ensures that BList_Value_Union_Uint32
// implements the BList_Value_Union interface.
func (*BList_Value_Union_Uint32) Is_BList_Value_Union() {}

// To_BList_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the BList_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *BList) To_BList_Value_Union(i interface{}) (BList_Value_Union, error) {
	switch v := i.(type) {
	case E_EnumModule_BList_Value:
		return &BList_Value_Union_E_EnumModule_BList_Value{v}, nil
	case uint32:
		return &BList_Value_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to BList_Value_Union, unknown union type, got: %T, want any of [E_EnumModule_BList_Value, uint32]", i, i)
	}
}

// C represents the /enum-module/c YANG schema element.
type C struct {
	Cl	E_EnumModule_EnumModule_Cl	`path:"cl" module:"enum-module"`
}

// IsYANGGoStruct ensures that C implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*C) IsYANGGoStruct() {}

// Parent represents the /enum-module/parent YANG schema element.
type Parent struct {
	Child	*Parent_Child	`path:"child" module:"enum-module"`
}

// IsYANGGoStruct ensures that Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Parent) IsYANGGoStruct() {}

// Parent_Child represents the /enum-module/parent/child YANG schema element.
type Parent_Child struct {
	Id	E_EnumTypes_ID	`path:"config/id" module:"enum-module"`
}

// IsYANGGoStruct ensures that Parent_Child implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Parent_Child) IsYANGGoStruct() {}

// E_EnumModule_AList_Value is a derived int64 type which is used to represent
// the enumerated node EnumModule_AList_Value. An additional value named
// EnumModule_AList_Value_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_EnumModule_AList_Value int64

// IsYANGGoEnum ensures that EnumModule_AList_Value implements the yang.GoEnum
// interface. This ensures that EnumModule_AList_Value can be identified as a
// mapped type for a YANG enumeration.
func (E_EnumModule_AList_Value) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  EnumModule_AList_Value.
func (E_EnumModule_AList_Value) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// EnumModule_AList_Value_UNSET corresponds to the value UNSET of EnumModule_AList_Value
	EnumModule_AList_Value_UNSET E_EnumModule_AList_Value = 0
	// EnumModule_AList_Value_A corresponds to the value A of EnumModule_AList_Value
	EnumModule_AList_Value_A E_EnumModule_AList_Value = 1
	// EnumModule_AList_Value_B corresponds to the value B of EnumModule_AList_Value
	EnumModule_AList_Value_B E_EnumModule_AList_Value = 2
	// EnumModule_AList_Value_C corresponds to the value C of EnumModule_AList_Value
	EnumModule_AList_Value_C E_EnumModule_AList_Value = 3
)

// E_EnumModule_BList_Value is a derived int64 type which is used to represent
// the enumerated node EnumModule_BList_Value. An additional value named
// EnumModule_BList_Value_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_EnumModule_BList_Value int64

// IsYANGGoEnum ensures that EnumModule_BList_Value implements the yang.GoEnum
// interface. This ensures that EnumModule_BList_Value can be identified as a
// mapped type for a YANG enumeration.
func (E_EnumModule_BList_Value) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  EnumModule_BList_Value.
func (E_EnumModule_BList_Value) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// EnumModule_BList_Value_UNSET corresponds to the value UNSET of EnumModule_BList_Value
	EnumModule_BList_Value_UNSET E_EnumModule_BList_Value = 0
	// EnumModule_BList_Value_A corresponds to the value A of EnumModule_BList_Value
	EnumModule_BList_Value_A E_EnumModule_BList_Value = 1
	// EnumModule_BList_Value_B corresponds to the value B of EnumModule_BList_Value
	EnumModule_BList_Value_B E_EnumModule_BList_Value = 2
	// EnumModule_BList_Value_C corresponds to the value C of EnumModule_BList_Value
	EnumModule_BList_Value_C E_EnumModule_BList_Value = 3
)

// E_EnumModule_EnumModule_Cl is a derived int64 type which is used to represent
// the enumerated node EnumModule_EnumModule_Cl. An additional value named
// EnumModule_EnumModule_Cl_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_EnumModule_EnumModule_Cl int64

// IsYANGGoEnum ensures that EnumModule_EnumModule_Cl implements the yang.GoEnum
// interface. This ensures that EnumModule_EnumModule_Cl can be identified as a
// mapped type for a YANG enumeration.
func (E_EnumModule_EnumModule_Cl) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  EnumModule_EnumModule_Cl.
func (E_EnumModule_EnumModule_Cl) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// EnumModule_EnumModule_Cl_UNSET corresponds to the value UNSET of EnumModule_EnumModule_Cl
	EnumModule_EnumModule_Cl_UNSET E_EnumModule_EnumModule_Cl = 0
	// EnumModule_EnumModule_Cl_X corresponds to the value X of EnumModule_EnumModule_Cl
	EnumModule_EnumModule_Cl_X E_EnumModule_EnumModule_Cl = 1
)

// E_EnumTypes_ID is a derived int64 type which is used to represent
// the enumerated node EnumTypes_ID. An additional value named
// EnumTypes_ID_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_EnumTypes_ID int64

// IsYANGGoEnum ensures that EnumTypes_ID implements the yang.GoEnum
// interface. This ensures that EnumTypes_ID can be identified as a
// mapped type for a YANG enumeration.
func (E_EnumTypes_ID) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  EnumTypes_ID.
func (E_EnumTypes_ID) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// EnumTypes_ID_UNSET corresponds to the value UNSET of EnumTypes_ID
	EnumTypes_ID_UNSET E_EnumTypes_ID = 0
	// EnumTypes_ID_FORTY_TWO corresponds to the value FORTY_TWO of EnumTypes_ID
	EnumTypes_ID_FORTY_TWO E_EnumTypes_ID = 1
	// EnumTypes_ID_SO_LONG_AND_THANKS_FOR_ALL_THE_FISH corresponds to the value SO_LONG_AND_THANKS_FOR_ALL_THE_FISH of EnumTypes_ID
	EnumTypes_ID_SO_LONG_AND_THANKS_FOR_ALL_THE_FISH E_EnumTypes_ID = 2
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_EnumModule_AList_Value": {
		1: {Name: "A"},
		2: {Name: "B"},
		3: {Name: "C"},
	},
	"E_EnumModule_BList_Value": {
		1: {Name: "A"},
		2: {Name: "B"},
		3: {Name: "C"},
	},
	"E_EnumModule_EnumModule_Cl": {
		1: {Name: "X"},
	},
	"E_EnumTypes_ID": {
		1: {Name: "FORTY_TWO", DefiningModule: "enum-module"},
		2: {Name: "SO_LONG_AND_THANKS_FOR_ALL_THE_FISH", DefiningModule: "enum-module"},
	},
}
