/*
Package ocstructs is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by codegen-tests
using the following YANG input files:
	- ../testdata/modules/enum-duplication.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

// Device represents the /device YANG schema element.
type Device struct {
	Base	*EnumDuplication_Base	`path:"base" module:"enum-duplication"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// EnumDuplication_Base represents the /enum-duplication/base YANG schema element.
type EnumDuplication_Base struct {
	Config	*EnumDuplication_Base_Config	`path:"config" module:"enum-duplication"`
	State	*EnumDuplication_Base_State	`path:"state" module:"enum-duplication"`
}

// IsYANGGoStruct ensures that EnumDuplication_Base implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*EnumDuplication_Base) IsYANGGoStruct() {}

// EnumDuplication_Base_Config represents the /enum-duplication/base/config YANG schema element.
type EnumDuplication_Base_Config struct {
	Enumerated	E_EnumDuplication_Base_Config_Enumerated	`path:"enumerated" module:"enum-duplication"`
}

// IsYANGGoStruct ensures that EnumDuplication_Base_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*EnumDuplication_Base_Config) IsYANGGoStruct() {}

// EnumDuplication_Base_State represents the /enum-duplication/base/state YANG schema element.
type EnumDuplication_Base_State struct {
	Enumerated	E_EnumDuplication_Base_Config_Enumerated	`path:"enumerated" module:"enum-duplication"`
}

// IsYANGGoStruct ensures that EnumDuplication_Base_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*EnumDuplication_Base_State) IsYANGGoStruct() {}

// E_EnumDuplication_Base_Config_Enumerated is a derived int64 type which is used to represent
// the enumerated node EnumDuplication_Base_Config_Enumerated. An additional value named
// EnumDuplication_Base_Config_Enumerated_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_EnumDuplication_Base_Config_Enumerated int64

// IsYANGGoEnum ensures that EnumDuplication_Base_Config_Enumerated implements the yang.GoEnum
// interface. This ensures that EnumDuplication_Base_Config_Enumerated can be identified as a
// mapped type for a YANG enumeration.
func (E_EnumDuplication_Base_Config_Enumerated) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  EnumDuplication_Base_Config_Enumerated.
func (E_EnumDuplication_Base_Config_Enumerated) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_EnumDuplication_Base_Config_Enumerated.
func (e E_EnumDuplication_Base_Config_Enumerated) String() string {
	return ygot.EnumLogString(e, int64(e), "E_EnumDuplication_Base_Config_Enumerated")
}

const (
	// EnumDuplication_Base_Config_Enumerated_UNSET corresponds to the value UNSET of EnumDuplication_Base_Config_Enumerated
	EnumDuplication_Base_Config_Enumerated_UNSET E_EnumDuplication_Base_Config_Enumerated = 0
	// EnumDuplication_Base_Config_Enumerated_A corresponds to the value A of EnumDuplication_Base_Config_Enumerated
	EnumDuplication_Base_Config_Enumerated_A E_EnumDuplication_Base_Config_Enumerated = 1
	// EnumDuplication_Base_Config_Enumerated_B corresponds to the value B of EnumDuplication_Base_Config_Enumerated
	EnumDuplication_Base_Config_Enumerated_B E_EnumDuplication_Base_Config_Enumerated = 2
	// EnumDuplication_Base_Config_Enumerated_C corresponds to the value C of EnumDuplication_Base_Config_Enumerated
	EnumDuplication_Base_Config_Enumerated_C E_EnumDuplication_Base_Config_Enumerated = 3
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_EnumDuplication_Base_Config_Enumerated": {
		1: {Name: "A"},
		2: {Name: "B"},
		3: {Name: "C"},
	},
}
