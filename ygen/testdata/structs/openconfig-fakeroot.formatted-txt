/*
Package ocstructs is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by codegen-tests
using the following YANG input files:
	- testdata/structs/openconfig-fakeroot.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// Device represents the /device YANG schema element.
type Device struct {
	Interface	map[string]*Interface	`path:"interfaces/interface" rootname:"interface" module:"openconfig-fakeroot"`
	System	*System	`path:"" rootname:"system" module:"openconfig-fakeroot"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Device struct. The keys of the list are populated from the input
// arguments.
func (t *Device) NewInterface(Name string) (*Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// Interface represents the /openconfig-fakeroot/interfaces/interface YANG schema element.
type Interface struct {
	Name	*string	`path:"config/name|name" module:"openconfig-fakeroot"`
}

// IsYANGGoStruct ensures that Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Interface) IsYANGGoStruct() {}

// System represents the /openconfig-fakeroot/system YANG schema element.
type System struct {
	Hostname	*string	`path:"/system/config/hostname" module:"openconfig-fakeroot"`
	NtpServer	map[uint32]*System_NtpServer	`path:"/system/ntp-servers/ntp-server" module:"openconfig-fakeroot"`
}

// IsYANGGoStruct ensures that System implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System) IsYANGGoStruct() {}

// NewNtpServer creates a new entry in the NtpServer list of the
// System struct. The keys of the list are populated from the input
// arguments.
func (t *System) NewNtpServer(Name uint32) (*System_NtpServer, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NtpServer == nil {
		t.NtpServer = make(map[uint32]*System_NtpServer)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NtpServer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NtpServer", key)
	}

	t.NtpServer[key] = &System_NtpServer{
		Name: &Name,
	}

	return t.NtpServer[key], nil
}

// System_NtpServer represents the /openconfig-fakeroot/system/ntp-servers/ntp-server YANG schema element.
type System_NtpServer struct {
	Name	*uint32	`path:"config/name|name" module:"openconfig-fakeroot"`
}

// IsYANGGoStruct ensures that System_NtpServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_NtpServer) IsYANGGoStruct() {}
