/*
Package ocstructs is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by codegen-tests
using the following YANG input files:
	- ../testdata/modules/enum-module.yang
Imported modules were sourced from:
	- ../testdata/modules/modules
*/
package ocstructs

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

// AList represents the /enum-module/a-lists/a-list YANG schema element.
type AList struct {
	Value	AList_Value_Union	`path:"state/value|value" module:"enum-module"`
}

// IsYANGGoStruct ensures that AList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*AList) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the AList struct, which is a YANG list entry.
func (t *AList) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"value": t.Value,
	}, nil
}

// AList_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /enum-module/a-lists/a-list/state/value within the YANG schema.
// Union type can be one of [E_AList_Value, UnionUint32].
type AList_Value_Union interface {
	// Union type can be one of [E_AList_Value, UnionUint32]
	Documentation_for_AList_Value_Union()
}

// Documentation_for_AList_Value_Union ensures that E_AList_Value
// implements the AList_Value_Union interface.
func (E_AList_Value) Documentation_for_AList_Value_Union() {}

// Documentation_for_AList_Value_Union ensures that UnionUint32
// implements the AList_Value_Union interface.
func (UnionUint32) Documentation_for_AList_Value_Union() {}

// To_AList_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the AList_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *AList) To_AList_Value_Union(i interface{}) (AList_Value_Union, error) {
	if v, ok := i.(AList_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to AList_Value_Union, unknown union type, got: %T, want any of [E_AList_Value, uint32]", i, i)
}

// BList represents the /enum-module/b-lists/b-list YANG schema element.
type BList struct {
	Value	BList_Value_Union	`path:"state/value|value" module:"enum-module"`
}

// IsYANGGoStruct ensures that BList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BList) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the BList struct, which is a YANG list entry.
func (t *BList) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"value": t.Value,
	}, nil
}

// BList_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /enum-module/b-lists/b-list/state/value within the YANG schema.
// Union type can be one of [E_BList_Value, UnionUint32].
type BList_Value_Union interface {
	// Union type can be one of [E_BList_Value, UnionUint32]
	Documentation_for_BList_Value_Union()
}

// Documentation_for_BList_Value_Union ensures that E_BList_Value
// implements the BList_Value_Union interface.
func (E_BList_Value) Documentation_for_BList_Value_Union() {}

// Documentation_for_BList_Value_Union ensures that UnionUint32
// implements the BList_Value_Union interface.
func (UnionUint32) Documentation_for_BList_Value_Union() {}

// To_BList_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the BList_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *BList) To_BList_Value_Union(i interface{}) (BList_Value_Union, error) {
	if v, ok := i.(BList_Value_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to BList_Value_Union, unknown union type, got: %T, want any of [E_BList_Value, uint32]", i, i)
}

// C represents the /enum-module/c YANG schema element.
type C struct {
	Cl	E_EnumModule_Cl	`path:"cl" module:"enum-module"`
}

// IsYANGGoStruct ensures that C implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*C) IsYANGGoStruct() {}

// Parent represents the /enum-module/parent YANG schema element.
type Parent struct {
	Child	*Parent_Child	`path:"child" module:"enum-module"`
}

// IsYANGGoStruct ensures that Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Parent) IsYANGGoStruct() {}

// Parent_Child represents the /enum-module/parent/child YANG schema element.
type Parent_Child struct {
	Enum	E_EnumModule_TdEnum	`path:"state/enum" module:"enum-module"`
	Id	E_EnumTypes_ID	`path:"config/id" module:"enum-module"`
}

// IsYANGGoStruct ensures that Parent_Child implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Parent_Child) IsYANGGoStruct() {}

// E_AList_Value is a derived int64 type which is used to represent
// the enumerated node AList_Value. An additional value named
// AList_Value_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_AList_Value int64

// IsYANGGoEnum ensures that AList_Value implements the yang.GoEnum
// interface. This ensures that AList_Value can be identified as a
// mapped type for a YANG enumeration.
func (E_AList_Value) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  AList_Value.
func (E_AList_Value) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_AList_Value.
func (e E_AList_Value) String() string {
	return ygot.EnumLogString(e, int64(e), "E_AList_Value")
}

const (
	// AList_Value_UNSET corresponds to the value UNSET of AList_Value
	AList_Value_UNSET E_AList_Value = 0
	// AList_Value_A corresponds to the value A of AList_Value
	AList_Value_A E_AList_Value = 1
	// AList_Value_B corresponds to the value B of AList_Value
	AList_Value_B E_AList_Value = 2
	// AList_Value_C corresponds to the value C of AList_Value
	AList_Value_C E_AList_Value = 3
)

// E_BList_Value is a derived int64 type which is used to represent
// the enumerated node BList_Value. An additional value named
// BList_Value_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_BList_Value int64

// IsYANGGoEnum ensures that BList_Value implements the yang.GoEnum
// interface. This ensures that BList_Value can be identified as a
// mapped type for a YANG enumeration.
func (E_BList_Value) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  BList_Value.
func (E_BList_Value) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_BList_Value.
func (e E_BList_Value) String() string {
	return ygot.EnumLogString(e, int64(e), "E_BList_Value")
}

const (
	// BList_Value_UNSET corresponds to the value UNSET of BList_Value
	BList_Value_UNSET E_BList_Value = 0
	// BList_Value_A corresponds to the value A of BList_Value
	BList_Value_A E_BList_Value = 1
	// BList_Value_B corresponds to the value B of BList_Value
	BList_Value_B E_BList_Value = 2
	// BList_Value_C corresponds to the value C of BList_Value
	BList_Value_C E_BList_Value = 3
)

// E_EnumModule_Cl is a derived int64 type which is used to represent
// the enumerated node EnumModule_Cl. An additional value named
// EnumModule_Cl_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_EnumModule_Cl int64

// IsYANGGoEnum ensures that EnumModule_Cl implements the yang.GoEnum
// interface. This ensures that EnumModule_Cl can be identified as a
// mapped type for a YANG enumeration.
func (E_EnumModule_Cl) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  EnumModule_Cl.
func (E_EnumModule_Cl) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_EnumModule_Cl.
func (e E_EnumModule_Cl) String() string {
	return ygot.EnumLogString(e, int64(e), "E_EnumModule_Cl")
}

const (
	// EnumModule_Cl_UNSET corresponds to the value UNSET of EnumModule_Cl
	EnumModule_Cl_UNSET E_EnumModule_Cl = 0
	// EnumModule_Cl_X corresponds to the value X of EnumModule_Cl
	EnumModule_Cl_X E_EnumModule_Cl = 1
)

// E_EnumModule_TdEnum is a derived int64 type which is used to represent
// the enumerated node EnumModule_TdEnum. An additional value named
// EnumModule_TdEnum_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_EnumModule_TdEnum int64

// IsYANGGoEnum ensures that EnumModule_TdEnum implements the yang.GoEnum
// interface. This ensures that EnumModule_TdEnum can be identified as a
// mapped type for a YANG enumeration.
func (E_EnumModule_TdEnum) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  EnumModule_TdEnum.
func (E_EnumModule_TdEnum) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_EnumModule_TdEnum.
func (e E_EnumModule_TdEnum) String() string {
	return ygot.EnumLogString(e, int64(e), "E_EnumModule_TdEnum")
}

const (
	// EnumModule_TdEnum_UNSET corresponds to the value UNSET of EnumModule_TdEnum
	EnumModule_TdEnum_UNSET E_EnumModule_TdEnum = 0
	// EnumModule_TdEnum_ALPHA corresponds to the value ALPHA of EnumModule_TdEnum
	EnumModule_TdEnum_ALPHA E_EnumModule_TdEnum = 1
	// EnumModule_TdEnum_BRAVO corresponds to the value BRAVO of EnumModule_TdEnum
	EnumModule_TdEnum_BRAVO E_EnumModule_TdEnum = 2
	// EnumModule_TdEnum_CHARLIE corresponds to the value CHARLIE of EnumModule_TdEnum
	EnumModule_TdEnum_CHARLIE E_EnumModule_TdEnum = 3
)

// E_EnumTypes_ID is a derived int64 type which is used to represent
// the enumerated node EnumTypes_ID. An additional value named
// EnumTypes_ID_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_EnumTypes_ID int64

// IsYANGGoEnum ensures that EnumTypes_ID implements the yang.GoEnum
// interface. This ensures that EnumTypes_ID can be identified as a
// mapped type for a YANG enumeration.
func (E_EnumTypes_ID) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  EnumTypes_ID.
func (E_EnumTypes_ID) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_EnumTypes_ID.
func (e E_EnumTypes_ID) String() string {
	return ygot.EnumLogString(e, int64(e), "E_EnumTypes_ID")
}

const (
	// EnumTypes_ID_UNSET corresponds to the value UNSET of EnumTypes_ID
	EnumTypes_ID_UNSET E_EnumTypes_ID = 0
	// EnumTypes_ID_FORTY_TWO corresponds to the value FORTY_TWO of EnumTypes_ID
	EnumTypes_ID_FORTY_TWO E_EnumTypes_ID = 1
	// EnumTypes_ID_SO_LONG_AND_THANKS_FOR_ALL_THE_FISH corresponds to the value SO_LONG_AND_THANKS_FOR_ALL_THE_FISH of EnumTypes_ID
	EnumTypes_ID_SO_LONG_AND_THANKS_FOR_ALL_THE_FISH E_EnumTypes_ID = 2
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_AList_Value": {
		1: {Name: "A"},
		2: {Name: "B"},
		3: {Name: "C"},
	},
	"E_BList_Value": {
		1: {Name: "A"},
		2: {Name: "B"},
		3: {Name: "C"},
	},
	"E_EnumModule_Cl": {
		1: {Name: "X"},
	},
	"E_EnumModule_TdEnum": {
		1: {Name: "ALPHA"},
		2: {Name: "BRAVO"},
		3: {Name: "CHARLIE"},
	},
	"E_EnumTypes_ID": {
		1: {Name: "FORTY_TWO", DefiningModule: "enum-module"},
		2: {Name: "SO_LONG_AND_THANKS_FOR_ALL_THE_FISH", DefiningModule: "enum-module"},
	},
}
