/*
Package ocstructs is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by codegen-tests
using the following YANG input files:
	- ../testdata/modules/openconfig-fakeroot.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

// Device represents the /device YANG schema element.
type Device struct {
	Interfaces	*OpenconfigFakeroot_Interfaces	`path:"interfaces" module:"openconfig-fakeroot"`
	System	*OpenconfigFakeroot_System	`path:"system" module:"openconfig-fakeroot"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// OpenconfigFakeroot_Interfaces represents the /openconfig-fakeroot/interfaces YANG schema element.
type OpenconfigFakeroot_Interfaces struct {
	Interface	map[string]*OpenconfigFakeroot_Interfaces_Interface	`path:"interface" module:"openconfig-fakeroot"`
}

// IsYANGGoStruct ensures that OpenconfigFakeroot_Interfaces implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigFakeroot_Interfaces) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// OpenconfigFakeroot_Interfaces struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigFakeroot_Interfaces) NewInterface(Name string) (*OpenconfigFakeroot_Interfaces_Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*OpenconfigFakeroot_Interfaces_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &OpenconfigFakeroot_Interfaces_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// OpenconfigFakeroot_Interfaces_Interface represents the /openconfig-fakeroot/interfaces/interface YANG schema element.
type OpenconfigFakeroot_Interfaces_Interface struct {
	Config	*OpenconfigFakeroot_Interfaces_Interface_Config	`path:"config" module:"openconfig-fakeroot"`
	Name	*string	`path:"name" module:"openconfig-fakeroot"`
	State	*OpenconfigFakeroot_Interfaces_Interface_State	`path:"state" module:"openconfig-fakeroot"`
}

// IsYANGGoStruct ensures that OpenconfigFakeroot_Interfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigFakeroot_Interfaces_Interface) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigFakeroot_Interfaces_Interface struct, which is a YANG list entry.
func (t *OpenconfigFakeroot_Interfaces_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// OpenconfigFakeroot_Interfaces_Interface_Config represents the /openconfig-fakeroot/interfaces/interface/config YANG schema element.
type OpenconfigFakeroot_Interfaces_Interface_Config struct {
	Name	*string	`path:"name" module:"openconfig-fakeroot"`
}

// IsYANGGoStruct ensures that OpenconfigFakeroot_Interfaces_Interface_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigFakeroot_Interfaces_Interface_Config) IsYANGGoStruct() {}

// OpenconfigFakeroot_Interfaces_Interface_State represents the /openconfig-fakeroot/interfaces/interface/state YANG schema element.
type OpenconfigFakeroot_Interfaces_Interface_State struct {
	Name	*string	`path:"name" module:"openconfig-fakeroot"`
}

// IsYANGGoStruct ensures that OpenconfigFakeroot_Interfaces_Interface_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigFakeroot_Interfaces_Interface_State) IsYANGGoStruct() {}

// OpenconfigFakeroot_System represents the /openconfig-fakeroot/system YANG schema element.
type OpenconfigFakeroot_System struct {
	Config	*OpenconfigFakeroot_System_Config	`path:"config" module:"openconfig-fakeroot"`
	NtpServers	*OpenconfigFakeroot_System_NtpServers	`path:"ntp-servers" module:"openconfig-fakeroot"`
	State	*OpenconfigFakeroot_System_State	`path:"state" module:"openconfig-fakeroot"`
}

// IsYANGGoStruct ensures that OpenconfigFakeroot_System implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigFakeroot_System) IsYANGGoStruct() {}

// OpenconfigFakeroot_System_Config represents the /openconfig-fakeroot/system/config YANG schema element.
type OpenconfigFakeroot_System_Config struct {
	Hostname	*string	`path:"hostname" module:"openconfig-fakeroot"`
}

// IsYANGGoStruct ensures that OpenconfigFakeroot_System_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigFakeroot_System_Config) IsYANGGoStruct() {}

// OpenconfigFakeroot_System_NtpServers represents the /openconfig-fakeroot/system/ntp-servers YANG schema element.
type OpenconfigFakeroot_System_NtpServers struct {
	NtpServer	map[uint32]*OpenconfigFakeroot_System_NtpServers_NtpServer	`path:"ntp-server" module:"openconfig-fakeroot"`
}

// IsYANGGoStruct ensures that OpenconfigFakeroot_System_NtpServers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigFakeroot_System_NtpServers) IsYANGGoStruct() {}

// NewNtpServer creates a new entry in the NtpServer list of the
// OpenconfigFakeroot_System_NtpServers struct. The keys of the list are populated from the input
// arguments.
func (t *OpenconfigFakeroot_System_NtpServers) NewNtpServer(Name uint32) (*OpenconfigFakeroot_System_NtpServers_NtpServer, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NtpServer == nil {
		t.NtpServer = make(map[uint32]*OpenconfigFakeroot_System_NtpServers_NtpServer)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NtpServer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NtpServer", key)
	}

	t.NtpServer[key] = &OpenconfigFakeroot_System_NtpServers_NtpServer{
		Name: &Name,
	}

	return t.NtpServer[key], nil
}

// OpenconfigFakeroot_System_NtpServers_NtpServer represents the /openconfig-fakeroot/system/ntp-servers/ntp-server YANG schema element.
type OpenconfigFakeroot_System_NtpServers_NtpServer struct {
	Config	*OpenconfigFakeroot_System_NtpServers_NtpServer_Config	`path:"config" module:"openconfig-fakeroot"`
	Name	*uint32	`path:"name" module:"openconfig-fakeroot"`
	State	*OpenconfigFakeroot_System_NtpServers_NtpServer_State	`path:"state" module:"openconfig-fakeroot"`
}

// IsYANGGoStruct ensures that OpenconfigFakeroot_System_NtpServers_NtpServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigFakeroot_System_NtpServers_NtpServer) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the OpenconfigFakeroot_System_NtpServers_NtpServer struct, which is a YANG list entry.
func (t *OpenconfigFakeroot_System_NtpServers_NtpServer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// OpenconfigFakeroot_System_NtpServers_NtpServer_Config represents the /openconfig-fakeroot/system/ntp-servers/ntp-server/config YANG schema element.
type OpenconfigFakeroot_System_NtpServers_NtpServer_Config struct {
	Name	*uint32	`path:"name" module:"openconfig-fakeroot"`
}

// IsYANGGoStruct ensures that OpenconfigFakeroot_System_NtpServers_NtpServer_Config implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigFakeroot_System_NtpServers_NtpServer_Config) IsYANGGoStruct() {}

// OpenconfigFakeroot_System_NtpServers_NtpServer_State represents the /openconfig-fakeroot/system/ntp-servers/ntp-server/state YANG schema element.
type OpenconfigFakeroot_System_NtpServers_NtpServer_State struct {
	Name	*uint32	`path:"name" module:"openconfig-fakeroot"`
}

// IsYANGGoStruct ensures that OpenconfigFakeroot_System_NtpServers_NtpServer_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigFakeroot_System_NtpServers_NtpServer_State) IsYANGGoStruct() {}

// OpenconfigFakeroot_System_State represents the /openconfig-fakeroot/system/state YANG schema element.
type OpenconfigFakeroot_System_State struct {
	Hostname	*string	`path:"hostname" module:"openconfig-fakeroot"`
}

// IsYANGGoStruct ensures that OpenconfigFakeroot_System_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*OpenconfigFakeroot_System_State) IsYANGGoStruct() {}
