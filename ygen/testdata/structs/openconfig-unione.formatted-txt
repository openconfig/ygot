/*
Package ocstructs is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by codegen-tests
using the following YANG input files:
	- ../testdata/modules/openconfig-unione.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

// DupEnum represents the /openconfig-unione/dup-enum YANG schema element.
type DupEnum struct {
	A	E_DupEnum_A	`path:"state/A" module:"openconfig-unione"`
	B	E_DupEnum_B	`path:"state/B" module:"openconfig-unione"`
}

// IsYANGGoStruct ensures that DupEnum implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*DupEnum) IsYANGGoStruct() {}

// Platform represents the /openconfig-unione/platform YANG schema element.
type Platform struct {
	Component	*Platform_Component	`path:"component" module:"openconfig-unione"`
}

// IsYANGGoStruct ensures that Platform implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Platform) IsYANGGoStruct() {}

// Platform_Component represents the /openconfig-unione/platform/component YANG schema element.
type Platform_Component struct {
	E1	Platform_Component_E1_Union	`path:"state/e1" module:"openconfig-unione"`
	Enumerated	Platform_Component_Enumerated_Union	`path:"state/enumerated" module:"openconfig-unione"`
	Power	Platform_Component_Power_Union	`path:"state/power" module:"openconfig-unione"`
	R1	Platform_Component_E1_Union	`path:"state/r1" module:"openconfig-unione"`
	Type	Platform_Component_Type_Union	`path:"state/type" module:"openconfig-unione"`
}

// IsYANGGoStruct ensures that Platform_Component implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Platform_Component) IsYANGGoStruct() {}

// Platform_Component_E1_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-unione/platform/component/state/e1 within the YANG schema.
// Union type can be one of [UnionString, UnionUint32].
type Platform_Component_E1_Union interface {
	// Union type can be one of [UnionString, UnionUint32]
	Documentation_for_Platform_Component_E1_Union()
}

// Documentation_for_Platform_Component_E1_Union ensures that UnionString
// implements the Platform_Component_E1_Union interface.
func (UnionString) Documentation_for_Platform_Component_E1_Union() {}

// Documentation_for_Platform_Component_E1_Union ensures that UnionUint32
// implements the Platform_Component_E1_Union interface.
func (UnionUint32) Documentation_for_Platform_Component_E1_Union() {}

// To_Platform_Component_E1_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Platform_Component_E1_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Platform_Component) To_Platform_Component_E1_Union(i interface{}) (Platform_Component_E1_Union, error) {
	if v, ok := i.(Platform_Component_E1_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	case uint32:
		return UnionUint32(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to Platform_Component_E1_Union, unknown union type, got: %T, want any of [string, uint32]", i, i)
}

// Platform_Component_Enumerated_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-unione/platform/component/state/enumerated within the YANG schema.
// Union type can be one of [E_OpenconfigUnione_EnumOne, UnionString].
type Platform_Component_Enumerated_Union interface {
	// Union type can be one of [E_OpenconfigUnione_EnumOne, UnionString]
	Documentation_for_Platform_Component_Enumerated_Union()
}

// Documentation_for_Platform_Component_Enumerated_Union ensures that E_OpenconfigUnione_EnumOne
// implements the Platform_Component_Enumerated_Union interface.
func (E_OpenconfigUnione_EnumOne) Documentation_for_Platform_Component_Enumerated_Union() {}

// Documentation_for_Platform_Component_Enumerated_Union ensures that UnionString
// implements the Platform_Component_Enumerated_Union interface.
func (UnionString) Documentation_for_Platform_Component_Enumerated_Union() {}

// To_Platform_Component_Enumerated_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Platform_Component_Enumerated_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Platform_Component) To_Platform_Component_Enumerated_Union(i interface{}) (Platform_Component_Enumerated_Union, error) {
	if v, ok := i.(Platform_Component_Enumerated_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case string:
		return UnionString(v), nil
	}
	return nil, fmt.Errorf("cannot convert %v to Platform_Component_Enumerated_Union, unknown union type, got: %T, want any of [E_OpenconfigUnione_EnumOne, string]", i, i)
}

// Platform_Component_Power_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-unione/platform/component/state/power within the YANG schema.
// Union type can be one of [*UnionUnsupported, E_Component_Power, UnionUint32].
type Platform_Component_Power_Union interface {
	// Union type can be one of [*UnionUnsupported, E_Component_Power, UnionUint32]
	Documentation_for_Platform_Component_Power_Union()
}

// Documentation_for_Platform_Component_Power_Union ensures that *UnionUnsupported
// implements the Platform_Component_Power_Union interface.
func (*UnionUnsupported) Documentation_for_Platform_Component_Power_Union() {}

// Documentation_for_Platform_Component_Power_Union ensures that E_Component_Power
// implements the Platform_Component_Power_Union interface.
func (E_Component_Power) Documentation_for_Platform_Component_Power_Union() {}

// Documentation_for_Platform_Component_Power_Union ensures that UnionUint32
// implements the Platform_Component_Power_Union interface.
func (UnionUint32) Documentation_for_Platform_Component_Power_Union() {}

// To_Platform_Component_Power_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Platform_Component_Power_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Platform_Component) To_Platform_Component_Power_Union(i interface{}) (Platform_Component_Power_Union, error) {
	if v, ok := i.(Platform_Component_Power_Union); ok {
		return v, nil
	}
	switch v := i.(type) {
	case uint32:
		return UnionUint32(v), nil
	case interface{}:
		return &Unsupported{v}, nil
	}
	return nil, fmt.Errorf("cannot convert %v to Platform_Component_Power_Union, unknown union type, got: %T, want any of [E_Component_Power, interface{}, uint32]", i, i)
}

// Platform_Component_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /openconfig-unione/platform/component/state/type within the YANG schema.
// Union type can be one of [E_OpenconfigUnione_HARDWARE, E_OpenconfigUnione_SOFTWARE].
type Platform_Component_Type_Union interface {
	// Union type can be one of [E_OpenconfigUnione_HARDWARE, E_OpenconfigUnione_SOFTWARE]
	Documentation_for_Platform_Component_Type_Union()
}

// Documentation_for_Platform_Component_Type_Union ensures that E_OpenconfigUnione_HARDWARE
// implements the Platform_Component_Type_Union interface.
func (E_OpenconfigUnione_HARDWARE) Documentation_for_Platform_Component_Type_Union() {}

// Documentation_for_Platform_Component_Type_Union ensures that E_OpenconfigUnione_SOFTWARE
// implements the Platform_Component_Type_Union interface.
func (E_OpenconfigUnione_SOFTWARE) Documentation_for_Platform_Component_Type_Union() {}

// To_Platform_Component_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Platform_Component_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Platform_Component) To_Platform_Component_Type_Union(i interface{}) (Platform_Component_Type_Union, error) {
	if v, ok := i.(Platform_Component_Type_Union); ok {
		return v, nil
	}
	return nil, fmt.Errorf("cannot convert %v to Platform_Component_Type_Union, unknown union type, got: %T, want any of [E_OpenconfigUnione_HARDWARE, E_OpenconfigUnione_SOFTWARE]", i, i)
}

// E_Component_Power is a derived int64 type which is used to represent
// the enumerated node Component_Power. An additional value named
// Component_Power_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Component_Power int64

// IsYANGGoEnum ensures that Component_Power implements the yang.GoEnum
// interface. This ensures that Component_Power can be identified as a
// mapped type for a YANG enumeration.
func (E_Component_Power) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Component_Power.
func (E_Component_Power) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Component_Power.
func (e E_Component_Power) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Component_Power")
}

const (
	// Component_Power_UNSET corresponds to the value UNSET of Component_Power
	Component_Power_UNSET E_Component_Power = 0
	// Component_Power_ON corresponds to the value ON of Component_Power
	Component_Power_ON E_Component_Power = 1
	// Component_Power_OFF corresponds to the value OFF of Component_Power
	Component_Power_OFF E_Component_Power = 2
)

// E_DupEnum_A is a derived int64 type which is used to represent
// the enumerated node DupEnum_A. An additional value named
// DupEnum_A_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_DupEnum_A int64

// IsYANGGoEnum ensures that DupEnum_A implements the yang.GoEnum
// interface. This ensures that DupEnum_A can be identified as a
// mapped type for a YANG enumeration.
func (E_DupEnum_A) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  DupEnum_A.
func (E_DupEnum_A) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_DupEnum_A.
func (e E_DupEnum_A) String() string {
	return ygot.EnumLogString(e, int64(e), "E_DupEnum_A")
}

const (
	// DupEnum_A_UNSET corresponds to the value UNSET of DupEnum_A
	DupEnum_A_UNSET E_DupEnum_A = 0
	// DupEnum_A_A_A corresponds to the value A_A of DupEnum_A
	DupEnum_A_A_A E_DupEnum_A = 1
	// DupEnum_A_A_B corresponds to the value A_B of DupEnum_A
	DupEnum_A_A_B E_DupEnum_A = 2
)

// E_DupEnum_B is a derived int64 type which is used to represent
// the enumerated node DupEnum_B. An additional value named
// DupEnum_B_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_DupEnum_B int64

// IsYANGGoEnum ensures that DupEnum_B implements the yang.GoEnum
// interface. This ensures that DupEnum_B can be identified as a
// mapped type for a YANG enumeration.
func (E_DupEnum_B) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  DupEnum_B.
func (E_DupEnum_B) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_DupEnum_B.
func (e E_DupEnum_B) String() string {
	return ygot.EnumLogString(e, int64(e), "E_DupEnum_B")
}

const (
	// DupEnum_B_UNSET corresponds to the value UNSET of DupEnum_B
	DupEnum_B_UNSET E_DupEnum_B = 0
	// DupEnum_B_B_A corresponds to the value B_A of DupEnum_B
	DupEnum_B_B_A E_DupEnum_B = 1
	// DupEnum_B_B_B corresponds to the value B_B of DupEnum_B
	DupEnum_B_B_B E_DupEnum_B = 2
)

// E_OpenconfigUnione_EnumOne is a derived int64 type which is used to represent
// the enumerated node OpenconfigUnione_EnumOne. An additional value named
// OpenconfigUnione_EnumOne_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigUnione_EnumOne int64

// IsYANGGoEnum ensures that OpenconfigUnione_EnumOne implements the yang.GoEnum
// interface. This ensures that OpenconfigUnione_EnumOne can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigUnione_EnumOne) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigUnione_EnumOne.
func (E_OpenconfigUnione_EnumOne) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigUnione_EnumOne.
func (e E_OpenconfigUnione_EnumOne) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigUnione_EnumOne")
}

const (
	// OpenconfigUnione_EnumOne_UNSET corresponds to the value UNSET of OpenconfigUnione_EnumOne
	OpenconfigUnione_EnumOne_UNSET E_OpenconfigUnione_EnumOne = 0
	// OpenconfigUnione_EnumOne_ONE corresponds to the value ONE of OpenconfigUnione_EnumOne
	OpenconfigUnione_EnumOne_ONE E_OpenconfigUnione_EnumOne = 1
)

// E_OpenconfigUnione_HARDWARE is a derived int64 type which is used to represent
// the enumerated node OpenconfigUnione_HARDWARE. An additional value named
// OpenconfigUnione_HARDWARE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigUnione_HARDWARE int64

// IsYANGGoEnum ensures that OpenconfigUnione_HARDWARE implements the yang.GoEnum
// interface. This ensures that OpenconfigUnione_HARDWARE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigUnione_HARDWARE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigUnione_HARDWARE.
func (E_OpenconfigUnione_HARDWARE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigUnione_HARDWARE.
func (e E_OpenconfigUnione_HARDWARE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigUnione_HARDWARE")
}

const (
	// OpenconfigUnione_HARDWARE_UNSET corresponds to the value UNSET of OpenconfigUnione_HARDWARE
	OpenconfigUnione_HARDWARE_UNSET E_OpenconfigUnione_HARDWARE = 0
	// OpenconfigUnione_HARDWARE_CARD corresponds to the value CARD of OpenconfigUnione_HARDWARE
	OpenconfigUnione_HARDWARE_CARD E_OpenconfigUnione_HARDWARE = 1
)

// E_OpenconfigUnione_SOFTWARE is a derived int64 type which is used to represent
// the enumerated node OpenconfigUnione_SOFTWARE. An additional value named
// OpenconfigUnione_SOFTWARE_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigUnione_SOFTWARE int64

// IsYANGGoEnum ensures that OpenconfigUnione_SOFTWARE implements the yang.GoEnum
// interface. This ensures that OpenconfigUnione_SOFTWARE can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigUnione_SOFTWARE) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigUnione_SOFTWARE.
func (E_OpenconfigUnione_SOFTWARE) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_OpenconfigUnione_SOFTWARE.
func (e E_OpenconfigUnione_SOFTWARE) String() string {
	return ygot.EnumLogString(e, int64(e), "E_OpenconfigUnione_SOFTWARE")
}

const (
	// OpenconfigUnione_SOFTWARE_UNSET corresponds to the value UNSET of OpenconfigUnione_SOFTWARE
	OpenconfigUnione_SOFTWARE_UNSET E_OpenconfigUnione_SOFTWARE = 0
	// OpenconfigUnione_SOFTWARE_OS corresponds to the value OS of OpenconfigUnione_SOFTWARE
	OpenconfigUnione_SOFTWARE_OS E_OpenconfigUnione_SOFTWARE = 1
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_Component_Power": {
		1: {Name: "ON"},
		2: {Name: "OFF"},
	},
	"E_DupEnum_A": {
		1: {Name: "A_A"},
		2: {Name: "A_B"},
	},
	"E_DupEnum_B": {
		1: {Name: "B_A"},
		2: {Name: "B_B"},
	},
	"E_OpenconfigUnione_EnumOne": {
		1: {Name: "ONE"},
	},
	"E_OpenconfigUnione_HARDWARE": {
		1: {Name: "CARD", DefiningModule: "openconfig-unione"},
	},
	"E_OpenconfigUnione_SOFTWARE": {
		1: {Name: "OS", DefiningModule: "openconfig-unione"},
	},
}
