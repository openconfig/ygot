/*
Package ocstructs is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by codegen-tests
using the following YANG input files:
	- testdata/structs/openconfig-enumcamelcase.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// Foo represents the /openconfig-enumcamelcase/foo YANG schema element.
type Foo struct {
	Bar	E_OpenConfigCamelCase_OpenconfigEnumcamelcase_Bar	`path:"bar" module:"openconfig-enumcamelcase"`
	Baz	E_OpenConfigCamelCase_BAT	`path:"baz" module:"openconfig-enumcamelcase"`
}

// IsYANGGoStruct ensures that Foo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Foo) IsYANGGoStruct() {}

// E_OpenConfigCamelCase_BAT is a derived int64 type which is used to represent
// the enumerated node OpenConfigCamelCase_BAT. An additional value named
// OpenConfigCamelCase_BAT_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenConfigCamelCase_BAT int64

// IsYANGGoEnum ensures that OpenConfigCamelCase_BAT implements the yang.GoEnum
// interface. This ensures that OpenConfigCamelCase_BAT can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenConfigCamelCase_BAT) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenConfigCamelCase_BAT.
func (E_OpenConfigCamelCase_BAT) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenConfigCamelCase_BAT_UNSET corresponds to the value UNSET of OpenConfigCamelCase_BAT
	OpenConfigCamelCase_BAT_UNSET E_OpenConfigCamelCase_BAT = 0
	// OpenConfigCamelCase_BAT_BAT1 corresponds to the value BAT1 of OpenConfigCamelCase_BAT
	OpenConfigCamelCase_BAT_BAT1 E_OpenConfigCamelCase_BAT = 1
	// OpenConfigCamelCase_BAT_BAT2 corresponds to the value BAT2 of OpenConfigCamelCase_BAT
	OpenConfigCamelCase_BAT_BAT2 E_OpenConfigCamelCase_BAT = 2
)

// E_OpenConfigCamelCase_OpenconfigEnumcamelcase_Bar is a derived int64 type which is used to represent
// the enumerated node OpenConfigCamelCase_OpenconfigEnumcamelcase_Bar. An additional value named
// OpenConfigCamelCase_OpenconfigEnumcamelcase_Bar_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenConfigCamelCase_OpenconfigEnumcamelcase_Bar int64

// IsYANGGoEnum ensures that OpenConfigCamelCase_OpenconfigEnumcamelcase_Bar implements the yang.GoEnum
// interface. This ensures that OpenConfigCamelCase_OpenconfigEnumcamelcase_Bar can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenConfigCamelCase_OpenconfigEnumcamelcase_Bar) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenConfigCamelCase_OpenconfigEnumcamelcase_Bar.
func (E_OpenConfigCamelCase_OpenconfigEnumcamelcase_Bar) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenConfigCamelCase_OpenconfigEnumcamelcase_Bar_UNSET corresponds to the value UNSET of OpenConfigCamelCase_OpenconfigEnumcamelcase_Bar
	OpenConfigCamelCase_OpenconfigEnumcamelcase_Bar_UNSET E_OpenConfigCamelCase_OpenconfigEnumcamelcase_Bar = 0
	// OpenConfigCamelCase_OpenconfigEnumcamelcase_Bar_BAZ corresponds to the value BAZ of OpenConfigCamelCase_OpenconfigEnumcamelcase_Bar
	OpenConfigCamelCase_OpenconfigEnumcamelcase_Bar_BAZ E_OpenConfigCamelCase_OpenconfigEnumcamelcase_Bar = 1
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_OpenConfigCamelCase_BAT": {
		1: {Name: "BAT1", DefiningModule: "openconfig-enumcamelcase"},
		2: {Name: "BAT2", DefiningModule: "openconfig-enumcamelcase"},
	},
	"E_OpenConfigCamelCase_OpenconfigEnumcamelcase_Bar": {
		1: {Name: "BAZ"},
	},
}
