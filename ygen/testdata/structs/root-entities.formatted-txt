/*
Package ocstructs is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by testcase
using the following YANG input files:
	- testdata/structs/root-entities.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// Fakeroot represents the /fakeroot YANG schema element.
type Fakeroot struct {
	Entry	map[string]*RootEntities_Entry	`path:"entry" module:"root-entities"`
	Name	*string	`path:"name" module:"root-entities"`
}

// IsYANGGoStruct ensures that Fakeroot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Fakeroot) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// Fakeroot struct. The keys of the list are populated from the input
// arguments.
func (t *Fakeroot) NewEntry(Key string) (*RootEntities_Entry, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[string]*RootEntities_Entry)
	}

	key := Key

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &RootEntities_Entry{
		Key: &Key,
	}

	return t.Entry[key], nil
}

// RootEntities_Entry represents the /root-entities/entry YANG schema element.
type RootEntities_Entry struct {
	Key	*string	`path:"key" module:"root-entities"`
}

// IsYANGGoStruct ensures that RootEntities_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RootEntities_Entry) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the RootEntities_Entry struct, which is a YANG list entry.
func (t *RootEntities_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Key == nil {
		return nil, fmt.Errorf("nil value for key Key")
	}

	return map[string]interface{}{
		"key": *t.Key,
	}, nil
}
