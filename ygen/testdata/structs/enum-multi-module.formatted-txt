/*
Package ocstructs is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by codegen-tests
using the following YANG input files:
	- ../testdata/modules/enum-multi-module.yang
Imported modules were sourced from:
	- ../testdata/modules/modules
*/
package ocstructs

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// Parent represents the /enum-multi-module/parent YANG schema element.
type Parent struct {
	Child	*Parent_Child	`path:"child" module:"enum-multi-module"`
}

// IsYANGGoStruct ensures that Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Parent) IsYANGGoStruct() {}

// Parent_Child represents the /enum-multi-module/parent/child YANG schema element.
type Parent_Child struct {
	InlineMultiValue	Parent_Child_InlineMultiValue_Union	`path:"state/inline-multi-value" module:"enum-multi-module"`
	MultiValue	Parent_Child_MultiValue_Union	`path:"state/multi-value" module:"enum-multi-module"`
}

// IsYANGGoStruct ensures that Parent_Child implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Parent_Child) IsYANGGoStruct() {}

// Parent_Child_InlineMultiValue_Union is an interface that is implemented by valid types for the union
// for the leaf /enum-multi-module/parent/child/state/inline-multi-value within the YANG schema.
type Parent_Child_InlineMultiValue_Union interface {
	Is_Parent_Child_InlineMultiValue_Union()
}

// Parent_Child_InlineMultiValue_Union_E_Child_InlineMultiValue is used when /enum-multi-module/parent/child/state/inline-multi-value
// is to be set to a E_Child_InlineMultiValue value.
type Parent_Child_InlineMultiValue_Union_E_Child_InlineMultiValue struct {
	E_Child_InlineMultiValue	E_Child_InlineMultiValue
}

// Is_Parent_Child_InlineMultiValue_Union ensures that Parent_Child_InlineMultiValue_Union_E_Child_InlineMultiValue
// implements the Parent_Child_InlineMultiValue_Union interface.
func (*Parent_Child_InlineMultiValue_Union_E_Child_InlineMultiValue) Is_Parent_Child_InlineMultiValue_Union() {}

// Parent_Child_InlineMultiValue_Union_E_EnumTypes_Td_Enum is used when /enum-multi-module/parent/child/state/inline-multi-value
// is to be set to a E_EnumTypes_Td_Enum value.
type Parent_Child_InlineMultiValue_Union_E_EnumTypes_Td_Enum struct {
	E_EnumTypes_Td_Enum	E_EnumTypes_Td_Enum
}

// Is_Parent_Child_InlineMultiValue_Union ensures that Parent_Child_InlineMultiValue_Union_E_EnumTypes_Td_Enum
// implements the Parent_Child_InlineMultiValue_Union interface.
func (*Parent_Child_InlineMultiValue_Union_E_EnumTypes_Td_Enum) Is_Parent_Child_InlineMultiValue_Union() {}

// Parent_Child_InlineMultiValue_Union_Uint32 is used when /enum-multi-module/parent/child/state/inline-multi-value
// is to be set to a uint32 value.
type Parent_Child_InlineMultiValue_Union_Uint32 struct {
	Uint32	uint32
}

// Is_Parent_Child_InlineMultiValue_Union ensures that Parent_Child_InlineMultiValue_Union_Uint32
// implements the Parent_Child_InlineMultiValue_Union interface.
func (*Parent_Child_InlineMultiValue_Union_Uint32) Is_Parent_Child_InlineMultiValue_Union() {}

// To_Parent_Child_InlineMultiValue_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Parent_Child_InlineMultiValue_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Parent_Child) To_Parent_Child_InlineMultiValue_Union(i interface{}) (Parent_Child_InlineMultiValue_Union, error) {
	switch v := i.(type) {
	case E_Child_InlineMultiValue:
		return &Parent_Child_InlineMultiValue_Union_E_Child_InlineMultiValue{v}, nil
	case E_EnumTypes_Td_Enum:
		return &Parent_Child_InlineMultiValue_Union_E_EnumTypes_Td_Enum{v}, nil
	case uint32:
		return &Parent_Child_InlineMultiValue_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Parent_Child_InlineMultiValue_Union, unknown union type, got: %T, want any of [E_Child_InlineMultiValue, E_EnumTypes_Td_Enum, uint32]", i, i)
	}
}

// Parent_Child_MultiValue_Union is an interface that is implemented by valid types for the union
// for the leaf /enum-multi-module/parent/child/state/multi-value within the YANG schema.
type Parent_Child_MultiValue_Union interface {
	Is_Parent_Child_MultiValue_Union()
}

// Parent_Child_MultiValue_Union_E_EnumTypes_TdMulti_Enum is used when /enum-multi-module/parent/child/state/multi-value
// is to be set to a E_EnumTypes_TdMulti_Enum value.
type Parent_Child_MultiValue_Union_E_EnumTypes_TdMulti_Enum struct {
	E_EnumTypes_TdMulti_Enum	E_EnumTypes_TdMulti_Enum
}

// Is_Parent_Child_MultiValue_Union ensures that Parent_Child_MultiValue_Union_E_EnumTypes_TdMulti_Enum
// implements the Parent_Child_MultiValue_Union interface.
func (*Parent_Child_MultiValue_Union_E_EnumTypes_TdMulti_Enum) Is_Parent_Child_MultiValue_Union() {}

// Parent_Child_MultiValue_Union_E_EnumTypes_Td_Enum is used when /enum-multi-module/parent/child/state/multi-value
// is to be set to a E_EnumTypes_Td_Enum value.
type Parent_Child_MultiValue_Union_E_EnumTypes_Td_Enum struct {
	E_EnumTypes_Td_Enum	E_EnumTypes_Td_Enum
}

// Is_Parent_Child_MultiValue_Union ensures that Parent_Child_MultiValue_Union_E_EnumTypes_Td_Enum
// implements the Parent_Child_MultiValue_Union interface.
func (*Parent_Child_MultiValue_Union_E_EnumTypes_Td_Enum) Is_Parent_Child_MultiValue_Union() {}

// Parent_Child_MultiValue_Union_Uint32 is used when /enum-multi-module/parent/child/state/multi-value
// is to be set to a uint32 value.
type Parent_Child_MultiValue_Union_Uint32 struct {
	Uint32	uint32
}

// Is_Parent_Child_MultiValue_Union ensures that Parent_Child_MultiValue_Union_Uint32
// implements the Parent_Child_MultiValue_Union interface.
func (*Parent_Child_MultiValue_Union_Uint32) Is_Parent_Child_MultiValue_Union() {}

// To_Parent_Child_MultiValue_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Parent_Child_MultiValue_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Parent_Child) To_Parent_Child_MultiValue_Union(i interface{}) (Parent_Child_MultiValue_Union, error) {
	switch v := i.(type) {
	case E_EnumTypes_TdMulti_Enum:
		return &Parent_Child_MultiValue_Union_E_EnumTypes_TdMulti_Enum{v}, nil
	case E_EnumTypes_Td_Enum:
		return &Parent_Child_MultiValue_Union_E_EnumTypes_Td_Enum{v}, nil
	case uint32:
		return &Parent_Child_MultiValue_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Parent_Child_MultiValue_Union, unknown union type, got: %T, want any of [E_EnumTypes_TdMulti_Enum, E_EnumTypes_Td_Enum, uint32]", i, i)
	}
}

// E_Child_InlineMultiValue is a derived int64 type which is used to represent
// the enumerated node Child_InlineMultiValue. An additional value named
// Child_InlineMultiValue_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Child_InlineMultiValue int64

// IsYANGGoEnum ensures that Child_InlineMultiValue implements the yang.GoEnum
// interface. This ensures that Child_InlineMultiValue can be identified as a
// mapped type for a YANG enumeration.
func (E_Child_InlineMultiValue) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Child_InlineMultiValue.
func (E_Child_InlineMultiValue) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Child_InlineMultiValue.
func (e E_Child_InlineMultiValue) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Child_InlineMultiValue")
}

const (
	// Child_InlineMultiValue_UNSET corresponds to the value UNSET of Child_InlineMultiValue
	Child_InlineMultiValue_UNSET E_Child_InlineMultiValue = 0
	// Child_InlineMultiValue_ONE corresponds to the value ONE of Child_InlineMultiValue
	Child_InlineMultiValue_ONE E_Child_InlineMultiValue = 1
	// Child_InlineMultiValue_TWO corresponds to the value TWO of Child_InlineMultiValue
	Child_InlineMultiValue_TWO E_Child_InlineMultiValue = 2
	// Child_InlineMultiValue_THREE corresponds to the value THREE of Child_InlineMultiValue
	Child_InlineMultiValue_THREE E_Child_InlineMultiValue = 3
)

// E_EnumTypes_TdMulti_Enum is a derived int64 type which is used to represent
// the enumerated node EnumTypes_TdMulti_Enum. An additional value named
// EnumTypes_TdMulti_Enum_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_EnumTypes_TdMulti_Enum int64

// IsYANGGoEnum ensures that EnumTypes_TdMulti_Enum implements the yang.GoEnum
// interface. This ensures that EnumTypes_TdMulti_Enum can be identified as a
// mapped type for a YANG enumeration.
func (E_EnumTypes_TdMulti_Enum) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  EnumTypes_TdMulti_Enum.
func (E_EnumTypes_TdMulti_Enum) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_EnumTypes_TdMulti_Enum.
func (e E_EnumTypes_TdMulti_Enum) String() string {
	return ygot.EnumLogString(e, int64(e), "E_EnumTypes_TdMulti_Enum")
}

const (
	// EnumTypes_TdMulti_Enum_UNSET corresponds to the value UNSET of EnumTypes_TdMulti_Enum
	EnumTypes_TdMulti_Enum_UNSET E_EnumTypes_TdMulti_Enum = 0
	// EnumTypes_TdMulti_Enum_ONE corresponds to the value ONE of EnumTypes_TdMulti_Enum
	EnumTypes_TdMulti_Enum_ONE E_EnumTypes_TdMulti_Enum = 1
	// EnumTypes_TdMulti_Enum_TWO corresponds to the value TWO of EnumTypes_TdMulti_Enum
	EnumTypes_TdMulti_Enum_TWO E_EnumTypes_TdMulti_Enum = 2
	// EnumTypes_TdMulti_Enum_THREE corresponds to the value THREE of EnumTypes_TdMulti_Enum
	EnumTypes_TdMulti_Enum_THREE E_EnumTypes_TdMulti_Enum = 3
)

// E_EnumTypes_Td_Enum is a derived int64 type which is used to represent
// the enumerated node EnumTypes_Td_Enum. An additional value named
// EnumTypes_Td_Enum_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_EnumTypes_Td_Enum int64

// IsYANGGoEnum ensures that EnumTypes_Td_Enum implements the yang.GoEnum
// interface. This ensures that EnumTypes_Td_Enum can be identified as a
// mapped type for a YANG enumeration.
func (E_EnumTypes_Td_Enum) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  EnumTypes_Td_Enum.
func (E_EnumTypes_Td_Enum) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_EnumTypes_Td_Enum.
func (e E_EnumTypes_Td_Enum) String() string {
	return ygot.EnumLogString(e, int64(e), "E_EnumTypes_Td_Enum")
}

const (
	// EnumTypes_Td_Enum_UNSET corresponds to the value UNSET of EnumTypes_Td_Enum
	EnumTypes_Td_Enum_UNSET E_EnumTypes_Td_Enum = 0
	// EnumTypes_Td_Enum_A corresponds to the value A of EnumTypes_Td_Enum
	EnumTypes_Td_Enum_A E_EnumTypes_Td_Enum = 1
	// EnumTypes_Td_Enum_B corresponds to the value B of EnumTypes_Td_Enum
	EnumTypes_Td_Enum_B E_EnumTypes_Td_Enum = 2
	// EnumTypes_Td_Enum_C corresponds to the value C of EnumTypes_Td_Enum
	EnumTypes_Td_Enum_C E_EnumTypes_Td_Enum = 3
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_Child_InlineMultiValue": {
		1: {Name: "ONE"},
		2: {Name: "TWO"},
		3: {Name: "THREE"},
	},
	"E_EnumTypes_TdMulti_Enum": {
		1: {Name: "ONE"},
		2: {Name: "TWO"},
		3: {Name: "THREE"},
	},
	"E_EnumTypes_Td_Enum": {
		1: {Name: "A"},
		2: {Name: "B"},
		3: {Name: "C"},
	},
}
