/*
Package ocstructs is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by codegen-tests
using the following YANG input files:
	- ../testdata/modules/enum-list-uncompressed.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// Device represents the /device YANG schema element.
type Device struct {
	A	*EnumTestUncompressed_A	`path:"a" module:"enum-test-uncompressed"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// EnumTestUncompressed_A represents the /enum-test-uncompressed/a YANG schema element.
type EnumTestUncompressed_A struct {
	B	map[EnumTestUncompressed_A_B_State_C_Union]*EnumTestUncompressed_A_B	`path:"b" module:"enum-test-uncompressed"`
}

// IsYANGGoStruct ensures that EnumTestUncompressed_A implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*EnumTestUncompressed_A) IsYANGGoStruct() {}

// NewB creates a new entry in the B list of the
// EnumTestUncompressed_A struct. The keys of the list are populated from the input
// arguments.
func (t *EnumTestUncompressed_A) NewB(C EnumTestUncompressed_A_B_State_C_Union) (*EnumTestUncompressed_A_B, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.B == nil {
		t.B = make(map[EnumTestUncompressed_A_B_State_C_Union]*EnumTestUncompressed_A_B)
	}

	key := C

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.B[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list B", key)
	}

	t.B[key] = &EnumTestUncompressed_A_B{
		C: C,
	}

	return t.B[key], nil
}

// EnumTestUncompressed_A_B represents the /enum-test-uncompressed/a/b YANG schema element.
type EnumTestUncompressed_A_B struct {
	C	EnumTestUncompressed_A_B_State_C_Union	`path:"c" module:"enum-test-uncompressed"`
	State	*EnumTestUncompressed_A_B_State	`path:"state" module:"enum-test-uncompressed"`
}

// IsYANGGoStruct ensures that EnumTestUncompressed_A_B implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*EnumTestUncompressed_A_B) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the EnumTestUncompressed_A_B struct, which is a YANG list entry.
func (t *EnumTestUncompressed_A_B) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"c": t.C,
	}, nil
}

// EnumTestUncompressed_A_B_State_C_Union is an interface that is implemented by valid types for the union
// for the leaf /enum-test-uncompressed/a/b/c within the YANG schema.
type EnumTestUncompressed_A_B_State_C_Union interface {
	Is_EnumTestUncompressed_A_B_State_C_Union()
}

// EnumTestUncompressed_A_B_State_C_Union_E_EnumTestUncompressed_A_B_State_C is used when /enum-test-uncompressed/a/b/c
// is to be set to a E_EnumTestUncompressed_A_B_State_C value.
type EnumTestUncompressed_A_B_State_C_Union_E_EnumTestUncompressed_A_B_State_C struct {
	E_EnumTestUncompressed_A_B_State_C	E_EnumTestUncompressed_A_B_State_C
}

// Is_EnumTestUncompressed_A_B_State_C_Union ensures that EnumTestUncompressed_A_B_State_C_Union_E_EnumTestUncompressed_A_B_State_C
// implements the EnumTestUncompressed_A_B_State_C_Union interface.
func (*EnumTestUncompressed_A_B_State_C_Union_E_EnumTestUncompressed_A_B_State_C) Is_EnumTestUncompressed_A_B_State_C_Union() {}

// EnumTestUncompressed_A_B_State_C_Union_Uint8 is used when /enum-test-uncompressed/a/b/c
// is to be set to a uint8 value.
type EnumTestUncompressed_A_B_State_C_Union_Uint8 struct {
	Uint8	uint8
}

// Is_EnumTestUncompressed_A_B_State_C_Union ensures that EnumTestUncompressed_A_B_State_C_Union_Uint8
// implements the EnumTestUncompressed_A_B_State_C_Union interface.
func (*EnumTestUncompressed_A_B_State_C_Union_Uint8) Is_EnumTestUncompressed_A_B_State_C_Union() {}

// To_EnumTestUncompressed_A_B_State_C_Union takes an input interface{} and attempts to convert it to a struct
// which implements the EnumTestUncompressed_A_B_State_C_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *EnumTestUncompressed_A_B) To_EnumTestUncompressed_A_B_State_C_Union(i interface{}) (EnumTestUncompressed_A_B_State_C_Union, error) {
	switch v := i.(type) {
	case E_EnumTestUncompressed_A_B_State_C:
		return &EnumTestUncompressed_A_B_State_C_Union_E_EnumTestUncompressed_A_B_State_C{v}, nil
	case uint8:
		return &EnumTestUncompressed_A_B_State_C_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to EnumTestUncompressed_A_B_State_C_Union, unknown union type, got: %T, want any of [E_EnumTestUncompressed_A_B_State_C, uint8]", i, i)
	}
}

// EnumTestUncompressed_A_B_State represents the /enum-test-uncompressed/a/b/state YANG schema element.
type EnumTestUncompressed_A_B_State struct {
	C	EnumTestUncompressed_A_B_State_C_Union	`path:"c" module:"enum-test-uncompressed"`
}

// IsYANGGoStruct ensures that EnumTestUncompressed_A_B_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*EnumTestUncompressed_A_B_State) IsYANGGoStruct() {}
// To_EnumTestUncompressed_A_B_State_C_Union takes an input interface{} and attempts to convert it to a struct
// which implements the EnumTestUncompressed_A_B_State_C_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *EnumTestUncompressed_A_B_State) To_EnumTestUncompressed_A_B_State_C_Union(i interface{}) (EnumTestUncompressed_A_B_State_C_Union, error) {
	switch v := i.(type) {
	case E_EnumTestUncompressed_A_B_State_C:
		return &EnumTestUncompressed_A_B_State_C_Union_E_EnumTestUncompressed_A_B_State_C{v}, nil
	case uint8:
		return &EnumTestUncompressed_A_B_State_C_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to EnumTestUncompressed_A_B_State_C_Union, unknown union type, got: %T, want any of [E_EnumTestUncompressed_A_B_State_C, uint8]", i, i)
	}
}

// E_EnumTestUncompressed_A_B_State_C is a derived int64 type which is used to represent
// the enumerated node EnumTestUncompressed_A_B_State_C. An additional value named
// EnumTestUncompressed_A_B_State_C_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_EnumTestUncompressed_A_B_State_C int64

// IsYANGGoEnum ensures that EnumTestUncompressed_A_B_State_C implements the yang.GoEnum
// interface. This ensures that EnumTestUncompressed_A_B_State_C can be identified as a
// mapped type for a YANG enumeration.
func (E_EnumTestUncompressed_A_B_State_C) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  EnumTestUncompressed_A_B_State_C.
func (E_EnumTestUncompressed_A_B_State_C) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_EnumTestUncompressed_A_B_State_C.
func (e E_EnumTestUncompressed_A_B_State_C) String() string {
	return ygot.EnumLogString(e, int64(e), "E_EnumTestUncompressed_A_B_State_C")
}

const (
	// EnumTestUncompressed_A_B_State_C_UNSET corresponds to the value UNSET of EnumTestUncompressed_A_B_State_C
	EnumTestUncompressed_A_B_State_C_UNSET E_EnumTestUncompressed_A_B_State_C = 0
	// EnumTestUncompressed_A_B_State_C_ONE corresponds to the value ONE of EnumTestUncompressed_A_B_State_C
	EnumTestUncompressed_A_B_State_C_ONE E_EnumTestUncompressed_A_B_State_C = 1
	// EnumTestUncompressed_A_B_State_C_TWO corresponds to the value TWO of EnumTestUncompressed_A_B_State_C
	EnumTestUncompressed_A_B_State_C_TWO E_EnumTestUncompressed_A_B_State_C = 2
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_EnumTestUncompressed_A_B_State_C": {
		1: {Name: "ONE"},
		2: {Name: "TWO"},
	},
}
