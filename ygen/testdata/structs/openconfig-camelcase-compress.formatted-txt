/*
Package ocstructs is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by codegen-tests
using the following YANG input files:
	- testdata/structs/openconfig-camelcase.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// BGP represents the /openconfig-camelcase/bgp YANG schema element.
type BGP struct {
	Neighbor	map[string]*BGP_Neighbor	`path:"neighbors/neighbor" module:"openconfig-camelcase"`
}

// IsYANGGoStruct ensures that BGP implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BGP) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// BGP struct. The keys of the list are populated from the input
// arguments.
func (t *BGP) NewNeighbor(PeerIP string) (*BGP_Neighbor, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*BGP_Neighbor)
	}

	key := PeerIP

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &BGP_Neighbor{
		PeerIP: &PeerIP,
	}

	return t.Neighbor[key], nil
}

// BGP_Neighbor represents the /openconfig-camelcase/bgp/neighbors/neighbor YANG schema element.
type BGP_Neighbor struct {
	PeerIP	*string	`path:"config/peer-ip|peer-ip" module:"openconfig-camelcase"`
}

// IsYANGGoStruct ensures that BGP_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*BGP_Neighbor) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the BGP_Neighbor struct, which is a YANG list entry.
func (t *BGP_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PeerIP == nil {
		return nil, fmt.Errorf("nil value for key PeerIP")
	}

	return map[string]interface{}{
		"peer-ip": *t.PeerIP,
	}, nil
}

// Device represents the /device YANG schema element.
type Device struct {
	BGP	*BGP	`path:"bgp" module:"openconfig-camelcase"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}
