/*
Package ocstructs is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by codegen-tests
using the following YANG input files:
	- testdata/structs/openconfig-list-enum-key.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// Top represents the /openconfig-list-enum-key/top YANG schema element.
type Top struct {
	Ekm	map[Top_Ekm_Key]*Top_Ekm	`path:"multi-key/ekm" module:"openconfig-list-enum-key"`
	Eks	map[E_OpenconfigListEnumKey_Eks_K]*Top_Eks	`path:"single-key/eks" module:"openconfig-list-enum-key"`
}

// IsYANGGoStruct ensures that Top implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Top) IsYANGGoStruct() {}

// Top_Ekm_Key represents the key for list Ekm of element /openconfig-list-enum-key/top.
type Top_Ekm_Key struct {
	K1	E_OpenconfigListEnumKey_Ekm_K1	`path:"k1"`
	K2	E_OpenconfigListEnumKey_FooIdentity	`path:"k2"`
}

// NewEkm creates a new entry in the Ekm list of the
// Top struct. The keys of the list are populated from the input
// arguments.
func (t *Top) NewEkm(K1 E_OpenconfigListEnumKey_Ekm_K1, K2 E_OpenconfigListEnumKey_FooIdentity) (*Top_Ekm, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ekm == nil {
		t.Ekm = make(map[Top_Ekm_Key]*Top_Ekm)
	}

	key := Top_Ekm_Key{
		K1: K1,
		K2: K2,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ekm[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ekm", key)
	}

	t.Ekm[key] = &Top_Ekm{
		K1: K1,
		K2: K2,
	}

	return t.Ekm[key], nil
}

// NewEks creates a new entry in the Eks list of the
// Top struct. The keys of the list are populated from the input
// arguments.
func (t *Top) NewEks(K E_OpenconfigListEnumKey_Eks_K) (*Top_Eks, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Eks == nil {
		t.Eks = make(map[E_OpenconfigListEnumKey_Eks_K]*Top_Eks)
	}

	key := K

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Eks[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Eks", key)
	}

	t.Eks[key] = &Top_Eks{
		K: K,
	}

	return t.Eks[key], nil
}

// Top_Ekm represents the /openconfig-list-enum-key/top/multi-key/ekm YANG schema element.
type Top_Ekm struct {
	K1	E_OpenconfigListEnumKey_Ekm_K1	`path:"config/k1|k1" module:"openconfig-list-enum-key"`
	K2	E_OpenconfigListEnumKey_FooIdentity	`path:"config/k2|k2" module:"openconfig-list-enum-key"`
}

// IsYANGGoStruct ensures that Top_Ekm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Top_Ekm) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Top_Ekm struct, which is a YANG list entry.
func (t *Top_Ekm) ΛListKeyMap() (map[string]interface{}, error) {


	return map[string]interface{}{
		"k1": t.K1,
		"k2": t.K2,
	}, nil
}

// Top_Eks represents the /openconfig-list-enum-key/top/single-key/eks YANG schema element.
type Top_Eks struct {
	K	E_OpenconfigListEnumKey_Eks_K	`path:"config/k|k" module:"openconfig-list-enum-key"`
}

// IsYANGGoStruct ensures that Top_Eks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Top_Eks) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the Top_Eks struct, which is a YANG list entry.
func (t *Top_Eks) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"k": t.K,
	}, nil
}

// E_OpenconfigListEnumKey_Ekm_K1 is a derived int64 type which is used to represent
// the enumerated node OpenconfigListEnumKey_Ekm_K1. An additional value named
// OpenconfigListEnumKey_Ekm_K1_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigListEnumKey_Ekm_K1 int64

// IsYANGGoEnum ensures that OpenconfigListEnumKey_Ekm_K1 implements the yang.GoEnum
// interface. This ensures that OpenconfigListEnumKey_Ekm_K1 can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigListEnumKey_Ekm_K1) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigListEnumKey_Ekm_K1.
func (E_OpenconfigListEnumKey_Ekm_K1) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigListEnumKey_Ekm_K1_UNSET corresponds to the value UNSET of OpenconfigListEnumKey_Ekm_K1
	OpenconfigListEnumKey_Ekm_K1_UNSET E_OpenconfigListEnumKey_Ekm_K1 = 0
	// OpenconfigListEnumKey_Ekm_K1_A corresponds to the value A of OpenconfigListEnumKey_Ekm_K1
	OpenconfigListEnumKey_Ekm_K1_A E_OpenconfigListEnumKey_Ekm_K1 = 1
	// OpenconfigListEnumKey_Ekm_K1_B corresponds to the value B of OpenconfigListEnumKey_Ekm_K1
	OpenconfigListEnumKey_Ekm_K1_B E_OpenconfigListEnumKey_Ekm_K1 = 2
)

// E_OpenconfigListEnumKey_Eks_K is a derived int64 type which is used to represent
// the enumerated node OpenconfigListEnumKey_Eks_K. An additional value named
// OpenconfigListEnumKey_Eks_K_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigListEnumKey_Eks_K int64

// IsYANGGoEnum ensures that OpenconfigListEnumKey_Eks_K implements the yang.GoEnum
// interface. This ensures that OpenconfigListEnumKey_Eks_K can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigListEnumKey_Eks_K) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigListEnumKey_Eks_K.
func (E_OpenconfigListEnumKey_Eks_K) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigListEnumKey_Eks_K_UNSET corresponds to the value UNSET of OpenconfigListEnumKey_Eks_K
	OpenconfigListEnumKey_Eks_K_UNSET E_OpenconfigListEnumKey_Eks_K = 0
	// OpenconfigListEnumKey_Eks_K_A corresponds to the value A of OpenconfigListEnumKey_Eks_K
	OpenconfigListEnumKey_Eks_K_A E_OpenconfigListEnumKey_Eks_K = 1
	// OpenconfigListEnumKey_Eks_K_B corresponds to the value B of OpenconfigListEnumKey_Eks_K
	OpenconfigListEnumKey_Eks_K_B E_OpenconfigListEnumKey_Eks_K = 2
)

// E_OpenconfigListEnumKey_FooIdentity is a derived int64 type which is used to represent
// the enumerated node OpenconfigListEnumKey_FooIdentity. An additional value named
// OpenconfigListEnumKey_FooIdentity_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_OpenconfigListEnumKey_FooIdentity int64

// IsYANGGoEnum ensures that OpenconfigListEnumKey_FooIdentity implements the yang.GoEnum
// interface. This ensures that OpenconfigListEnumKey_FooIdentity can be identified as a
// mapped type for a YANG enumeration.
func (E_OpenconfigListEnumKey_FooIdentity) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  OpenconfigListEnumKey_FooIdentity.
func (E_OpenconfigListEnumKey_FooIdentity) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// OpenconfigListEnumKey_FooIdentity_UNSET corresponds to the value UNSET of OpenconfigListEnumKey_FooIdentity
	OpenconfigListEnumKey_FooIdentity_UNSET E_OpenconfigListEnumKey_FooIdentity = 0
	// OpenconfigListEnumKey_FooIdentity_BAR corresponds to the value BAR of OpenconfigListEnumKey_FooIdentity
	OpenconfigListEnumKey_FooIdentity_BAR E_OpenconfigListEnumKey_FooIdentity = 1
	// OpenconfigListEnumKey_FooIdentity_BAZ corresponds to the value BAZ of OpenconfigListEnumKey_FooIdentity
	OpenconfigListEnumKey_FooIdentity_BAZ E_OpenconfigListEnumKey_FooIdentity = 2
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_OpenconfigListEnumKey_Ekm_K1": {
		1: {Name: "A"},
		2: {Name: "B"},
	},
	"E_OpenconfigListEnumKey_Eks_K": {
		1: {Name: "A"},
		2: {Name: "B"},
	},
	"E_OpenconfigListEnumKey_FooIdentity": {
		1: {Name: "BAR", DefiningModule: "openconfig-list-enum-key"},
		2: {Name: "BAZ", DefiningModule: "openconfig-list-enum-key"},
	},
}
