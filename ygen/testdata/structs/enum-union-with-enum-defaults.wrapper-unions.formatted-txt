/*
Package ocstructs is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by codegen-tests
using the following YANG input files:
	- ../testdata/modules/enum-union-with-enum-defaults.yang
Imported modules were sourced from:
	- ../testdata/modules/modules
*/
package ocstructs

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// Outer represents the /enum-union/outer YANG schema element.
type Outer struct {
	Inner	*Outer_Inner	`path:"inner" module:"enum-union"`
}

// IsYANGGoStruct ensures that Outer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Outer) IsYANGGoStruct() {}

// Outer_Inner represents the /enum-union/outer/inner YANG schema element.
type Outer_Inner struct {
	Leaf1	Outer_Inner_Leaf1_Union	`path:"config/leaf1" module:"enum-union"`
	Leaf2	Outer_Inner_Leaf2_Union	`path:"config/leaf2" module:"enum-union"`
	Leaf3	Outer_Inner_Leaf3_Union	`path:"config/leaf3" module:"enum-union"`
	Leaf4	Outer_Inner_Leaf4_Union	`path:"config/leaf4" module:"enum-union"`
	Leaf5	E_Inner_Leaf5_Enum	`path:"config/leaf5" module:"enum-union"`
}

// IsYANGGoStruct ensures that Outer_Inner implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Outer_Inner) IsYANGGoStruct() {}

// GetLeaf1 retrieves the value of the leaf Leaf1 from the Outer_Inner
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Leaf1 is set, it can safely use t.GetLeaf1()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Leaf1 == nil'
// before retrieving the leaf's value.
func (t *Outer_Inner) GetLeaf1() Outer_Inner_Leaf1_Union {
	if t == nil || t.Leaf1 ==  nil {
		return TWO
	}
	return t.Leaf1
}

// GetLeaf2 retrieves the value of the leaf Leaf2 from the Outer_Inner
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Leaf2 is set, it can safely use t.GetLeaf2()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Leaf2 == nil'
// before retrieving the leaf's value.
func (t *Outer_Inner) GetLeaf2() Outer_Inner_Leaf2_Union {
	if t == nil || t.Leaf2 ==  nil {
		return SUNDAY
	}
	return t.Leaf2
}

// GetLeaf3 retrieves the value of the leaf Leaf3 from the Outer_Inner
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Leaf3 is set, it can safely use t.GetLeaf3()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Leaf3 == nil'
// before retrieving the leaf's value.
func (t *Outer_Inner) GetLeaf3() Outer_Inner_Leaf3_Union {
	if t == nil || t.Leaf3 ==  nil {
		return nil
	}
	return t.Leaf3
}

// GetLeaf4 retrieves the value of the leaf Leaf4 from the Outer_Inner
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Leaf4 is set, it can safely use t.GetLeaf4()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Leaf4 == nil'
// before retrieving the leaf's value.
func (t *Outer_Inner) GetLeaf4() Outer_Inner_Leaf4_Union {
	if t == nil || t.Leaf4 ==  nil {
		return 3
	}
	return t.Leaf4
}

// GetLeaf5 retrieves the value of the leaf Leaf5 from the Outer_Inner
// struct. Caution should be exercised whilst using this method since it will return
// the Go zero value if the field is explicitly unset. If the caller explicitly does
// not care if Leaf5 is set, it can safely use t.GetLeaf5()
// to retrieve the value. In the case that the caller has different actions based on
// whether the leaf is set or unset, it should use 'if t.Leaf5 == nil'
// before retrieving the leaf's value.
func (t *Outer_Inner) GetLeaf5() E_Inner_Leaf5_Enum {
	if t == nil || t.Leaf5 ==  0 {
		return Inner_Leaf5_Enum_DEUX
	}
	return t.Leaf5
}

// Outer_Inner_Leaf1_Union is an interface that is implemented by valid types for the union
// for the leaf /enum-union/outer/inner/config/leaf1 within the YANG schema.
type Outer_Inner_Leaf1_Union interface {
	Is_Outer_Inner_Leaf1_Union()
}

// Outer_Inner_Leaf1_Union_E_Inner_Leaf1_Enum is used when /enum-union/outer/inner/config/leaf1
// is to be set to a E_Inner_Leaf1_Enum value.
type Outer_Inner_Leaf1_Union_E_Inner_Leaf1_Enum struct {
	E_Inner_Leaf1_Enum	E_Inner_Leaf1_Enum
}

// Is_Outer_Inner_Leaf1_Union ensures that Outer_Inner_Leaf1_Union_E_Inner_Leaf1_Enum
// implements the Outer_Inner_Leaf1_Union interface.
func (*Outer_Inner_Leaf1_Union_E_Inner_Leaf1_Enum) Is_Outer_Inner_Leaf1_Union() {}

// Outer_Inner_Leaf1_Union_Uint64 is used when /enum-union/outer/inner/config/leaf1
// is to be set to a uint64 value.
type Outer_Inner_Leaf1_Union_Uint64 struct {
	Uint64	uint64
}

// Is_Outer_Inner_Leaf1_Union ensures that Outer_Inner_Leaf1_Union_Uint64
// implements the Outer_Inner_Leaf1_Union interface.
func (*Outer_Inner_Leaf1_Union_Uint64) Is_Outer_Inner_Leaf1_Union() {}

// To_Outer_Inner_Leaf1_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Outer_Inner_Leaf1_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Outer_Inner) To_Outer_Inner_Leaf1_Union(i interface{}) (Outer_Inner_Leaf1_Union, error) {
	switch v := i.(type) {
	case E_Inner_Leaf1_Enum:
		return &Outer_Inner_Leaf1_Union_E_Inner_Leaf1_Enum{v}, nil
	case uint64:
		return &Outer_Inner_Leaf1_Union_Uint64{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Outer_Inner_Leaf1_Union, unknown union type, got: %T, want any of [E_Inner_Leaf1_Enum, uint64]", i, i)
	}
}

// Outer_Inner_Leaf2_Union is an interface that is implemented by valid types for the union
// for the leaf /enum-union/outer/inner/config/leaf2 within the YANG schema.
type Outer_Inner_Leaf2_Union interface {
	Is_Outer_Inner_Leaf2_Union()
}

// Outer_Inner_Leaf2_Union_E_EnumUnion_WeekendDays is used when /enum-union/outer/inner/config/leaf2
// is to be set to a E_EnumUnion_WeekendDays value.
type Outer_Inner_Leaf2_Union_E_EnumUnion_WeekendDays struct {
	E_EnumUnion_WeekendDays	E_EnumUnion_WeekendDays
}

// Is_Outer_Inner_Leaf2_Union ensures that Outer_Inner_Leaf2_Union_E_EnumUnion_WeekendDays
// implements the Outer_Inner_Leaf2_Union interface.
func (*Outer_Inner_Leaf2_Union_E_EnumUnion_WeekendDays) Is_Outer_Inner_Leaf2_Union() {}

// Outer_Inner_Leaf2_Union_Uint64 is used when /enum-union/outer/inner/config/leaf2
// is to be set to a uint64 value.
type Outer_Inner_Leaf2_Union_Uint64 struct {
	Uint64	uint64
}

// Is_Outer_Inner_Leaf2_Union ensures that Outer_Inner_Leaf2_Union_Uint64
// implements the Outer_Inner_Leaf2_Union interface.
func (*Outer_Inner_Leaf2_Union_Uint64) Is_Outer_Inner_Leaf2_Union() {}

// To_Outer_Inner_Leaf2_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Outer_Inner_Leaf2_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Outer_Inner) To_Outer_Inner_Leaf2_Union(i interface{}) (Outer_Inner_Leaf2_Union, error) {
	switch v := i.(type) {
	case E_EnumUnion_WeekendDays:
		return &Outer_Inner_Leaf2_Union_E_EnumUnion_WeekendDays{v}, nil
	case uint64:
		return &Outer_Inner_Leaf2_Union_Uint64{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Outer_Inner_Leaf2_Union, unknown union type, got: %T, want any of [E_EnumUnion_WeekendDays, uint64]", i, i)
	}
}

// Outer_Inner_Leaf3_Union is an interface that is implemented by valid types for the union
// for the leaf /enum-union/outer/inner/config/leaf3 within the YANG schema.
type Outer_Inner_Leaf3_Union interface {
	Is_Outer_Inner_Leaf3_Union()
}

// Outer_Inner_Leaf3_Union_E_EnumUnion_CycloneScales_Enum is used when /enum-union/outer/inner/config/leaf3
// is to be set to a E_EnumUnion_CycloneScales_Enum value.
type Outer_Inner_Leaf3_Union_E_EnumUnion_CycloneScales_Enum struct {
	E_EnumUnion_CycloneScales_Enum	E_EnumUnion_CycloneScales_Enum
}

// Is_Outer_Inner_Leaf3_Union ensures that Outer_Inner_Leaf3_Union_E_EnumUnion_CycloneScales_Enum
// implements the Outer_Inner_Leaf3_Union interface.
func (*Outer_Inner_Leaf3_Union_E_EnumUnion_CycloneScales_Enum) Is_Outer_Inner_Leaf3_Union() {}

// Outer_Inner_Leaf3_Union_Uint8 is used when /enum-union/outer/inner/config/leaf3
// is to be set to a uint8 value.
type Outer_Inner_Leaf3_Union_Uint8 struct {
	Uint8	uint8
}

// Is_Outer_Inner_Leaf3_Union ensures that Outer_Inner_Leaf3_Union_Uint8
// implements the Outer_Inner_Leaf3_Union interface.
func (*Outer_Inner_Leaf3_Union_Uint8) Is_Outer_Inner_Leaf3_Union() {}

// To_Outer_Inner_Leaf3_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Outer_Inner_Leaf3_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Outer_Inner) To_Outer_Inner_Leaf3_Union(i interface{}) (Outer_Inner_Leaf3_Union, error) {
	switch v := i.(type) {
	case E_EnumUnion_CycloneScales_Enum:
		return &Outer_Inner_Leaf3_Union_E_EnumUnion_CycloneScales_Enum{v}, nil
	case uint8:
		return &Outer_Inner_Leaf3_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Outer_Inner_Leaf3_Union, unknown union type, got: %T, want any of [E_EnumUnion_CycloneScales_Enum, uint8]", i, i)
	}
}

// Outer_Inner_Leaf4_Union is an interface that is implemented by valid types for the union
// for the leaf /enum-union/outer/inner/config/leaf4 within the YANG schema.
type Outer_Inner_Leaf4_Union interface {
	Is_Outer_Inner_Leaf4_Union()
}

// Outer_Inner_Leaf4_Union_E_EnumUnion_WeekendDays is used when /enum-union/outer/inner/config/leaf4
// is to be set to a E_EnumUnion_WeekendDays value.
type Outer_Inner_Leaf4_Union_E_EnumUnion_WeekendDays struct {
	E_EnumUnion_WeekendDays	E_EnumUnion_WeekendDays
}

// Is_Outer_Inner_Leaf4_Union ensures that Outer_Inner_Leaf4_Union_E_EnumUnion_WeekendDays
// implements the Outer_Inner_Leaf4_Union interface.
func (*Outer_Inner_Leaf4_Union_E_EnumUnion_WeekendDays) Is_Outer_Inner_Leaf4_Union() {}

// Outer_Inner_Leaf4_Union_Uint8 is used when /enum-union/outer/inner/config/leaf4
// is to be set to a uint8 value.
type Outer_Inner_Leaf4_Union_Uint8 struct {
	Uint8	uint8
}

// Is_Outer_Inner_Leaf4_Union ensures that Outer_Inner_Leaf4_Union_Uint8
// implements the Outer_Inner_Leaf4_Union interface.
func (*Outer_Inner_Leaf4_Union_Uint8) Is_Outer_Inner_Leaf4_Union() {}

// To_Outer_Inner_Leaf4_Union takes an input interface{} and attempts to convert it to a struct
// which implements the Outer_Inner_Leaf4_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *Outer_Inner) To_Outer_Inner_Leaf4_Union(i interface{}) (Outer_Inner_Leaf4_Union, error) {
	switch v := i.(type) {
	case E_EnumUnion_WeekendDays:
		return &Outer_Inner_Leaf4_Union_E_EnumUnion_WeekendDays{v}, nil
	case uint8:
		return &Outer_Inner_Leaf4_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to Outer_Inner_Leaf4_Union, unknown union type, got: %T, want any of [E_EnumUnion_WeekendDays, uint8]", i, i)
	}
}

// E_EnumUnion_CycloneScales_Enum is a derived int64 type which is used to represent
// the enumerated node EnumUnion_CycloneScales_Enum. An additional value named
// EnumUnion_CycloneScales_Enum_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_EnumUnion_CycloneScales_Enum int64

// IsYANGGoEnum ensures that EnumUnion_CycloneScales_Enum implements the yang.GoEnum
// interface. This ensures that EnumUnion_CycloneScales_Enum can be identified as a
// mapped type for a YANG enumeration.
func (E_EnumUnion_CycloneScales_Enum) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  EnumUnion_CycloneScales_Enum.
func (E_EnumUnion_CycloneScales_Enum) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_EnumUnion_CycloneScales_Enum.
func (e E_EnumUnion_CycloneScales_Enum) String() string {
	return ygot.EnumLogString(e, int64(e), "E_EnumUnion_CycloneScales_Enum")
}

const (
	// EnumUnion_CycloneScales_Enum_UNSET corresponds to the value UNSET of EnumUnion_CycloneScales_Enum
	EnumUnion_CycloneScales_Enum_UNSET E_EnumUnion_CycloneScales_Enum = 0
	// EnumUnion_CycloneScales_Enum_NORMAL corresponds to the value NORMAL of EnumUnion_CycloneScales_Enum
	EnumUnion_CycloneScales_Enum_NORMAL E_EnumUnion_CycloneScales_Enum = 1
	// EnumUnion_CycloneScales_Enum_SUPER corresponds to the value SUPER of EnumUnion_CycloneScales_Enum
	EnumUnion_CycloneScales_Enum_SUPER E_EnumUnion_CycloneScales_Enum = 2
)

// E_EnumUnion_WeekendDays is a derived int64 type which is used to represent
// the enumerated node EnumUnion_WeekendDays. An additional value named
// EnumUnion_WeekendDays_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_EnumUnion_WeekendDays int64

// IsYANGGoEnum ensures that EnumUnion_WeekendDays implements the yang.GoEnum
// interface. This ensures that EnumUnion_WeekendDays can be identified as a
// mapped type for a YANG enumeration.
func (E_EnumUnion_WeekendDays) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  EnumUnion_WeekendDays.
func (E_EnumUnion_WeekendDays) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_EnumUnion_WeekendDays.
func (e E_EnumUnion_WeekendDays) String() string {
	return ygot.EnumLogString(e, int64(e), "E_EnumUnion_WeekendDays")
}

const (
	// EnumUnion_WeekendDays_UNSET corresponds to the value UNSET of EnumUnion_WeekendDays
	EnumUnion_WeekendDays_UNSET E_EnumUnion_WeekendDays = 0
	// EnumUnion_WeekendDays_SATURDAY corresponds to the value SATURDAY of EnumUnion_WeekendDays
	EnumUnion_WeekendDays_SATURDAY E_EnumUnion_WeekendDays = 1
	// EnumUnion_WeekendDays_SUNDAY corresponds to the value SUNDAY of EnumUnion_WeekendDays
	EnumUnion_WeekendDays_SUNDAY E_EnumUnion_WeekendDays = 2
)

// E_Inner_Leaf1_Enum is a derived int64 type which is used to represent
// the enumerated node Inner_Leaf1_Enum. An additional value named
// Inner_Leaf1_Enum_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Inner_Leaf1_Enum int64

// IsYANGGoEnum ensures that Inner_Leaf1_Enum implements the yang.GoEnum
// interface. This ensures that Inner_Leaf1_Enum can be identified as a
// mapped type for a YANG enumeration.
func (E_Inner_Leaf1_Enum) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Inner_Leaf1_Enum.
func (E_Inner_Leaf1_Enum) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Inner_Leaf1_Enum.
func (e E_Inner_Leaf1_Enum) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Inner_Leaf1_Enum")
}

const (
	// Inner_Leaf1_Enum_UNSET corresponds to the value UNSET of Inner_Leaf1_Enum
	Inner_Leaf1_Enum_UNSET E_Inner_Leaf1_Enum = 0
	// Inner_Leaf1_Enum_ONE corresponds to the value ONE of Inner_Leaf1_Enum
	Inner_Leaf1_Enum_ONE E_Inner_Leaf1_Enum = 1
	// Inner_Leaf1_Enum_TWO corresponds to the value TWO of Inner_Leaf1_Enum
	Inner_Leaf1_Enum_TWO E_Inner_Leaf1_Enum = 2
	// Inner_Leaf1_Enum_THREE corresponds to the value THREE of Inner_Leaf1_Enum
	Inner_Leaf1_Enum_THREE E_Inner_Leaf1_Enum = 3
)

// E_Inner_Leaf5_Enum is a derived int64 type which is used to represent
// the enumerated node Inner_Leaf5_Enum. An additional value named
// Inner_Leaf5_Enum_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_Inner_Leaf5_Enum int64

// IsYANGGoEnum ensures that Inner_Leaf5_Enum implements the yang.GoEnum
// interface. This ensures that Inner_Leaf5_Enum can be identified as a
// mapped type for a YANG enumeration.
func (E_Inner_Leaf5_Enum) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  Inner_Leaf5_Enum.
func (E_Inner_Leaf5_Enum) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

// String returns a logging-friendly string for E_Inner_Leaf5_Enum.
func (e E_Inner_Leaf5_Enum) String() string {
	return ygot.EnumLogString(e, int64(e), "E_Inner_Leaf5_Enum")
}

const (
	// Inner_Leaf5_Enum_UNSET corresponds to the value UNSET of Inner_Leaf5_Enum
	Inner_Leaf5_Enum_UNSET E_Inner_Leaf5_Enum = 0
	// Inner_Leaf5_Enum_UN corresponds to the value UN of Inner_Leaf5_Enum
	Inner_Leaf5_Enum_UN E_Inner_Leaf5_Enum = 1
	// Inner_Leaf5_Enum_DEUX corresponds to the value DEUX of Inner_Leaf5_Enum
	Inner_Leaf5_Enum_DEUX E_Inner_Leaf5_Enum = 2
	// Inner_Leaf5_Enum_TROIS corresponds to the value TROIS of Inner_Leaf5_Enum
	Inner_Leaf5_Enum_TROIS E_Inner_Leaf5_Enum = 3
)

// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_EnumUnion_CycloneScales_Enum": {
		1: {Name: "NORMAL"},
		2: {Name: "SUPER"},
	},
	"E_EnumUnion_WeekendDays": {
		1: {Name: "SATURDAY"},
		2: {Name: "SUNDAY"},
	},
	"E_Inner_Leaf1_Enum": {
		1: {Name: "ONE"},
		2: {Name: "TWO"},
		3: {Name: "THREE"},
	},
	"E_Inner_Leaf5_Enum": {
		1: {Name: "UN"},
		2: {Name: "DEUX"},
		3: {Name: "TROIS"},
	},
}
