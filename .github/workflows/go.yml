name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: ['1.12', '1.13', '1.14']

    steps:
      - name: Install protobuf
        uses: arduino/setup-protoc@v1.1.0
        with:
          version: '3.x'

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}
        id: go

      - name: Install protoc-gen-go
        run: |
          go get -u google.golang.org/protobuf/cmd/protoc-gen-go
        env:
          GOPATH: /home/runner/work/ygot/ygot/go

      - name: Install goimports
        run: |
          go get -u golang.org/x/tools/cmd/goimports
        env:
          GOPATH: /home/runner/work/ygot/ygot/go

      - name: Install overalls
        run: |
          go get -u github.com/go-playground/overalls
        env:
          GOPATH: /home/runner/work/ygot/ygot/go

      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: go/src/github.com/openconfig/ygot

      - name: Get dependencies
        run: |
          go get -v -t -d ./...
        env:
          GOPATH: /home/runner/work/ygot/ygot/go

      - name: Generate Go files
        run: |
          cd go/src/github.com/openconfig/ygot
          (cd demo/getting_started && go generate)
          (cd proto/ywrapper && go generate)
          (cd proto/yext && go generate)
          (cd demo/uncompressed && go generate)
          (cd demo/protobuf_getting_started && ./update.sh)
          (cd integration_tests/uncompressed && go generate)
        env:
          GOPATH: /home/runner/work/ygot/ygot/go

      - name: Build
        run: go build -v ./...
        env:
          GOPATH: /home/runner/work/ygot/ygot/go

      - name: Run Tests
        run: go test -v ./...
        env:
          GOPATH: /home/runner/work/ygot/ygot/go

      - name: Run race tests
        run: go test -race -v ./...
        env:
          GOPATH: /home/runner/work/ygot/ygot/go

      - name: Run overalls for coverage
        run: overalls -project=github.com/openconfig/ygot -covermode=count -ignore=".git,vendor,integration_tests,ygot/schema_tests,ygen/schema_tests,ypathgen/path_tests,demo,experimental/ygotutils,generator,ypathgen/generator,ytypes/schema_tests,ypathgen/generator"
        env:
          GOPATH: /home/runner/work/ygot/ygot/go

      - name: Send coverage
        uses: shogo82148/actions-goveralls@v1
        env:
          GOPATH: /home/runner/work/ygot/ygot/go
        with:
          path-to-profile: overalls.coverprofile 
          parallel: true

      - name: Go vet
        run: |
          for i in util ygot ygen ytypes ygot/pathtranslate testcmp testutil ypathgen:
            go vet ./$i
          for j in ygot:
            go vet -composites=false ./$j 
        env:
          GOPATH: /home/runner/work/ygot/ygot/go

      - name: Gofmt
        run: |
          for i in util ygot ygen ytypes ygot/pathtranslate testutil testcmp ypathgen:
            diff -u <$(echo -n) <(gofmt -d -s ./$i)
        env:
          GOPATH: /home/runner/work/ygot/ygot/go

  finish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: shogo82148/actions-goveralls@v1
        with:
          parallel-finished: true
